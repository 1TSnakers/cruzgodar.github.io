const glslFilenames=["equality","powers","trig","combinatorics","number-theory","gamma","hypergeometric","su3_character","lambert_w","hurwitz_zeta","zeta"],glslFiles={main:{dependencies:[],keywords:[]},constants:{dependencies:[],keywords:[]}};let doubleEmulationGlsl=null,doubleEncodingGlsl=null;function splitGlslFile(filename,text){text=text.replaceAll("\r","");let startSearchIndex=0;for(;;){var index=text.indexOf("#function",startSearchIndex);if(-1===index)break;var endIndex=text.indexOf("\n",index+10);if(-1===endIndex)return void console.error("[GLSL bundling] Invalid function name in file "+filename);let keywords=text.slice(index+10,endIndex).split(" ");keywords=keywords.map(keyword=>keyword.replaceAll(" ",""));for(let i=0;i<keywords.length;i++)""===keywords[i]&&(keywords.splice(i,1),i--);var endFunctionIndex=text.indexOf("#endfunction",endIndex+1);if(-1===endFunctionIndex)return void console.error("[GLSL bundling] Missing #endfunction in file "+filename);glslFiles[keywords[0]]={keywords:keywords};index=text.indexOf("#requires",index);if(-1!==index&&index<endFunctionIndex){var endDependenciesIndex=text.indexOf("\n",index+10);let dependencies=text.slice(index+10,endDependenciesIndex).split(" ");dependencies=dependencies.map(dependency=>dependency.replaceAll(" ",""));for(let i=0;i<dependencies.length;i++)""===dependencies[i]&&(dependencies.splice(i,1),i--);glslFiles[keywords[0]].dependencies=dependencies,glslFiles[keywords[0]].content=text.slice(endDependenciesIndex+1,endFunctionIndex)}else glslFiles[keywords[0]].dependencies=[],glslFiles[keywords[0]].content=text.slice(endIndex+1,endFunctionIndex);startSearchIndex=endFunctionIndex+13}}const glslFilesByDepth=[];let loadedGlsl=!1;async function loadGlsl(){if(!loadedGlsl){var text=await(await fetch("/scripts/glsl/constants")).text();glslFiles.constants.content=text;text=await(await fetch("/scripts/glsl/main")).text();glslFiles.main.content=text;text=await(await fetch("/scripts/glsl/double_emulation")).text();doubleEmulationGlsl=text;text=await(await fetch("/scripts/glsl/double_encoding")).text();doubleEncodingGlsl=text;const texts={};await Promise.all(glslFilenames.map(filename=>new Promise(resolve=>{fetch("/scripts/glsl/"+filename).then(response=>response.text()).then(text=>{texts[filename]=text,resolve()})}))),glslFilenames.forEach(filename=>splitGlslFile(filename,texts[filename]));text=Object.keys(glslFiles);text.forEach(filename=>glslFiles[filename].parents=[]),text.forEach(filename=>{var dependencies=glslFiles[filename].dependencies;dependencies.forEach(dependency=>glslFiles[dependency].parents.push(filename)),0===dependencies.length&&"main"!==filename&&glslFiles.main.parents.push(filename)});let activeNodes=["main"],depth=0;for(;0!==activeNodes.length;){const nextActiveNodes=[];glslFilesByDepth.push([]),activeNodes.forEach(filename=>{void 0===glslFiles[filename].depth?glslFiles[filename].depth=depth:glslFiles[filename].depth=Math.max(glslFiles[filename].depth,depth),glslFiles[filename].parents.forEach(parent=>{nextActiveNodes.includes(parent)||nextActiveNodes.push(parent)})}),depth++,activeNodes=nextActiveNodes}text.forEach(filename=>glslFilesByDepth[glslFiles[filename].depth].push(filename)),loadedGlsl=!0}}function getGlslBundle(codeString){const keywords=codeString.match(/[a-zA-Z_][a-zA-Z0-9_]*/g);let bundle="";codeString=Object.keys(glslFiles);const filesToInclude={};codeString.forEach(filename=>filesToInclude[filename]=!1),filesToInclude.main=!0;let debugMessage="";codeString.forEach(filename=>{filesToInclude[filename]||keywords.forEach(keyword=>{-1!==glslFiles[filename].keywords.indexOf(keyword)&&(debugMessage="[GLSL bundling] Adding "+filename,function addToBundle(filename,depth){filesToInclude[filename]||(filesToInclude[filename]=!0,0!==depth&&(debugMessage+="\n                     "+"   ".repeat(depth)+"â†³ "+filename),glslFiles[filename].dependencies.forEach(dependency=>addToBundle(dependency,depth+1)))}(filename,0),console.log(debugMessage))})}),bundle=glslFiles.constants.content+glslFiles.main.content;for(let i=1;i<glslFilesByDepth.length;i++)glslFilesByDepth[i].forEach(filename=>{filesToInclude[filename]&&(bundle+=glslFiles[filename].content)});return bundle}export{doubleEmulationGlsl,doubleEncodingGlsl,loadGlsl,getGlslBundle};
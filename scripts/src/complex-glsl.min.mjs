const glslFilenames=["equality","powers","trig","combinatorics","number-theory","gamma","hypergeometric","su3_character","lambert_w","hurwitz_zeta","zeta"],glslFiles={main:{dependencies:[],keywords:[]},constants:{dependencies:[],keywords:[]}};let doubleEmulationGlsl=null,doubleEncodingGlsl=null;function splitGlslFile(l,t){t=t.replaceAll("\r","");let e=0;for(;;){var i=t.indexOf("#function",e);if(-1===i)break;var n=t.indexOf("\n",i+10);if(-1===n)return void console.error(`[GLSL bundling] Invalid function name in file ${l}.frag`);let s=t.slice(i+10,n).split(" ");s=s.map(l=>l.replaceAll(" ",""));for(let l=0;l<s.length;l++)""===s[l]&&(s.splice(l,1),l--);var a=t.indexOf("#endfunction",n+1);if(-1===a)return void console.error(`[GLSL bundling] Missing #endfunction in file ${l}.frag`);glslFiles[s[0]]={keywords:s};i=t.indexOf("#requires",i);if(-1!==i&&i<a){var o=t.indexOf("\n",i+10);let e=t.slice(i+10,o).split(" ");e=e.map(l=>l.replaceAll(" ",""));for(let l=0;l<e.length;l++)""===e[l]&&(e.splice(l,1),l--);glslFiles[s[0]].dependencies=e,glslFiles[s[0]].content=t.slice(o+1,a)}else glslFiles[s[0]].dependencies=[],glslFiles[s[0]].content=t.slice(n+1,a);e=a+13}}const glslFilesByDepth=[];function loadGlsl(){return 0===Site.scriptsLoaded.glsl?(Site.scriptsLoaded.glsl=1,new Promise(async(l,e)=>{var s=await(await fetch("/scripts/glsl/constants.frag")).text();glslFiles.constants.content=s;s=await(await fetch("/scripts/glsl/main.frag")).text();glslFiles.main.content=s;s=await(await fetch("/scripts/glsl/double_emulation.frag")).text();doubleEmulationGlsl=s;s=await(await fetch("/scripts/glsl/double_encoding.frag")).text();doubleEncodingGlsl=s;const i={};await Promise.all(glslFilenames.map(t=>new Promise(async(l,e)=>{var s=await fetch(`/scripts/glsl/${t}.frag`);i[t]=await s.text(),l()}))),glslFilenames.forEach(l=>splitGlslFile(l,i[l]));s=Object.keys(glslFiles);s.forEach(l=>glslFiles[l].parents=[]),s.forEach(e=>{var l=glslFiles[e].dependencies;l.forEach(l=>glslFiles[l].parents.push(e)),0===l.length&&"main"!==e&&glslFiles.main.parents.push(e)});let t=["main"],n=0;for(;0!==t.length;){const a=[];glslFilesByDepth.push([]),t.forEach(l=>{void 0===glslFiles[l].depth?glslFiles[l].depth=n:glslFiles[l].depth=Math.max(glslFiles[l].depth,n),glslFiles[l].parents.forEach(l=>{a.includes(l)||a.push(l)})}),n++,t=a}s.forEach(l=>glslFilesByDepth[glslFiles[l].depth].push(l)),Site.scriptsLoaded.glsl=2,l()})):1===Site.scriptsLoaded.glsl?new Promise((l,e)=>{const s=setInterval(()=>{2===Site.scriptsLoaded.glsl&&(clearInterval(s),l())},100)}):new Promise((l,e)=>l())}function getGlslBundle(l){const s=l.match(/[a-zA-Z_][a-zA-Z0-9_]*/g);let e="";l=Object.keys(glslFiles);const t={};l.forEach(l=>t[l]=!1),t.main=!0;let i="";l.forEach(e=>{t[e]||s.forEach(l=>{-1!==glslFiles[e].keywords.indexOf(l)&&(i="[GLSL bundling] Adding "+e,function e(l,s){t[l]||(t[l]=!0,DEBUG&&0!==s&&(i+="\n                     "+"   ".repeat(s)+"â†³ "+l),glslFiles[l].dependencies.forEach(l=>e(l,s+1)))}(e,0),DEBUG)&&console.log(i)})}),e=glslFiles.constants.content+glslFiles.main.content;for(let l=1;l<glslFilesByDepth.length;l++)glslFilesByDepth[l].forEach(l=>{t[l]&&(e+=glslFiles[l].content)});return e}export{doubleEmulationGlsl,doubleEncodingGlsl,loadGlsl,getGlslBundle};
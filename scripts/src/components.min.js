"use strict";Page.Components={getImageLink:function(s){var n=(n=s[0].split(".")[0].split("/"))[n.length-1];if(2<=s.length&&"c"===s[1])return l=s.slice(2).join(" "),`
				<div class="image-link">
					<a onclick="Page.Cards.show('${n}')" tabindex="-1">
						<img class="check-webp" src="/graphics/general-icons/placeholder.png" data-image-id="${n}" data-src="${Page.parentFolder+`cards/${n}.`}" alt="${l}" tabindex="1"></img>
					</a>
					
					<p class="image-link-subtext">${l}</p>
				</div>
			`;{let e=!1,t=(2<=s.length&&"t"===s[1]&&(e=!0,s.splice(1,1)),s[0]),a=("/"!==t[0]&&(t=Page.parentFolder+s[0]),"");a=2<=s.length?s.slice(1).join(" "):Site.sitemap[t].title;var l=t.slice(0,t.lastIndexOf("/")+1)+"cover.";return`
				<div class="image-link">
					<a href="${t}" data-in-new-tab="${e?1:0}" tabindex="-1">
						<img class="check-webp" src="/graphics/general-icons/placeholder.png" data-image-id="${n}" data-src="${l}" alt="${a}" tabindex="1"></img>
					</a>
					
					<p class="image-link-subtext">${a}</p>
				</div>
			`}},getGalleryImage:function(e,t,...a){a.join(" ");return`
			<div class="gallery-image-${t}-${t}">
				<img class="check-webp" data-image-id="${e}" onclick="" src="/graphics/general-icons/placeholder.png" data-src="/gallery/thumbnails/${e}." alt="${a}"></img>
			</div>
		`},getBanner:function(){return`
			<div id="banner">
				<div id="banner-small"></div>
				<div id="banner-large"></div>
			</div>
			
			<div id="banner-gradient"></div>

			<div id="banner-cover"></div>

			<div id="content">
				<div id="scroll-to"></div>
				
				<div style="height: 5vh"></div>
		`},getTextBox:function(e){return`
			<div class="text-box-container">
				<input id="${e[0]}-input" class="text-box" type="text" value="${e[1]}" tabindex="1">
				<p class="body-text text-box-subtext">${e.slice(2).join(" ")}</p>
			</div>
		`},getTextButton:function(e){var t=e[0];let a=e.slice(1).join(" "),s="";return"l"===e[1]&&(s=" linked-text-button",a=e.slice(2).join(" ")),`
			<div class="focus-on-child" tabindex="1">
				<button class="text-button${s}" type="button" id="${t}-button" tabindex="-1">${a}</button>
			</div>
		`},getSlider:function(e){var t=e[0];return`
			<div class="slider-container">
				<input id="${t}-slider" type="range" min="0" max="10000" value="${e[1]}" tabindex="1">
				<label for="${t}-slider">
					<p class="body-text slider-subtext">${e.slice(2).join(" ")}: <span id="${t}-slider-value">0</span></p>
				</label>
			</div>
		`},Parse:{text:e=>{let t=e.replaceAll(/\\\$/g,"[DOLLARSIGN]").replaceAll(/\\`/g,"[BACKTICK]").replaceAll(/\\\*/g,"[ASTERISK]").replaceAll(/\\\"/g,"[DOUBLEQUOTE]").replaceAll(/\\\'/g,"[SINGLEQUOTE]").replaceAll(/\$\$(.*?)\$\$/g,(e,t)=>`$\\displaystyle ${t}$`).replaceAll(/\$(.*?)\$/g,(e,t)=>`$${Page.Components.Parse.latex(t)}[END$]`);for(;t.match(/\$([^\$]*?)\*([^\$]*?)\[END\$\]/);)t=t.replaceAll(/\$([^\$]*?)\*([^\$]*?)\[END\$\]/g,(e,t,a)=>`$${t}[ASTERISK]${a}[END$]`);for(;t.match(/\$([^\$]*?)`([^\$]*?)\[END\$\]/);)t=t.replaceAll(/\$([^\$]*?)`([^\$]*?)\[END\$\]/g,(e,t,a)=>`$${t}[BACKTICK]${a}[END$]`);for(;t.match(/\$([^\$]*?)\"([^\$]*?)\[END\$\]/);)t=t.replaceAll(/\$([^\$]*?)\"([^\$]*?)\[END\$\]/g,(e,t,a)=>`$${t}[DOUBLEQUOTE]${a}[END$]`);for(;t.match(/\$([^\$]*?)\'([^\$]*?)\[END\$\]/);)t=t.replaceAll(/\$([^\$]*?)\'([^\$]*?)\[END\$\]/g,(e,t,a)=>`$${t}[SINGLEQUOTE]${a}[END$]`);for(;t.match(/\$([^\$]*?)\[END\$\]([^<])/);)t=t.replaceAll(/\$([^\$]*?)\[END\$\]([^<])/g,(e,t,a)=>`<span class="tex-holder">$${t}[END$]</span>`+a);for(;t.match(/\$([^\$]*?)\[END\$\]$/);)t=t.replaceAll(/\$([^\$]*?)\[END\$\]$/g,(e,t)=>`<span class="tex-holder">$${t}[END$]</span>`);for(t=t.replaceAll(/\[END\$\]/g,"$").replaceAll(/`(.*?)`/g,(e,t)=>`\`${t}[END\`]`);t.match(/`([^`]*?)\*([^`]*?)\[END`\]/);)t=t.replaceAll(/`([^`]*?)\*([^`]*?)\[END`\]/g,(e,t,a)=>`\`${t}[ASTERISK]${a}[END\`]`);for(;t.match(/`([^`]*?)\"([^`]*?)\[END`\]/);)t=t.replaceAll(/`([^`]*?)\"([^`]*?)\[END`\]/g,(e,t,a)=>`\`${t}[DOUBLEQUOTE]${a}[END\`]`);for(;t.match(/`([^`]*?)\'([^`]*?)\[END`\]/);)t=t.replaceAll(/`([^`]*?)\'([^`]*?)\[END`\]/g,(e,t,a)=>`\`${t}[SINGLEQUOTE]${a}[END\`]`);for(;t.match(/<([^<>]*?)\"([^<>]*?)>/);)t=t.replaceAll(/<([^<>]*?)\"([^<>]*?)>/g,(e,t,a)=>`<${t}[DOUBLEQUOTE]${a}>`);for(;t.match(/<([^<>]*?)\'([^<>]*?)>/);)t=t.replaceAll(/<([^<>]*?)\'([^<>]*?)>/g,(e,t,a)=>`<${t}[SINGLEQUOTE]${a}>`);let a=0;for(;">"===t[a];)a++;if(0!==a){let e=a;for(;" "===t[e];)e++;"."===(t=t.slice(e))[0]&&" "===t[1]&&(t="<strong>&#8226;</strong> "+t.slice(2)),t=`<span style=[DOUBLEQUOTE]width: ${32*a}px[DOUBLEQUOTE]></span>`+t}return t.replaceAll(/`(.*?)\[END`\]/g,(e,t)=>`<code>${t}</code>`).replaceAll(/\*\*(.*?)\*\*/g,(e,t)=>`<strong>${t}</strong>`).replaceAll(/\*(.*?)\*/g,(e,t)=>`<em>${t}</em>`).replaceAll(/(\s)\"(\S)/g,(e,t,a)=>t+"&#x201C;"+a).replaceAll(/^\"(\S)/g,(e,t)=>"&#x201C;"+t).replaceAll(/\"/g,"&#x201D;").replaceAll(/(\s)\'(\S)/g,(e,t,a)=>t+"&#x2018;"+a).replaceAll(/^\'(\S)/g,(e,t)=>"&#x2018;"+t).replaceAll(/\'/g,"&#x2019;").replaceAll(/---/g,"&mdash;").replaceAll(/--/g,"&ndash;").replaceAll(/\[DOUBLEQUOTE\]/g,'"').replaceAll(/\[SINGLEQUOTE\]/g,"'").replaceAll(/\[ASTERISK\]/g,"*").replaceAll(/\[BACKTICK\]/g,"`").replaceAll(/\[DOLLARSIGN\]/g,"\\$").replaceAll(/<span class="tex-holder">\$(.*?)\$<\/span>/g,(e,t)=>`<span class="tex-holder inline-math" data-source-tex="${t.replaceAll(/\\displaystyle\s*/g,"")}">$${t}$</span>`)},latex:e=>e.replaceAll(/[^\\]\\te([^a-zA-Z])/g,(e,t)=>"\\ \\times\\!\\!="+t).replaceAll(/[^\\]\\pe([^a-zA-Z])/g,(e,t)=>"\\ +\\!\\!="+t),"image-links":e=>{let t=`<div class="image-links${1===e.length?" one-image-link":""}">`;return e.forEach(e=>{t=""+t+Page.Components.getImageLink(e.split(" "))}),t+="</div>"},buttons:e=>{let t='<div class="text-buttons">';return e.forEach(e=>{t=""+t+Page.Components.getTextButton(e.split(" "))}),t+="</div>"},"text-boxes":e=>{let t='<div class="text-boxes">';return e.forEach(e=>{t=""+t+Page.Components.getTextBox(e.split(" "))}),t+="</div>"},sliders:e=>{let t='<div class="sliders">';return e.forEach(e=>{t=""+t+Page.Components.getSlider(e.split(" "))}),t+="</div>"},dropdown:t=>{var a=t[0];let s=`
				<div class="text-buttons">
					<div class="dropdown-container focus-on-child" tabindex="1">
						<button class="text-button dropdown" type="button" id="${a}-dropdown-button" tabindex="-1">`;for(let e=1;e<t.length;e++){var n=t[e].split(" "),l=n[0],n=n.slice(1).join(" ");1===e&&(s+=n+`</button><select id="${a}-dropdown">`),s+=`<option value="${l}">${n}</option>`}return s+="</select></div></div>"},"gallery-block":e=>{let t='<div class="gallery-block">';return e.forEach(e=>{t=""+t+Page.Components.getGalleryImage(...e.split(" "))}),t+="</div>"},card:(e,...t)=>0!==t.length?`<div id="${e}-card" class="card"><h1 class="heading-text">${t=t.join(" ")}</h1>`:`<div id="${e}-card" class="card">`,"notes-environment":(e,...t)=>0!==t.length?"!"===(t=t.join(" "))[0]?`<div class="notes-${e} notes-environment"><p class="body-text"</p><span class="notes-${e}-title">${t.slice(1)}</span></p>`:t.toLowerCase().includes(Page.Components.notesEnvironments[e].toLowerCase())?`<div class="notes-${e} notes-environment"><p class="body-text"</p><span class="notes-${e}-title">${t}</span></p>`:`<div class="notes-${e} notes-environment"><p class="body-text"</p><span class="notes-${e}-title">${Page.Components.notesEnvironments[e]}: ${t}</span></p>`:`<div class="notes-${e} notes-environment"><p class="body-text"</p><span class="notes-${e}-title">${Page.Components.notesEnvironments[e]}</span></p>`,banner:()=>"",canvas:e=>e?`<div class="desmos-border"><canvas id="${e}-canvas" class="output-canvas"></canvas></div>`:'<canvas id="output-canvas" class="output-canvas"></canvas>',center:(...e)=>{e=e.join(" ");return`<p class="body-text center-if-needed"><span>${Page.Components.Parse.text(e)}</span></p>`},checkbox:(e,...t)=>{return`
				<div class="checkbox-row">
					<div class="checkbox-container click-on-child" tabindex="1">
						<input type="checkbox" id="${e}-checkbox">
						<div class="checkbox"></div>
					</div>
					
					<div style="margin-left: 10px">
						<p class="body-text checkbox-subtext">${t.join(" ")}</p>
					</div>
				</div>
			`},desmos:e=>`<div class="desmos-border"><div id="${e}" class="desmos-container"></div></div>`,"glsl-docs":()=>Page.Components.GLSLDocs,"nav-buttons":()=>`
				<div class="text-buttons nav-buttons">
					<div class="focus-on-child tabindex="1">
						<button class="text-button linked-text-button previous-nav-button" type="button" tabindex="-1">Previous</button>
					</div>
					
					<div class="focus-on-child" tabindex="1">
						<button class="text-button linked-text-button home-nav-button" type="button" tabindex="-1">Home</button>
					</div>
					
					<div class="focus-on-child" tabindex="1">
						<button class="text-button linked-text-button next-nav-button" type="button" tabindex="-1">Next</button>
					</div>
				</div>
			`,wilson:e=>"glsl"===e?`<p class="body-text">This applet was made with <a href="/projects/wilson/">Wilson</a>, a library I wrote to make high-performance, polished applets easier to create. Much of the code implementing complex functions was contributed by <a href="https://ahuchala.com">Andy Huchala.</a> (<a onclick="Page.Cards.show('glsl-docs')">View the documentation!</a>)</p>`:'<p class="body-text">This applet was made with <a href="/projects/wilson/">Wilson</a>, a library I wrote to make high-performance, polished applets easier to create.</p>'},singleLineEnvironments:["banner","canvas","card","center","checkbox","desmos","glsl-docs","nav-buttons","wilson"],notesEnvironments:{ex:"Example",exc:"Exercise",def:"Definition",prop:"Proposition",thm:"Theorem",lem:"Lemma",cor:"Corollary",pf:"Proof",ax:"Axiom",as:"Aside"},decode:function(e){var a=-1!==e.indexOf("### banner");let s=!1;for(e=e.replaceAll(/\r/g,"").replaceAll(/    /g,"\t");e.match(/(```.+\n[\s\S]*?)\t\t([\s\S]*?```\n)/);)e=e.replaceAll(/(```.+\n[\s\S]*?)\t\t([\s\S]*?```\n)/g,(e,t,a)=>t+"&#9;"+a);if(!(e=e.replaceAll(/\t/g,"")).match(/\n#\s/g)&&!Site.manualHeaderPages.includes(Page.url)){const p=Site.sitemap[Page.url].title;e=e.replaceAll(/(<div.*?>)?(### banner)?([\s\S]+)/g,(e,t,a,s)=>`${t||""}${a||""}

# ${p}

`+(s||""))}var t=e.indexOf("<script");let n="";-1!==t&&(n=e.slice(t),e=e.slice(0,t));var l,o=e.split("\n");for(let t=0;t<o.length;t++)if(0!==o[t].length&&"<"!==o[t][0])if("!"===o[t][0]&&(o[t]=o[t].slice(1)),"$$"===o[t]){let e="";var c=t;for(t++;"$$"!==o[t].slice(0,2);)""===o[t]?o.splice(t,1):(o[t]=this.Parse.latex(o[t]),e=`${e}${t===c+1?"":"\\\\"}[NEWLINE][TAB]`+o[t],1!==[...o[t].matchAll(/\\(begin|end){.*?}/g)].length&&(o[t]=o[t]+"\\\\[4px]"),t++);e=-1===(e+="[NEWLINE]").indexOf("&")?`$$${e}$$`:`\\begin{align*}${e}\\end{align*}`,o[t-1]=o[t-1].replace(/\\\\\[4px\]$/,""),o[t]="\\end{align*}$$</span></p>",o[c]=`<p class="body-text" style="text-align: center"><span class="tex-holder" style="padding: 8px" data-source-tex="${e}">$$\\begin{align*}`}else if("```"===o[t].slice(0,3)){for(3<o[t].length?o[t]=`<pre><code class="language-${o[t].slice(3)}">`:o[t]="<pre><code>",o[t]=""+o[t]+o[t+1]+"[ESCAPEDNEWLINE]",o.splice(t+1,1),t++;"```"!==o[t].slice(0,3);)o[t]=o[t]+"[ESCAPEDNEWLINE]",t++;o[t-1]=o[t-1]+"</code></pre>",o.splice(t,1),t--}else if("###"===o[t].slice(0,3))if("###"===o[t])s=!1,o[t]="</div>";else{var i=o[t].slice(4).split(" ");if(this.singleLineEnvironments.includes(i[0]))o[t]=this.Parse[i[0]](...i.slice(1)),"card"===i[0]&&(s=!0);else if(i[0]in this.notesEnvironments)o[t]=this.Parse["notes-environment"](...i),s=!0;else{var r=[],d=t;for(t++;"###"!==o[t];)0!==o[t].length&&r.push(o[t]),t++;o[d]=this.Parse[i[0]](r,...i.slice(1));for(let e=d+1;e<=t;e++)o[e]=""}}else"##"===o[t].slice(0,2)?(i=this.Parse.text(o[t].slice(2)),s?o[t]=`<h2 class="section-text" style="margin-top: 48px">${i}</h2>`:o[t]=`</section><h2 class="section-text">${i}</h2><section>`):"#"===o[t][0]?(d=this.Parse.text(o[t].slice(2)),l=a?this.getBanner():"",o[t]=`
					${l}
					<header>
						<div id="logo">
							<a href="/home/" tabindex="-1">
								<img src="/graphics/general-icons/logo.png" alt="Logo" tabindex="1"></img>
							</a>
						</div>
						
						<div style="height: 20px"></div>
						
						<h1 class="heading-text">${d}</h1>
					</header>
					
					<main>
						<section>
				`):(l=this.Parse.text(o[t])).match(/^[0-9]+?\./)?o[t]=`<p class="body-text numbered-list-item">${l}</p>`:o[t]=`<p class="body-text">${l}</p>`;for(let e=0;e<o.length;e++)o[e]=o[e].replace(/\t/g,"").replace(/\n/g,""),0===o[e].length&&(o.splice(e,1),e--);return e=(e=o.join("")).replaceAll(/\[ESCAPEDNEWLINE\]/g,"\n"),e+="</section></main>",a&&(e+="</div>"),e=`<html><body>${e}${n}</body></html>`},GLSLDocs:String.raw`<div id="glsl-docs-card" class="card"><h1 class="heading-text">Complex GLSL Documentation</h1><p class="body-text">These functions implement many common operations on complex numbers, as well as a handful of more complicated number-theoretic functions. Unless otherwise specified, <code>float</code>s refer to real numbers and <code>vec2</code>s to complex ones.</p><h2 class="section-text" style="margin-top: 48px"> Constants</h2><p class="body-text"><code>ZERO = vec2(0.0, 0.0)</code>.</p><p class="body-text"><code>ONE = vec2(1.0, 0.0)</code>.</p><p class="body-text"><code>I = i = vec2(0.0, 1.0)</code>.</p><h2 class="section-text" style="margin-top: 48px"> Arithmetic Functions</h2><p class="body-text"><code>[float | vec2] cadd([float | vec2] z, [float | vec2] w)</code>: returns <span class="tex-holder inline-math" data-source-tex="z + w">$z + w$</span>.</p><p class="body-text"><code>[float | vec2] csub([float | vec2] z, [float | vec2] w)</code>: returns <span class="tex-holder inline-math" data-source-tex="z - w">$z - w$</span>.</p><p class="body-text"><code>[float | vec2] cmul([float | vec2] z, [float | vec2] w)</code>: returns <span class="tex-holder inline-math" data-source-tex="zw">$zw$</span>.</p><p class="body-text"><code>[float | vec2] cdiv([float | vec2] z, [float | vec2] w)</code>: returns <span class="tex-holder inline-math" data-source-tex="\dfrac{z}{w}">$\dfrac{z}{w}$</span>.</p><p class="body-text"><code>[float | vec2] cinv([float | vec2] z)</code>: returns <span class="tex-holder inline-math" data-source-tex="\frac{1}{z}">$\frac{1}{z}$</span>.</p><p class="body-text"><code>float cabs([float | vec2] z)</code>: returns <span class="tex-holder inline-math" data-source-tex="|z|">$|z|$</span>, where e.g. <span class="tex-holder inline-math" data-source-tex="|3 + 4i| = 5">$|3 + 4i| = 5$</span>.</p><p class="body-text"><code>float cmag([float | vec2] z)</code>: returns <span class="tex-holder inline-math" data-source-tex="|z|^2">$|z|^2$</span>. Avoids taking a square root to compute <span class="tex-holder inline-math" data-source-tex="|z|">$|z|$</span>.</p><p class="body-text"><code>float carg([float | vec2] z)</code>: returns the principal argument of <span class="tex-holder inline-math" data-source-tex="z">$z$</span>, i.e. the angle in <span class="tex-holder inline-math" data-source-tex="(-\pi, \pi]">$(-\pi, \pi]$</span> that <span class="tex-holder inline-math" data-source-tex="z">$z$</span> makes with the positive <span class="tex-holder inline-math" data-source-tex="x">$x$</span>-axis.</p><p class="body-text"><code>[float | vec2] cconj([float | vec2] z)</code>: returns <span class="tex-holder inline-math" data-source-tex="\overline{z}">$\overline{z}$</span>, the complex conjugate of <span class="tex-holder inline-math" data-source-tex="z">$z$</span>.</p><p class="body-text"><code>[float | vec2] csign([float | vec2] z)</code>: returns the normalized vector <span class="tex-holder inline-math" data-source-tex="\dfrac{z}{|z|}">$\dfrac{z}{|z|}$</span>, generalizing the sign function on the real numbers.</p><h2 class="section-text" style="margin-top: 48px"> Exponential Functions</h2><p class="body-text"><code>[float | vec2] cpow([float | vec2] z, [float | vec2] w)</code>: returns <span class="tex-holder inline-math" data-source-tex="z^w">$z^w$</span>. If both <span class="tex-holder inline-math" data-source-tex="z">$z$</span> and <span class="tex-holder inline-math" data-source-tex="w">$w$</span> are real but the power is complex, at least one of the two must be passed in as a <code>vec2</code>.</p><p class="body-text"><code>vec2 cpow_logz(float z, float logz, float w)</code>: returns <span class="tex-holder inline-math" data-source-tex="z^w">$z^w$</span>. Saves operations in the case <span class="tex-holder inline-math" data-source-tex="\log(z)">$\log(z)$</span> is already known. Requires <span class="tex-holder inline-math" data-source-tex="z > 0">$z > 0$</span>.</p><p class="body-text"><code>vec2 csqrt([float | vec2] z)</code>: returns <span class="tex-holder inline-math" data-source-tex="\sqrt{z}">$\sqrt{z}$</span>.</p><p class="body-text"><code>[float | vec2] cexp([float | vec2] z)</code>: returns <span class="tex-holder inline-math" data-source-tex="e^z">$e^z$</span>.</p><p class="body-text"><code>[float | vec2] clog([float | vec2] z)</code>: returns <span class="tex-holder inline-math" data-source-tex="\log(z)">$\log(z)$</span>, the natural log of <span class="tex-holder inline-math" data-source-tex="z">$z$</span>.</p><p class="body-text"><code>[float | vec2] ctet([float | vec2] z, float w)</code>: returns <span class="tex-holder inline-math" data-source-tex="z \uparrow\uparrow w">$z \uparrow\uparrow w$</span>, e.g. <span class="tex-holder inline-math" data-source-tex="2 \uparrow\uparrow 3 = 2^{2^2} = 16">$2 \uparrow\uparrow 3 = 2^{2^2} = 16$</span>.</p><p class="body-text"><code>int powermod(int a, int b, int c)</code>: returns <span class="tex-holder inline-math" data-source-tex="a^b \mod c">$a^b \mod c$</span>.</p><h2 class="section-text" style="margin-top: 48px"> Trigonometric Functions</h2><p class="body-text">All six standard trigonometric functions are implemented, along with their inverses, hyperbolic versions, and hyperbolic inverses. For example, <code>csin(z)</code> returns <span class="tex-holder inline-math" data-source-tex="\sin(z)">$\sin(z)$</span>, <code>casin(z)</code> returns <span class="tex-holder inline-math" data-source-tex="\arcsin(z)">$\arcsin(z)$</span>, <code>csinh(z)</code> returns <span class="tex-holder inline-math" data-source-tex="\sinh(z)">$\sinh(z)$</span>, and <code>casinh(z)</code> returns <span class="tex-holder inline-math" data-source-tex="\operatorname{arcsinh}(z)">$\operatorname{arcsinh}(z)$</span>.</p><p class="body-text"><code>[float | vec2] c[a]sin[h]([float | vec2] z)</code>.</p><p class="body-text"><code>[float | vec2] c[a]cos[h]([float | vec2] z)</code>.</p><p class="body-text"><code>[float | vec2] c[a]tan[h]([float | vec2] z)</code>.</p><p class="body-text"><code>[float | vec2] c[a]csc[h]([float | vec2] z)</code>.</p><p class="body-text"><code>[float | vec2] c[a]sec[h]([float | vec2] z)</code>.</p><p class="body-text"><code>[float | vec2] c[a]cot[h]([float | vec2] z)</code>.</p><h2 class="section-text" style="margin-top: 48px"> Combinatorial Functions</h2><p class="body-text"><code>float factorial([int | float] n)</code>: returns <span class="tex-holder inline-math" data-source-tex="n!">$n!$</span>.</p><p class="body-text"><code>float binomial([int | float] n, [int | float] k)</code>: returns <span class="tex-holder inline-math" data-source-tex="\binom{n}{k}">$\displaystyle \binom{n}{k}$</span>.</p><p class="body-text"><code>float divisor(float n, float k = 1.0)</code>: returns the sum of all <span class="tex-holder inline-math" data-source-tex="k">$k$</span>th powers of divisors of <span class="tex-holder inline-math" data-source-tex="n">$n$</span>.</p><p class="body-text"><code>float bernoulli(float n)</code>: returns the <span class="tex-holder inline-math" data-source-tex="n">$n$</span>th Bernoulli number <span class="tex-holder inline-math" data-source-tex="B_n">$B_n$</span>.</p><p class="body-text"><code>float rising_factorial(float a, [int | float] n)</code>: returns <span class="tex-holder inline-math" data-source-tex="(a)(a + 1)\cdots(a+n-1)">$(a)(a + 1)\cdots(a+n-1)$</span>.</p><h2 class="section-text" style="margin-top: 48px"> Number-Theoretic Functions</h2><p class="body-text"><code>[float | vec2] zeta([float | vec2] z)</code>: returns <span class="tex-holder inline-math" data-source-tex="\zeta(z)">$\zeta(z)$</span>, where <span class="tex-holder inline-math" data-source-tex="\zeta">$\zeta$</span> is the Riemann zeta function.</p><p class="body-text"><code>vec2 hurwitz_zeta(vec2 z, [float | vec2] a)</code>: returns <span class="tex-holder inline-math" data-source-tex="\zeta(z, a)">$\zeta(z, a)$</span>, where <span class="tex-holder inline-math" data-source-tex="\zeta">$\zeta$</span> is the Hurwitz zeta function, a generalization of the Riemann zeta function.</p><p class="body-text"><code>vec2 su3_character([int | float] p, [int | float] p, vec2 z)</code>: returns the character of the irreducible <span class="tex-holder inline-math" data-source-tex="SU(3)">$SU(3)$</span> representation with highest weight <span class="tex-holder inline-math" data-source-tex="(p, q)">$(p, q)$</span>.</p><p class="body-text"><code>[float | vec2] gamma([int | float | vec2] a)</code>: returns <span class="tex-holder inline-math" data-source-tex="\Gamma(a)">$\Gamma(a)$</span>, where <span class="tex-holder inline-math" data-source-tex="\Gamma">$\Gamma$</span> is the gamma function, a generalization of the factorial operation.</p><p class="body-text"><code>vec2 digamma(vec2 a)</code>: returns the logarithmic derivative of the <span class="tex-holder inline-math" data-source-tex="\Gamma">$\Gamma$</span> function, i.e. <span class="tex-holder inline-math" data-source-tex="\dfrac{\Gamma'(a)}{\Gamma(a)}">$\dfrac{\Gamma'(a)}{\Gamma(a)}$</span>.</p><p class="body-text"><code>vec2 polygamma([int | float] n, vec2 a)</code>: returns the <span class="tex-holder inline-math" data-source-tex="(n + 1)">$(n + 1)$</span>st logarithmic derivative of the <span class="tex-holder inline-math" data-source-tex="\Gamma">$\Gamma$</span> function at <span class="tex-holder inline-math" data-source-tex="a">$a$</span>.</p><p class="body-text"><code>vec2 hypergeometric2f1(float a, float b, float c, [float | vec2] z)</code>: returns the hypergeometric function <span class="tex-holder inline-math" data-source-tex="_2F_1(a, b; c; z)">$_2F_1(a, b; c; z)$</span>.</p><p class="body-text"><code>vec2 hypergeometricf2(float a, float b1, float b2, float c1, float c2, [float | vec2] x, [float | vec2] y)</code>: returns the hypergeometric function <span class="tex-holder inline-math" data-source-tex="F_2(a, b_1, b_2; c_1, c_2; x, y)">$F_2(a, b_1, b_2; c_1, c_2; x, y)$</span>. The types of <span class="tex-holder inline-math" data-source-tex="x">$x$</span> and <span class="tex-holder inline-math" data-source-tex="y">$y$</span> must match.</p><p class="body-text"><code>vec2 hypergeometricg2(float b1, float b2, float c1, float c2, [float | vec2] x, [float | vec2] y)</code>: returns the hypergeometric function <span class="tex-holder inline-math" data-source-tex="G_2(b_1, b_2; c_1, c_2; x, y)">$G_2(b_1, b_2; c_1, c_2; x, y)$</span>. The types of <span class="tex-holder inline-math" data-source-tex="x">$x$</span> and <span class="tex-holder inline-math" data-source-tex="y">$y$</span> must match.</p><p class="body-text"><code>vec2 hypergeometricf1(float a, float b1, float b2, float c, [float | vec2] x, [float | vec2] y)</code>: returns the hypergeometric function <span class="tex-holder inline-math" data-source-tex="F_1(b_1, b_2; c_1, c_2; x, y)">$F_1(b_1, b_2; c_1, c_2; x, y)$</span>. The types of <span class="tex-holder inline-math" data-source-tex="x">$x$</span> and <span class="tex-holder inline-math" data-source-tex="y">$y$</span> must match.</p></div>`};
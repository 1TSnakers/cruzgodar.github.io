import anime from"../anime.min.js";import{addHoverEventWithScale}from"./hoverEvents.min.js";import{InputElement}from"./inputElement.min.js";import{$$,addTemporaryListener,pageElement}from"./main.min.js";let uncapEverything=!1;class TextBox extends InputElement{defaultValue;valueTypeIsString=!1;constructor({element,name,value,maxValue=1/0,onInput=()=>{},onEnter=()=>{}}){super({element:element,name:name}),this.value=value,this.defaultValue=this.value,this.onInput=onInput,this.onEnter=onEnter,this.maxValue=maxValue,this.element.value=this.value,this.element.nextElementSibling.textContent=this.name,"string"==typeof this.value&&(this.valueTypeIsString=!0),this.element.addEventListener("input",()=>this.inputCallback()),this.element.addEventListener("keydown",e=>{"Enter"===e.key&&this.onEnter()}),this.valueTypeIsString||this.setCap()}inputCallback(){this.disabled||(this.value=this.valueTypeIsString?this.element.value||this.defaultValue:parseFloat(this.element.value||this.defaultValue),this.valueTypeIsString||(this.value>this.maxValue&&!uncapEverything?(this.value=this.maxValue,this.element.value=this.value,this.element.parentNode.classList.add("capped-input")):this.element.parentNode.classList.remove("capped-input")),this.onInput())}setValue(newValue,callOnInput=!1){this.value=newValue,this.element.value=this.value,callOnInput&&this.inputCallback()}setCap(){var e=this.element.nextElementSibling.innerHTML.split(" "),t=document.createElement("p");t.classList.add("body-text"),t.style.position="fixed",t.style.opacity=0,t.style.top="-100vh",t.style.width="fit-content",t.textContent="",pageElement.appendChild(t);let n=0;for(let i=0;i<e.length;i++)t.textContent=""+t.textContent+(i===n?"":" ")+e[i],100<=t.getBoundingClientRect().width&&(n=i,i--,t.textContent="");t.remove(),this.element.nextElementSibling.innerHTML=`<span>${e.slice(0,n).join(" ")}</span>${0!==n?" ":""}<span style="white-space: nowrap">${e.slice(n).join(" ")}<span class="triangle">&#x25BC;</span></span>`,this.element.nextElementSibling.addEventListener("click",()=>{this.element.parentNode.classList.contains("capped-input")&&(hideAllCapDialogs(),this.showCapDialog())});var a=(e=>{e.target.classList.contains("keep-dialog-open")||hideAllCapDialogs()}).bind(this);addTemporaryListener({object:document.documentElement,event:"pointerdown",callback:a,log:!0})}showCapDialog(){const t=document.createElement("div");t.classList.add("input-cap-dialog"),t.classList.add("keep-dialog-open"),t.style.opacity=0,t.style.transform="scale(1)",t.innerHTML=`Higher values than this may take an extremely long time to compute, cause substantial lag, or crash the tab or entire browser. Only continue if you know what you&#x2019;re doing!
		<div class="checkbox-row keep-dialog-open">
			<div class="checkbox-container click-on-child keep-dialog-open">
				<input type="checkbox" class="uncap-inputs-checkbox keep-dialog-open"/>
				<div class="checkbox keep-dialog-open"></div>
			</div>
			<div style="margin-left: 10px" class="keep-dialog-open">
				<p class="body-text checkbox-subtext keep-dialog-open">Uncap all inputs</p>
			</div>
		</div>`,pageElement.appendChild(t);var e=()=>this.updateCapDialogLocation(t);addTemporaryListener({object:window,event:"resize",callback:e}),e(),t.style.transform="scale(.95)",setTimeout(()=>{const e=t.querySelector(".uncap-inputs-checkbox");e.checked=uncapEverything,e.addEventListener("input",()=>{(uncapEverything=e.checked)&&$$(".capped-input").forEach(cappedInputElement=>{cappedInputElement.classList.remove("capped-input")})}),addHoverEventWithScale(e.parentNode,1.1),anime({targets:t,opacity:1,scale:1,duration:250,easing:"easeOutQuad"})},16)}updateCapDialogLocation(dialog){var e=this.element.nextElementSibling.getBoundingClientRect(),t=dialog.getBoundingClientRect();dialog.style.top=window.scrollY+e.top+e.height+4+"px",dialog.style.left=Math.min(Math.max(e.left-(t.width+12-e.width)/2,12),window.innerWidth-12-t.width)+"px"}}function hideAllCapDialogs(){const e=$$(".input-cap-dialog");e&&anime({targets:e,opacity:0,scale:.95,duration:250,easing:"easeOutQuad",complete:()=>{e.forEach(dialog=>dialog.remove())}})}export{TextBox};
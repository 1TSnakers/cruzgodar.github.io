import{changeOpacity}from"./animation.min.js";import{$$,loadScript,raw}from"./main.min.js";import{siteSettings}from"./settings.min.js";let desmosPurple="#772fbf",desmosBlue="#2f77bf",desmosRed="#bf2f2f",desmosGreen="#2fbf2f";const desmosBlack="#000000",desmosPurple3d="#772fbf",desmosBlue3d="#2f77bf",desmosRed3d="#bf2f2f",desmosGreen3d="#2fbf2f";let desmosBlack3d="#333333";function updateDesmosColors(){desmosPurple=siteSettings.darkTheme?"#60c000":"#772fbf",desmosBlue=siteSettings.darkTheme?"#c06000":"#2f77bf",desmosRed=siteSettings.darkTheme?"#00c0c0":"#bf2f2f",desmosGreen=siteSettings.darkTheme?"#c000c0":"#2fbf2f",desmosBlack3d=siteSettings.darkTheme?"#cccccc":"#333333"}let desmosGraphs={};function clearDesmosGraphs(){desmosGraphs={}}let getDesmosData=()=>({});function setGetDesmosData(newGetDesmosData){getDesmosData=newGetDesmosData}async function createDesmosGraphs(recreating=!1){if(!window.OFFLINE){await loadScript("https://www.desmos.com/api/v1.12/calculator.js?apiKey=2ede6b5fa6644332a74225bf2b8addb4");for(const i in desmosGraphs)desmosGraphs[i]?.destroy&&desmosGraphs[i].destroy();desmosGraphs={},updateDesmosColors();var s=getDesmosData();for(const d in s)for(const n of s[d].expressions)n.latex=n.latex.replace(/\(/g,raw`\left(`),n.latex=n.latex.replace(/\)/g,raw`\right)`),n.latex=n.latex.replace(/\[/g,raw`\left[`),n.latex=n.latex.replace(/\]/g,raw`\right]`);for(const m of $$(".desmos-container")){var t={keypad:!1,settingsMenu:!1,zoomButtons:!1,showResetButtonOnGraphpaper:!0,border:!1,expressionsCollapsed:!0,invertedColors:siteSettings.darkTheme,xAxisMinorSubdivisions:1,yAxisMinorSubdivisions:1,...s[m.id].options??{}},o=s[m.id].use3d?Desmos.Calculator3D:Desmos.GraphingCalculator,o=(desmosGraphs[m.id]=o(m,t),s[m.id].bounds),t=m.getBoundingClientRect(),t=t.width/t.height,r=o.right-o.left,a=(o.left+o.right)/2;o.left=a-r/2*t,o.right=a+r/2*t,desmosGraphs[m.id].setMathBounds(o),desmosGraphs[m.id].setExpressions(s[m.id].expressions),desmosGraphs[m.id].setDefaultState(desmosGraphs[m.id].getState()),console.log(desmosGraphs[m.id].getState()),window.DEBUG&&!recreating&&m.addEventListener("click",e=>{e.metaKey&&getDesmosScreenshot(m.id,e.altKey)})}}}async function recreateDesmosGraphs(){var e=Array.from($$(".desmos-container"));e&&(await Promise.all(e.map(element=>changeOpacity({element:element,opacity:0}))),await createDesmosGraphs(!0),await Promise.all(e.map(element=>changeOpacity({element:element,opacity:1}))))}function getDesmosScreenshot(id,forPdf=!1){desmosGraphs[id].updateSettings({showGrid:forPdf,xAxisNumbers:forPdf,yAxisNumbers:forPdf});var e=desmosGraphs[id].getExpressions();for(let o=0;o<e.length;o++)e[o].lineWidth=forPdf?5:7.5,e[o].pointSize=forPdf?15:27,e[o].dragMode="NONE";desmosGraphs[id].setExpressions(e);var s=desmosGraphs[id].screenshot({width:500,height:500,targetPixelRatio:8}),t=document.createElement("img");t.width=4e3,t.height=4e3,t.style.width="50vmin",t.style.height="50vmin",t.src=s,document.body.appendChild(t)}let uid=0;function getDesmosPoint({point,color,dragMode="XY",style="POINT",secret=!0}){return[{latex:raw`(${point[0]}, ${point[1]})`,dragMode:dragMode,pointStyle:style,color:color,secret:secret}]}function getDesmosSlider({expression,min,max,step,secret=!0}){return[{latex:raw`${expression}`,sliderBounds:{min:min,max:max,step:step},secret:secret}]}function getDesmosVector({from,to,color,secret=!0,lineStyle="SOLID"}){return uid++,[{latex:raw`((${from[0]}), (${from[1]})), ((${to[0]}), (${to[1]}))`,color:color,lines:!0,points:!1,secret:secret,lineStyle:lineStyle},{latex:raw`s_{${uid}} = \arctan(${to[1]} - (${from[1]}), ${to[0]} - (${from[0]}))`,secret:secret},{latex:raw`((${to[0]}), (${to[1]})), ((${to[0]}) - .35\cos(s_{${uid}} + .5), (${to[1]}) - .35\sin(s_{${uid}} + .5))`,color:color,lines:!0,points:!1,secret:secret},{latex:raw`((${to[0]}), (${to[1]})), ((${to[0]}) - .35\cos(s_{${uid}} - .5), (${to[1]}) - .35\sin(s_{${uid}} - .5))`,color:color,lines:!0,points:!1,secret:secret}]}export{desmosPurple,desmosBlue,desmosRed,desmosGreen,desmosBlack,desmosPurple3d,desmosBlue3d,desmosRed3d,desmosGreen3d,desmosBlack3d,desmosGraphs,clearDesmosGraphs,setGetDesmosData,createDesmosGraphs,recreateDesmosGraphs,getDesmosScreenshot,getDesmosPoint,getDesmosSlider,getDesmosVector};
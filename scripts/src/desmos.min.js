import{changeOpacity}from"./animation.min.js";import{$$,loadScript,raw}from"./main.min.js";import{siteSettings}from"./settings.min.js";let desmosPurple="#772fbf",desmosBlue="#2f77bf",desmosRed="#bf2f2f",desmosGreen="#2fbf2f";const desmosBlack="#000000";function updateDesmosColors(){desmosPurple=siteSettings.darkTheme?"#60c000":"#772fbf",desmosBlue=siteSettings.darkTheme?"#c06000":"#2f77bf",desmosRed=siteSettings.darkTheme?"#00c0c0":"#bf2f2f",desmosGreen=siteSettings.darkTheme?"#c000c0":"#2fbf2f"}let desmosGraphs={};function clearDesmosGraphs(){desmosGraphs={}}let getDesmosData=()=>({});function setGetDesmosData(newGetDesmosData){getDesmosData=newGetDesmosData}async function createDesmosGraphs(recreating=!1){if(!window.OFFLINE){await loadScript("https://www.desmos.com/api/v1.11/calculator.js?apiKey=dcb31709b452b1cf9dc26972add0fda6");for(const n in desmosGraphs)desmosGraphs[n]?.destroy&&desmosGraphs[n].destroy();desmosGraphs={},updateDesmosColors();var s=getDesmosData();for(const d in s)for(const m of s[d].expressions)m.latex=m.latex.replace(/\(/g,raw`\left(`),m.latex=m.latex.replace(/\)/g,raw`\right)`),m.latex=m.latex.replace(/\[/g,raw`\left[`),m.latex=m.latex.replace(/\]/g,raw`\right]`);for(const c of $$(".desmos-container")){var t={keypad:!1,settingsMenu:!1,zoomButtons:!1,showResetButtonOnGraphpaper:!0,border:!1,expressionsCollapsed:!0,invertedColors:siteSettings.darkTheme,xAxisMinorSubdivisions:1,yAxisMinorSubdivisions:1};if(s[c.id].options)for(const l in s[c.id].options)t[l]=s[c.id].options[l];desmosGraphs[c.id]=Desmos.GraphingCalculator(c,t);var o=s[c.id].bounds,r=c.getBoundingClientRect(),r=r.width/r.height,a=o.right-o.left,i=(o.left+o.right)/2;o.left=i-a/2*r,o.right=i+a/2*r,desmosGraphs[c.id].setMathBounds(o),desmosGraphs[c.id].setExpressions(s[c.id].expressions),desmosGraphs[c.id].setDefaultState(desmosGraphs[c.id].getState()),window.DEBUG&&!recreating&&c.addEventListener("click",e=>{e.metaKey&&getDesmosScreenshot(c.id,e.altKey)})}}}async function recreateDesmosGraphs(){var e=Array.from($$(".desmos-container"));e&&(await Promise.all(e.map(element=>changeOpacity({element:element,opacity:0}))),await createDesmosGraphs(!0),await Promise.all(e.map(element=>changeOpacity({element:element,opacity:1}))))}function getDesmosScreenshot(id,forPdf=!1){desmosGraphs[id].updateSettings({showGrid:forPdf,xAxisNumbers:forPdf,yAxisNumbers:forPdf});var e=desmosGraphs[id].getExpressions();for(let s=0;s<e.length;s++)e[s].lineWidth=forPdf?5:7.5,e[s].pointSize=forPdf?15:27,e[s].dragMode="NONE";desmosGraphs[id].setExpressions(e),desmosGraphs[id].asyncScreenshot({width:500,height:500,targetPixelRatio:8},imageData=>{var e=document.createElement("img");e.width=4e3,e.height=4e3,e.style.width="50vmin",e.style.height="50vmin",e.src=imageData,document.body.appendChild(e)})}let uid=0;function getDesmosPoint({point,color,dragMode="XY",style="POINT",secret=!0}){return[{latex:raw`(${point[0]}, ${point[1]})`,dragMode:dragMode,pointStyle:style,color:color,secret:secret}]}function getDesmosSlider({expression,min,max,step,secret=!0}){return[{latex:raw`${expression}`,sliderBounds:{min:min,max:max,step:step},secret:secret}]}function getDesmosVector({from,to,color,secret=!0,lineStyle="SOLID"}){return uid++,[{latex:raw`((${from[0]}), (${from[1]})), ((${to[0]}), (${to[1]}))`,color:color,lines:!0,points:!1,secret:secret,lineStyle:lineStyle},{latex:raw`s_{${uid}} = \arctan(${to[1]} - (${from[1]}), ${to[0]} - (${from[0]}))`,secret:secret},{latex:raw`((${to[0]}), (${to[1]})), ((${to[0]}) - .35\cos(s_{${uid}} + .5), (${to[1]}) - .35\sin(s_{${uid}} + .5))`,color:color,lines:!0,points:!1,secret:secret},{latex:raw`((${to[0]}), (${to[1]})), ((${to[0]}) - .35\cos(s_{${uid}} - .5), (${to[1]}) - .35\sin(s_{${uid}} - .5))`,color:color,lines:!0,points:!1,secret:secret}]}export{desmosPurple,desmosBlue,desmosRed,desmosGreen,desmosBlack,desmosGraphs,clearDesmosGraphs,setGetDesmosData,createDesmosGraphs,recreateDesmosGraphs,getDesmosScreenshot,getDesmosPoint,getDesmosSlider,getDesmosVector};
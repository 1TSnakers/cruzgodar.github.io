"use strict";



let Page = {};

let Site = {};



Page.Animate =
{
	change_opacity_js: function(element, end_value, duration, ease_in_out = false)
	{
		return new Promise((resolve, reject) =>
		{
			anime({
				targets: element,
				opacity: end_value,
				duration: duration,
				easing: ease_in_out ? "easeInOutQuad" : "easeOutQuad",
				complete: resolve
			});
		});	
	},
	
	
	
	change_opacity_css: function(element, end_value, duration, ease_in_out = false)
	{
		return new Promise((resolve, reject) =>
		{
			try {clearTimeout(element.getAttribute("data-opacity-timeout-id"))}
			catch(ex) {}
			
			element.style.transition = `opacity ${duration}ms ${ease_in_out ? "ease-in-out" : "ease-out"}`;
			
			setTimeout(() =>
			{
				element.style.opacity = end_value;
				
				let timeout_id = setTimeout(() =>
				{
					element.style.transition = "";
					resolve();
				}, duration);
				
				element.setAttribute("data-opacity-timeout-id", timeout_id);
			}, 10);
		});	
	},



	change_scale_js: function(element, end_value, duration, ease_in_out = false)
	{
		return new Promise((resolve, reject) =>
		{
			anime({
				targets: element,
				scale: end_value,
				duration: duration,
				easing: ease_in_out ? "easeInOutQuad" : "easeOutQuad",
				complete: resolve
			});
		});	
	},
	
	
	
	change_scale_css: function(element, end_value, duration, ease_in_out = false)
	{
		return new Promise((resolve, reject) =>
		{
			try {clearTimeout(element.getAttribute("data-scale-timeout-id"))}
			catch(ex) {}
			
			element.style.transition = `transform ${duration}ms ${ease_in_out ? "ease-in-out" : "ease-out"}`;
			
			setTimeout(() =>
			{
				element.style.transform = `scale(${end_value})`;
				
				let timeout_id = setTimeout(() =>
				{
					element.style.transition = "";
					resolve();
				}, duration);
				
				element.setAttribute("data-scale-timeout-id", timeout_id);
			}, 10);
		});	
	},
	
	
	
	fade_left_js: function(element, duration, ease_in_out = false)
	{
		return new Promise((resolve, reject) =>
		{
			anime({
				targets: element,
				translateX: 0,
				opacity: 1,
				duration: duration,
				easing: ease_in_out ? "easeInOutQuad" : "easeOutQuad",
				complete: resolve
			});
		});	
	},
	
	
	
	fade_left_css: function(element, duration, ease_in_out = false)
	{
		return new Promise((resolve, reject) =>
		{
			try {clearTimeout(element.getAttribute("data-fade-left-timeout-id"))}
			catch(ex) {}
			
			element.style.transition = `transform ${duration}ms ${ease_in_out ? "ease-in-out" : "ease-out"}, opacity ${duration}ms ${ease_in_out ? "ease-in-out" : "ease-out"}`;
			
			setTimeout(() =>
			{
				element.style.transform = `translateX(0px)`;
				element.style.opacity = 1;
				
				let timeout_id = setTimeout(() =>
				{
					element.style.transition = "";
					resolve();
				}, duration);
				
				element.setAttribute("data-fade-left-timeout-id", timeout_id);
			}, 10);
		});	
	},
	
	
	
	show_fade_up_section_js: function(elements, duration, delays, ease_in_out = false)
	{
		return new Promise((resolve, reject) =>
		{
			anime({
				targets: elements,
				translateY: 0,
				opacity: 1,
				duration: duration,
				delay: (target, index, num_targets) => delays[index],
				easing: ease_in_out ? "easeInOutCubic" : "easeOutCubic",
				complete: resolve
			});
		});	
	},
	
	
	
	show_fade_up_section_css: function(elements, duration, delays, ease_in_out = false)
	{
		return new Promise((resolve, reject) =>
		{
			for (let i = 0; i < elements.length; i++)
			{
				setTimeout(() =>
				{
					elements[i].setAttribute("data-aos-offset", -1000000);
					
					AOS.refresh();
				}, delays[i]);
			}
			
			setTimeout(resolve, delays[delays.length - 1] + duration);
		});
	},
	
	
	
	show_zoom_out_section_js: function(elements, duration, delays, ease_in_out = false)
	{
		return new Promise((resolve, reject) =>
		{
			anime({
				targets: elements,
				scale: 1,
				opacity: 1,
				duration: duration,
				delay: (target, index, num_targets) => delays[index],
				easing: ease_in_out ? "easeInOutCubic" : "easeOutCubic",
				complete: resolve
			});
		});	
	},
	
	
	
	show_zoom_out_section_css: function(elements, duration, delays, ease_in_out = false)
	{
		return new Promise((resolve, reject) =>
		{
			for (let i = 0; i < elements.length; i++)
			{
				setTimeout(() =>
				{
					elements[i].setAttribute("data-aos-offset", -1000000);
					
					AOS.refresh();
				}, delays[i]);
			}
			
			setTimeout(resolve, delays[delays.length - 1] + duration);
		});
	}
};
"use strict";



Page.Banner =
{
	done_loading: false,

	file_name: "",
	file_path: "",



	//A list of every page that has a banner. Only to be used for preloading those banners. For everything else, use page_settings["banner_page"].
	preloadable_pages:
	[
		"/home/home.html",
		
		"/bio/bio.html",
		
		"/writing/mist/mist.html",
		"/writing/desolation-point/desolation-point.html"
	],

	//A list of every page that has multiple banners. Again, this is ONLY to be used for preloading those banners. For everything else, use page_settings["num_banners"].
	multibanner_pages:
	{
		"/home/home.html":
		{
			"current_banner": Math.floor(Math.random() * 16),
			"num_banners": 16
		}
	},

	//Filled in with pages when banners are preloaded so the console isn't spammed and caches aren't needlessly checked.
	pages_already_fetched: [],



	load: function()
	{
		return new Promise((resolve, reject) =>
		{
			//Only do banner things if the banner things are in the standard places.
			if (!(this.preloadable_pages.includes(Page.url)))
			{
				resolve();
			}
			
			
			
			else
			{
				if (Page.Layout.aspect_ratio < 1)
				{
					this.file_name = "portrait." + Page.Images.file_extension;
				}
				
				else
				{
					this.file_name = "landscape." + Page.Images.file_extension;
				}
				
					
				
				this.file_path = "";
				
				if (!(this.multibanner_pages.hasOwnProperty(Page.url)))
				{
					this.file_path = Page.parent_folder + "banners/";
				}
				
				else
				{
					this.multibanner_pages[Page.url]["current_banner"]++;
					
					if (this.multibanner_pages[Page.url]["current_banner"] === this.multibanner_pages[Page.url]["num_banners"] + 1)
					{
						this.multibanner_pages[Page.url]["current_banner"] = 1;
					}
					
					this.file_path = Page.parent_folder + "banners/" + this.multibanner_pages[Page.url]["current_banner"] + "/";
				}
				
				
				
				//Fetch the banner file. If that works, great! Set the background and fade in the page. If not, that means the html was cached but the banner was not (this is common on the homepage). In that case, we need to abort, so we remove the banner entirely.
				fetch(this.file_path + this.file_name)
				
				.then((response) =>
				{
					let img = new Image();
					
					img.onload = () =>
					{
						img.remove();
						
						this.ScrollButton.timeout_id = setTimeout(() =>
						{
							this.ScrollButton.insert();
						}, 2000);
						
						resolve();
					};
					
					img.style.display = "hidden";
					img.style.opacity = 0;
					
					Page.element.appendChild(img);
					
					setTimeout(() =>
					{
						img.src = this.file_path + this.file_name;
					}, 20);
				})
				
				.catch((error) =>
				{
					Page.element.querySelector("#banner").remove();
					Page.element.querySelector("#banner-cover").remove();
					
					
					
					//We resolve here because the page can still be loaded without the banner.
					resolve();
				});
			}
		});
	},



	on_scroll: function(scroll_position_override)
	{
		if (scroll_position_override === 0)
		{
			Page.scroll = window.scrollY;
		}
		
		else
		{
			Page.scroll = scroll_position_override;
			this.done_loading = false;
			this.ScrollButton.done_loading = false;
		}
		
		
		
		if (Page.scroll >= 0)
		{
			if (Page.scroll <= Page.Layout.window_height)
			{
				let opacity = .5 + .5 * Math.sin(Math.PI * Math.max(1 - Page.scroll / Page.Layout.window_height, 0) - Math.PI / 2);
				
				try {Page.element.querySelector("#banner").style.opacity = opacity;}
				catch(ex) {}
				
				if (opacity === 0)
				{
					this.done_loading = true;
				}
				
				else
				{
					this.done_loading = false;
				}
			}
			
			else if (!this.done_loading)
			{
				//We need a try block here in case the user refreshes the page and it's way low down for some reason, even though scrollRestoration should be off.
				try {Page.element.querySelector("#banner").style.opacity = 0;}
				catch(ex) {}
				
				this.done_loading = true;
			}
			
			
			
			if (Page.scroll <= Page.Layout.window_height/3)
			{
				let opacity = .5 + .5 * Math.sin(Math.PI * Math.max(1 - 3 * Page.scroll / Page.Layout.window_height, 0) - Math.PI / 2);
				
				if (this.ScrollButton.exists)
				{
					try {Page.element.querySelector("#scroll-button").style.opacity = opacity;}
					catch(ex) {}
				}
				
				
				
				try
				{
					Page.element.querySelector("#cruz-text").parentNode.style.opacity = opacity;
					Page.element.querySelector("#godar-text").parentNode.style.opacity = opacity;
				}
				
				catch(ex) {}
				
				
				
				if (opacity === 0)
				{
					if (this.ScrollButton.exists)
					{
						Page.element.querySelector("#scroll-button").remove();
						this.ScrollButton.exists = false;
					}
					
					this.ScrollButton.done_loading = true;
				}
				
				else
				{
					this.ScrollButton.done_loading = false;
				}
			}
			
			
			
			else if (this.ScrollButton.timeout_id !== null && Page.scroll <= 2*Page.Layout.window_height/3)
			{
				clearTimeout(this.ScrollButton.timeout_id);
				this.ScrollButton.timeout_id = null;
			}
			
			
			
			else if (this.ScrollButton.done_loading === false)
			{
				try
				{
					Page.element.querySelector("#cruz-text").parentNode.style.opacity = 0;
					Page.element.querySelector("#godar-text").parentNode.style.opacity = 0;
				}
				
				catch(ex) {}
				
				if (this.ScrollButton.exists)
				{
					Page.element.querySelector("#scroll-button").remove();
					this.ScrollButton.exists = false;
				}
				
				this.ScrollButton.done_loading = true;
			}
		}
	},
	
	
	
	//Fetches the other size of banner needed for the page, so that if the page is resized, there's no lag time.
	fetch_other_size_in_background: function()
	{
		if (this.file_name === "landscape.webp" || this.file_name === "landscape.jpg")
		{
			Site.Fetch.queue.push(this.file_path + "portrait." + Page.Images.file_extension);
			
			Site.Fetch.get_next_item_from_queue();
		}
		
		else
		{
			Site.Fetch.queue.push(this.file_path + "landscape." + Page.Images.file_extension);
			
			Site.Fetch.get_next_item_from_queue();
		}
	},



	//For every banner page linked to by the current page, this fetches that banner so that the waiting time between pages is minimized.
	fetch_other_page_banners_in_background: function()
	{
		let links = Page.element.querySelectorAll("a");
		
		for (let i = 0; i < links.length; i++)
		{
			let href = links[i].getAttribute("href");
			
			if (this.preloadable_pages.includes(href) && !(this.pages_already_fetched.includes(href)))
			{
				if (!(this.multibanner_pages.hasOwnProperty(href)))
				{
					this.pages_already_fetched.push(href);
					
					Site.Fetch.queue.push(href.slice(0, href.lastIndexOf("/") + 1) + "banners/" + this.file_name);
					
					Site.Fetch.get_next_item_from_queue();
				}
				
				else
				{
					let next_index = this.multibanner_pages[href]["current_banner"] % (this.multibanner_pages[href]["current_banner"] + 1) + 1;
					
					Site.Fetch.queue.push(href.slice(0, href.lastIndexOf("/") + 1) + "banners/" + next_index + "/" + this.file_name);
					
					Site.Fetch.get_next_item_from_queue();
				}
			}
		}
	},


	
	ScrollButton:
	{
		done_loading: false,
		
		exists: false,

		timeout_id: null,
		
		
		
		insert: function()
		{
			let opacity = .5 + .5 * Math.sin(Math.PI * Math.max(1 - 3 * Page.scroll / Page.Layout.window_height, 0) - Math.PI / 2);
			
			
			
			//Only add the scroll button if the user is still on the top of the page.
			if (Page.scroll <= Page.Layout.window_height / 3)
			{
				let chevron_name = "chevron-down";
				
				if (Site.Settings.url_vars["contrast"] === 1)
				{
					chevron_name += "-dark";
				}
				
				
				
				//Gotta have a try block here in case the user loads a banner page then navigates to a non-banner page within 3 seconds.
				try
				{
					document.querySelector("#banner-cover").insertAdjacentHTML("beforebegin", `
						<div id="new-banner-cover" data-aos="fade-down">
							<input type="image" id="scroll-button" src="/graphics/general-icons/${chevron_name}.png" style="opacity: ${opacity}" alt="Scroll down" onclick="Page.Banner.ScrollButton.animate_to(document.querySelector('#scroll-to'))">
						</div>
					`);
					
					setTimeout(() =>
					{
						if (Site.use_js_animation)
						{
							Page.element.querySelector("#new-banner-cover").style.opacity = 0;
							Page.element.querySelector("#new-banner-cover").style.transform = "translateY(-100px)";
							
							anime({
								targets: Page.element.querySelector("#new-banner-cover"),
								opacity: 1,
								translateY: 0,
								duration: Site.aos_animation_time,
								easing: "easeOutQuad"
							});
						}
						
						else
						{
							AOS.refresh();
						}	
						
						
						
						this.exists = true;
						
						try {Page.Load.HoverEvents.add_with_scale(document.querySelector("#scroll-button"), 1.1);}
						catch(ex) {}
					}, 100);
					
					document.querySelector("#banner-cover").remove();
				}
				
				catch(ex) {}
			}
		},



		animate_to: function(target_element)
		{
			target_element.scrollIntoView({behavior: "smooth"});
		}
	}
};
"use strict";



let Browser = 
{
	name: "",
	
	detect: function()
	{
		this.Detector.init();
		
		this.name = this.Detector.browser;
	},
	
	Detector:
	{
		init: function()
		{
			this.browser = this.searchString(this.dataBrowser) || "Other";
			this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "Unknown";
		},
		
		searchString: function(data)
		{
			for (let i = 0; i < data.length; i++)
			{
				let dataString = data[i].string;
				this.versionSearchString = data[i].subString;

				if (dataString.indexOf(data[i].subString) !== -1)
				{
					return data[i].identity;
				}
			}
		},
		
		searchVersion: function(dataString)
		{
			let index = dataString.indexOf(this.versionSearchString);
			
			if (index === -1)
			{
				return;
			}
			
			
			
			let rv = dataString.indexOf("rv:");
			
			if (this.versionSearchString === "Trident" && rv !== -1)
			{
				return parseFloat(dataString.substring(rv + 3));
			}
			
			else
			{
				return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
			}
		},

		dataBrowser:
		[
			{string: navigator.userAgent, subString: "Edge", identity: "MS Edge"},
			{string: navigator.userAgent, subString: "MSIE", identity: "Explorer"},
			{string: navigator.userAgent, subString: "Trident", identity: "Explorer"},
			{string: navigator.userAgent, subString: "Firefox", identity: "Firefox"},
			{string: navigator.userAgent, subString: "Opera", identity: "Opera"},  
			{string: navigator.userAgent, subString: "OPR", identity: "Opera"},  
			{string: navigator.userAgent, subString: "Chrome", identity: "Chrome"}, 
			{string: navigator.userAgent, subString: "Safari", identity: "Safari"}	   
		]
	},
	
	is_ios: function()
	{
		return [
			'iPad Simulator',
			'iPhone Simulator',
			'iPod Simulator',
			'iPad',
			'iPhone',
			'iPod'
		].includes(navigator.platform)
		
		// iPad on iOS 13 detection
		|| (navigator.userAgent.includes("Mac") && "ontouchend" in document)
	}
};
Site.glsl_filenames =
[
	"equality",
	"powers",
	"trig",
	"combinatorics",
	"number-theory",
	"gamma",
	"hypergeometric",
	"su3_character",
	"lambert_w",
	"hurwitz_zeta",
	"zeta"
];

Site.glsl_files = 
{
	"constants":
	{
		dependencies: [],
		
		keywords: []
	},
	
	"main":
	{
		dependencies: [],
		
		keywords: []
	}
};



Site.split_glsl_file = function(filename, text)
{
	text = text.replaceAll("\r", "");
	
	let start_search_index = 0;
	
	while (true)
	{
		let index = text.indexOf("#function", start_search_index);
		
		if (index === -1)
		{
			break;
		}
		
		let end_index = text.indexOf("\n", index + 10);
		
		if (end_index === -1)
		{
			console.error(`[GLSL bundling] Invalid function name in file ${filename}.frag`);
			return;
		}
		
		let keywords = text.slice(index + 10, end_index).split(" ");
		
		for (let i = 0; i < keywords.length; i++)
		{
			keywords[i] = keywords[i].replaceAll(" ", "");
			
			if (keywords[i] === "")
			{
				keywords.splice(i, 1);
				i--;
			}
		}
		
		
		
		let end_function_index = text.indexOf("#endfunction", end_index + 1);
		
		if (end_function_index === -1)
		{
			console.error(`[GLSL bundling] Missing #endfunction in file ${filename}.frag`);
			return;
		}
		
		
		
		Site.glsl_files[keywords[0]] =
		{
			keywords: keywords
		};
		
		
		
		let dependencies_index = text.indexOf("#requires", index);
		
		if (dependencies_index !== -1 && dependencies_index < end_function_index)
		{
			let end_dependencies_index = text.indexOf("\n", dependencies_index + 10);
			
			let dependencies = text.slice(dependencies_index + 10, end_dependencies_index).split(" ");
			
			for (let i = 0; i < dependencies.length; i++)
			{
				dependencies[i] = dependencies[i].replaceAll(" ", "");
				
				if (dependencies[i] === "")
				{
					dependencies.splice(i, 1);
					i--;
				}
			}
			
			Site.glsl_files[keywords[0]].dependencies = dependencies;
			
			Site.glsl_files[keywords[0]].content = text.slice(end_dependencies_index + 1, end_function_index);
		}
		
		else
		{
			Site.glsl_files[keywords[0]].dependencies = [];
			
			Site.glsl_files[keywords[0]].content = text.slice(end_index + 1, end_function_index);
		}
		
		
		
		start_search_index = end_function_index + 13;
	}
};



Site.glsl_files_by_depth = [];

Site.load_glsl = function()
{
	return new Promise(async (resolve, reject) =>
	{
		//constants.frag and main.frag are always fetched.
		await new Promise(async (resolve, reject) =>
		{
			fetch(`/scripts/glsl/constants.frag`)
		
			.then(response => response.text())
			
			.then(text => this.glsl_files["constants"].content = text)
			
			.then(() => resolve());
		});
		
		
		await new Promise(async (resolve, reject) =>
		{
			fetch(`/scripts/glsl/main.frag`)
		
			.then(response => response.text())
			
			.then(text => this.glsl_files["main"].content = text)
			
			.then(() => resolve());
		});
		
		
		
		for (let i = 0; i < this.glsl_filenames.length; i++)
		{
			await new Promise(async (resolve, reject) =>
			{
				fetch(`/scripts/glsl/${this.glsl_filenames[i]}.frag`)
			
				.then(response => response.text())
				
				.then(text => this.split_glsl_file(this.glsl_filenames[i], text))
				
				.then(() => resolve());
			});
		}
		
		
		
		let filenames = Object.keys(this.glsl_files);
		
		
		
		//Figure out the depth of everything.
		for (let i = 0; i < filenames.length; i++)
		{
			this.glsl_files[filenames[i]].parents = [];
		}
		
		
		
		for (let i = 0; i < filenames.length; i++)
		{
			let dependencies = this.glsl_files[filenames[i]].dependencies;
			
			for (let j = 0; j < dependencies.length; j++)
			{
				this.glsl_files[dependencies[j]].parents.push(filenames[i]);
			}
			
			if (dependencies.length === 0 && filenames[i] !== "main")
			{
				this.glsl_files["main"].parents.push(filenames[i]);
			}
		}
		
		let active_nodes = ["main"];
		let depth = 0;
		
		while (active_nodes.length !== 0)
		{
			let next_active_nodes = [];
			
			Site.glsl_files_by_depth.push([]);
			
			for (let i = 0; i < active_nodes.length; i++)
			{
				if (typeof this.glsl_files[active_nodes[i]].depth === "undefined")
				{
					this.glsl_files[active_nodes[i]].depth = depth;
				}
				
				else
				{
					this.glsl_files[active_nodes[i]].depth = Math.max(this.glsl_files[active_nodes[i]].depth, depth);
				}
				
				let parents = this.glsl_files[active_nodes[i]].parents;
				
				for (let j = 0; j < parents.length; j++)
				{
					if (!next_active_nodes.includes(parents[j]))
					{
						next_active_nodes.push(parents[j]);
					}	
				}
			}
			
			depth++;
			active_nodes = next_active_nodes;
		}
		
		for (let i = 0; i < filenames.length; i++)
		{
			Site.glsl_files_by_depth[this.glsl_files[filenames[i]].depth].push(filenames[i]);
		}
		
		
		
		Site.scripts_loaded["glsl"] = true;
		
		resolve();
	});
};



//Returns a bundle of all required glsl to handle the given function.
Site.get_glsl_bundle = function(code_string)
{
	//First, we need to identify the keywords in the provided string.
	let keywords = code_string.match(/[a-zA-Z_][a-zA-Z0-9_]*/g);
	
	let bundle = "";
	
	let filenames = Object.keys(this.glsl_files);
	
	let files_to_include = {};
	
	for (let i = 1; i < filenames.length; i++)
	{
		files_to_include[filenames[i]] = false;
	}
	
	//main.frag is always required.
	files_to_include["main"] = true;
	
	
	
	let debug_message = "";
	
	function add_to_bundle(filename, depth)
	{
		if (files_to_include[filename])
		{
			return;
		}
		
		files_to_include[filename] = true;
		
		if (DEBUG && depth !== 0)
		{
			debug_message += "\n                     ";
			
			for (let i = 0; i < depth; i++)
			{
				debug_message += "   ";
			}
			
			debug_message += `↳ ${filename}`;
		}
		
		let dependencies = Site.glsl_files[filename].dependencies;
		
		for (let i = 0; i < dependencies.length; i++)
		{
			add_to_bundle(dependencies[i], depth + 1);
		}
	}
	
	
	
	for (let i = 0; i < filenames.length; i++)
	{
		if (files_to_include[filenames[i]])
		{
			continue;
		}
		
		for (let j = 0; j < keywords.length; j++)
		{
			if (Site.glsl_files[filenames[i]].keywords.indexOf(keywords[j]) !== -1)
			{
				debug_message = `[GLSL bundling] Adding ${filenames[i]}`;
				
				add_to_bundle(filenames[i], 0);
				
				if (DEBUG)
				{
					console.log(debug_message);
				}
			}
		}
	}
	
	
	
	//constants.frag and main.glsl are always included.
	bundle = Site.glsl_files["constants"].content + Site.glsl_files["main"].content;
	
	for (let i = 1; i < Site.glsl_files_by_depth.length; i++)
	{
		for (let j = 0; j < Site.glsl_files_by_depth[i].length; j++)
		{
			if (files_to_include[Site.glsl_files_by_depth[i][j]])
			{
				bundle += Site.glsl_files[Site.glsl_files_by_depth[i][j]].content;
			}
		}	
	}
	
	return bundle;
}
"use strict";



Page.Components =
{
	need_new_aos_section: false,
	
	
	
	get_header: function(args, banner)
	{
		let title = args.join(" ");
		
		let height_adjust = "";
		
		if (banner)
		{
			height_adjust = ` style="margin-bottom: 10vh"`;
		}
		
		
		
		return `
			<header${height_adjust}>
				<div class="new-aos-section" data-aos="fade-up">
					<div id="logo">
						<a href="/home/home.html" tabindex="-1">
							<img src="/graphics/general-icons/logo.png" alt="Logo" tabindex="1"></img>
						</a>
					</div>
				</div>
				
				<div style="height: 2vh"></div>
				
				<div data-aos="fade-up">
					<h1 class="heading-text">${title}</h1>
				</div>
			</header>
			
			<main>
				<section>
		`;
	},
	
	
	
	get_footer: function(banner)
	{
		if (banner)
		{
			return `
						</section>
					</main>
					
					<footer>
						<div id="spawn-footer"></div>
					</footer>
				</div>
			`;
		}
		
		else
		{
			return `
					</section>
				</main>
				
				<footer>
					<div id="spawn-footer"></div>
				</footer>
			`;
		}
	},
	
	
	
	get_section: function()
	{
		return `
			</section>
			
			<section>
		`;
	},
	
	
	
	get_text: function(args, new_aos_section)
	{
		let aos_section_segment = "";
		
		if (this.need_new_aos_section)
		{
			aos_section_segment = ` class="new-aos-section"`;
			
			this.need_new_aos_section = false;
		}
		
		
		
		if (args[0] === "h")
		{
			let text = args.slice(1).join(" ");
			
			return `
				<div${aos_section_segment} data-aos="fade-up">
					<h1 class="heading-text">
						${text}
					</h1>
				</div>
			`;
		}
		
		else if (args[0] === "s")
		{
			let text = args.slice(1).join(" ");
			
			return `
				<div${aos_section_segment} data-aos="fade-up">
					<h2 class="section-text">
						${text}
					</h2>
				</div>
			`;
		}
		
		else
		{
			let text = args.slice(2).join(" ");
			
			//Only this one gets the line break at the end.
			if (args[1] === "j")
			{
				return `
					<div${aos_section_segment} data-aos="fade-up">
						<p class="body-text">
							${text}
						</p>
					</div>
					
					<br>
				`;
			}
			
			//Center if needed
			else
			{
				return `
					<div${aos_section_segment} data-aos="fade-up">
						<p class="body-text center-if-needed">
							<span>
								${text}
							</span>
						</p>
					</div>
				`;
			}
		}
	},
	
	
	
	get_image_link: function(args)
	{
		let file_path = args[0];
		
		if (file_path[0] !== "/")
		{
			file_path = Page.parent_folder + args[0];
		}
		
		
		
		let subtext = "";
		
		
		
		let light_text = "";
		
		if (args[1] === "l")
		{
			light_text = " image-link-light";
			
			subtext = args.slice(2).join(" ");
		}
		
		else
		{
			subtext = args.slice(1).join(" ");
		}
		
		
		
		let id = args[0].split(".")[0].split("/");
		
		id = id[id.length - 1];
		
		
		
		let src = `${file_path.slice(0, file_path.lastIndexOf("/") + 1)}cover.${Page.Images.file_extension}`;
		
		
		
		return `
			<div class="image-link${light_text}" data-aos="fade-up">
				<a href="${file_path}" tabindex="-1">
					<img data-image-id="${id}" src="${src}" alt="${subtext}" tabindex="1"></img>
				</a>
				
				<p class="image-link-subtext">${subtext}</p>
			</div>
		`;
	},
	
	
	
	get_banner: function()
	{
		return `
			<div id="banner"></div>
			
			<div id="banner-gradient"></div>

			<div id="banner-cover"></div>

			<div id="content">
				<div id="scroll-to"></div>
				
				<div style="height: 5vh"></div>
		`;
	},
	
	
	
	get_about_page_version: function(args)
	{
		let version_string = "medium-version";
		let version_text = "section-text";
		
		let numbers = args[0].split(".");
		
		if (numbers.length === 3)
		{
			version_string = "minor-version";
			version_text = "body-text";
		}
		
		else if (numbers[1] === "0")
		{
			version_string = "major-version";
			version_text = "heading-text";
		}
		
		
		
		let text = args.slice(1).join(" ");
		
		text = text.split(":");
		
		let description = text[1].slice(1);
		
		
		
		if (text.length === 3)
		{
			let datetime = text[2];
			
			text = text[0];
			
			let months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
			
			let numbers = datetime.split("-");
			
			let year = parseInt(numbers[0]);
			
			let month = months[parseInt(numbers[1]) - 1];
			
			let day = parseInt(numbers[2]);
			
			
		
			return `
				<div class="${version_string}">
					<div class="new-aos-section" data-aos="fade-up">
						<h2 class="${version_text}">${args[0]}</h2>
					</div>
					
					<div data-aos="fade-up">
						<h2 class="${version_text}">${text}</h2>
					</div>
					
					<br>
					
					<div data-aos="fade-up">
						<p class="body-text center-if-needed"><span>${description}</span></p>
					</div>
					
					<br>
					
					<div data-aos="fade-up">
						<p class="body-text center-if-needed">
							<span>
								<time datetime="${datetime}">${month} ${day}, ${year}</time>
							</span>
						</p>
					</div>
				</div>
			`;
		}
		
		
		
		else
		{
			text = text[0];
			
			return `
				<div class="${version_string}">
					<div class="new-aos-section" data-aos="fade-up">
						<h2 class="${version_text}">${args[0]}</h2>
					</div>
					
					<div data-aos="fade-up">
						<h2 class="${version_text}">${text}</h2>
					</div>
					
					<br>
					
					<div data-aos="fade-up">
						<p class="body-text center-if-needed"><span>${description}</span></p>
					</div>
				</div>
			`;
		}
	},
	
	
	
	get_text_box: function(args)
	{
		let id = args[0];
		
		let value = args[1];
		
		let text = args.slice(2).join(" ");
		
		return `
			<div class="text-box-container" data-aos="fade-up">
				<input id="${id}-input" class="text-box" type="text" value="${value}" tabindex="1">
				<p class="body-text">${text}</p>
			</div>
		`;
	},
	
	
	
	get_text_button: function(args)
	{
		let id = args[0];
		
		let text = args.slice(1).join(" ");
		
		
		
		let linked_string = "";
		
		if (args[1] === "l")
		{
			linked_string = " linked-text-button";
			
			text = args.slice(2).join(" ");
		}
		
		
		
		return `
			<div class="focus-on-child" data-aos="fade-up" tabindex="1">
				<button class="text-button${linked_string}" type="button" id="${id}-button" tabindex="-1">${text}</button>
			</div>
		`;
	},
	
	
	
	get_checkbox: function(args)
	{
		let id = args[0];
		
		let text = args.slice(1).join(" ");
		
		
		
		return `
			<div class="checkbox-row">
				<div data-aos="fade-up">
					<div class="checkbox-container click-on-child" tabindex="1">
						<input type="checkbox" id="${id}-checkbox">
						<div class="checkbox"></div>
					</div>
				</div>
				
				<div style="margin-left: 10px" data-aos="fade-up">
					<p class="body-text">${text}</p>
				</div>
			</div>
		`;
	},
	
	
	
	get_radio_button: function(args)
	{
		let name = args[0];
		
		let id = args[1];
		
		let text = args.slice(2).join(" ");
		
		
		
		return `
			<div class="radio-button-row">
				<div data-aos="fade-up">
					<div class="radio-button-container click-on-child" tabindex="1">
						<input type="radio" name="${name}" id="${id}-radio-button">
						<div class="radio-button"></div>
					</div>
				</div>
				
				<div style="margin-left: 10px" data-aos="fade-up">
					<p class="body-text">${text}</p>
				</div>
			</div>
		`;
	},
	
	
	
	get_slider: function(args)
	{
		let id = args[0];
		
		let value = args[1];
		
		let text = args.slice(2).join(" ");
		
		return `
			<div class="slider-container" data-aos="fade-up">
				<input id="${id}-slider" type="range" min="0" max="10000" value="${value}" tabindex="1">
				<label for="${id}-slider">
					<p class="body-text">${text}: <span id="${id}-slider-value">0</span></p>
				</label>
			</div>
		`;
	},
	
	
	
	get_dropdown: function(args)
	{
		let html = "";
		
		let id = args[0];
		
		html += `<div class="focus-on-child" data-aos="fade-up" tabindex="1">
				<button class="text-button dropdown" type="button" id="${id}-dropdown-button" tabindex="-1">`;
		
		for (let i = 1; i < args.length; i++)
		{
			let value = args[i][0];
			let text = args[i].slice(1).join(" ");
			
			if (i === 1)
			{
				html += `${text}</button><select id="${id}-dropdown">`;
			}
			
			html += `<option value="${value}">${text}</option>`;
		}
		
		html += `</select></div></div>`;
		
		return html;
	},
	
	
	
	get_canvas: function()
	{
		return `
			<div data-aos="fade-up">
				<canvas id="output-canvas" class="output-canvas"></canvas>
			</div>
		`;
	},
	
	
	
	get_iframe: function(src)
	{
		return `
			<div data-aos="fade-up" style="width: 100%; display: flex; justify-content: center">
				<iframe src="${src}" width="500" height="500"></iframe>
			</div>
		`;
	},
	
	
	
	get_line_break: function()
	{
		return `
			<div class="line-break line-break-0-0"></div>
			<div class="line-break line-break-1-0"></div>
			<div class="line-break line-break-0-1"></div>
			<div class="line-break line-break-1-1"></div>
		`;
	},
	
	
	
	decode: function(html)
	{
		let new_aos_section = false;
		
		let banner = false;
		
		
		
		let lines = html.replace(/\t/g, "").replace(/    /g, "").replace(/\r/g, "").split("\n");
		
		
		
		for (let i = 0; i < lines.length; i++)
		{
			if (lines[i][0] === "!")
			{
				let words = lines[i].split(" ");
				
				if (words[0] === "!begin-text-block")
				{
					lines[i] = "";
					
					
					
					while (words[0] !== "!end-text-block")
					{
						i += 2;
						
						
						
						if (lines[i] === "!wilson")
						{
							lines[i] = `This applet was made with <a href="/projects/wilson/wilson.html">Wilson</a>, a library I wrote to make high-performance, polished applets easier to create.`
						}
						
						
						
						if (lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$")
						{
							lines[i] = `<div data-aos="fade-up"><p class="body-text">$$`;
						
							i++;
							
							while (!(lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$"))
							{
								i++;
							}
							
							lines[i] = `$$</p></div>`;
							
							continue;
						}
						
						
						
						words = lines[i].split(" ");
						
						lines[i] = this.get_text(["b", "j"].concat(words));
					}
					
					
					
					lines[i] = "";
				}
				
				
				
				else if (words[0] === "!begin-image-links")
				{
					lines[i] = `<div class="image-links">`;
					
					i += 2;
					
					words = lines[i].split(" ");
					
					while (words[0] !== "!end-image-links")
					{
						lines[i] = this.get_image_link(words);
						
						i += 2;
						
						words = lines[i].split(" ");
					}
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!section")
				{
					this.need_new_aos_section = true;
					
					lines[i] = this.get_section();
				}
				
				
				
				else if (words[0] === "!text")
				{
					lines[i] = this.get_text(words.slice(1), new_aos_section);
				}
				
				
				
				else if (words[0] === "!banner")
				{
					banner = true;
					
					lines[i] = this.get_banner();
				}
				
				
				
				else if (words[0] === "!footer")
				{
					lines[i] = this.get_footer(banner);
				}
				
				
				
				else if (words[0] === "!header")
				{
					lines[i] = this.get_header(words.slice(1), banner);
				}
				
				
				
				else if (words[0] === "!version")
				{
					lines[i] = this.get_about_page_version(words.slice(1));
				}
				
				
				
				else if (words[0] === "!begin-text-boxes")
				{
					lines[i] = `<div class="text-boxes">`;
					
					i += 2;
					
					words = lines[i].split(" ");
					
					while (words[0] !== "!end-text-boxes")
					{
						lines[i] = this.get_text_box(words);
						
						i += 2;
						
						words = lines[i].split(" ");
					}
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!begin-text-buttons")
				{
					lines[i] = `<div class="text-buttons">`;
					
					i += 2;
					
					let first = true;
					
					words = lines[i].split(" ");
					
					while (words[0] !== "!end-text-buttons")
					{
						lines[i] = this.get_text_button(words, first);
						
						i += 2;
						
						words = lines[i].split(" ");
						
						first = false;
					}
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!begin-sliders")
				{
					lines[i] = `<div class="sliders">`;
					
					i += 2;
					
					words = lines[i].split(" ");
					
					while (words[0] !== "!end-sliders")
					{
						lines[i] = this.get_slider(words);
						
						i += 2;
						
						words = lines[i].split(" ");
					}
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!begin-dropdown")
				{
					lines[i] = `<div class="text-buttons">`;
					
					i += 2;
					
					words = lines[i].split(" ");
					
					let args = [];
					
					while (words[0] !== "!end-dropdown")
					{
						args.push(words);
						
						lines[i] = "";
						
						i += 2;
						
						words = lines[i].split(" ");
					}
						
					lines[i] = `${this.get_dropdown(args)}`;
				}
				
				
				
				else if (words[0] === "!begin-def")
				{
					lines[i] = `<div class="notes-def" data-aos="fade-in">`;
					
					i += 2;
					
					words = [`<span class="notes-def-title">Definition: ${lines[i]}</span>`];
					
					lines[i] = this.get_text(["b", "j"].concat(words));
					
					
					
					while (words[0] !== "!end-def")
					{
						i += 2;
						
						
						
						if (lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$")
						{
							lines[i] = `<div data-aos="fade-up"><p class="body-text">$$`;
						
							i++;
							
							while (!(lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$"))
							{
								i++;
							}
							
							lines[i] = `$$</p></div>`;
							
							continue;
						}
						
						
						
						words = lines[i].split(" ");
						
						lines[i] = this.get_text(["b", "j"].concat(words));
					}
					
					
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!begin-example")
				{
					lines[i] = `<div class="notes-example" data-aos="fade-in">`;
					
					i += 2;
					
					words = [`<span class="notes-example-title">Example: ${lines[i]}</span>`];
					
					lines[i] = this.get_text(["b", "j"].concat(words));
					
					
					
					while (words[0] !== "!end-example")
					{
						i += 2;
						
						
						
						if (lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$")
						{
							lines[i] = `<div data-aos="fade-up"><p class="body-text">$$`;
						
							i++;
							
							while (!(lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$"))
							{
								i++;
							}
							
							lines[i] = `$$</p></div>`;
							
							continue;
						}
						
						
						
						words = lines[i].split(" ");
						
						lines[i] = this.get_text(["b", "j"].concat(words));
					}
					
					
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!begin-prop")
				{
					lines[i] = `<div class="notes-prop" data-aos="fade-in">`;
					
					i += 2;
					
					words = [`<span class="notes-prop-title">Proposition: ${lines[i]}</span>`];
					
					lines[i] = this.get_text(["b", "j"].concat(words));
					
					
					
					while (words[0] !== "!end-prop")
					{
						i += 2;
						
						
						
						if (lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$")
						{
							lines[i] = `<div data-aos="fade-up"><p class="body-text">$$`;
						
							i++;
							
							while (!(lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$"))
							{
								i++;
							}
							
							lines[i] = `$$</p></div>`;
							
							continue;
						}
						
						
						
						words = lines[i].split(" ");
						
						lines[i] = this.get_text(["b", "j"].concat(words));
					}
					
					
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!begin-thm")
				{
					lines[i] = `<div class="notes-thm" data-aos="fade-in">`;
					
					i += 2;
					
					words = [`<span class="notes-thm-title">Theorem: ${lines[i]}</span>`];
					
					lines[i] = this.get_text(["b", "j"].concat(words));
					
					
					
					while (words[0] !== "!end-thm")
					{
						i += 2;
						
						
						
						if (lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$")
						{
							lines[i] = `<div data-aos="fade-up"><p class="body-text">$$`;
						
							i++;
							
							while (!(lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$"))
							{
								i++;
							}
							
							lines[i] = `$$</p></div>`;
							
							continue;
						}
						
						
						
						words = lines[i].split(" ");
						
						lines[i] = this.get_text(["b", "j"].concat(words));
					}
					
					
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!begin-proof")
				{
					lines[i] = `<div class="notes-proof" data-aos="fade-in"><span class="notes-proof-title">Proof</span>`;
					
					
					
					while (words[0] !== "!end-proof")
					{
						i += 2;
						
						
						
						if (lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$")
						{
							lines[i] = `<div data-aos="fade-up"><p class="body-text">$$`;
						
							i++;
							
							while (!(lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$"))
							{
								i++;
							}
							
							lines[i] = `$$</p></div>`;
							
							continue;
						}
						
						
						
						words = lines[i].split(" ");
						
						lines[i] = this.get_text(["b", "j"].concat(words));
					}
					
					
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!begin-comment")
				{
					lines[i] = `<div class="notes-comment" data-aos="fade-in"><span class="notes-comment-title">Comment</span><p></p><br>`;
					
					
					
					while (words[0] !== "!end-comment")
					{
						i += 2;
						
						
						
						if (lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$")
						{
							lines[i] = `<div data-aos="fade-up"><p class="body-text">$$`;
						
							i++;
							
							while (!(lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$"))
							{
								i++;
							}
							
							lines[i] = `$$</p></div>`;
							
							continue;
						}
						
						
						
						words = lines[i].split(" ");
						
						lines[i] = this.get_text(["b", "j"].concat(words));
					}
					
					
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!begin-cor")
				{
					lines[i] = `<div class="notes-cor" data-aos="fade-in">`;
					
					i += 2;
					
					words = [`<span class="notes-cor-title">Corollary: ${lines[i]}</span>`];
					
					lines[i] = this.get_text(["b", "j"].concat(words));
					
					
					
					while (words[0] !== "!end-cor")
					{
						i += 2;
						
						
						
						if (lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$")
						{
							lines[i] = `<div data-aos="fade-up"><p class="body-text">$$`;
						
							i++;
							
							while (!(lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$"))
							{
								i++;
							}
							
							lines[i] = `$$</p></div>`;
							
							continue;
						}
						
						
						
						words = lines[i].split(" ");
						
						lines[i] = this.get_text(["b", "j"].concat(words));
					}
					
					
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!begin-lemma")
				{
					lines[i] = `<div class="notes-lemma" data-aos="fade-in">`;
					
					i += 2;
					
					words = [`<span class="notes-lemma-title">Lemma: ${lines[i]}</span>`];
					
					lines[i] = this.get_text(["b", "j"].concat(words));
					
					
					
					while (words[0] !== "!end-lemma")
					{
						i += 2;
						
						
						
						if (lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$")
						{
							lines[i] = `<div data-aos="fade-up"><p class="body-text">$$`;
						
							i++;
							
							while (!(lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$"))
							{
								i++;
							}
							
							lines[i] = `$$</p></div>`;
							
							continue;
						}
						
						
						
						words = lines[i].split(" ");
						
						lines[i] = this.get_text(["b", "j"].concat(words));
					}
					
					
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!begin-axiom")
				{
					lines[i] = `<div class="notes-axiom" data-aos="fade-in">`;
					
					i += 2;
					
					words = [`<span class="notes-axiom-title">Axiom: ${lines[i]}</span>`];
					
					lines[i] = this.get_text(["b", "j"].concat(words));
					
					
					
					while (words[0] !== "!end-axiom")
					{
						i += 2;
						
						
						
						if (lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$")
						{
							lines[i] = `<div data-aos="fade-up"><p class="body-text">$$`;
						
							i++;
							
							while (!(lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$"))
							{
								i++;
							}
							
							lines[i] = `$$</p></div>`;
							
							continue;
						}
						
						
						
						words = lines[i].split(" ");
						
						lines[i] = this.get_text(["b", "j"].concat(words));
					}
					
					
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!begin-exercise")
				{
					lines[i] = `<div class="notes-exercise" data-aos="fade-in">`;
					
					i += 2;
					
					words = [`<span class="notes-exercise-title">Exercise: ${lines[i]}</span>`];
					
					lines[i] = this.get_text(["b", "j"].concat(words));
					
					
					
					while (words[0] !== "!end-exercise")
					{
						i += 2;
						
						
						
						if (lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$")
						{
							lines[i] = `<div data-aos="fade-up"><p class="body-text">$$`;
						
							i++;
							
							while (!(lines[i].length === 2 && lines[i][0] === "$" && lines[i][1] === "$"))
							{
								i++;
							}
							
							lines[i] = `$$</p></div>`;
							
							continue;
						}
						
						
						
						words = lines[i].split(" ");
						
						lines[i] = this.get_text(["b", "j"].concat(words));
					}
					
					
					
					lines[i] = `</div>`;
				}
				
				
				
				else if (words[0] === "!checkbox")
				{
					lines[i] = this.get_checkbox(words.slice(1));
				}
				
				
				
				else if (words[0] === "!radio-button")
				{
					lines[i] = this.get_radio_button(words.slice(1));
				}
				
				
				
				else if (words[0] === "!canvas")
				{
					lines[i] = this.get_canvas();
				}
				
				
				
				else if (words[0] === "!iframe")
				{
					lines[i] = this.get_iframe(words.slice(1));
				}
				
				
				
				else if (words[0] === "!line-break")
				{
					lines[i] = this.get_line_break();
				}
			}
		}
		
		
		
		html = lines.join("\n");
		
		return html;
	}
};
"use strict";



Page.Footer =
{
	load: function()
	{
		let delay = Site.aos_separation_time;
		
		
		
		let url_vars_suffix = Page.Navigation.concat_url_vars();

		let first_link_string = " new-aos-section";
		
		
		
		if (!("footer_exclusion" in Page.settings && Page.settings["footer_exclusion"] !== ""))
		{
			Page.element.querySelector("#spawn-footer").insertAdjacentHTML("afterend", `
				<nav class="footer-image-links footer-image-links-big"></nav>
			`);
		}
		
		else
		{
			Page.element.querySelector("#spawn-footer").insertAdjacentHTML("afterend", `
				<nav class="footer-image-links"></nav>
			`);
		}
		
		
		
		if (!("footer_exclusion" in Page.settings && Page.settings["footer_exclusion"] === "gallery"))
		{
			let element = document.createElement("div");
			
			Page.element.querySelector(".footer-image-links").appendChild(element);
			
			element.outerHTML = `
				<div id="gallery-link" class="footer-image-link${first_link_string}" data-aos="zoom-out" data-aos-delay="${delay}" data-aos-offset="0">
					<a class="focus-on-child" href="index.html?page=%2Fgallery%2Fgallery.html${url_vars_suffix}" tabindex="-1">
						<img onclick="Page.Navigation.redirect('/gallery/gallery.html')" src="/gallery/cover.${Page.Images.file_extension}" alt="Gallery" tabindex="2"></img>
					</a>
					
					<p class="footer-image-link-subtext">Gallery</p>
				</div>
			`;
			
			first_link_string = "";
			
			delay += Site.aos_separation_time;
		}
		
		
		
		if  (!("footer_exclusion" in Page.settings && Page.settings["footer_exclusion"] === "applets"))
		{
			let element = document.createElement("div");
			
			Page.element.querySelector(".footer-image-links").appendChild(element);
			
			element.outerHTML = `
				<div id="applets-link" class="footer-image-link${first_link_string}" data-aos="zoom-out" data-aos-delay="${delay}" data-aos-offset="0">
					<a class="focus-on-child" href="index.html?page=%2Fapplets%2Fapplets.html${url_vars_suffix}" tabindex="-1">
						<img onclick="Page.Navigation.redirect('/applets/applets.html')" src="/applets/cover.${Page.Images.file_extension}" alt="Applets" tabindex="2"></img>
					</a>
					
					<p class="footer-image-link-subtext">Applets</p>
				</div>
			`;
			
			first_link_string = "";
			
			delay += Site.aos_separation_time;
		}
				
				
		
		if (!("footer_exclusion" in Page.settings && Page.settings["footer_exclusion"] === "writing"))
		{
			let element = document.createElement("div");
			
			Page.element.querySelector(".footer-image-links").appendChild(element);
			
			element.outerHTML = `
				<div id="writing-link" class="footer-image-link" data-aos="zoom-out" data-aos-delay="${delay}" data-aos-offset="0">
					<a href="/index.html?page=%2Fwriting%2Fwriting.html${url_vars_suffix}" tabindex="-1">
						<img onclick="Page.Navigation.redirect('/writing/writing.html')" src="/writing/cover.${Page.Images.file_extension}" alt="Writing" tabindex="2"></img>
					</a>
					
					<p class="footer-image-link-subtext">Writing</p>
				</div>
			`;
			
			delay += Site.aos_separation_time;
		}
		
		
		
		if  (!("footer_exclusion" in Page.settings && Page.settings["footer_exclusion"] === "teaching"))
		{
			let element = document.createElement("div");
			
			Page.element.querySelector(".footer-image-links").appendChild(element);
			
			element.outerHTML = `
				<div id="teaching-link" class="footer-image-link" data-aos="zoom-out" data-aos-delay="${delay}" data-aos-offset="0">
					<a class="focus-on-child" href="/index.html?page=%2Fteaching%2Fteaching.html${url_vars_suffix}" tabindex="-1">
						<img onclick="Page.Navigation.redirect('/teaching/teaching.html')" src="/teaching/cover.${Page.Images.file_extension}" alt="Teaching" tabindex="2"></img>
					</a>
					
					<p class="footer-image-link-subtext">Teaching</p>
				</div>
			`;
			
			delay += Site.aos_separation_time;
		}
		
		
		
		if  (!("footer_exclusion" in Page.settings && Page.settings["footer_exclusion"] === "bio"))
		{
			let element = document.createElement("div");
			
			Page.element.querySelector(".footer-image-links").appendChild(element);
			
			element.outerHTML = `
				<div id="bio-link" class="footer-image-link" data-aos="zoom-out" data-aos-delay="${delay}" data-aos-offset="0">
					<a class="focus-on-child" href="/index.html?page=%2Fbio%2Fbio.html${url_vars_suffix}" tabindex="-1">
						<img onclick="Page.Navigation.redirect('/bio/bio.html')" src="/bio/cover.${Page.Images.file_extension}" alt="Me" tabindex="2"></img>
					</a>
					
					<p class="footer-image-link-subtext">Me</p>
				</div>
			`;
			
			delay += Site.aos_separation_time;
		}
		
		
		
		//If the page isn't as tall as the screen (e.g. the 404 page), move the footer to the bottom of the page.
		if (Page.element.clientHeight < Page.Layout.window_height)
		{
			Page.element.querySelector("#spawn-footer").insertAdjacentHTML("beforebegin", `
				<div style="height: ${Page.Layout.window_height - document.body.clientHeight}px"></div>
			`);
		}
		
		
		
		setTimeout(() =>
		{
			let elements = Page.element.querySelectorAll("#gallery-link img, #applets-link img, #writing-link img, #teaching-link img, #bio-link img");
			
			for (let i = 0; i < elements.length; i++)
			{
				elements[i].addEventListener("mouseenter", () =>
				{
					if (!(Site.Interaction.currently_touch_device))
					{
						elements[i].parentNode.parentNode.lastElementChild.style.marginTop = "-32px";
						elements[i].parentNode.parentNode.lastElementChild.style.opacity = 1;
					}
				});
				
				elements[i].addEventListener("mouseleave", () =>
				{
					if (!(Site.Interaction.currently_touch_device))
					{
						elements[i].parentNode.parentNode.lastElementChild.style.marginTop = 0;
						elements[i].parentNode.parentNode.lastElementChild.style.opacity = 0;
					}
				});
			}
		}, 10);
		
		
		
		//If we restored a scroll position that was supposed to be in the footer, we won't be able to properly restore that until now.
		if (Page.scroll > 0)
		{
			window.scrollTo(0, Page.scroll);
		}
	},
	
	
	
	Floating:
	{
		is_visible: false,
		
		last_scroll: -1,
		
		scroll_direction: 0,
		
		current_offset: -43.75,
		
		currently_animating: false,
		
		menu_is_open: false,
		
		image_links_is_open: false,
		
		settings_is_open: false,
		
		timeout_id_1: null,
		timeout_id_2: null,
		
		
		
		show_footer_menu_button: null,
		
		settings_button: null,
		sitemap_button: null,
		about_button: null,
		debug_button: null,
		
		gallery_link: null,
		applets_link: null,
		writing_link: null,
		teaching_link: null,
		bio_link: null,
		
		theme_button: null,
		contrast_button: null,
		text_size_button: null,
		font_button: null,
		content_animation_button: null,
		
		
		
		//Initializes the floating footer.
		load: function()
		{
			let floating_footer_element = document.createElement("footer");
			floating_footer_element.id = "floating-footer";
			
			document.body.insertBefore(floating_footer_element, document.body.firstChild);
			
			
			
			let debug_html = "";
			
			if (DEBUG)
			{
				debug_html = `
					<div id="debug-button" class="footer-menu-button focus-on-child" tabindex="104">
						<input type="image" class="footer-button" src="/graphics/button-icons/bug.png" alt="Debug" onclick="Page.Navigation.redirect('/debug/debug.html')" tabindex="-1">
					</div>
				`;
			}
			
			
			
			floating_footer_element.innerHTML = `
				<div class="footer-buttons">
					<div id="show-footer-menu-button" class="footer-menu-button focus-on-child" tabindex="100">
						<input type="image" class="footer-button" src="/graphics/button-icons/chevron.png" alt="Options" onclick="Page.Footer.Floating.show_menu()" tabindex="-1">
					</div>
					
					
					
					${debug_html}
					
					<div id="about-button" class="footer-menu-button focus-on-child" tabindex="103">
						<input type="image" class="footer-button" src="/graphics/button-icons/question.png" alt="About" onclick="Page.Navigation.redirect('/about/about.html')" tabindex="-1">
					</div>
					
					<div id="sitemap-button" class="footer-menu-button focus-on-child" tabindex="102">
						<input type="image" class="footer-button" src="/graphics/button-icons/sitemap.png" alt="Options" onclick="Page.Footer.Floating.show_image_links()" tabindex="-1">
					</div>
					
					<div id="settings-button" class="footer-menu-button focus-on-child" tabindex="101">
						<input type="image" class="footer-button" src="/graphics/button-icons/gear.png" alt="Options" onclick="Page.Footer.Floating.show_settings()" tabindex="-1">
					</div>
					
					
					
					<div id="floating-footer-gallery-link" class="image-link footer-menu-image-link" style="width: 39px; position: absolute; left: -40px; bottom: 6.25px">
						<a href="/gallery/gallery.html" tabindex="-1">
							<img onclick="Page.Navigation.redirect('/gallery/gallery.html')" src="/gallery/cover.${Page.Images.file_extension}" alt="Gallery" tabindex="1"></img>
						</a>
					</div>
					
					<div id="floating-footer-applets-link" class="image-link footer-menu-image-link" style="width: 39px; position: absolute; left: -40px; bottom: 55.25px">
						<a href="/applets/applets.html" tabindex="-1">
							<img onclick="Page.Navigation.redirect('/applets/applets.html')" src="/applets/cover.${Page.Images.file_extension}" alt="Applets" tabindex="1"></img>
						</a>
					</div>
					
					<div id="floating-footer-writing-link" class="image-link footer-menu-image-link" style="width: 39px; position: absolute; left: -40px; bottom: 104.25px">
						<a href="/writing/writing.html" tabindex="-1">
							<img onclick="Page.Navigation.redirect('/writing/writing.html')" src="/writing/cover.${Page.Images.file_extension}" alt="Writing" tabindex="1"></img>
						</a>
					</div>
					
					<div id="floating-footer-teaching-link" class="image-link footer-menu-image-link" style="width: 39px; position: absolute; left: -40px; bottom: 153.25px">
						<a href="/teaching/teaching.html" tabindex="-1">
							<img onclick="Page.Navigation.redirect('/teaching/teaching.html')" src="/teaching/cover.${Page.Images.file_extension}" alt="Teaching" tabindex="1"></img>
						</a>
					</div>
					
					<div id="floating-footer-bio-link" class="image-link footer-menu-image-link" style="width: 39px; position: absolute; left: -40px; bottom: 202.25px">
						<a href="/bio/bio.html" tabindex="-1">
							<img onclick="Page.Navigation.redirect('/bio/bio.html')" src="/bio/cover.${Page.Images.file_extension}" alt="Me" tabindex="1"></img>
						</a>
					</div>
					
					
					
					<p id="settings-text" class="body-text" style="opacity: 0"></p>
					
					<div id="content-animation-button" class="footer-menu-button focus-on-child" tabindex="101">
						<input type="image" class="footer-button" src="/graphics/button-icons/pop.png" alt="Content animation" onclick="Site.Settings.toggle('content_animation')" tabindex="-1">
					</div>
					
					<div id="font-button" class="footer-menu-button focus-on-child" tabindex="101">
						<input type="image" class="footer-button" src="/graphics/button-icons/font.png" alt="Font" onclick="Site.Settings.toggle('font')" tabindex="-1">
					</div>
					
					<div id="text-size-button" class="footer-menu-button focus-on-child" tabindex="101">
						<input type="image" class="footer-button" src="/graphics/button-icons/text-size.png" alt="Text size" onclick="Site.Settings.toggle('text_size')" tabindex="-1">
					</div>
					
					<div id="contrast-button" class="footer-menu-button focus-on-child" tabindex="102">
						<input type="image" class="footer-button" src="/graphics/button-icons/contrast.png" alt="Contrast" onclick="Site.Settings.toggle('contrast')" tabindex="-1">
					</div>
					
					<div id="theme-button" class="footer-menu-button focus-on-child" tabindex="103">
						<input type="image" class="footer-button" src="/graphics/button-icons/moon.png" alt="About" onclick="Site.Settings.toggle('theme')" tabindex="-1">
					</div>
				</div>
			`;
			
			
			
			setTimeout(() =>
			{
				this.show_footer_menu_button = floating_footer_element.querySelector("#show-footer-menu-button");
				this.show_footer_menu_button.style.bottom = "6.25px";
				
				this.settings_button = floating_footer_element.querySelector("#settings-button");
				this.sitemap_button = floating_footer_element.querySelector("#sitemap-button");
				this.about_button = floating_footer_element.querySelector("#about-button");
				
				this.gallery_link = floating_footer_element.querySelector("#floating-footer-gallery-link");
				this.applets_link = floating_footer_element.querySelector("#floating-footer-applets-link");
				this.writing_link = floating_footer_element.querySelector("#floating-footer-writing-link");
				this.teaching_link = floating_footer_element.querySelector("#floating-footer-teaching-link");
				this.bio_link = floating_footer_element.querySelector("#floating-footer-bio-link");
				
				this.theme_button = floating_footer_element.querySelector("#theme-button");
				this.contrast_button = floating_footer_element.querySelector("#contrast-button");
				this.text_size_button = floating_footer_element.querySelector("#text-size-button");
				this.font_button = floating_footer_element.querySelector("#font-button");
				this.content_animation_button = floating_footer_element.querySelector("#content-animation-button");
				
				let elements = [this.show_footer_menu_button, this.settings_button, this.sitemap_button, this.about_button, this.gallery_link, this.applets_link, this.writing_link, this.teaching_link, this.bio_link, this.theme_button, this.contrast_button, this.text_size_button, this.font_button, this.content_animation_button];
				
				if (DEBUG)
				{
					this.debug_button = floating_footer_element.querySelector("#debug-button");
					
					elements.push(this.debug_button);
				}
				
				for (let i = 0; i < elements.length; i++)
				{
					Page.Load.HoverEvents.add_with_scale(elements[i], 1.1);
				}
			}, Site.opacity_animation_time / 6);
			
			
			
			this.last_scroll = window.scrollY;
			
			this.current_offset = 6.25;
			
			this.is_visible = true;
		},
		
		
		
		show_menu: function()
		{
			this.settings_button.style.left = "10px";
			
			Page.Animate.change_opacity(this.show_footer_menu_button, 0, Site.opacity_animation_time);
			
			setTimeout(() =>
			{
				this.sitemap_button.style.left = "10px";
				
				setTimeout(() =>
				{
					this.about_button.style.left = "10px";
					
					
					if (DEBUG)
					{
						setTimeout(() =>
						{
							this.debug_button.style.left = "10px";
							
							this.menu_is_open = true;
						}, Site.opacity_animation_time / 6);
					}
					
					else
					{
						this.menu_is_open = true;
					}
				}, Site.opacity_animation_time / 6);
			}, Site.opacity_animation_time / 6);
			
			
			
			let bound_function = this.hide_menu.bind(this);
			
			document.documentElement.addEventListener("touchstart", bound_function);
			document.documentElement.addEventListener("touchmove", bound_function);
			document.documentElement.addEventListener("mousedown", bound_function);
			
			Page.temporary_handlers["touchstart"].push(bound_function);
			Page.temporary_handlers["touchmove"].push(bound_function);
			Page.temporary_handlers["mousedown"].push(bound_function);
		},
		
		
		
		hide_menu: function(e)
		{
			if (!this.menu_is_open)
			{
				return;
			}
			
			
			
			let x = 0;
			let y = 0;
			
			
			
			try
			{
				x = e.clientX;
				y = e.clientY;
			}
			
			catch(ex) {}
			
			
			
			try
			{
				x = e.touches[0].clientX;
				y = e.touches[0].clientY;
			}
			
			catch(ex) {}
			
			
			
			if (document.elementFromPoint(x, y).parentNode.classList.contains("footer-menu-button"))
			{
				return;
			}
			
			
			
			this.settings_button.style.left = "-40px";
			
			if (!this.image_links_is_open)
			{
				Page.Animate.change_opacity(this.show_footer_menu_button, 1, Site.opacity_animation_time);
			}
			
			setTimeout(() =>
			{
				this.sitemap_button.style.left = "-40px";
				
				setTimeout(() =>
				{
					this.about_button.style.left = "-40px";
					
					if (DEBUG)
					{
						setTimeout(() =>
						{
							this.debug_button.style.left = "-40px";
							
							this.menu_is_open = false;
						}, Site.opacity_animation_time / 6);
					}
					
					else
					{
						this.menu_is_open = false;
					}
					
					setTimeout(() =>
					{
						//This is called when showing the image links, so we might need to reset the opacity.
						Page.Animate.change_opacity(this.settings_button, 1, Site.opacity_animation_time);
						Page.Animate.change_opacity(this.sitemap_button, 1, Site.opacity_animation_time);
						Page.Animate.change_opacity(this.about_button, 1, Site.opacity_animation_time);
						
						if (DEBUG)
						{
							Page.Animate.change_opacity(this.debug_button, 1, Site.opacity_animation_time);
						}
					}, Site.opacity_animation_time);
				}, Site.opacity_animation_time / 6);
			}, Site.opacity_animation_time / 6);
		},
		
		
		
		show_image_links: function()
		{
			this.gallery_link.style.left = "10px";
			
			Page.Animate.change_opacity(this.settings_button, 0, Site.opacity_animation_time);
			
			setTimeout(() =>
			{
				this.applets_link.style.left = "10px";
				
				Page.Animate.change_opacity(this.sitemap_button, 0, Site.opacity_animation_time);
				
				setTimeout(() =>
				{
					this.writing_link.style.left = "10px";
					
					Page.Animate.change_opacity(this.about_button, 0, Site.opacity_animation_time);
					
					setTimeout(() =>
					{
						this.teaching_link.style.left = "10px";
						
						setTimeout(() =>
						{
							this.bio_link.style.left = "10px";
							
							this.image_links_is_open = true;
							
							setTimeout(() =>
							{
								this.hide_menu();
							}, Site.opacity_animation_time);
						}, Site.opacity_animation_time / 6);
					}, Site.opacity_animation_time / 6);
				}, Site.opacity_animation_time / 6);
			}, Site.opacity_animation_time / 6);
			
			
			
			let bound_function = this.hide_image_links.bind(this);
			
			document.documentElement.addEventListener("touchstart", bound_function);
			document.documentElement.addEventListener("touchmove", bound_function);
			document.documentElement.addEventListener("mousedown", bound_function);
			
			Page.temporary_handlers["touchstart"].push(bound_function);
			Page.temporary_handlers["touchmove"].push(bound_function);
			Page.temporary_handlers["mousedown"].push(bound_function);
		},
		
		
		
		hide_image_links: function(e)
		{
			if (!this.image_links_is_open)
			{
				return;
			}
			
			
			
			let x = 0;
			let y = 0;
			
			
			
			try
			{
				x = e.clientX;
				y = e.clientY;
			}
			
			catch(ex) {}
			
			
			
			try
			{
				x = e.touches[0].clientX;
				y = e.touches[0].clientY;
			}
			
			catch(ex) {}
			
			
			
			if (document.elementFromPoint(x, y).parentNode.parentNode.classList.contains("footer-menu-image-link"))
			{
				return;
			}
			
			
			
			this.gallery_link.style.left = "-40px";
			
			setTimeout(() =>
			{
				this.applets_link.style.left = "-40px";
				
				//This one looks better with a slight delay.
				Page.Animate.change_opacity(this.show_footer_menu_button, 1, Site.opacity_animation_time);
				
				setTimeout(() =>
				{
					this.writing_link.style.left = "-40px";
					
					setTimeout(() =>
					{
						this.teaching_link.style.left = "-40px";
						
						setTimeout(() =>
						{
							this.bio_link.style.left = "-40px";
							
							this.image_links_is_open = false;
						}, Site.opacity_animation_time / 6);
					}, Site.opacity_animation_time / 6);
				}, Site.opacity_animation_time / 6);
			}, Site.opacity_animation_time / 6);
		},
		
		
		
		show_settings: function()
		{
			this.theme_button.style.left = "10px";
			
			Page.Animate.change_opacity(this.settings_button, 0, Site.opacity_animation_time);
			
			setTimeout(() =>
			{
				this.contrast_button.style.left = "10px";
			
				Page.Animate.change_opacity(this.sitemap_button, 0, Site.opacity_animation_time);
				
				setTimeout(() =>
				{
					this.text_size_button.style.left = "10px";
				
					Page.Animate.change_opacity(this.about_button, 0, Site.opacity_animation_time);
					
					setTimeout(() =>
					{
						this.font_button.style.left = "10px";
						
						setTimeout(() =>
						{
							this.content_animation_button.style.left = "10px";
							
							this.settings_is_open = true;
							
							setTimeout(() =>
							{
								this.hide_menu();
							}, Site.opacity_animation_time);
						}, Site.opacity_animation_time / 6);
					}, Site.opacity_animation_time / 6);
				}, Site.opacity_animation_time / 6);
			}, Site.opacity_animation_time / 6);
			
			
			
			let bound_function = this.hide_settings.bind(this);
			
			document.documentElement.addEventListener("touchstart", bound_function);
			document.documentElement.addEventListener("touchmove", bound_function);
			document.documentElement.addEventListener("mousedown", bound_function);
			
			Page.temporary_handlers["touchstart"].push(bound_function);
			Page.temporary_handlers["touchmove"].push(bound_function);
			Page.temporary_handlers["mousedown"].push(bound_function);
		},
		
		
		
		hide_settings: function(e)
		{
			if (!this.settings_is_open)
			{
				return;
			}
			
			
			
			let x = 0;
			let y = 0;
			
			
			
			try
			{
				x = e.clientX;
				y = e.clientY;
			}
			
			catch(ex) {}
			
			
			
			try
			{
				x = e.touches[0].clientX;
				y = e.touches[0].clientY;
			}
			
			catch(ex) {}
			
			
			
			if (document.elementFromPoint(x, y).parentNode.classList.contains("footer-menu-button"))
			{
				return;
			}
			
			
			
			this.theme_button.style.left = "-40px";
			
			Page.Animate.change_opacity(this.show_footer_menu_button, 1, Site.opacity_animation_time);
			
			setTimeout(() =>
			{
				this.contrast_button.style.left = "-40px";
				
				setTimeout(() =>
				{
					this.text_size_button.style.left = "-40px";
					
					setTimeout(() =>
					{
						this.font_button.style.left = "-40px";
						
						setTimeout(() =>
						{
							this.content_animation_button.style.left = "-40px";
							
							this.settings_is_open = false;
						}, Site.opacity_animation_time / 6);
					}, Site.opacity_animation_time / 6);
				}, Site.opacity_animation_time / 6);
			}, Site.opacity_animation_time / 6);
		},
		
		
		
		show_settings_text: function(text)
		{
			let elements = Page.element.querySelectorAll(".settings-text-container");
			
			for (let i = 0; i < elements.length; i++)
			{
				Page.Animate.change_opacity(elements[i], 0, 1.5 * Site.base_animation_time);
				Page.Animate.change_scale(elements[i], .9, 1.5 * Site.base_animation_time);
			}
			
			
			
			let element = document.createElement("div");
			
			element.classList.add("settings-text-container");
			
			element.style.opacity = 0;
			element.style.transform = "scale(1.1)";
			
			Page.element.appendChild(element);
			
			
			
			let element_2 = document.createElement("p");
			
			element_2.classList.add("settings-text");
			
			element_2.classList.add("body-text");
			
			element_2.textContent = text;
			
			element.appendChild(element_2);
			
			
			
			setTimeout(() =>
			{
				Page.Animate.change_opacity(element, 1, 1.5 * Site.base_animation_time);
				Page.Animate.change_scale(element, 1, 1.5 * Site.base_animation_time);
				
				setTimeout(() =>
				{
					Page.Animate.change_opacity(element, 0, 1.5 * Site.base_animation_time);
					Page.Animate.change_scale(element, .9, 1.5 * Site.base_animation_time);
					
					setTimeout(() =>
					{
						element.remove();
					}, Site.opacity_animation_time * 2);
				}, Site.opacity_animation_time * 8);
			}, 10);
		}
	}
};
"use strict";



Page.Images =
{
	//Whether the browser supports WebP images or not. Given a boolean value when decided.
	webp_support: null,
	
	file_extension: "",



	//Uses Modernizr to determine if WebP works or not. Returns a promise for when it's done.
	check_webp_support: function()
	{
		return new Promise((resolve, reject) =>
		{
			Site.load_script("/scripts/modernizr-webp.min.js")
			
			.then(() =>
			{
				Modernizr.on("webp", (result) =>
				{
					if (result)
					{
						this.webp_support = true;
						this.file_extension = "webp";
					}
					
					else
					{
						this.webp_support = false;
						this.file_extension = "jpg";
					}
					
					resolve();
				});
			})
			
			.catch((error) =>
			{
				console.error("Could not load Modernizr");
				
				this.webp_support = false;
				this.file_extension = "jpg";
				
				resolve();
			});
		});
	},
	
	
	
	add_extensions: function()
	{
		let elements = Page.element.querySelectorAll(".check-webp");
		
		for (let i = 0; i < elements.length; i++)
		{
			elements[i].src += this.file_extension;
		}
	}
};
"use strict";



Page.Layout =
{
	layout_string: "",
	
	old_layout_string: "",
	
	

	window_width: 0,
	window_height: 0,
	aspect_ratio: 1,
	
	new_window_width: 0,
	new_window_height: 0,
	
	
	
	window_width_step_distance: 0,
	window_height_step_distance: 0,
	
	resize_time: 0,
	
	
	
	on_resize: function()
	{
		//Everything here can be done immediately.
		this.new_window_width = window.innerWidth;
		this.new_window_height = window.innerHeight;
		
		this.aspect_ratio = this.new_window_width / this.new_window_height;
		
		this.old_layout_string = this.layout_string;
		
		if (this.new_window_width / this.new_window_height < 9/16 || this.new_window_width <= 700)
		{
			this.layout_string = "compact";
		}
		
		else if (this.new_window_width / this.new_window_height > 16/9 || this.new_window_width >= 1400)
		{
			this.layout_string = "ultrawide";
		}
		
		else
		{
			this.layout_string = "default";
		}
		
		
		
		if (this.old_layout_string !== this.layout_string && "small_margins_on_ultrawide" in Page.settings && Page.settings["small_margins_on_ultrawide"])
		{
			Site.Settings.reduce_page_margins();
		}
		
		
		
		if (this.old_layout_string !== this.layout_string && this.layout_string === "ultrawide")
		{
			this.Multicols.create();
		}
		
		else if (this.old_layout_string !== this.layout_string && this.old_layout_string === "ultrawide")
		{
			this.Multicols.remove();
		}
		
		
		
		if (this.aspect_ratio > 1 && !this.AppletColumns.are_equalized)
		{
			setTimeout(this.AppletColumns.equalize, 100);
		}
		
		else if (this.aspect_ratio < 1 && this.AppletColumns.are_equalized)
		{
			setTimeout(this.AppletColumns.remove, 100)
		}	
		
		
		
		for (let i = 0; i < this.Multicols.texts.length; i++)
		{
			this.Multicols.texts[i].style.marginLeft = this.Multicols.reference.getBoundingClientRect().left + "px";
			this.Multicols.image_links[i].style.marginLeft = this.Multicols.reference.getBoundingClientRect().left + "px";
		}
		
		
		
		let elements = Page.element.querySelectorAll("iframe");
		
		for (let i = 0; i < elements.length; i++)
		{
			elements[i].style.height = `${elements[i].offsetWidth - 8}px`;
		}
		
		
		
		if (this.aspect_ratio < 1)
		{
			Page.Banner.file_name = "portrait." + Page.Images.file_extension;
		}
		
		else
		{
			Page.Banner.file_name = "landscape." + Page.Images.file_extension;
		}
		
		
		
		//The banner opacity is the big sticking point, though. The solution is to increase the window height slowly and fire scroll events in rapid succession.
		this.resize_time = 0;
		
		this.window_width_step_distance = (this.new_window_height - this.window_height) * (8 / Site.opacity_animation_time);
		this.window_height_step_distance = (this.new_window_height - this.window_height) * (8 / Site.opacity_animation_time);
		
		let refresh_id = setInterval(() =>
		{
			this.resize_step();
			
			if (this.resize_time >= Site.opacity_animation_time)
			{
				clearInterval(refresh_id);
				
				this.window_width = this.new_window_width;
				this.window_height = this.new_window_height;
				
				Page.Banner.on_scroll(0);
			}
		}, 8);
	},



	resize_step: function()
	{
		this.window_width += this.window_width_step_distance;
		this.window_height += this.window_height_step_distance;
		
		this.resize_time += 8;
		
		Page.Banner.on_scroll(0);
	},



	Multicols:
	{
		active: false,
		
		texts: [],
		image_links: [],
		reference: null,
		
		
		
		create: function()
		{
			if (this.active)
			{
				return;
			}
			
			this.active = true;
			
			
			
			let parents = Page.element.querySelectorAll(".multicol-block");
			
			if (parents.length === 0)
			{
				return;
			}
			
			this.texts = [];
			this.image_links = [];
			
			for (let i = 0; i < parents.length; i++)
			{
				if (parents[i].querySelector(".image-links").children.length <= 3)
				{
					if (i < parents.length - 1 && parents[i + 1].querySelector(".image-links").children.length <= 3)
					{
						let container = document.createElement("div");
						
						container.classList.add("image-links-double-column-container");
						
						parents[i].parentNode.insertBefore(container, parents[i]);
						
						this.reference = parents[i].querySelector(".image-links");
						
						container.appendChild(parents[i]);
						container.appendChild(parents[i + 1]);
						
						let element = parents[i + 1].querySelector(".new-aos-section");
						element.classList.remove("new-aos-section");
						element.classList.add("old-new-aos-section");
						
						i++;
					}
					
					
					
					else if (i >= 1 && parents[i - 1].querySelector(".image-links").children.length <= 3)
					{
						this.texts.push(parents[i].querySelector(".section-text, .heading-text"));
						
						this.image_links.push(parents[i].querySelector(".image-links"));
						
						this.texts[this.texts.length - 1].classList.add("multicol-text");
						this.texts[this.texts.length - 1].style.marginLeft = this.reference.getBoundingClientRect().left + "px";
						
						this.image_links[this.image_links.length - 1].style.gridRowGap = "1.5vw";
						this.image_links[this.image_links.length - 1].style.gridColumnGap = "1.5vw";
						
						this.image_links[this.image_links.length - 1].style.width = "62.5vw";
						this.image_links[this.image_links.length - 1].style.marginLeft = this.reference.getBoundingClientRect().left + "px";
					}
				}
			}
		},



		remove: function()
		{
			if (!this.active)
			{
				return;
			}
			
			this.active = false;
			
			
			
			let containers = Page.element.querySelectorAll(".image-links-double-column-container");
			
			if (containers.length === 0)
			{
				return;
			}
			
			
			
			for (let i = 0; i < this.texts.length; i++)
			{
				this.texts[i].style.marginLeft = "";
				
				
				
				this.image_links[i].style.width = "";
				
				this.image_links[i].style.gridRowGap = "";
				this.image_links[i].style.gridColumnGap = "";
				
				this.image_links[i].style.marginLeft = "";
			}
			
			
			
			this.texts = [];
			this.image_links = [];
			this.reference = null;
			
			
			
			for (let i = 0; i < containers.length; i++)
			{
				//Remove the container but keep the children.
				while (containers[i].firstChild)
				{
					containers[i].parentNode.insertBefore(containers[i].firstChild, containers[i]);
				}
				
				containers[i].remove();
			}
			
			
			
			let elements = Page.element.querySelectorAll(".old-new-aos-section");
			
			for (let i = 0; i < elements.length; i++)
			{
				elements[i].classList.remove("old-new-aos-section");
				elements[i].classList.add("new-aos-section");
			}
		}
	},
	
	
	
	AppletColumns:
	{
		are_equalized: false,
		
		equalize: function()
		{
			let left_column = null;
			let right_column = null;
			
			try
			{
				left_column = Page.element.querySelector("#canvas-landscape-left");
				right_column = Page.element.querySelector("#canvas-landscape-right");
			}
			
			catch(ex) {}
			
			if (left_column === null || right_column === null)
			{
				return;
			}
			
			
			
			let elements = [];
			
			let num_left_children = left_column.children.length;
			let num_right_children = right_column.children.length;
			
			for (let i = 0; i < num_left_children; i++)
			{
				elements.push(left_column.children[i]);
			}
			
			for (let i = 0; i < num_right_children; i++)
			{
				elements.push(right_column.children[i]);
			}
			
			
			
			let height_sums = [elements[0].clientHeight];
			
			for (let i = 1; i < elements.length; i++)
			{
				height_sums.push(height_sums[i - 1] + elements[i].clientHeight);
			}
			
			//Find the midpoint.
			
			let min_height_difference = Infinity;
			
			let midpoint_index = 0;
			
			if (elements.length > 1)
			{
				for (let i = 0; i < elements.length; i++)
				{
					let height_difference = Math.abs(height_sums[i] - (height_sums[height_sums.length - 1] - height_sums[i]));
					
					if (height_difference < min_height_difference)
					{
						min_height_difference = height_difference;
						
						midpoint_index = i + 1;
					}
				}
			}	
			
			
			
			//Move elements around.
			if (midpoint_index < num_left_children)
			{
				for (let i = midpoint_index; i < num_left_children; i++)
				{
					left_column.children[i].classList.add("move-to-right");
				}
				
				let elements_to_move = Page.element.querySelectorAll(".move-to-right");
				
				for (let i = elements_to_move.length - 1; i >= 0; i--)
				{
					right_column.insertBefore(elements_to_move[i], right_column.firstElementChild);
				}
			}
			
			else
			{
				for (let i = 0; i < midpoint_index - num_left_children; i++)
				{
					right_column.children[i].classList.add("move-to-left");
				}
				
				let elements_to_move = Page.element.querySelectorAll(".move-to-left");
				
				for (let i = 0; i < elements_to_move.length; i++)
				{
					left_column.appendChild(elements_to_move[i]);
				}
			}
			
			
			
			this.are_equalized = true;
		},
		
		remove: function()
		{
			let left_column = null;
			let right_column = null;
			
			try
			{
				left_column = Page.element.querySelector("#canvas-landscape-left");
				right_column = Page.element.querySelector("#canvas-landscape-right");
			}
			
			catch(ex) {}
			
			if (left_column === null || right_column === null)
			{
				return;
			}
			
			
			
			let elements_to_move = Page.element.querySelectorAll(".move-to-left");
			
			for (let i = elements_to_move.length - 1; i >= 0; i--)
			{
				right_column.insertBefore(elements_to_move[i], right_column.firstElementChild);
				
				elements_to_move[i].classList.remove("move-to-left");
			}
			
			
			
			elements_to_move = Page.element.querySelectorAll(".move-to-right");
			
			for (let i = 0; i < elements_to_move.length; i++)
			{
				left_column.appendChild(elements_to_move[i]);
				
				elements_to_move[i].classList.remove("move-to-right");
			}
			
			
			
			this.are_equalized = false;
		}
	}
};
"use strict";



let DEBUG = false;


Page.element = null;
Page.last_element = null;

Page.ready_to_show = false;


Page.scroll = 0;

/*
	Defaults:
	
	"title": "",
	
	"banner_page": false,
	"num_banners": 0,
	
	"title_page_text": "",
	"title_page_text_size": .1,
	
	"writing_page": false,
	"math_page": false,
	
	"small_margins_on_ultrawide": false,
	
	"manual_banner": false,
	"manual_dark_theme": false,
	
	"no_footer": false,
	"footer_exclusion": ""
*/

Page.settings = {};

Page.parent_folder = "/";



Page.temporary_handlers =
{
	"scroll": [],
	"resize": [],
	"wheel": [],
	
	"touchstart": [],
	"touchmove": [],
	"touchend": [],
	
	"mousedown": [],
	"mousemove": [],
	"mouseup": [],
	
	"keydown": []
}

Page.temporary_intervals = [];

Page.temporary_web_workers = [];

Page.background_color_changed = false;

Page.using_custom_script = true;

//Sets a whole bunch of elements' styles at once.
Page.set_element_styles = function(query_string, property, value, important = false)
{
	let elements = Page.element.querySelectorAll(query_string);
	
	let priority_string = important ? "important" : "";
	
	for (let i = 0; i < elements.length; i++)
	{
		elements[i].style.setProperty(property, value, priority_string);
	}
}



Site.scripts_loaded =
{
	"mathjax": false,
	"complexjs": false,
	"glsl": false
};
	
Site.last_pages = [];



Site.use_js_animation = false;

Site.base_animation_time = 250;
	
	
	
Site.applet_process_id = 0;
	
	
	
//Redirects to the chosen page and sets up all the miscellaneous things that make the site work.
Site.load = async function(url)
{
	Page.element = document.querySelector(".page");
	
	
	
	Site.use_js_animation = Browser.is_ios();
	
	
	
	if (Site.use_js_animation)
	{
		console.log("Using JS animation");
		
		this.aos_separation_time = this.base_animation_time / 5;
		this.button_animation_time = this.base_animation_time / 2;
		this.opacity_animation_time = this.base_animation_time * .8;
		this.background_color_animation_time = this.base_animation_time * 2;
		this.aos_animation_time = this.base_animation_time * 4;
		
		Page.Animate.change_opacity = Page.Animate.change_opacity_js;
		Page.Animate.change_scale = Page.Animate.change_scale_js;
		Page.Animate.fade_left = Page.Animate.fade_left_js;
		Page.Animate.show_fade_up_section = Page.Animate.show_fade_up_section_js;
		Page.Animate.show_zoom_out_section = Page.Animate.show_zoom_out_section_js;
	}
	
	else
	{
		this.aos_separation_time = this.base_animation_time / 5;
		this.button_animation_time = this.base_animation_time * .45;
		this.opacity_animation_time = this.base_animation_time * .75;
		this.background_color_animation_time = this.base_animation_time * 2;
		this.aos_animation_time = Math.ceil(this.base_animation_time * 3.25 / 50) * 50;
		
		AOS.init({duration: Site.aos_animation_time, once: true, offset: Math.min(100, Page.Layout.window_height / 10)});
		
		Page.Animate.change_opacity = Page.Animate.change_opacity_css;
		Page.Animate.change_scale = Page.Animate.change_scale_css;
		Page.Animate.fade_left = Page.Animate.fade_left_css;
		Page.Animate.show_fade_up_section = Page.Animate.show_fade_up_section_css;
		Page.Animate.show_zoom_out_section = Page.Animate.show_zoom_out_section_css;
	}
	
	
	
	Page.Layout.window_width = window.innerWidth;
	Page.Layout.window_height = window.innerHeight;
	Page.Layout.aspect_ratio = Page.Layout.window_width / Page.Layout.window_height;
	
	window.addEventListener("scroll", () =>
	{
		Page.Banner.on_scroll(0);
		
		Page.Load.AOS.on_scroll();
	});
	
	window.addEventListener("resize", () =>
	{
		Page.Load.AOS.on_resize();
		
		Page.Layout.on_resize();
	});
	
	Page.Load.AOS.on_resize();
	
	
	
	setInterval(() =>
	{
		window.dispatchEvent(new Event("resize"));
	}, 5000);
	
	
	
	Browser.detect();
	
	
	
	Site.Interaction.set_up_listeners();
	
	
	
	if ("scrollRestoration" in history)
	{
		history.scrollRestoration = "manual";
	}
	
	
	
	//When in PWA form, disable text selection and drag-and-drop.
	if (window.matchMedia("(display-mode: standalone)").matches)
	{
		document.documentElement.style.WebkitUserSelect = "none";
		document.documentElement.style.userSelect = "none";
		document.documentElement.style.WebkitTouchCallout = "none";
		
		let elements = Page.element.querySelectorAll("body *");
		for (let i = 0; i < elements.length; i++)
		{
			elements[i].setAttribute("draggable", "false");
		}
		
		
		
		
		//Also add a little extra spacing at the top of each page to keep content from feeling too close to the top of the screen.
		this.add_style(`
			#logo, .name-text-container, .empty-top
			{
				margin-top: 2vh;
			}
		`, false);
	}
	
	
	
	//Fade in the opacity when the user presses the back button.
	window.addEventListener("popstate", (e) =>
	{
		//Ew
		if (window.location.href.indexOf("#") !== -1)
		{
			return;
		}
		
		
		
		
		let index = Site.last_pages.length - 1;
		
		if (index !== -1 && Site.last_pages[index] !== Page.url)
		{
			Page.Navigation.redirect(Site.last_pages.pop(), false, true, true);
		}
		
		else
		{
			Page.Navigation.redirect("/home/home.html", false, true);
		}
	});
	
	
	
	if ("serviceWorker" in navigator)
	{
		window.addEventListener("load", () =>
		{
			navigator.serviceWorker.register("/service-worker.js");
		});
	}
	
	
	
	Page.Banner.ScrollButton.exists = false;
	
	
	
	Site.Settings.set_up();
	
	
	
	Page.Footer.Floating.load();
	
	
	
	Site.load_glsl();
	
	
	
	Page.Images.check_webp_support()
	
	.then(() =>
	{
		//If it's not an html file, it shouldn't be anywhere near redirect().
		if (url.substring(url.lastIndexOf(".") + 1, url.length) !== "html")
		{
			//This should really be using history.replaceState(), but that doesn't update the page to make the file show for some reason.
			window.location.href = url;
		}
		
		else
		{
			Page.Navigation.redirect(url, false, true, false, true);
		}
	});
};



//Loads a script with the given source and returns a promise for when it completes.
Site.load_script = function(src, is_module = false)
{
	return new Promise((resolve, reject) =>
	{
		const script = document.createElement("script");
		
		if (is_module)
		{
			script.setAttribute("type", "module");
		}
		
		document.body.appendChild(script);
		script.onload = resolve;
		script.onerror = reject;
		script.async = true;
		script.src = src;
	});
};



//Adds a style tag to <head> with the given content. If temporary is true, it will be removed at the next page load. Returns the style element added.
Site.add_style = function(content, temporary = true, at_beginning_of_head = false)
{
	let element = document.createElement("style");
	
	element.textContent = content;
	
	if (temporary)
	{
		element.classList.add("temporary-style");
	}
	
	
	
	if (at_beginning_of_head)
	{
		document.head.insertBefore(element, document.head.firstChild);
	}
	
	else
	{
		document.head.appendChild(element);
	}
	
	
	
	return element;
};



Site.Fetch =
{
	//A list of things that need to be fetched (for example, banners that need to be preloaded). The items at the start of the list get fetched first.
	queue: [],

	busy: false,
	
	
	
	//Gets the next item from the fetch queue.
	get_next_item_from_queue: function()
	{
		if (this.queue.length === 0 || this.busy)
		{
			return;
		}
		
		
		
		this.busy = true;
		
		console.log("Now fetching " + this.queue[0]);
		
		
		
		fetch(this.queue[0])
		
		.then(() =>
		{
			this.busy = false;
			
			this.queue.shift();
			
			this.get_next_item_from_queue();
		});
	}
};



Site.Interaction =
{
	//Whether this is a touchscreen device on the current page. It's assumed to be false on every page until a touchstart or touchmove event is detected, at which point it's set to true.
	currently_touch_device: (("ontouchstart" in window) ||
    (navigator.maxTouchPoints > 0) ||
    (navigator.msMaxTouchPoints > 0)),
	
	last_mousemove_event: 0,
	
	last_touch_x: 0,
	last_touch_y: 0,
	
	
	
	set_up_listeners: function()
	{
		let bound_function = this.handle_touch_event.bind(this);
		
		document.documentElement.addEventListener("touchstart", bound_function, false);
		document.documentElement.addEventListener("touchmove", bound_function, false);



		document.documentElement.addEventListener("mousemove", () =>
		{
			if (this.currently_touch_device)
			{
				let time_between_mousemoves = Date.now() - this.last_mousemove_event;
				
				this.last_mousemove_event = Date.now();
				
				//Checking if it's >= 3 kinda sucks, but it seems like touch devices like to fire two mousemoves in quick succession sometimes. They also like to make that delay exactly 33. Look, I hate this too, but it needs to be here.
				if (time_between_mousemoves >= 3 && time_between_mousemoves <= 50 && time_between_mousemoves !== 33)
				{
					this.currently_touch_device = false;
				}
			}
		});



		//Click the focused element when the enter key is pressed.
		document.documentElement.addEventListener("keydown", (e) =>
		{
			if (e.keyCode === 13)
			{
				if (document.activeElement.classList.contains("click-on-child"))
				{
					document.activeElement.children[0].click();
				}
				
				else if (!(document.activeElement.tagName === "BUTTON" || (document.activeElement.tagName === "INPUT" && document.activeElement.getAttribute("type") !== "button")))
				{
					document.activeElement.click();
				}
			}
		});



		//Remove focus when moving the mouse or touching anything.
		document.documentElement.addEventListener("mousedown", () =>
		{
			if (document.activeElement.tagName !== "INPUT" && document.activeElement.tagName !== "TEXTAREA")
			{
				document.activeElement.blur();
			}
		});
	},
	
	
	
	handle_touch_event: function(e)
	{
		this.last_touch_x = e.touches[0].clientX;
		this.last_touch_y = e.touches[0].clientY;
		
		if (document.activeElement.tagName !== "INPUT" && document.activeElement.tagName !== "TEXTAREA")
		{
			document.activeElement.blur();
		}
		
		if (!this.currently_touch_device)
		{
			Page.Load.HoverEvents.remove();
			
			this.currently_touch_device = true;
		}
	}
};
"use strict";



Page.Navigation =
{
	currently_changing_page: false,

	last_page_scroll: 0,
	
	elements_to_remove: [],
	
	
	
	//Handles virtually all links.
	redirect: function(url, in_new_tab = false, no_state_push = false, restore_scroll = false, no_fade_out = false)
	{
		if (this.currently_changing_page)
		{
			return;
		}
		
		//If we're going somewhere outside of the site, open it in a new tab and don't screw with the opacity.
		if (in_new_tab || url.slice(url.length - 5) !== ".html")
		{
			window.open(url, "_blank");
			return;
		}
		
		
		
		this.currently_changing_page = true;
		
		
		
		let temp = window.scrollY;
		
		
		
		Site.applet_process_id++;
		
		
		
		if (!no_state_push)
		{
			Site.last_pages.push(Page.url);
		}
		
		Page.url = url;
		
		Page.parent_folder = url.slice(0, url.lastIndexOf("/") + 1);
		
		Page.ready_to_show = false;
		
		
		
		//We need to record this in case we can't successfully load the next page and we need to return to the current one.
		let background_color = document.documentElement.style.backgroundColor;
		
		
		
		//Get the new data, fade out the page, and preload the next page's banner if it exists. When all of those things are successfully done, replace the current html with the new stuff.
		Promise.all([fetch(url), Page.Unload.fade_out(no_fade_out, url), Page.Banner.load()])
		
		
		.then((response) =>
		{
			if (!response[0].ok)
			{
				window.location.replace("/404.html");
			}
			
			else
			{
				return response[0].text();
			}
		})
			
		
		.then((data) =>
		{
			Page.unload();
			
			
			
			let index = data.indexOf("</head>");
			
			if (index !== -1)
			{
				data = data.slice(index + 7);
			}
			
			index = data.indexOf("<script>");
			
			let scripts_data = "";
			
			if (index !== -1)
			{
				scripts_data = data.slice(index);
				
				data = data.slice(0, index);
			}
			
			
			
			Page.element.innerHTML = Page.Components.decode(`<div class="page">${data}</div>${scripts_data}`).replace(/data-aos=/g, `data-aos-offset="1000000" data-aos=`);
			
			Page.Load.parse_script_tags();
			
			
			
			//Record the page change in the url bar and in the browser history.
			if (!no_state_push)
			{
				history.pushState({}, document.title, url + this.concat_url_vars());
			}
			
			else
			{
				history.replaceState({}, document.title, url + this.concat_url_vars());
			}
			
			
			
			//Restore the ability to scroll in case it was removed.
			document.documentElement.style.overflowY = "visible";
			document.body.style.overflowY = "visible";
			
			document.body.style.userSelect = "auto";
			document.body.style.WebkitUserSelect = "auto";
			
			
			
			if (restore_scroll)
			{
				window.scrollTo(0, this.last_page_scroll);
				Page.Banner.on_scroll(this.last_page_scroll);
			}
			
			else
			{
				window.scrollTo(0, 0);
				Page.scroll = 0;
			}
			
			this.last_page_scroll = temp;
		})
		
		
		
		.catch((error) =>
		{
			console.error(error.message);
			
			console.log("Failed to load new page -- reversing fade-out.");
			
			
			
			this.currently_changing_page = false;
			
			setTimeout(() =>
			{
				if (!Page.background_color_changed)
				{
					Page.Animate.change_opacity(document.body, 1, Site.opacity_animation_time);
				}
				
				
				
				else
				{
					setTimeout(() =>
					{
						document.documentElement.classList.add("background-transition");
						document.body.classList.add("background-transition");
						
						document.documentElement.style.backgroundColor = background_color;
						document.body.style.backgroundColor = background_color;
						
						setTimeout(() =>
						{
							document.documentElement.classList.remove("background-transition");
							document.body.classList.remove("background-transition");
							
							document.body.style.backgroundColor = "";
							
							setTimeout(() =>
							{
								Page.Animate.change_opacity(document.body, 1, Site.opacity_animation_time);
							}, Site.opacity_animation_time);
						}, Site.background_color_animation_time);
					}, Site.background_color_animation_time);
				}
			}, Site.opacity_animation_time);
		});
	},



	//Returns a string of url vars that can be attached to any url.
	concat_url_vars: function()
	{
		let string = "";
		let key = "";
		let temp = "";
		
		let found_first_key = false;
		
		
		
		for (let i = 0; i < Object.keys(Site.Settings.url_vars).length; i++)
		{
			key = Object.keys(Site.Settings.url_vars)[i];
			
			if (Site.Settings.url_vars[key] !== 0 || (window.matchMedia("(prefers-color-scheme: dark)").matches && Site.Settings.url_vars["theme"] === 0 && key === "theme"))
			{
				if (found_first_key)
				{
					string += "&" + key + "=" + Site.Settings.url_vars[key];
				}
				
				else
				{
					string += "?" + key + "=" + Site.Settings.url_vars[key];
					
					found_first_key = true;
				}
			}
		}
		
		
		
		return string;
	},
	
	

	write_url_vars: function()
	{
		//Make the current state persist on refresh.
		history.replaceState({}, document.title, window.location.pathname + this.concat_url_vars());
	}
};



Page.Unload =
{
	fade_out: function(no_fade_out, url)
	{
		return new Promise((resolve, reject) =>
		{
			if (Site.force_dark_theme_pages.includes(url) && Site.Settings.url_vars["theme"] !== 1)
			{
				Site.Settings.revert_theme = 0;
				
				Site.Settings.forced_theme = true;
				
				Site.Settings.toggle("theme", false, true);
			}
			
			
			
			if (no_fade_out)
			{
				document.body.style.opacity = 0;
				
				resolve();
				return;
			}
			
			
			
			//Act like a normal link, with no transitions, if the user wants that.
			if (Site.Settings.url_vars["content_animation"] === 1)
			{
				if (Page.background_color_changed)
				{
					if (Site.Settings.url_vars["theme"] === 1)
					{
						if (Site.Settings.url_vars["dark_theme_color"] === 1)
						{
							document.documentElement.style.backgroundColor = "rgb(0, 0, 0)";
						}
						
						else
						{
							document.documentElement.style.backgroundColor = "rgb(24, 24, 24)";
						}
					}
					
					else
					{
						document.documentElement.style.backgroundColor = "rgb(255, 255, 255)";
					}
				}
				
				resolve();
			}
				
				
				
			else
			{
				//Fade out the current page's content.
				Page.Animate.change_opacity(document.body, 0, Site.opacity_animation_time)
				
				.then(() =>
				{
					//If necessary, take the time to fade back to the default background color, whatever that is.
					if (Page.background_color_changed)
					{
						document.documentElement.classList.add("background-transition");
						document.body.classList.add("background-transition");
						
						if (Site.Settings.url_vars["theme"] === 1)
						{
							if (Site.Settings.url_vars["dark_theme_color"] === 1)
							{
								document.documentElement.style.backgroundColor = "rgb(0, 0, 0)";
								document.body.style.backgroundColor = "rgb(0, 0, 0)";
							}
							
							else
							{
								document.documentElement.style.backgroundColor = "rgb(24, 24, 24)";
								document.body.style.backgroundColor = "rgb(24, 24, 24)";
							}
						}
						
						else
						{
							document.documentElement.style.backgroundColor = "rgb(255, 255, 255)";
							document.body.style.backgroundColor = "rgb(255, 255, 255)";
						}
						
						setTimeout(() =>
						{
							document.body.style.backgroundColor = "";
							
							document.documentElement.classList.remove("background-transition");
							document.body.classList.remove("background-transition");
						}, Site.background_color_animation_time);
					}
					
					resolve();
				});
			}
		});
	}
};



Page.unload = function()
{
	//Remove JS so it's not executed twice.
	let elements = document.querySelectorAll("script, style.temporary-style, link.temporary-style");
	
	for (let i = 0; i < elements.length; i++)
	{
		elements[i].remove();
	}
	
	//Clear temporary things.
	//Unbind everything transient from the window and the html element.
	for (let key in Page.temporary_handlers)
	{
		for (let j = 0; j < Page.temporary_handlers[key].length; j++)
		{
			window.removeEventListener(key, Page.temporary_handlers[key][j]);
			document.documentElement.removeEventListener(key, Page.temporary_handlers[key][j]);
		}
	}
	
	
	
	//Clear any temporary intervals.
	for (let i = 0; i < Page.temporary_intervals.length; i++)
	{
		clearInterval(Page.temporary_intervals[i]);
	}
	
	Page.temporary_intervals = [];
	
	
	
	//Terminate any temporary web workers.
	for (let i = 0; i < Page.temporary_web_workers.length; i++)
	{
		Page.temporary_web_workers[i].terminate();
	}
	
	Page.temporary_web_workers = [];
	
	
	
	
	//Remove everything that's not a script from the page element.
	elements = Page.element.querySelectorAll(":scope > *");
	
	for (let i = 0; i < elements.length; i++)
	{
		elements[i].remove();
	}	
}
"use strict";



//Gets the page ready to be shown but doesn't do anything that needs the page to be visible.
Page.load = function()
{
	Page.element = document.body.querySelector(".page");
	
	Page.using_custom_script = true;
	
	Page.on_show = null;
	
	
	this.Navigation.currently_changing_page = false;
	
	
	
	this.Load.parse_custom_style();
	this.Load.parse_custom_scripts();
	
	
	
	//Set the page title.
	document.head.querySelector("title").innerHTML = this.settings["title"];
	
	
	
	if (!("no_footer" in this.settings && this.settings["no_footer"]))
	{
		this.Footer.load();
	}
	
	
	
	Page.Layout.Multicols.active = false;
	
	Page.Layout.on_resize();
	
	if (this.Layout.layout_string === "ultrawide")
	{
		this.Layout.Multicols.create();
	}
	
	this.Layout.AppletColumns.are_equalized = false;
	
	if (this.Layout.aspect_ratio > 1)
	{
		this.Layout.AppletColumns.equalize();
	}
	
	
	
	//We do dropdowns here too.
	let elements = Page.element.querySelectorAll("select");
	
	for (let i = 0; i < elements.length; i++)
	{
		let button_element = elements[i].previousElementSibling;
		
		button_element.innerHTML = `${elements[i].querySelector(`[value=${elements[i].value}]`).textContent}  <span style="font-size: 12px">&#x25BC;</span>`;
		
		button_element.parentNode.parentNode.style.gridTemplateColumns = `repeat(auto-fit, 100%)`;
		
		elements[i].addEventListener("input", () =>
		{
			button_element.innerHTML = `${elements[i].querySelector(`[value=${elements[i].value}]`).textContent}  <span style="font-size: 12px">&#x25BC;</span>`;
		});
	}
	
	
	
	this.Images.add_extensions();
	
	Page.Banner.fetch_other_page_banners_in_background();
	
	this.Load.Links.set();
	
	this.Load.Links.disable();
	
	this.Load.HoverEvents.set_up();
	
	this.Load.TextButtons.set_up();
	
	setTimeout(() =>
	{
		this.Load.FocusEvents.set_up_weird_elements();
	}, 50);
	
	
	
	Page.background_color_changed = false;
	
	Site.Settings.handle_theme_revert();
	
	
	
	if ("banner_page" in this.settings && this.settings["banner_page"])
	{
		this.Banner.fetch_other_size_in_background();
	}
	
	if (Site.Settings.url_vars["contrast"] === 1)
	{
		Site.Settings.set_img_button_contrast();
	}
	
	if ("writing_page" in this.settings && this.settings["writing_page"] && Site.Settings.url_vars["font"] === 1)
	{
		Site.Settings.set_writing_page_font();
	}
	
	if (this.Layout.layout_string === "ultrawide" && "small_margins_on_ultrawide" in this.settings && this.settings["small_margins_on_ultrawide"])
	{
		Site.Settings.reduce_page_margins();
	}
	
	if (Site.Settings.url_vars["content_animation"] === 1)
	{
		Site.Settings.remove_animation();
	}
	
	if ("math_page" in this.settings && this.settings["math_page"])
	{
		this.Load.Math.typeset();
	}
	
	
	
	if (Page.ready_to_show && !Page.using_custom_script)
	{
		Page.show();
	}
	
	else
	{
		Page.ready_to_show = true;
	}
};



Page.show = function()
{
	return new Promise(async (resolve, reject) =>
	{
		await this.Load.fade_in();
		
		this.Load.AOS.load();
		
		this.Load.AOS.on_resize();
		
		setTimeout(() =>
		{
			this.Load.AOS.on_resize();
		}, 1000);
		
		this.Load.AOS.show_elements = true;
		
		this.Load.AOS.on_scroll();
		
		try {Page.on_show()}
		catch(ex) {}
		
		resolve();
	});
};



Page.Load =
{
	//Right, so this is a pain. One of those things jQuery makes really easy and that you might never notice otherwise is that when using $(element).html(data), any non-external script tags in data are automatically excuted. This is great, but it doesn't happen when using element.innerHTML. Weirdly enough, though, it works with element.appendChild. Therefore, we just need to get all our script tags, and for each one, make a new tag with identical contents, append it to the body, and delete the original script.
	parse_script_tags: function()
	{
		let scripts = document.querySelectorAll("script");
		
		for (let i = 0; i < scripts.length; i++)
		{
			let new_script = document.createElement("script");
			
			new_script.innerHTML = scripts[i].textContent;
			
			document.body.appendChild(new_script);
			
			scripts[i].remove();
		}
	},



	//Finds styles in a folder called "style" inside the page's folder. It first tries to find a minified file, and if it can't, it then tries to find a non-minified one so that testing can still work. The style files must have the same name as the html file.
	parse_custom_style: function()
	{
		let page_name = Page.url.split("/");
		page_name = page_name[page_name.length - 1];
		page_name = page_name.split(".");
		page_name = page_name[0];
		
		
		
		try
		{
			//Make sure there's actually something to get.
			fetch(Page.parent_folder + "style/" + page_name + ".css")
			
			.then((response) =>
			{
				let element = document.createElement("link");
				
				element.setAttribute("rel", "stylesheet");
				
				
				
				if (DEBUG)
				{
					element.setAttribute("href", Page.parent_folder + "style/" + page_name + ".css");
				}
				
				else
				{
					element.setAttribute("href", Page.parent_folder + "style/" + page_name + ".min.css");
				}
				
				
				
				//This is kind of subtle. If we append this new style to the end of the head, then it will take precendence over settings styles, which is terrible -- for example, the homepage will render all of its custom classes like quote-text and quote-attribution incorrectly. Therefore, we need to *prepend* it, ensuring it has the lowest-possible priority.
				element.classList.add("temporary-style");
				
				document.head.insertBefore(element, document.head.firstChild);
			});
		}
		
		catch(ex) {}
	},



	parse_custom_scripts: function()
	{
		let page_name = Page.url.split("/");
		page_name = page_name[page_name.length - 1];
		page_name = page_name.split(".");
		page_name = page_name[0];
		
		
		
		//Make sure there's actually something to get.
		fetch(Page.parent_folder + "scripts/" + page_name + ".js")
		
		.then((response) =>
		{
			if (!response.ok)
			{
				if (Page.ready_to_show)
				{
					Page.show();
				}
				
				else
				{
					Page.using_custom_script = false;
				}
				
				return;
			}
			
			Page.ready_to_show = true;
			
			
			
			let element = document.createElement("script");
			
			if (DEBUG)
			{
				element.setAttribute("src", Page.parent_folder + "scripts/" + page_name + ".js");
			}
			
			else
			{
				element.setAttribute("src", Page.parent_folder + "scripts/" + page_name + ".min.js");
			}
			
			
			
			element.classList.add("temporary-script");
			
			document.body.appendChild(element);
		});
	},



	fade_in: function()
	{
		return new Promise(async (resolve, reject) =>
		{
			if ("banner_page" in Page.settings && Page.settings["banner_page"])
			{
				Site.add_style(`
					#banner
					{
						background: url(${Page.Banner.file_path}landscape.${Page.Images.file_extension}) no-repeat center center;
						background-size: cover;
					}
					
					@media (max-aspect-ratio: 1/1)
					{
						#banner
						{
							background: url(${Page.Banner.file_path}portrait.${Page.Images.file_extension}) no-repeat center center;
							background-size: cover;
						}
					}
				`);
				
				await Page.Animate.change_opacity(document.body, 1, Site.opacity_animation_time, true);
			}
			
			else
			{
				Page.Footer.Floating.show_footer_menu_button.style.opacity = 0;
				
				setTimeout(() => Page.Animate.change_opacity(Page.Footer.Floating.show_footer_menu_button, 1, Site.opacity_animation_time), 10);
				
				document.body.style.opacity = 1;
			}
			
			resolve();
		});	
	},
	
	
	
	AOS:
	{
		//A list of lists. Each sublist starts with an anchor, then lists all the elements anchored to it in sequence, along with their delays.
		show_elements: false,
		
		elements: [],
		element_animation_types: [],
		delays: [],

		anchor_positions: [],

		anchor_offsets: [],

		anchors_shown: [],

		currently_animating: [],
		
		
		
		//So, there's this bug that's plagued the site since its inception. iOS Safari eventually seems to have a memory leak and starts cutting off all transitions before they've reached their end. It gets progressively worse until quitting the app is required. It can be triggered by drag-and-dropping elements repeatedly *anywhere* in Safari, and affects all webpages with CSS transitions.

		//In iOS 13.4, it seems Apple has miraculously fixed this nightmare. But for whatever reason, AOS is still problematic. If an element has a nonzero delay, it will be bugged, but zero-delay elements behave as usual. And so the solution is, unfortunately, to handle almost all of what AOS does manually.

		//This function puts the proper delays and anchors on aos elements on the page. The first animated element in every section should have a class of new-aos-section.
		
		//Update: the bug came back even for zero-delay elements. The site's content animation has been optionally moved to the JS-based anime.js.
		load: function()
		{
			if (Site.Settings.url_vars["content_animation"] === 1)
			{
				return;
			}
			
			
			
			this.show_elements = false;
			
			this.elements = [];
			this.element_animation_types = [];
			this.delays = [];
			
			let new_elements = Page.element.querySelectorAll("[data-aos]");
			
			let current_section = 0;
			let current_delay = 0;
			
			
			
			for (let i = 0; i < new_elements.length; i++)
			{
				if (new_elements[i].classList.contains("new-aos-section"))
				{
					//Create a new section.
					this.elements.push([]);
					this.delays.push([]);
					
					current_section++;
					
					current_delay = 0;
					
					
					
					this.anchor_offsets[current_section - 1] = 100;
					
					
					
					if (new_elements[i].getAttribute("data-aos") === "zoom-out")
					{
						this.element_animation_types.push(1);
					}
					
					else
					{
						this.element_animation_types.push(0);
					}
					
					
					
					this.anchor_positions[current_section - 1] = new_elements[i].getBoundingClientRect().top + Page.scroll;
					
					this.anchors_shown[current_section - 1] = false;
				}
				
				
				if (Site.use_js_animation)
				{
					if (new_elements[i].getAttribute("data-aos") === "zoom-out")
					{
						new_elements[i].style.transform = "scale(1.3)";
					}
					
					else
					{
						new_elements[i].style.transform = "translateY(100px)";
					}
					
					new_elements[i].style.opacity = 0;
				}
				
				this.elements[current_section - 1].push(new_elements[i]);
				
				
				
				
				let delay_increase = new_elements[i].getAttribute("data-aos-delay-increase");
				
				if (delay_increase !== null)
				{
					current_delay += parseInt(delay_increase);
				}
				
				this.delays[current_section - 1].push(current_delay);
				
				current_delay += Site.aos_separation_time;
			}
			
			
			
			this.on_resize();
		},



		on_resize: function()
		{
			if (!this.show_elements)
			{
				return;
			}
			
			for (let i = 0; i < this.elements.length; i++)
			{
				this.anchor_positions[i] = this.elements[i][0].getBoundingClientRect().top + Page.scroll;
			}
			
			this.fix_footer_anchor();
		},



		fix_footer_anchor: function()
		{
			if (!("no_footer" in Page.settings && Page.settings["no_footer"]))
			{
				this.anchor_positions[this.elements.length - 1] = document.body.clientHeight - 10;
				
				this.element_animation_types[this.elements.length - 1] = 1;
			}
		},



		on_scroll: function()
		{
			if (!this.show_elements)
			{
				return;
			}
			
			for (let i = 0; i < this.elements.length; i++)
			{
				if (Page.scroll + Page.Layout.window_height >= this.anchor_positions[i] + this.anchor_offsets[i] && this.anchors_shown[i] === false)
				{
					this.show_section(i);
				}
			}
		},



		show_section: function(section, force = false)
		{
			if (Site.Settings.url_vars["content_animation"] === 1)
			{
				return;
			}
			
			
			
			if (Page.scroll !== 0 || section === 0 || force)
			{
				this.anchors_shown[section] = true;
				
				if (this.element_animation_types[section] === 1)
				{
					Page.Animate.show_zoom_out_section(this.elements[section], Site.aos_animation_time, this.delays[section]);
				}
				
				else
				{
					Page.Animate.show_fade_up_section(this.elements[section], Site.aos_animation_time, this.delays[section]);
				}
				
				
				
				if (Page.scroll === 0 && section + 1 < this.elements.length && Page.Layout.window_height >= this.anchor_positions[section + 1] + this.anchor_offsets[section + 1])
				{
					setTimeout(() => this.show_section(section + 1, true), Site.aos_separation_time * this.elements[section].length + parseInt(this.elements[section + 1][0].getAttribute("data-aos-delay-increase") || 0));
				}
			}
		}
	},	


	
	HoverEvents:
	{
		element_selectors: `
			a,
			
			select
		`,
		
		//These elements need to have their scale increased when hovered.
		element_selectors_with_scale:
		[
			["#logo img", 1.05],
			["#scroll-button", 1.1],
			[".text-button", 1.075],
			[".checkbox-container", 1.1],
			[".radio-button-container", 1.1],
			[".footer-image-link img", 1.05],
			[".image-link img", 1.05],
			["#enter-fullscreen-button", 1.1],
			["#exit-fullscreen-button", 1.1],
			[".gallery-image-1-1 img", 1.075],
			[".gallery-image-2-2 img", 1.0375],
			[".gallery-image-3-3 img", 1.025]
		],
		
		
		
		//Adds a listener to every element that needs a hover event. Yes, you could use CSS for this. No, I don't want to.
		set_up: function()
		{
			let elements = Page.element.querySelectorAll(this.element_selectors);
			
			for (let i = 0; i < elements.length; i++)
			{
				this.add(elements[i]);
			}
			
			
			
			for (let i = 0; i < this.element_selectors_with_scale.length; i++)
			{
				let elements = Page.element.querySelectorAll(this.element_selectors_with_scale[i][0]);
				
				for (let j = 0; j < elements.length; j++)
				{
					this.add_with_scale(elements[j], this.element_selectors_with_scale[i][1]);
				}
			}	
		},



		add: function(element)
		{
			element.addEventListener("mouseenter", () =>
			{
				if (!Site.Interaction.currently_touch_device)
				{
					element.classList.add("hover");
					
					if (element.tagName === "SELECT")
					{
						element.previousElementSibling.classList.add("hover");
					}
				}
			});
			
			element.addEventListener("mouseleave", () =>
			{
				if (!Site.Interaction.currently_touch_device)
				{
					element.classList.remove("hover");
					
					if (element.tagName === "SELECT")
					{
						element.previousElementSibling.classList.remove("hover");
					}
					
					else
					{
						element.blur();
					}
				}
			});
		},
		
		
		
		add_with_scale: function(element, scale)
		{
			element.addEventListener("mouseenter", () =>
			{
				if (!Site.Interaction.currently_touch_device)
				{
					element.classList.add("hover");
					
					Page.Animate.change_scale(element, scale, Site.button_animation_time);
				}
			});
			
			element.addEventListener("mouseleave", () =>
			{
				if (!Site.Interaction.currently_touch_device)
				{
					element.classList.remove("hover");
					
					Page.Animate.change_scale(element, 1, Site.button_animation_time);
				}
			});
		},



		remove: function()
		{
			let elements = Page.element.querySelectorAll(this.element_selectors);
			
			for (let i = 0; i < elements.length; i++)
			{
				elements[i].classList.remove("hover");
			}
		}
	},
	
	
	
	FocusEvents:
	{
		set_up_weird_elements: function()
		{
			let elements = Page.element.querySelectorAll(".focus-on-child");

			for (let i = 0; i < elements.length; i++)
			{
				elements[i].addEventListener("focus", () =>
				{
					elements[i].children[0].focus();
				});
			}
		}
	},
	
	
	
	TextButtons:
	{
		set_up: function()
		{
			let bound_function = this.equalize.bind(this);
			
			window.addEventListener("resize", bound_function);
			Page.temporary_handlers["resize"].push(bound_function);
			
			setTimeout(() =>
			{
				bound_function();
			}, 50);
			
			setTimeout(() =>
			{
				bound_function();
			}, 500);
		},



		//Makes linked text buttons have the same width and height.
		equalize: function()
		{
			let elements = Page.element.querySelectorAll(".text-button");
			
			for (let i = 0; i < elements.length; i++)
			{
				elements[i].parentNode.style.margin = "0 auto";
			}
			
			
			
			elements = Page.element.querySelectorAll(".linked-text-button");
			
			let heights = [];
			
			let max_height = 0;
			
			let widths = [];
			
			let max_width = 0;
			
			
			
			for (let i = 0; i < elements.length; i++)
			{
				elements[i].style.height = "fit-content";
				elements[i].style.width = "fit-content";
				
				heights.push(elements[i].offsetHeight);
				
				if (heights[i] > max_height)
				{
					max_height = heights[i];
				}
				
				widths.push(elements[i].offsetWidth);
				
				if (widths[i] > max_width)
				{
					max_width = widths[i];
				}
			}
			
			
			
			for (let i = 0; i < elements.length; i++)
			{
				if (heights[i] < max_height)
				{
					elements[i].style.height = max_height + "px";
				}
				
				else
				{
					elements[i].style.height = "fit-content";
				}
				
				
				
				if (widths[i] < max_width)
				{
					elements[i].style.width = max_width + "px";
				}
				
				else
				{
					elements[i].style.width = "fit-content";
				}
				
				elements[i].parentNode.parentNode.style.gridTemplateColumns = `repeat(auto-fit, ${max_width}px)`;
			}
		}
	},



	//To keep expected link functionality (open in new tab, draggable, etc.), all elements with calls to redirect() are wrapped in <a> tags. Presses of <a> tags (without .real-link) are ignored, but to extend the functionality of url variables to the times they are used, we need to target them all and add the url variables onto them. Also, since the website is a single page app, we need to format them correctly, too, using the page variable.
	Links:
	{
		set: function()
		{
			let links = Page.element.querySelectorAll("a");
			
			
			
			let url_vars_suffix = Page.Navigation.concat_url_vars();
			
			
			
			for (let i = 0; i < links.length; i++)
			{
				if (!(links[i].parentNode.classList.contains("footer-image-link")))
				{
					let href = links[i].getAttribute("href");
					
					if (href.slice(0, 5) !== "https" && href.slice(0, 4) !== "data")
					{
						links[i].setAttribute("href", "/index.html?page=" + encodeURIComponent(href) + url_vars_suffix);
						
						links[i].setAttribute("onclick", `Page.Navigation.redirect("${href}")`);
					}
					
					else
					{
						links[i].setAttribute("onclick", `Page.Navigation.redirect("${href}", true)`);
					}
				}
			}
		},



		disable: function()
		{
			let links = Page.element.querySelectorAll("a:not(.real-link)");
			
			for (let i = 0; i < links.length; i++)
			{
				links[i].addEventListener("click", (e) =>
				{
					e.preventDefault();
				});
			}
		}
	},
	

	
	Math:
	{
		typeset: function()
		{
			if (!Site.scripts_loaded["mathjax"])
			{
				window.MathJax =
				{
					tex:
					{
						inlineMath: [["$", "$"], ["\\(", "\\)"]]
					}
				};
				
				Site.load_script("https://polyfill.io/v3/polyfill.min.js?features=es6");
				
				
				
				Site.load_script("https://cdn.jsdelivr.net/npm/mathjax@3.2.0/es5/tex-mml-chtml.js")
				
				.then(function()
				{
					Site.scripts_loaded["mathjax"] = true;
				})
				
				.catch(function(error)
				{
					console.error("Could not load MathJax");
				});
			}
			
			else
			{
				MathJax.typeset();
			}
			
			
			
			setTimeout(() =>
			{
				let elements = Page.element.querySelectorAll("mjx-container");
				
				for (let i = 0; i < elements.length; i++)
				{
					elements[i].setAttribute("tabindex", -1);
				}
			}, 500);
		}
	}
};
"use strict";



Site.force_dark_theme_pages =
[
	"/gallery/gallery.html"
];



Site.Settings =
{
	url_vars: {},
	
	texts:
	{
		"theme": ["Theme: light", "Theme: dark"],
		"dark_theme_color": ["Dark theme color: dark gray", "Dark theme color: black"],
		"contrast": ["Contrast: normal", "Contrast: high"],
		"text_size": ["Text size: normal", "Text size: large"],
		"font": ["Font: always sans serif", "Font: serif on writing"],
		"content_animation": ["Content animation: enabled", "Content animation: disabled"]
	},
	
	dark_theme_background_color: "rgb(24, 24, 24)",
	dark_theme_background_color_rgba: "rgba(24, 24, 24, ",
	
	gradient_suffix: "-0-0",
	
	//Set to either 0 or 1 if a page has forced a theme and it needs to change back.
	revert_theme: -1,
	forced_theme: false,
	
	
	
	get_url_var: function(id)
	{
		let query = window.location.search.substring(1);
		let vars = query.split("&");
		
		let pair = [];
		
		for (let i = 0; i < vars.length; i++)
		{
			pair = vars[i].split("=");
			
			if (pair[0] === id)
			{
				return pair[1];
			}
		}
		
		return null;
	},
	
	
	
	set_up: function()
	{
		this.url_vars =
		{
			"theme": this.get_url_var("theme"),
			"dark_theme_color": this.get_url_var("dark_theme_color"),
			"contrast": this.get_url_var("contrast"),
			"text_size": this.get_url_var("text_size"),
			"font": this.get_url_var("font"),
			"content_animation": this.get_url_var("content_animation"),
			"title_pages_seen": this.get_url_var("title_pages_seen")
		};
		
		
		
		window.matchMedia("(prefers-color-scheme: dark)").addListener((e) =>
		{
			if (this.revert_theme !== -1)
			{
				return;
			}
			
			
			
			if (e.matches && this.url_vars["theme"] !== 1)
			{
				this.toggle_theme();
			}
			
			else if (!e.matches && this.url_vars["theme"] === 1)
			{
				this.toggle_theme();
				
				if (this.url_vars["dark_theme_color"] === 1)
				{
					setTimeout(() =>
					{
						this.toggle_dark_theme_color();
					}, Site.opacity_animation_time * 2);
				}
			}
		});

		if (window.matchMedia("(prefers-color-scheme: dark)").matches && this.url_vars["theme"] === null)
		{
			this.url_vars["theme"] = 1;
		}
		
		if (this.url_vars["dark_theme_color"] === 1)
		{
			this.dark_theme_background_color = "rgb(0, 0, 0)";
			this.dark_theme_background_color_rgba = "rgba(0, 0, 0, ";
		}
		
		
		
		for (let key in this.url_vars)
		{
			//These are double equals, and that's important, but I can't quite see why. Obviously the this.url_vars are stored as strings and I just didn't realize that when I first coded this, but this bit of code has refused to cooperate with any modifications I make. Who knows.
			if (this.url_vars[key] == null)
			{
				this.url_vars[key] = 0;
			}
			
			else if (this.url_vars[key] == 1)
			{
				this.url_vars[key] = 0;
				this.toggle(key, true);
			}
		}
		
		
		
		//This prevents things from flickering when we first load the site.
		
		let element = null;
		
		if (this.url_vars["theme"] === 1 && this.url_vars["contrast"] !== 1)
		{
			element = Site.add_style(this.get_settings_style("dark"), false);
		}
		
		else if (this.url_vars["theme"] !== 1 && this.url_vars["contrast"] === 1)
		{
			element = Site.add_style(this.get_settings_style("contrast"), false);
		}
		
		else if (this.url_vars["theme"] === 1 && this.url_vars["contrast"] === 1)
		{
			element = Site.add_style(this.get_settings_style("dark_contrast"), false);
		}
		
		try {document.querySelector("#theme-contrast-adjust").remove();}
		catch(ex) {}
		
		try {element.id = "theme-contrast-adjust";}
		catch(ex) {}
	},
	
	
	
	meta_theme_color_element: document.querySelector("#theme-color-meta"),
	
	
	
	handle_theme_revert: function()
	{
		if (Site.Settings.forced_theme)
		{
			Site.Settings.forced_theme = false;
			return;
		}
		
		
		
		if (this.url_vars["content_animation"] === 1)
		{
			if (this.revert_theme === 0)
			{
				this.revert_theme = -1;
				
				this.url_vars["dark_theme_color"] = 1;
				
				this.toggle("theme", true, true);
			}
			
			else if (Site.Settings.revert_theme === 1)
			{
				this.revert_theme = -1;
				
				this.toggle("theme", true, true);
			}
		}
		
		else
		{
			if (this.revert_theme === 0)
			{
				this.revert_theme = -1;
				
				this.url_vars["dark_theme_color"] = 1;
				
				this.toggle("theme", false, true);
			}
			
			else if (Site.Settings.revert_theme === 1)
			{
				this.revert_theme = -1;
				
				this.toggle("theme", false, true);
			}
		}
	},
	


	//Changes a setting.
	toggle: function(setting, no_animation = false, no_settings_text = false)
	{
		let element = null;
		
		if (no_animation === false && (setting === "theme" || setting === "dark_theme_color" || setting === "contrast"))
		{
			element = Site.add_style(`
				html
				{
					transition: background-color ${Site.opacity_animation_time * 2 / 1000}s ease !important;
				}
				
				p, span, h1, h2, a, q, em, strong, dfn
				{
					transition: color ${Site.opacity_animation_time * 2 / 1000}s ease !important;
				}
				
				.text-box, .text-field, .checkbox-container, .checkbox-container > input ~ .checkbox, .radio-button-container, .radio-button-container > input ~ .radio-button, .loading-spinner:after, #floating-footer-content, #floating-footer-button-background, .footer-button, .text-button, .nav-button, .slider-container > input
				{
					transition: background-color ${Site.opacity_animation_time * 2 / 1000}s ease, border-color ${Site.opacity_animation_time * 2 / 1000}s ease, color ${Site.opacity_animation_time * 2 / 1000}s ease !important;
				}
				
				.line-break
				{
					transition: ${Site.opacity_animation_time * 2 / 1000}s ease !important;
				}
			`);
		}
		
		
		
		if (setting === "theme")
		{
			if (this.url_vars["theme"] === 1 && this.url_vars["dark_theme_color"] !== 1)
			{
				this.toggle_dark_theme_color(no_settings_text);
				
				if (!no_animation)
				{
					anime({
						targets: this.meta_theme_color_element,
						content: "#000000",
						duration: 500,
						easing: "cubicBezier(.42, 0, .58, 1)"
					});
					
					setTimeout(() =>
					{
						if (!no_settings_text)
						{
							try {Page.Footer.Floating.show_settings_text("Theme: black");}
							catch(ex) {}
						}
					}, Site.opacity_animation_time * 2);
				}
				
				else
				{
					this.meta_theme_color_element.setAttribute("content", "rgb(0, 0, 0)");
				}
			}
			
			else if (this.url_vars["theme"] === 1 && this.url_vars["dark_theme_color"] === 1)
			{
				this.toggle_theme(no_settings_text);
				
				if (!no_animation)
				{
					anime({
						targets: this.meta_theme_color_element,
						content: "#ffffff",
						duration: 500,
						easing: "cubicBezier(.42, 0, .58, 1)"
					});
					
					setTimeout(() =>
					{
						this.toggle_dark_theme_color();
						
						if (!no_settings_text)
						{
							try {Page.Footer.Floating.show_settings_text("Theme: light");}
					 		catch(ex) {}
					 	}
					}, Site.opacity_animation_time * 2);
				}
				
				else
				{
					this.meta_theme_color_element.setAttribute("content", "rgb(255, 255, 255)");
				}
			}
			
			else
			{
				this.toggle_theme(no_settings_text);
				
				if (!no_animation)
				{
					anime({
						targets: this.meta_theme_color_element,
						content: "#161616",
						duration: 500,
						easing: "cubicBezier(.42, 0, .58, 1)"
					});
					
					setTimeout(() =>
					{
						if (!no_settings_text)
						{
							try {Page.Footer.Floating.show_settings_text("Theme: dark");}
							catch(ex) {}
						}
					}, Site.opacity_animation_time * 2);
				}
				
				else
				{
					this.meta_theme_color_element.setAttribute("content", "rgb(24, 24, 24)");
				}
			}
		}
		
		else if (setting === "dark_theme_color")
		{
			this.toggle_dark_theme_color(no_settings_text);
		}
		
		else if (setting === "contrast")
		{
			this.toggle_contrast(no_settings_text);
		}
		
		else if (setting === "text_size")
		{
			this.toggle_text_size(no_settings_text);
		}
		
		else if (setting === "font")
		{
			this.toggle_font(no_settings_text);
		}
		
		else if (setting === "content_animation")
		{
			this.toggle_content_animation(no_settings_text);
		}
		
		else
		{
			console.log("Unknown setting");
		}
		
		
		
		Page.Navigation.write_url_vars();
		
		
		
		if (no_animation === false && (setting === "theme" || setting === "dark_theme_color" || setting === "contrast"))
		{
			setTimeout(() =>
			{
				element.remove();
			}, Site.opacity_animation_time * 2);
		}
	},



	//Changes the theme and animates elements.
	toggle_theme: function(no_settings_text)
	{
		//Light to dark
		if (this.url_vars["theme"] === 0)
		{
			if (!("manual_dark_theme" in Page.settings && Page.settings["manual_dark_theme"]))
			{
				if (this.url_vars["dark_theme_color"] !== 1)
				{
					document.documentElement.style.backgroundColor = "rgb(24, 24, 24)";
				}
				
				else
				{
					document.documentElement.style.backgroundColor = "rgb(0, 0, 0)";
				}
			}
			
			
			
			if (this.url_vars["contrast"] === 1)
			{
				if (!Page.settings["manual_dark_theme"])
				{
					this.animate_theme_contrast("dark_contrast");
				}
				
				
				
				setTimeout(() =>
				{
					let element = Site.add_style(this.get_settings_style("dark_contrast"), false);
					
					try {document.querySelector("#theme-contrast-adjust").remove();}
					catch(ex) {}
					
					try {element.id = "theme-contrast-adjust";}
					catch(ex) {}
					
					this.clear_weird_inline_styles();
				}, Site.opacity_animation_time * 2);
			}
			
			
			
			else
			{
				if (!("manual_dark_theme" in Page.settings && Page.settings["manual_dark_theme"]))
				{
					this.animate_theme_contrast("dark");
				}
				
				
				
				setTimeout(() =>
				{
					let element = Site.add_style(this.get_settings_style("dark"), false);
					
					try {document.querySelector("#theme-contrast-adjust").remove();}
					catch(ex) {}
					
					try {element.id = "theme-contrast-adjust";}
					catch(ex) {}
					
					this.clear_weird_inline_styles();
				}, Site.opacity_animation_time * 2);
			}
			
			
			
			this.url_vars["theme"] = 1;
		}
		
		
		
		//Dark to light
		else
		{
			if (!("manual_dark_theme" in Page.settings && Page.settings["manual_dark_theme"]))
			{
				document.documentElement.style.backgroundColor = "rgb(255, 255, 255)";
			}
			
			
			
			if (this.url_vars["contrast"] === 1)
			{
				if (!Page.settings["manual_dark_theme"])
				{
					this.animate_theme_contrast("contrast");
				}
				
				
				
				setTimeout(() =>
				{
					let element = Site.add_style(this.get_settings_style("contrast"), false);
					
					try {document.querySelector("#theme-contrast-adjust").remove();}
					catch(ex) {}
					
					try {element.id = "theme-contrast-adjust";}
					catch(ex) {}
					
					this.clear_weird_inline_styles();
				}, Site.opacity_animation_time * 2);
			}
			
			
			
			else
			{
				if (!("manual_dark_theme" in Page.settings && Page.settings["manual_dark_theme"]))
				{
					this.animate_theme_contrast("");
				}
				
				
				
				setTimeout(() =>
				{
					try {document.querySelector("#theme-contrast-adjust").remove();}
					catch(ex) {}
					
					this.clear_weird_inline_styles();
				}, Site.opacity_animation_time * 2);
			}
			
			
			
			this.url_vars["theme"] = 0;
		}
	},



	toggle_dark_theme_color: function(no_settings_text)
	{
		if (this.url_vars["dark_theme_color"] === 0)
		{
			this.dark_theme_background_color = "rgb(0, 0, 0)";
			this.dark_theme_background_color_rgba = "rgba(0, 0, 0, ";
			
			if (this.url_vars["theme"] === 1)
			{
				document.documentElement.style.backgroundColor = "rgb(0, 0, 0)";
				
				if (this.url_vars["contrast"] == 1)
				{
					this.animate_theme_contrast("dark_contrast");
				}
				
				else
				{
					this.animate_theme_contrast("dark");
				}
			}
			
			
			
			setTimeout(() =>
			{
				let element = null;
				
				if (this.url_vars["theme"] === 1)
				{
					if (this.url_vars["contrast"] === 1)
					{
						element = Site.add_style(this.get_settings_style("dark_contrast"), false);
					}
					
					else
					{
						element = Site.add_style(this.get_settings_style("dark"), false);
					}
				}
				
				else if (this.url_vars["contrast"] === 1)
				{
					element = Site.add_style(this.get_settings_style("contrast"), false);
				}
				
				
				
				try {document.querySelector("#theme-contrast-adjust").remove();}
				catch(ex) {}
				
				try {element.id = "theme-contrast-adjust";}
				catch(ex) {}
				
				this.clear_weird_inline_styles();
			}, Site.opacity_animation_time * 2);
			
			
			
			this.url_vars["dark_theme_color"] = 1;
		}
		
		
		
		else
		{
			this.dark_theme_background_color = "rgb(24, 24, 24)";
			this.dark_theme_background_color_rgba = "rgba(24, 24, 24, ";
			
			if (this.url_vars["theme"] === 1)
			{
				document.documentElement.style.backgroundColor = "rgb(24, 24, 24)";
				
				if (this.url_vars["contrast"] == 1)
				{
					this.animate_theme_contrast("dark_contrast");
				}
				
				else
				{
					this.animate_theme_contrast("dark");
				}
			}
			
			
			
			setTimeout(() =>
			{
				let element = null;
				
				if (this.url_vars["theme"] === 1)
				{
					if (this.url_vars["contrast"] === 1)
					{
						element = Site.add_style(this.get_settings_style("dark_contrast"), false);
					}
					
					else
					{
						element = Site.add_style(this.get_settings_style("dark"), false);
					}
				}
				
				else if (this.url_vars["contrast"] === 1)
				{
					element = Site.add_style(this.get_settings_style("contrast"), false);
				}
				
				
				
				try {document.querySelector("#theme-contrast-adjust").remove();}
				catch(ex) {}
				
				try {element.id = "theme-contrast-adjust";}
				catch(ex) {}
				
				this.clear_weird_inline_styles();
			}, Site.opacity_animation_time * 2);
			
			
			
			this.url_vars["dark_theme_color"] = 0;
		}
	},



	toggle_contrast: function(no_settings_text)
	{
		//Default to high
		if (this.url_vars["contrast"] === 0)
		{
			if (this.url_vars["theme"] === 1)
			{
				this.animate_theme_contrast("dark_contrast");
				
				
				
				setTimeout(() =>
				{
					let element = Site.add_style(this.get_settings_style("dark_contrast"), false);
					
					try {document.querySelector("#theme-contrast-adjust").remove();}
					catch(ex) {}
					
					try {element.id = "theme-contrast-adjust";}
					catch(ex) {}
					
					this.clear_weird_inline_styles();
				}, Site.opacity_animation_time * 2);
			}
			
			
			
			else
			{
				this.animate_theme_contrast("contrast");
				
				
				
				setTimeout(() =>
				{
					let element = Site.add_style(this.get_settings_style("contrast"), false);
					
					try {document.querySelector("#theme-contrast-adjust").remove();}
					catch(ex) {}
					
					try {element.id = "theme-contrast-adjust";}
					catch(ex) {}
					
					this.clear_weird_inline_styles();
				}, Site.opacity_animation_time * 2);
			}
			
			
			
			setTimeout(() =>
			{
				if (!no_settings_text)
				{
					try {Page.Footer.Floating.show_settings_text("Contrast: high");}
					catch(ex) {}
				}
			}, Site.opacity_animation_time * 2 + 50);
			
			this.url_vars["contrast"] = 1;
		}
		
		
		
		//High to default
		else
		{
			if (this.url_vars["theme"] === 1)
			{
				this.animate_theme_contrast("dark");
				
				
				
				setTimeout(() =>
				{
					let element = Site.add_style(this.get_settings_style("dark"), false);
					
					try {document.querySelector("#theme-contrast-adjust").remove();}
					catch(ex) {}
					
					try {element.id = "theme-contrast-adjust";}
					catch(ex) {}
					
					this.clear_weird_inline_styles();
				}, Site.opacity_animation_time * 2);
			}
			
			
			
			else
			{
				this.animate_theme_contrast("");
				
				
				
				setTimeout(() =>
				{
					try {document.querySelector("#theme-contrast-adjust").remove();}
					catch(ex) {}
					
					this.clear_weird_inline_styles();
				}, Site.opacity_animation_time * 2);
			}
			
			
			
			setTimeout(() =>
			{
				if (!no_settings_text)
				{
					try {Page.Footer.Floating.show_settings_text("Contrast: normal");}
					catch(ex) {}
				}
			}, Site.opacity_animation_time * 2 + 50);
			
			this.url_vars["contrast"] = 0;
		}
	},



	toggle_text_size: function(no_settings_text)
	{
		Page.Animate.change_opacity(document.body, 0, Site.opacity_animation_time);
		
		
		
		//Normal to large
		if (this.url_vars["text_size"] === 0)
		{
			setTimeout(() =>
			{
				try {document.querySelector("#text-size-adjust").remove();}
				catch(ex) {}
				
				let element = Site.add_style(`
					html
					{
						font-size: 18px;
					}
					
					@media (min-width: 1000px)
					{
						html
						{
							font-size: 22px;
						}
					}
				`, false);
				
				element.id = "text-size-adjust";
				
				
				
				setTimeout(() =>
				{
					if (!no_settings_text)
					{
						try {Page.Footer.Floating.show_settings_text("Text size: large");}
					 	catch(ex) {}
					 }
				}, Site.opacity_animation_time);
			}, Site.opacity_animation_time);
				
			this.url_vars["text_size"] = 1;
		}
			
		else
		{
			setTimeout(() =>
			{
				try {document.querySelector("#text-size-adjust").remove();}
				catch(ex) {}
				
				
				
				setTimeout(() =>
				{
					if (!no_settings_text)
					{
						try {Page.Footer.Floating.show_settings_text("Text size: normal");}
					 	catch(ex) {}
					 }
				}, Site.opacity_animation_time);
			}, Site.opacity_animation_time);
				
			this.url_vars["text_size"] = 0;
		}
		
		
		
		setTimeout(() =>
		{
			setTimeout(() =>
			{
				Page.Animate.change_opacity(document.body, 1, Site.opacity_animation_time);
			}, 50);
		}, Site.opacity_animation_time);
	},



	toggle_font: function(no_settings_text)
	{
		if ("writing_page" in Page.settings && Page.settings["writing_page"])
		{
			document.body.style.opacity = 0;
		}
		
		
		
		//Sans to serif
		if (this.url_vars["font"] === 0)
		{
			setTimeout(() =>
			{
				if ("writing_page" in Page.settings && Page.settings["writing_page"])
				{
					Page.set_element_styles(".body-text, .heading-text", "font-family", "'Gentium Book Basic', serif");
				}
				
				
				if (!no_settings_text)
				{
					try {Page.Footer.Floating.show_settings_text("Font: serif on writing");}
				 	catch(ex) {}
				 }
			}, Site.opacity_animation_time);
			
			this.url_vars["font"] = 1;
		}
		
		
		
		//Serif to sans
		else
		{
			setTimeout(() =>
			{
				if ("writing_page" in Page.settings && Page.settings["writing_page"])
				{
					Page.set_element_styles(".body-text, .heading-text", "font-family", "'Rubik', sans-serif");
				}
				
				
				
				if (!no_settings_text)
				{
					try {Page.Footer.Floating.show_settings_text("Font: always sans serif");}
			 		catch(ex) {}
			 	}
			}, Site.opacity_animation_time);
			
			this.url_vars["font"] = 0;
		}
		
		
		
		if ("writing_page" in Page.settings && Page.settings["writing_page"])
		{
			setTimeout(() =>
			{
				setTimeout(() =>
				{
					document.body.style.opacity = 1;
					
					Page.Load.AOS.on_resize();
				}, 50);
			}, Site.opacity_animation_time);
		}
	},



	toggle_content_animation: function(no_settings_text)
	{
		if (this.url_vars["content_animation"] === 0)
		{
			//Here, we can just animate out the body as usual.	
			document.body.style.opacity = 0;
			
			setTimeout(() =>
			{
				this.remove_animation();
			
				setTimeout(() =>
				{
					Page.Animate.change_opacity(document.body, 1, Site.opacity_animation_time);
				}, 50);
			}, Site.opacity_animation_time);
			
			
			
			setTimeout(() =>
			{
				if (!no_settings_text)
				{
					try {Page.Footer.Floating.show_settings_text("Content animation: disabled");}
			 		catch(ex) {}
			 	}
		 	}, Site.opacity_animation_time * 2);
		 	
		 	
			
			this.url_vars["content_animation"] = 1;
		}
		
		
		
		else
		{
			this.url_vars["content_animation"] = 0;
			
			
			
			//This is a little messy, but it's better than the alternative. Removing every single data-aos attribute is way too destructive to undo, so instead, we'll just refresh the page.
			Page.Navigation.last_page_scroll = window.scrollY;
			
			Page.Navigation.redirect(Page.url, false, true, true);
		}
	},



	set_img_button_contrast: function()
	{
		let elements = Page.element.querySelectorAll(".scroll-button");
		
		for (let i = 0; i < elements.length; i++)
		{
			elements[i].setAttribute("src", elements[i].getAttribute("src").replace("chevron-left", "chevron-left-dark").replace("chevron-right", "chevron-right-dark").replace("chevron-down", "chevron-down-dark"));
		}
	},



	set_writing_page_font: function()
	{
		Page.set_element_styles(".body-text, .heading-text", "font-family", "'Gentium Book Basic', serif");
	},



	reduce_page_margins: function()
	{
		try {document.querySelector("#ultrawide-margin-adjust").remove();}
		catch(ex) {}
		
		
		
		//When in ultrawide mode, shrink the margins to 50%.
		if (Page.Layout.layout_string === "ultrawide")
		{
			let element = Site.add_style(`
				.body-text, .nav-buttons, .line-break
				{
					width: 50vw;
				}
				
				.body-text.narrow
				{
					width: 40vw;
				}
				
				pre code
				{
					width: calc(50vw - 24px);
				}
			`);
			
			element.id = "ultrawide-margin-adjust";
		}	
	},



	remove_animation: function()
	{
		let elements = document.body.querySelectorAll("[data-aos]")
		
		for (let i = 0; i < elements.length; i++)
		{
			elements[i].removeAttribute("data-aos");
		}
	},



	animate_theme_contrast: function(settings)
	{
		let new_gradient_suffix = "-0-0";
		
		if (settings === "")
		{
			Page.set_element_styles(".heading-text, .date-text, .title-text", "color", "rgb(0, 0, 0)");
			
			Page.set_element_styles(".section-text", "color", "rgb(96, 96, 96)");
			
			Page.set_element_styles(".body-text, .body-text span, .song-lyrics, .image-link-subtext, .floating-settings-button-text", "color", "rgb(127, 127, 127)");
			
			Page.set_element_styles(".body-text .link", "color", "rgb(127, 192, 127)");
			
			
			
			Page.set_element_styles(".quote-text q", "color", "rgb(176, 176, 176)");
			
			Page.set_element_styles(".quote-attribution", "color", "rgb(92, 92, 92)");
			
			
			
			Page.set_element_styles(".text-box", "background-color", "rgb(255, 255, 255)");
			
			Page.set_element_styles(".text-box", "color", "rgb(127, 127, 127)");
			
			Page.set_element_styles(".text-box", "border-color", "rgb(192, 192, 192)");
			
			
			
			Page.set_element_styles(".text-field", "background-color", "rgb(255, 255, 255)");
			
			Page.set_element_styles(".text-field", "color", "rgb(127, 127, 127)");
			
			Page.set_element_styles(".text-field", "border-color", "rgb(192, 192, 192)");
			
			
			
			Page.set_element_styles(".checkbox-container > input ~ .checkbox", "background-color", "rgb(255, 255, 255)");
			
			Page.set_element_styles(".checkbox-container > input:checked ~ .checkbox", "background-color", "rgb(127, 127, 127)");
			
			
			
			Page.set_element_styles(".radio-button-container > input ~ .radio-button", "background-color", "rgb(255, 255, 255)");
			
			Page.set_element_styles(".radio-button-container > input:checked ~ .radio-button", "background-color", "rgb(127, 127, 127)");
			
			
			
			try {document.querySelector("#slider-style").remove();}
			catch(ex) {}
			
			
			
			Page.set_element_styles("#floating-footer-content, #floating-footer-button-background", "background-color", "rgb(255, 255, 255)");
			
			
			
			Page.set_element_styles(".footer-button, .text-button, .nav-button, .checkbox-container, #output-canvas", "border-color", "rgb(127, 127, 127)");
		}
		
		
		
		else if (settings === "dark")
		{
			Page.set_element_styles(".heading-text, .date-text, .title-text", "color", "rgb(255, 255, 255)");
			
			Page.set_element_styles(".section-text", "color", "rgb(184, 184, 184)");
			
			Page.set_element_styles(".body-text, .body-text span, .song-lyrics, .image-link-subtext, .floating-settings-button-text", "color", "rgb(152, 152, 152)");
			
			Page.set_element_styles(".body-text .link", "color", "rgb(152, 216, 152)");
			
			
			
			Page.set_element_styles(".quote-text q", "color", "rgb(104, 104, 104)");
			
			Page.set_element_styles(".quote-attribution", "color", "rgb(188, 188, 188)");
			
			
			
			Page.set_element_styles(".text-box", "background-color", this.dark_theme_background_color);
			
			Page.set_element_styles(".text-box", "color", "rgb(152, 152, 152)");
			
			Page.set_element_styles(".text-box", "border-color", "rgb(88, 88, 88)");
			
			
			
			Page.set_element_styles(".text-field", "background-color", this.dark_theme_background_color);
			
			Page.set_element_styles(".text-field", "color", "rgb(152, 152, 152)");
			
			Page.set_element_styles(".text-field", "border-color", "rgb(88, 88, 88)");
			
			
			
			Page.set_element_styles(".checkbox-container > input ~ .checkbox", "background-color", this.dark_theme_background_color);
			
			Page.set_element_styles(".checkbox-container > input:checked ~ .checkbox", "background-color", "rgb(152, 152, 152)");
			
			
			
			Page.set_element_styles(".radio-button-container > input ~ .radio-button", "background-color", this.dark_theme_background_color);
			
			Page.set_element_styles(".radio-button-container > input:checked ~ .radio-button", "background-color", "rgb(152, 152, 152)");
			
			
			
			let element = Site.add_style(`
				.slider-container > input
				{
					background-color: rgb(80, 80, 80) !important;
				}

				.slider-container > input::-webkit-slider-thumb
				{
					background-color: rgb(127, 127, 127) !important;
				}

				.slider-container > input::-moz-slider-thumb
				{
					background-color: rgb(127, 127, 127) !important;
				}

				.slider-container > input:active
				{
					background-color: rgb(144, 144, 144) !important;
				}

				.slider-container > input:hover::-webkit-slider-thumb
				{
					background-color: rgb(168, 168, 168) !important;
				}

				.slider-container > input:hover::-moz-slider-thumb
				{
					background-color: rgb(168, 168, 168) !important;
				}

				.slider-container > input:active::-webkit-slider-thumb
				{
					background-color: rgb(216, 216, 216) !important;
				}

				.slider-container > input:active::-moz-slider-thumb
				{
					background-color: rgb(216, 216, 216) !important;
				}
			`, false);
			
			try {document.querySelector("#slider-style").remove();}
			catch(ex) {}
			
			try {element.id = "slider-style";}
			catch(ex) {}
				
			
			
			
			Page.set_element_styles("#floating-footer-content, #floating-footer-button-background", "background-color", this.dark_theme_background_color);
			
			
			
			Page.set_element_styles(".footer-button, .text-button, .nav-button, #output-canvas", "border-color", "rgb(152, 152, 152)");
			
			
			
			new_gradient_suffix = `-1-0`;
		}
		
		
		
		else if (settings === "contrast")
		{
			Page.set_element_styles(".heading-text, .date-text, .title-text", "color", "rgb(0, 0, 0)");
			
			Page.set_element_styles(".section-text", "color", "rgb(48, 48, 48)");
			
			Page.set_element_styles(".body-text, .body-text span, .song-lyrics, .image-link-subtext, .floating-settings-button-text", "color", "rgb(64, 64, 64)");
			
			Page.set_element_styles(".body-text .link", "color", "rgb(64, 128, 64)");
			
			
			
			Page.set_element_styles(".quote-text q", "color", "rgb(88, 88, 88)");
			
			Page.set_element_styles(".quote-attribution", "color", "rgb(46, 46, 46)");
			
			
			
			Page.set_element_styles(".text-box", "background-color", "rgb(255, 255, 255)");
			
			Page.set_element_styles(".text-box", "color", "rgb(64, 64, 64)");
			
			Page.set_element_styles(".text-box", "border-color", "rgb(96, 96, 96)");
			
			
			
			Page.set_element_styles(".text-field", "background-color", "rgb(255, 255, 255)");
			
			Page.set_element_styles(".text-field", "color", "rgb(64, 64, 64)");
			
			Page.set_element_styles(".text-field", "border-color", "rgb(96, 96, 96)");
			
			
			
			Page.set_element_styles(".checkbox-container > input ~ .checkbox", "background-color", "rgb(255, 255, 255)");
			
			Page.set_element_styles(".checkbox-container > input:checked ~ .checkbox", "background-color", "rgb(64, 64, 64)");
			
			
			
			Page.set_element_styles(".radio-button-container > input ~ .radio-button", "background-color", "rgb(255, 255, 255)");
			
			Page.set_element_styles(".radio-button-container > input:checked ~ .radio-button", "background-color", "rgb(64, 64, 64)");
			
			
			
			let element = Site.add_style(`
				.slider-container > input
				{
					background-color: rgb(100, 100, 100) !important;
				}

				.slider-container > input::-webkit-slider-thumb
				{
					background-color: rgb(80, 80, 80) !important;
				}

				.slider-container > input::-moz-slider-thumb
				{
					background-color: rgb(80, 80, 80) !important;
				}

				.slider-container > input:active
				{
					background-color: rgb(64, 64, 64) !important;
				}

				.slider-container > input:hover::-webkit-slider-thumb
				{
					background-color: rgb(56, 56, 56) !important;
				}

				.slider-container > input:hover::-moz-slider-thumb
				{
					background-color: rgb(56, 56, 56) !important;
				}

				.slider-container > input:active::-webkit-slider-thumb
				{
					background-color: rgb(0, 0, 0) !important;
				}

				.slider-container > input:active::-moz-slider-thumb
				{
					background-color: rgb(0, 0, 0) !important;
				}
			`, false);
			
			try {document.querySelector("#slider-style").remove();}
			catch(ex) {}
			
			try {element.id = "slider-style";}
			catch(ex) {}
			
			
			
			Page.set_element_styles("#floating-footer-content, #floating-footer-button-background", "background-color", "rgb(255, 255, 255)");
			
			
			
			Page.set_element_styles(".footer-button, .text-button, .nav-button, #output-canvas", "border-color", "rgb(64, 64, 64)");
			
			
			
			new_gradient_suffix = `-0-1`;
		}
		
		
		
		else if (settings === "dark_contrast")
		{
			Page.set_element_styles(".heading-text, .date-text, .title-text", "color", "rgb(255, 255, 255)");
			
			Page.set_element_styles(".section-text", "color", "rgb(232, 232, 232)");
			
			Page.set_element_styles(".body-text, .body-text span, .song-lyrics, .image-link-subtext", "color", "rgb(216, 216, 216)");
			
			Page.set_element_styles(".body-text .link", "color", "rgb(216, 255, 216)");
			
			Page.set_element_styles(".floating-settings-button-text", "color", "rgb(64, 64, 64)");
			
			
			
			Page.set_element_styles(".quote-text q", "color", "rgb(192, 192, 192)");
			
			Page.set_element_styles(".quote-attribution", "color", "rgb(234, 234, 234)");
			
			
			
			Page.set_element_styles(".text-box", "background-color", this.dark_theme_background_color);
			
			Page.set_element_styles(".text-box", "color", "rgb(216, 216, 216)");
			
			Page.set_element_styles(".text-box", "border-color", "rgb(152, 152, 152)");
			
			
			
			Page.set_element_styles(".text-field", "background-color", this.dark_theme_background_color);
			
			Page.set_element_styles(".text-field", "color", "rgb(216, 216, 216)");
			
			Page.set_element_styles(".text-field", "border-color", "rgb(152, 152, 152)");
			
			
			
			Page.set_element_styles(".checkbox-container", "border-color", "rgb(216, 216, 216)");
			
			Page.set_element_styles(".checkbox-container > input ~ .checkbox", "background-color", this.dark_theme_background_color);
			
			Page.set_element_styles(".checkbox-container > input:checked ~ .checkbox", "background-color", "rgb(216, 216, 216)");
			
			
			
			Page.set_element_styles(".radio-button-container", "border-color", "rgb(216, 216, 216)");
			
			Page.set_element_styles(".radio-button-container > input ~ .radio-button", "background-color", this.dark_theme_background_color);
			
			Page.set_element_styles(".radio-button-container > input:checked ~ .radio-button", "background-color", "rgb(216, 216, 216)");
			
			
			
			//Page.set_element_styles(".slider-container > input", "background-color", "rgb(180, 180, 180)");
			
			let element = Site.add_style(`
				.slider-container > input
				{
					background-color: rgb(180, 180, 180) !important;
				}

				.slider-container > input::-webkit-slider-thumb
				{
					background-color: rgb(200, 200, 200) !important;
				}

				.slider-container > input::-moz-slider-thumb
				{
					background-color: rgb(200, 200, 200) !important;
				}

				.slider-container > input:active
				{
					background-color: rgb(216, 216, 216) !important;
				}

				.slider-container > input:hover::-webkit-slider-thumb
				{
					background-color: rgb(224, 224, 224) !important;
				}

				.slider-container > input:hover::-moz-slider-thumb
				{
					background-color: rgb(224, 224, 224) !important;
				}

				.slider-container > input:active::-webkit-slider-thumb
				{
					background-color: rgb(255, 255, 255) !important;
				}

				.slider-container > input:active::-moz-slider-thumb
				{
					background-color: rgb(255, 255, 255) !important;
				}
			`, false);
			
			try {document.querySelector("#slider-style").remove();}
			catch(ex) {}
			
			try {element.id = "slider-style";}
			catch(ex) {}
			
			
			
			Page.set_element_styles("#floating-footer-content, #floating-footer-button-background", "background-color", this.dark_theme_background_color);
			
			
			
			Page.set_element_styles(".footer-button, .text-button, .nav-button, #output-canvas", "border-color", "rgb(152, 152, 152)");
			
			
			
			new_gradient_suffix = `-1-1`;
		}
		
		//These elements have properties that cannot be animated. To get around this, every elemnt has 6 copies of itself -- one for each combination of theme and contrast. Here, we animate the new one in and the old one out.
		Page.set_element_styles(`.line-break${this.gradient_suffix}`, "opacity", 0);
		Page.set_element_styles(`.line-break${new_gradient_suffix}`, "opacity", 1);
		
		this.gradient_suffix = new_gradient_suffix;
	},



	clear_weird_inline_styles: function()
	{
		Page.set_element_styles(".checkbox-container > input ~ .checkbox", "background-color", "");
			
		Page.set_element_styles(".checkbox-container > input:checked ~ .checkbox", "background-color", "");
		
		
		
		Page.set_element_styles(".radio-button-container > input ~ .radio-button", "background-color", "");
			
		Page.set_element_styles(".radio-button-container > input:checked ~ .radio-button", "background-color", "");
		
		
		
		Page.set_element_styles(".text-box", "background-color", "");
		
		Page.set_element_styles(".text-box", "color", "");
		
		Page.set_element_styles(".text-box", "border-color", "");
		
		
		
		Page.set_element_styles(".text-field", "background-color", "");
		
		Page.set_element_styles(".text-field", "color", "");
		
		Page.set_element_styles(".text-field", "border-color", "");
	},



	get_settings_style: function(settings) 
	{
		if (settings === "dark")
		{
			return `
				.heading-text, .date-text, .title-text
				{
					color: rgb(255, 255, 255);
				}
				
				.section-text
				{
					color: rgb(184, 184, 184);
				}
				
				.body-text, .body-text span, .song-lyrics, .image-link-subtext
				{
					color: rgb(152, 152, 152);
				}
				
				.body-text .link
				{
					color: rgb(152, 216, 152);
				}
				
				
				
				.quote-text
				{
					color: rgb(104, 104, 104);
				}
				
				.quote-attribution
				{
					color: rgb(188, 188, 188);
				}
				
				
				
				.text-box
				{
					background-color: ${this.dark_theme_background_color};
					color: rgb(152, 152, 152);
					border-color: rgb(88, 88, 88);
				}
				
				.text-box:focus
				{
					border-color: rgb(152, 152, 152);
					color: rgb(216, 216, 216);
				}
				
				
				
				.text-field
				{
					background-color: ${this.dark_theme_background_color};
					color: rgb(152, 152, 152);
					border-color: rgb(88, 88, 88);
				}
				
				.text-field:focus
				{
					border-color: rgb(152, 152, 152);
					color: rgb(216, 216, 216);
				}
				
				
				
				.checkbox-container > input ~ .checkbox
				{
					background-color: ${this.dark_theme_background_color};
				}

				.checkbox-container > input:checked ~ .checkbox
				{
					background-color: rgb(152, 152, 152);
				}
				
				
				
				.radio-button-container > input ~ .radio-button
				{
					background-color: ${this.dark_theme_background_color};
				}

				.radio-button-container > input:checked ~ .radio-button
				{
					background-color: rgb(152, 152, 152);
				}
				
				
				
				.loading-spinner:after
				{
					border: 2px solid rgb(152, 152, 152);
					border-color: rgb(152, 152, 152) transparent rgb(152, 152, 152) transparent;
				}
				
							
				
				#floating-footer-content, #floating-footer-button-background
				{
					background-color: ${this.dark_theme_background_color};
				}
				
				
				
				#banner-gradient, #floating-footer-gradient
				{
					background: -moz-linear-gradient(top, ${this.dark_theme_background_color_rgba}0) 0%, ${this.dark_theme_background_color_rgba}1) 100%) !important;
					background: -webkit-linear-gradient(top, ${this.dark_theme_background_color_rgba}0) 0%,${this.dark_theme_background_color_rgba}1) 100%) !important;
					background: linear-gradient(to bottom, ${this.dark_theme_background_color_rgba}0) 0%,${this.dark_theme_background_color_rgba}1) 100%) !important;
				}
				
				
				
				.footer-button, .text-button, .nav-button, .checkbox-container, #output-canvas
				{
					border-color: rgb(152, 152, 152);
				}
				
				
				
				.line-break-1-0
				{
					opacity: 1;
				}
			`;
		}
		
		
		
		else if (settings === "contrast")
		{
			return `
				.heading-text, .date-text, .title-text
				{
					color: rgb(0, 0, 0);
				}
				
				.section-text
				{
					color: rgb(48, 48, 48);
				}
				
				.body-text, .body-text span, .song-lyrics, .image-link-subtext, .text-button
				{
					color: rgb(64, 64, 64);
				}
				
				.settings-text
				{
					color: rgb(64, 64, 64) !important;
				}
				
				.body-text .link
				{
					color: rgb(64, 128, 64);
				}
				
				.floating-settings-button-text
				{
					color: rgb(64, 64, 64);
				}
				
				
				
				.quote-text
				{
					color: rgb(88, 88, 88);
				}
				
				.quote-attribution
				{
					color: rgb(46, 46, 46);
				}
				
				
				
				.text-box
				{
					background-color: rgb(255, 255, 255);
					color: rgb(64, 64, 64);
					border-color: rgb(96, 96, 96);
				}
				
				.text-box:focus
				{
					border-color: rgb(48, 48, 48);
					color: rgb(0, 0, 0);
				}
				
				
				
				.text-field
				{
					background-color: rgb(255, 255, 255);
					color: rgb(64, 64, 64);
					border-color: rgb(96, 96, 96);
				}
				
				.text-field:focus
				{
					border-color: rgb(48, 48, 48);
					color: rgb(0, 0, 0);
				}
				
				

				.checkbox-container > input:checked ~ .checkbox
				{
					background-color: rgb(64, 64, 64);
				}
				
				
				
				.radio-button-container > input:checked ~ .radio-button
				{
					background-color: rgb(64, 64, 64);
				}
				
				
				
				.loading-spinner:after
				{
					border: 2px solid rgb(64, 64, 64);
					border-color: rgb(64, 64, 64) transparent rgb(64, 64, 64) transparent;
				}
				
				
				
				.footer-button, .text-button, .nav-button, .checkbox-container, #output-canvas
				{
					border-color: rgb(64, 64, 64);
				}
			`;
		}
		
		
		
		else if (settings === "dark_contrast")
		{
			return `
				.heading-text, .date-text, .title-text
				{
					color: rgb(255, 255, 255);
				}
				
				.section-text
				{
					color: rgb(232, 232, 232);
				}
				
				.body-text, .body-text span, .song-lyrics, .image-link-subtext
				{
					color: rgb(216, 216, 216);
				}
				
				.settings-text
				{
					color: rgb(64, 64, 64) !important;
				}
				
				.body-text .link
				{
					color: rgb(216, 255, 216);
				}
				
				.floating-settings-button-text
				{
					color: rgb(64, 64, 64);
				}
				
				
				
				.quote-text
				{
					color: rgb(192, 192, 192);
				}
				
				.quote-attribution
				{
					color: rgb(234, 234, 234);
				}
				
				
				
				.text-box
				{
					background-color: ${this.dark_theme_background_color};
					color: rgb(216, 216, 216);
					border-color: rgb(152, 152, 152);
				}
				
				.text-box:focus
				{
					border-color: rgb(216, 216, 216);
					color: rgb(255, 255, 255);
				}
				
				
				
				.text-field
				{
					background-color: ${this.dark_theme_background_color};
					color: rgb(216, 216, 216);
					border-color: rgb(152, 152, 152);
				}
				
				.text-field:focus
				{
					border-color: rgb(216, 216, 216);
					color: rgb(255, 255, 255);
				}
				
				
				
				.checkbox-container
				{
					border-color: rgb(216, 216, 216);
				}
				
				.checkbox-container > input ~ .checkbox
				{
					background-color: ${this.dark_theme_background_color};
				}

				.checkbox-container > input:checked ~ .checkbox
				{
					background-color: rgb(216, 216, 216);
				}
				
				
				
				.radio-button-container
				{
					border-color: rgb(216, 216, 216);
				}
				
				.radio-button-container > input ~ .radio-button
				{
					background-color: ${this.dark_theme_background_color};
				}

				.radio-button-container > input:checked ~ .radio-button
				{
					background-color: rgb(216, 216, 216);
				}
				
				
				
				.loading-spinner:after
				{
					border: 2px solid rgb(216, 216, 216);
					border-color: rgb(216, 216, 216) transparent rgb(216, 216, 216) transparent;
				}
				
				
				
				#floating-footer-content, #floating-footer-button-background
				{
					background-color: ${this.dark_theme_background_color};
				}
				
				
				
				#banner-gradient, #floating-footer-gradient
				{
					background: -moz-linear-gradient(top, ${this.dark_theme_background_color_rgba}0) 0%, ${this.dark_theme_background_color_rgba}1) 100%) !important;
					background: -webkit-linear-gradient(top, ${this.dark_theme_background_color_rgba}0) 0%,${this.dark_theme_background_color_rgba}1) 100%) !important;
					background: linear-gradient(to bottom, ${this.dark_theme_background_color_rgba}0) 0%,${this.dark_theme_background_color_rgba}1) 100%) !important;
				}
						
				
				
				.footer-button, .text-button, .nav-button, #output-canvas
				{
					border-color: rgb(152, 152, 152);
				}
				
				.line-break-1-1
				{
					opacity: 1;
				}
			`;
		}
	}
};



Page.url = decodeURIComponent(Site.Settings.get_url_var("page"));
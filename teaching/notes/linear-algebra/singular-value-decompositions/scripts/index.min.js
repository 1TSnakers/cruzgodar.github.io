import{eigendata,uVectors}from"./data.min.js";import{VSingularValues,VU,VW}from"./vData.min.js";import{$}from"/scripts/src/main.min.js";import{Slider}from"/scripts/src/sliders.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";export default function(){{const t={canvasWidth:400,verbose:window.DEBUG},o=new WilsonCPU($("#v-canvas"),t),l=new Array(o.canvasHeight);for(let e=0;e<o.canvasHeight;e++)l[e]=new Array(o.canvasWidth);const r=new Slider({element:$("#depth-slider"),name:"Depth",value:100,min:1,max:200,integer:!0,logarithmic:!0,onInput:function(){a(r.value)}});function a(depth=200){for(let n=0;n<o.canvasHeight;n++)for(let a=0;a<o.canvasWidth;a++)for(let e=l[n][a]=0;e<depth;e++)l[n][a]+=VSingularValues[e]*VU[n][e]*VW[a][e];var a=l,t=new Uint8ClampedArray(o.canvasWidth*o.canvasHeight*4);for(let i=0;i<o.canvasHeight;i++)for(let e=0;e<o.canvasWidth;e++){var r=4*(o.canvasWidth*i+e);t[r]=a[i][e],t[1+r]=a[i][e],t[2+r]=a[i][e],t[3+r]=255}o.drawFrame(t)}a()}{const m=44,n={canvasWidth:100,verbose:window.DEBUG},i=new WilsonCPU($("#eigenface-canvas"),n),d=i.canvasHeight*i.canvasWidth*4,f=new Array(m),u=new Slider({element:$("#index-slider"),name:"Face",value:0,min:0,max:m-1,onInput:e}),p=new Slider({element:$("#depth-2-slider"),name:"Depth",value:1,min:1,max:m,onInput:e}),w=!1;function e(){if(w){var a=uVectors[Math.floor(u.value)],t=uVectors[Math.ceil(u.value)],r=u.value-Math.floor(u.value),n=new Array(d);for(let e=0;e<d;e++)n[e]=(1-r)*a[e]+r*t[e];v(n)}else{var i,[o,l=m]=[u.value,p.value],s=new Array(d),c=new Array(m),h=Math.floor(o);for(let e=0;e<m;e++)c[e]=(1-(o-h))*Math.sqrt(eigendata[e][0])*eigendata[e][1][h]/m,o<m-1&&(c[e]+=(o-h)*Math.sqrt(eigendata[e][0])*eigendata[e][1][h+1]/m);for(let a=0;a<d;a++){for(let e=s[a]=0;e<Math.floor(l);e++)s[a]+=c[e]*uVectors[e][a]/f[e];l<m-1&&(i=Math.floor(l),s[a]+=(l-i)*c[i]*uVectors[i][a]/f[i])}v(s)}}function v(vec){var e=[...vec];let a=0,t=0;for(let r=0;r<e.length;r+=4)a=Math.max(a,e[r]),a=Math.max(a,e[r+1]),a=Math.max(a,e[r+2]),t=Math.min(t,e[r]),t=Math.min(t,e[r+1]),t=Math.min(t,e[r+2]);for(let n=0;n<e.length;n+=4)e[n]=(e[n]-t)/(a-t)*255,e[n+1]=(e[n+1]-t)/(a-t)*255,e[n+2]=(e[n+2]-t)/(a-t)*255,e[n+3]=255;i.drawFrame(new Uint8ClampedArray(e))}setTimeout(()=>e(),100);for(let t=0;t<m;t++){let e=0;for(let a=0;a<d;a++)e+=uVectors[t][a]*uVectors[t][a];f[t]=Math.sqrt(e)}}}
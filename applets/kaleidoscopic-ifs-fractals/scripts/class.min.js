class KaleidoscopicIFSFractal extends Applet{currentlyDrawing=!1;currentlyAnimatingParameters=!1;currentlyDragging=!1;drawStartTime=0;mouseX=0;mouseY=0;movingForwardKeyboard=!1;movingBackwardKeyboard=!1;movingRightKeyboard=!1;movingLeftKeyboard=!1;movingForwardTouch=!1;movingBackwardTouch=!1;wasMovingTouch=!1;movingSpeed=0;nextMoveVelocity=[0,0,0];moveVelocity=[0,0,0];moveFriction=.94;moveVelocityStopThreshhold=5E-4;distanceToScene=1;lastTimestamp=-1;theta=3.2954;phi=1.9657;nextThetaVelocity=0;nextPhiVelocity=0;thetaVelocity=0;phiVelocity=0;panFriction=.94;panVelocityStartThreshhold=.005;panVelocityStopThreshhold=5E-4;imageSize=500;imageWidth=500;imageHeight=500;numSierpinskiIterations=24;scale=2;imagePlaneCenterPos=[];forwardVec=[];rightVec=[];upVec=[];cameraPos=[2.1089,
.41345,.95325];polyhedronIndex=0;focalLength=2;lightPos=[[0,0,5],[5,5,5],[0,0,5]];n1=[[-.57735,0,.816496],[1,0,0],[.707107,0,.707107]];n2=[[.288675,-.5,.816496],[0,1,0],[0,.707107,.707107]];n3=[[.288675,.5,.816496],[0,0,1],[-.707107,0,.707107]];n4=[[],[],[0,-.707107,.707107]];numNs=[3,3,4];scaleCenter=[[0,0,1],[.57735,.57735,.57735],[0,0,1]];rotationAngleX1=0;rotationAngleY1=0;rotationAngleZ1=0;rotationAngleX2=0;rotationAngleY2=0;rotationAngleZ2=0;rotationAngleX1Old=0;rotationAngleY1Old=0;rotationAngleZ1Old=0;rotationAngleX2Old=0;rotationAngleY2Old=0;rotationAngleZ2Old=0;rotationAngleX1Delta=0;rotationAngleY1Delta=0;rotationAngleZ1Delta=0;rotationAngleX2Delta=0;rotationAngleY2Delta=0;rotationAngleZ2Delta=0;parameterAnimationFrame=0;constructor(a){super(a);
const b={renderer:"gpu",shader:"\n\t\t\tprecision highp float;\n\t\t\t\n\t\t\tvarying vec2 uv;\n\t\t\t\n\t\t\tuniform float aspectRatioX;\n\t\t\tuniform float aspectRatioY;\n\t\t\t\n\t\t\tuniform vec3 cameraPos;\n\t\t\tuniform vec3 imagePlaneCenterPos;\n\t\t\tuniform vec3 forwardVec;\n\t\t\tuniform vec3 rightVec;\n\t\t\tuniform vec3 upVec;\n\t\t\t\n\t\t\tuniform float focalLength;\n\t\t\t\n\t\t\tuniform vec3 lightPos;\n\t\t\tconst float lightBrightness = 2.0;\n\t\t\t\n\t\t\tuniform int imageSize;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tconst float clipDistance = 1000.0;\n\t\t\tconst int maxMarches = 32;\n\t\t\tconst vec3 fogColor = vec3(0.0, 0.0, 0.0);\n\t\t\tconst float fogScaling = .2;\n\t\t\tconst int maxIterations = 24;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tconst vec3 color1 = vec3(1.0, 0.0, 0.0);\n\t\t\tconst vec3 color2 = vec3(0.0, 1.0, 0.0);\n\t\t\tconst vec3 color3 = vec3(0.0, 0.0, 1.0);\n\t\t\tconst vec3 color4 = vec3(1.0, 1.0, 0.0);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tuniform vec3 scaleCenter;\n\t\t\t\n\t\t\tuniform int numNs;\n\t\t\t\n\t\t\tuniform vec3 n1;\n\t\t\tuniform vec3 n2;\n\t\t\tuniform vec3 n3;\n\t\t\tuniform vec3 n4;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tconst float scale = 2.0;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tuniform mat3 rotationMatrix1;\n\t\t\tuniform mat3 rotationMatrix2;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfloat distanceEstimator(vec3 pos)\n\t\t\t{\n\t\t\t\tvec3 mutablePos = pos;\n\t\t\t\t\n\t\t\t\t//We'll find the closest vertex, scale everything by a factor of 2 centered on that vertex (so that we don't need to recalculate the vertices), and repeat.\n\t\t\t\tfor (int iteration = 0; iteration < maxIterations; iteration++)\n\t\t\t\t{\n\t\t\t\t\t//Fold space over on itself so that we can reference only the top vertex.\n\t\t\t\t\tfloat t1 = dot(mutablePos, n1);\n\t\t\t\t\t\n\t\t\t\t\tif (t1 < 0.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmutablePos -= 2.0 * t1 * n1;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfloat t2 = dot(mutablePos, n2);\n\t\t\t\t\t\n\t\t\t\t\tif (t2 < 0.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmutablePos -= 2.0 * t2 * n2;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfloat t3 = dot(mutablePos, n3);\n\t\t\t\t\t\n\t\t\t\t\tif (t3 < 0.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmutablePos -= 2.0 * t3 * n3;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (numNs >= 4)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat t4 = dot(mutablePos, n4);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (t4 < 0.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmutablePos -= 2.0 * t4 * n4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tmutablePos = rotationMatrix1 * mutablePos;\n\t\t\t\t\t\n\t\t\t\t\t//Scale the system -- this one takes me a fair bit of thinking to get. What's happening here is that we're stretching from a vertex, but since we never scale the vertices, the four new ones are the four closest to the vertex we scaled from. Now (x, y, z) will get farther and farther away from the origin, but that makes sense -- we're really just zooming in on the tetrahedron.\n\t\t\t\t\tmutablePos = scale * mutablePos - (scale - 1.0) * scaleCenter;\n\t\t\t\t\t\n\t\t\t\t\tmutablePos = rotationMatrix2 * mutablePos;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn length(mutablePos) * pow(1.0/scale, float(maxIterations));\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvec3 getColor(vec3 pos)\n\t\t\t{\n\t\t\t\tvec3 mutablePos = pos;\n\t\t\t\t\n\t\t\t\tvec3 color = vec3(1.0, 1.0, 1.0);\n\t\t\t\tfloat colorScale = .5;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//We'll find the closest vertex, scale everything by a factor of 2 centered on that vertex (so that we don't need to recalculate the vertices), and repeat.\n\t\t\t\tfor (int iteration = 0; iteration < maxIterations; iteration++)\n\t\t\t\t{\n\t\t\t\t\t//Fold space over on itself so that we can reference only the top vertex.\n\t\t\t\t\tfloat t1 = dot(mutablePos, n1);\n\t\t\t\t\t\n\t\t\t\t\tif (t1 < 0.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmutablePos -= 2.0 * t1 * n1;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcolor = mix(color, color1, colorScale);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfloat t2 = dot(mutablePos, n2);\n\t\t\t\t\t\n\t\t\t\t\tif (t2 < 0.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmutablePos -= 2.0 * t2 * n2;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcolor = mix(color, color2, colorScale);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfloat t3 = dot(mutablePos, n3);\n\t\t\t\t\t\n\t\t\t\t\tif (t3 < 0.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmutablePos -= 2.0 * t3 * n3;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcolor = mix(color, color3, colorScale);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (numNs >= 4)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat t4 = dot(mutablePos, n4);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (t4 < 0.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmutablePos -= 2.0 * t4 * n4;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcolor = mix(color, color4, colorScale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tmutablePos = rotationMatrix1 * mutablePos;\n\t\t\t\t\t\n\t\t\t\t\t//Scale the system -- this one takes me a fair bit of thinking to get. What's happening here is that we're stretching from a vertex, but since we never scale the vertices, the four new ones are the four closest to the vertex we scaled from. Now (x, y, z) will get farther and farther away from the origin, but that makes sense -- we're really just zooming in on the tetrahedron.\n\t\t\t\t\tmutablePos = scale * mutablePos - (scale - 1.0) * scaleCenter;\n\t\t\t\t\t\n\t\t\t\t\tmutablePos = rotationMatrix2 * mutablePos;\n\t\t\t\t\t\n\t\t\t\t\tcolorScale *= .5;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\treturn color;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvec3 getSurfaceNormal(vec3 pos)\n\t\t\t{\n\t\t\t\tfloat xStep1 = distanceEstimator(pos + vec3(.000001, 0.0, 0.0));\n\t\t\t\tfloat yStep1 = distanceEstimator(pos + vec3(0.0, .000001, 0.0));\n\t\t\t\tfloat zStep1 = distanceEstimator(pos + vec3(0.0, 0.0, .000001));\n\t\t\t\t\n\t\t\t\tfloat xStep2 = distanceEstimator(pos - vec3(.000001, 0.0, 0.0));\n\t\t\t\tfloat yStep2 = distanceEstimator(pos - vec3(0.0, .000001, 0.0));\n\t\t\t\tfloat zStep2 = distanceEstimator(pos - vec3(0.0, 0.0, .000001));\n\t\t\t\t\n\t\t\t\treturn normalize(vec3(xStep1 - xStep2, yStep1 - yStep2, zStep1 - zStep2));\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvec3 computeShading(vec3 pos, int iteration)\n\t\t\t{\n\t\t\t\tvec3 surfaceNormal = getSurfaceNormal(pos);\n\t\t\t\t\n\t\t\t\tvec3 lightDirection = normalize(lightPos - pos);\n\t\t\t\t\n\t\t\t\tfloat dotProduct = dot(surfaceNormal, lightDirection);\n\t\t\t\t\n\t\t\t\tfloat lightIntensity = lightBrightness * max(dotProduct, -.25 * dotProduct);\n\t\t\t\t\n\t\t\t\t//The last factor adds ambient occlusion.\n\t\t\t\tvec3 color = getColor(pos) * lightIntensity * max((1.0 - float(iteration) / float(maxMarches)), 0.0);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//Apply fog.\n\t\t\t\treturn mix(color, fogColor, 1.0 - exp(-distance(pos, cameraPos) * fogScaling));\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvec3 raymarch(vec3 startPos)\n\t\t\t{\n\t\t\t\t//That factor of .9 is important -- without it, we're always stepping as far as possible, which results in artefacts and weirdness.\n\t\t\t\tvec3 rayDirectionVec = normalize(startPos - cameraPos) * .9;\n\t\t\t\t\n\t\t\t\tvec3 finalColor = fogColor;\n\t\t\t\t\n\t\t\t\tfloat epsilon = .0000001;\n\t\t\t\t\n\t\t\t\tfloat t = 0.0;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor (int iteration = 0; iteration < maxMarches; iteration++)\n\t\t\t\t{\n\t\t\t\t\tvec3 pos = startPos + t * rayDirectionVec;\n\t\t\t\t\t\n\t\t\t\t\tfloat distance = distanceEstimator(pos);\n\t\t\t\t\t\n\t\t\t\t\t//This lowers the detail far away, which makes everything run nice and fast.\n\t\t\t\t\tepsilon = max(.0000006, 3.0 * t / float(imageSize));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif (distance < epsilon)\n\t\t\t\t\t{\n\t\t\t\t\t\tfinalColor = computeShading(pos, iteration);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse if (t > clipDistance)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tt += distance;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\treturn finalColor;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\t//Uncomment to use 2x antialiasing.\n\t\t\t\t//vec3 finalColor = (raymarch(imagePlaneCenterPos + rightVec * (uv.x * aspectRatio + .5 / float(imageSize)) + upVec * (uv.y + .5 / float(imageSize))) + raymarch(imagePlaneCenterPos + rightVec * (uv.x * aspectRatio + .5 / float(imageSize)) + upVec * (uv.y - .5 / float(imageSize))) + raymarch(imagePlaneCenterPos + rightVec * (uv.x * aspectRatio - .5 / float(imageSize)) + upVec * (uv.y + .5 / float(imageSize))) + raymarch(imagePlaneCenterPos + rightVec * (uv.x * aspectRatio - .5 / float(imageSize)) + upVec * (uv.y - .5 / float(imageSize)))) / 4.0;\n\t\t\t\t\t\n\t\t\t\tvec3 finalColor = raymarch(imagePlaneCenterPos + rightVec * uv.x * aspectRatioX + upVec * uv.y / aspectRatioY);\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4(finalColor.xyz, 1.0);\n\t\t\t}\n\t\t",
canvasWidth:500,canvasHeight:500,useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:this.changeResolution.bind(this),mousedownCallback:this.onGrabCanvas.bind(this),touchstartCallback:this.onGrabCanvas.bind(this),mousedragCallback:this.onDragCanvas.bind(this),touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),
touchendCallback:this.onReleaseCanvas.bind(this)};this.wilson=new Wilson(a,b);this.wilson.render.initUniforms("aspectRatioX aspectRatioY imageSize cameraPos imagePlaneCenterPos forwardVec rightVec upVec focalLength lightPos scaleCenter n1 n2 n3 n4 numNs rotationMatrix1 rotationMatrix2".split(" "));this.calculateVectors();this.imageWidth>=this.imageHeight?(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,this.imageWidth/this.imageHeight),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,
1)):(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,1),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,this.imageWidth/this.imageHeight));this.wilson.gl.uniform1i(this.wilson.uniforms.imageSize,this.imageSize);this.wilson.gl.uniform3fv(this.wilson.uniforms.cameraPos,this.cameraPos);this.wilson.gl.uniform3fv(this.wilson.uniforms.imagePlaneCenterPos,this.imagePlaneCenterPos);this.wilson.gl.uniform3fv(this.wilson.uniforms.lightPos,this.lightPos[this.polyhedronIndex]);this.wilson.gl.uniform3fv(this.wilson.uniforms.scaleCenter,
this.scaleCenter[this.polyhedronIndex]);this.wilson.gl.uniform3fv(this.wilson.uniforms.forwardVec,this.forwardVec);this.wilson.gl.uniform3fv(this.wilson.uniforms.rightVec,this.rightVec);this.wilson.gl.uniform3fv(this.wilson.uniforms.upVec,this.upVec);this.wilson.gl.uniform1f(this.wilson.uniforms.focalLength,this.focalLength);this.wilson.gl.uniform3fv(this.wilson.uniforms.n1,this.n1[this.polyhedronIndex]);this.wilson.gl.uniform3fv(this.wilson.uniforms.n2,this.n2[this.polyhedronIndex]);this.wilson.gl.uniform3fv(this.wilson.uniforms.n3,
this.n3[this.polyhedronIndex]);this.wilson.gl.uniform3fv(this.wilson.uniforms.n4,this.n4[this.polyhedronIndex]);this.wilson.gl.uniform1i(this.wilson.uniforms.numNs,this.numNs[this.polyhedronIndex]);this.wilson.gl.uniformMatrix3fv(this.wilson.uniforms.rotationMatrix1,!1,[1,0,0,0,1,0,0,0,1]);this.wilson.gl.uniformMatrix3fv(this.wilson.uniforms.rotationMatrix2,!1,[1,0,0,0,1,0,0,0,1]);a=this.handleKeydownEvent.bind(this);document.documentElement.addEventListener("keydown",a);this.handlers.push([document.documentElement,
"keydown",a]);a=this.handleKeyupEvent.bind(this);document.documentElement.addEventListener("keyup",a);this.handlers.push([document.documentElement,"keyup",a]);a=()=>{this.changeResolution()};window.addEventListener("resize",a);this.handlers.push([window,"resize",a]);window.requestAnimationFrame(this.drawFrame.bind(this))}drawFrame(a){const b=a-this.lastTimestamp;this.lastTimestamp=a;if(0!==b){this.wilson.render.drawFrame();a=!1;this.movingForwardKeyboard||this.movingBackwardKeyboard||this.movingRightKeyboard||
this.movingLeftKeyboard||this.movingForwardTouch||this.movingBackwardTouch?(this.updateCameraParameters(),a=!0):50<=b&&(this.phiVelocity=this.thetaVelocity=this.nextPhiVelocity=this.nextThetaVelocity=0,this.movingBackwardTouch=this.movingForwardTouch=!1,this.moveVelocity[0]=0,this.moveVelocity[1]=0,this.moveVelocity[2]=0,this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0);if(0!==this.thetaVelocity||0!==this.phiVelocity)this.theta+=this.thetaVelocity,this.phi+=this.phiVelocity,
this.theta>=2*Math.PI?this.theta-=2*Math.PI:0>this.theta&&(this.theta+=2*Math.PI),this.phi>Math.PI-.01?this.phi=Math.PI-.01:.01>this.phi&&(this.phi=.01),this.thetaVelocity*=this.panFriction,this.phiVelocity*=this.panFriction,this.thetaVelocity*this.thetaVelocity+this.phiVelocity*this.phiVelocity<this.panVelocityStopThreshhold*this.panVelocityStopThreshhold&&(this.phiVelocity=this.thetaVelocity=0),this.calculateVectors(),a=!0;if(0!==this.moveVelocity[0]||0!==this.moveVelocity[1]||0!==this.moveVelocity[2])this.cameraPos[0]+=
this.moveVelocity[0],this.cameraPos[1]+=this.moveVelocity[1],this.cameraPos[2]+=this.moveVelocity[2],this.moveVelocity[0]*=this.moveFriction,this.moveVelocity[1]*=this.moveFriction,this.moveVelocity[2]*=this.moveFriction,this.moveVelocity[0]*this.moveVelocity[0]+this.moveVelocity[1]*this.moveVelocity[1]+this.moveVelocity[2]*this.moveVelocity[2]<this.moveVelocityStopThreshhold*this.movingSpeed*this.moveVelocityStopThreshhold*this.movingSpeed&&(this.moveVelocity[0]=0,this.moveVelocity[1]=0,this.moveVelocity[2]=
0),this.calculateVectors(),a=!0;a&&window.requestAnimationFrame(this.drawFrame.bind(this))}}calculateVectors(){this.forwardVec=[Math.cos(this.theta)*Math.sin(this.phi),Math.sin(this.theta)*Math.sin(this.phi),Math.cos(this.phi)];this.rightVec=this.normalize([this.forwardVec[1],-this.forwardVec[0],0]);this.upVec=this.crossProduct(this.rightVec,this.forwardVec);this.distanceToScene=this.distanceEstimator(this.cameraPos[0],this.cameraPos[1],this.cameraPos[2]);this.focalLength=this.distanceToScene/2;this.rightVec[0]*=
this.focalLength/2;this.rightVec[1]*=this.focalLength/2;this.upVec[0]*=this.focalLength/2;this.upVec[1]*=this.focalLength/2;this.upVec[2]*=this.focalLength/2;this.imagePlaneCenterPos=[this.cameraPos[0]+this.focalLength*this.forwardVec[0],this.cameraPos[1]+this.focalLength*this.forwardVec[1],this.cameraPos[2]+this.focalLength*this.forwardVec[2]];this.wilson.gl.uniform3fv(this.wilson.uniforms.cameraPos,this.cameraPos);this.wilson.gl.uniform3fv(this.wilson.uniforms.imagePlaneCenterPos,this.imagePlaneCenterPos);
this.wilson.gl.uniform3fv(this.wilson.uniforms.forwardVec,this.forwardVec);this.wilson.gl.uniform3fv(this.wilson.uniforms.rightVec,this.rightVec);this.wilson.gl.uniform3fv(this.wilson.uniforms.upVec,this.upVec);this.wilson.gl.uniform1f(this.wilson.uniforms.focalLength,this.focalLength)}dotProduct(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]}crossProduct(a,b){return[a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]]}matMul(a,b){return[[a[0][0]*b[0][0]+a[0][1]*b[1][0]+a[0][2]*b[2][0],a[0][0]*
b[0][1]+a[0][1]*b[1][1]+a[0][2]*b[2][1],a[0][0]*b[0][2]+a[0][1]*b[1][2]+a[0][2]*b[2][2]],[a[1][0]*b[0][0]+a[1][1]*b[1][0]+a[1][2]*b[2][0],a[1][0]*b[0][1]+a[1][1]*b[1][1]+a[1][2]*b[2][1],a[1][0]*b[0][2]+a[1][1]*b[1][2]+a[1][2]*b[2][2]],[a[2][0]*b[0][0]+a[2][1]*b[1][0]+a[2][2]*b[2][0],a[2][0]*b[0][1]+a[2][1]*b[1][1]+a[2][2]*b[2][1],a[2][0]*b[0][2]+a[2][1]*b[1][2]+a[2][2]*b[2][2]]]}normalize(a){const b=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return[a[0]/b,a[1]/b,a[2]/b]}distanceEstimator(a,b,c){for(let g=
0;g<this.numSierpinskiIterations;g++){var d=this.dotProduct([a,b,c],this.n1[this.polyhedronIndex]);0>d&&(a-=2*d*this.n1[this.polyhedronIndex][0],b-=2*d*this.n1[this.polyhedronIndex][1],c-=2*d*this.n1[this.polyhedronIndex][2]);d=this.dotProduct([a,b,c],this.n2[this.polyhedronIndex]);0>d&&(a-=2*d*this.n2[this.polyhedronIndex][0],b-=2*d*this.n2[this.polyhedronIndex][1],c-=2*d*this.n2[this.polyhedronIndex][2]);d=this.dotProduct([a,b,c],this.n3[this.polyhedronIndex]);0>d&&(a-=2*d*this.n3[this.polyhedronIndex][0],
b-=2*d*this.n3[this.polyhedronIndex][1],c-=2*d*this.n3[this.polyhedronIndex][2]);4<=this.numNs[this.polyhedronIndex]&&(d=this.dotProduct([a,b,c],this.n4[this.polyhedronIndex]),0>d&&(a-=2*d*this.n4[this.polyhedronIndex][0],b-=2*d*this.n4[this.polyhedronIndex][1],c-=2*d*this.n4[this.polyhedronIndex][2]));d=a;let f=b;a=[[Math.cos(this.rotationAngleZ1),-Math.sin(this.rotationAngleZ1),0],[Math.sin(this.rotationAngleZ1),Math.cos(this.rotationAngleZ1),0],[0,0,1]];b=[[Math.cos(this.rotationAngleY1),0,-Math.sin(this.rotationAngleY1)],
[0,1,0],[Math.sin(this.rotationAngleY1),0,Math.cos(this.rotationAngleY1)]];var e=[[1,0,0],[0,Math.cos(this.rotationAngleX1),-Math.sin(this.rotationAngleX1)],[0,Math.sin(this.rotationAngleX1),Math.cos(this.rotationAngleX1)]];e=this.matMul(this.matMul(a,b),e);a=e[0][0]*d+e[0][1]*f+e[0][2]*c;b=e[1][0]*d+e[1][1]*f+e[1][2]*c;c=e[2][0]*d+e[2][1]*f+e[2][2]*c;a=this.scale*a-(this.scale-1)*this.scaleCenter[this.polyhedronIndex][0];b=this.scale*b-(this.scale-1)*this.scaleCenter[this.polyhedronIndex][1];c=this.scale*
c-(this.scale-1)*this.scaleCenter[this.polyhedronIndex][2];d=a;f=b;a=[[Math.cos(this.rotationAngleZ2),-Math.sin(this.rotationAngleZ2),0],[Math.sin(this.rotationAngleZ2),Math.cos(this.rotationAngleZ2),0],[0,0,1]];b=[[Math.cos(this.rotationAngleY2),0,-Math.sin(this.rotationAngleY2)],[0,1,0],[Math.sin(this.rotationAngleY2),0,Math.cos(this.rotationAngleY2)]];e=[[1,0,0],[0,Math.cos(this.rotationAngleX2),-Math.sin(this.rotationAngleX2)],[0,Math.sin(this.rotationAngleX2),Math.cos(this.rotationAngleX2)]];
e=this.matMul(this.matMul(a,b),e);a=e[0][0]*d+e[0][1]*f+e[0][2]*c;b=e[1][0]*d+e[1][1]*f+e[1][2]*c;c=e[2][0]*d+e[2][1]*f+e[2][2]*c}return Math.sqrt(a*a+b*b+c*c)*Math.pow(this.scale,-this.numSierpinskiIterations)}onGrabCanvas(a,b,c){this.phiVelocity=this.thetaVelocity=this.nextPhiVelocity=this.nextThetaVelocity=0;"touchstart"===c.type&&(2===c.touches.length?(this.movingForwardTouch=!0,this.movingBackwardTouch=!1,this.moveVelocity[0]=0,this.moveVelocity[1]=0,this.moveVelocity[2]=0,this.nextMoveVelocity[0]=
0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0,window.requestAnimationFrame(this.drawFrame.bind(this))):3===c.touches.length?(this.movingForwardTouch=!1,this.movingBackwardTouch=!0,this.moveVelocity[0]=0,this.moveVelocity[1]=0,this.moveVelocity[2]=0,this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0,window.requestAnimationFrame(this.drawFrame.bind(this))):this.movingBackwardTouch=this.movingForwardTouch=!1,this.wasMovingTouch=!1)}onDragCanvas(a,b,c,d,e){"touchmove"===
e.type&&this.wasMovingTouch?this.wasMovingTouch=!1:(this.theta+=c*Math.PI/2,this.nextThetaVelocity=c*Math.PI/2,this.theta>=2*Math.PI?this.theta-=2*Math.PI:0>this.theta&&(this.theta+=2*Math.PI),this.phi+=d*Math.PI/2,this.nextPhiVelocity=d*Math.PI/2,this.phi>Math.PI-.01?this.phi=Math.PI-.01:.01>this.phi&&(this.phi=.01),this.calculateVectors(),window.requestAnimationFrame(this.drawFrame.bind(this)))}onReleaseCanvas(a,b,c){"touchend"===c.type&&(this.movingBackwardTouch=this.movingForwardTouch=!1,this.wasMovingTouch=
!0,0===this.moveVelocity[0]&&0===this.moveVelocity[1]&&0===this.moveVelocity[2]&&(this.moveVelocity[0]=this.nextMoveVelocity[0],this.moveVelocity[1]=this.nextMoveVelocity[1],this.moveVelocity[2]=this.nextMoveVelocity[2],this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0));(("touchend"===c.type&&c.touches,0===length)||"mouseup"===c.type)&&this.nextThetaVelocity*this.nextThetaVelocity+this.nextPhiVelocity*this.nextPhiVelocity>=this.panVelocityStartThreshhold*this.panVelocityStartThreshhold&&
(this.thetaVelocity=this.nextThetaVelocity,this.phiVelocity=this.nextPhiVelocity)}handleKeydownEvent(a){"INPUT"===document.activeElement.tagName||87!==a.keyCode&&83!==a.keyCode&&68!==a.keyCode&&65!==a.keyCode||(this.nextMoveVelocity=[0,0,0],this.moveVelocity=[0,0,0],87===a.keyCode?this.movingForwardKeyboard=!0:83===a.keyCode&&(this.movingBackwardKeyboard=!0),68===a.keyCode?this.movingRightKeyboard=!0:65===a.keyCode&&(this.movingLeftKeyboard=!0),window.requestAnimationFrame(this.drawFrame.bind(this)))}handleKeyupEvent(a){"INPUT"===
document.activeElement.tagName||87!==a.keyCode&&83!==a.keyCode&&68!==a.keyCode&&65!==a.keyCode||(0===this.moveVelocity[0]&&0===this.moveVelocity[1]&&0===this.moveVelocity[2]&&(this.moveVelocity[0]=this.nextMoveVelocity[0],this.moveVelocity[1]=this.nextMoveVelocity[1],this.moveVelocity[2]=this.nextMoveVelocity[2],this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0),87===a.keyCode?this.movingForwardKeyboard=!1:83===a.keyCode&&(this.movingBackwardKeyboard=!1),68===a.keyCode?
this.movingRightKeyboard=!1:65===a.keyCode&&(this.movingLeftKeyboard=!1))}updateCameraParameters(){this.movingSpeed=Math.min(Math.max(1E-6,this.distanceToScene/20),.02);const a=[...this.cameraPos];if(this.movingForwardKeyboard||this.movingForwardTouch)this.cameraPos[0]+=this.movingSpeed*this.forwardVec[0],this.cameraPos[1]+=this.movingSpeed*this.forwardVec[1],this.cameraPos[2]+=this.movingSpeed*this.forwardVec[2];else if(this.movingBackwardKeyboard||this.movingBackwardTouch)this.cameraPos[0]-=this.movingSpeed*
this.forwardVec[0],this.cameraPos[1]-=this.movingSpeed*this.forwardVec[1],this.cameraPos[2]-=this.movingSpeed*this.forwardVec[2];this.movingRightKeyboard?(this.cameraPos[0]+=this.movingSpeed*this.rightVec[0]/this.focalLength,this.cameraPos[1]+=this.movingSpeed*this.rightVec[1]/this.focalLength,this.cameraPos[2]+=this.movingSpeed*this.rightVec[2]/this.focalLength):this.movingLeftKeyboard&&(this.cameraPos[0]-=this.movingSpeed*this.rightVec[0]/this.focalLength,this.cameraPos[1]-=this.movingSpeed*this.rightVec[1]/
this.focalLength,this.cameraPos[2]-=this.movingSpeed*this.rightVec[2]/this.focalLength);this.nextMoveVelocity[0]=this.cameraPos[0]-a[0];this.nextMoveVelocity[1]=this.cameraPos[1]-a[1];this.nextMoveVelocity[2]=this.cameraPos[2]-a[2];this.calculateVectors()}changeResolution(a=this.imageSize){this.imageSize=Math.max(100,a);this.wilson.fullscreen.currentlyFullscreen?1<=Page.Layout.aspectRatio?(this.imageWidth=this.imageSize,this.imageHeight=Math.floor(this.imageSize/Page.Layout.aspectRatio)):(this.imageWidth=
Math.floor(this.imageSize*Page.Layout.aspectRatio),this.imageHeight=this.imageSize):this.imageHeight=this.imageWidth=this.imageSize;this.wilson.changeCanvasSize(this.imageWidth,this.imageHeight);this.imageWidth>=this.imageHeight?(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,this.imageWidth/this.imageHeight),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,1)):(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,1),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,
this.imageWidth/this.imageHeight));this.wilson.gl.uniform1i(this.wilson.uniforms.imageSize,this.imageSize);window.requestAnimationFrame(this.drawFrame.bind(this))}updateParameters(a,b,c,d,e,g){anime({targets:this,rotationAngleX1:a,rotationAngleY1:b,rotationAngleZ1:c,rotationAngleX2:d,rotationAngleY2:e,rotationAngleZ2:g,duration:1E3,easing:"easeOutQuad",update:this.updateMatrices.bind(this)})}updateMatrices(){var a=[[Math.cos(this.rotationAngleZ1),-Math.sin(this.rotationAngleZ1),0],[Math.sin(this.rotationAngleZ1),
Math.cos(this.rotationAngleZ1),0],[0,0,1]];let b=[[Math.cos(this.rotationAngleY1),0,-Math.sin(this.rotationAngleY1)],[0,1,0],[Math.sin(this.rotationAngleY1),0,Math.cos(this.rotationAngleY1)]],c=[[1,0,0],[0,Math.cos(this.rotationAngleX1),-Math.sin(this.rotationAngleX1)],[0,Math.sin(this.rotationAngleX1),Math.cos(this.rotationAngleX1)]];a=this.matMul(this.matMul(a,b),c);this.wilson.gl.uniformMatrix3fv(this.wilson.uniforms.rotationMatrix1,!1,[a[0][0],a[1][0],a[2][0],a[0][1],a[1][1],a[2][1],a[0][2],a[1][2],
a[2][2]]);a=[[Math.cos(this.rotationAngleZ2),-Math.sin(this.rotationAngleZ2),0],[Math.sin(this.rotationAngleZ2),Math.cos(this.rotationAngleZ2),0],[0,0,1]];b=[[Math.cos(this.rotationAngleY2),0,-Math.sin(this.rotationAngleY2)],[0,1,0],[Math.sin(this.rotationAngleY2),0,Math.cos(this.rotationAngleY2)]];c=[[1,0,0],[0,Math.cos(this.rotationAngleX2),-Math.sin(this.rotationAngleX2)],[0,Math.sin(this.rotationAngleX2),Math.cos(this.rotationAngleX2)]];a=this.matMul(this.matMul(a,b),c);this.wilson.gl.uniformMatrix3fv(this.wilson.uniforms.rotationMatrix2,
!1,[a[0][0],a[1][0],a[2][0],a[0][1],a[1][1],a[2][1],a[0][2],a[1][2],a[2][2]]);window.requestAnimationFrame(this.drawFrame.bind(this))}async changePolyhedron(a){await Page.Animate.changeOpacity(this.wilson.canvas,0,Site.opacityAnimationTime);this.polyhedronIndex=a;this.wilson.gl.uniform3fv(this.wilson.uniforms.lightPos,this.lightPos[this.polyhedronIndex]);this.wilson.gl.uniform3fv(this.wilson.uniforms.scaleCenter,this.scaleCenter[this.polyhedronIndex]);this.wilson.gl.uniform3fv(this.wilson.uniforms.n1,
this.n1[this.polyhedronIndex]);this.wilson.gl.uniform3fv(this.wilson.uniforms.n2,this.n2[this.polyhedronIndex]);this.wilson.gl.uniform3fv(this.wilson.uniforms.n3,this.n3[this.polyhedronIndex]);this.wilson.gl.uniform3fv(this.wilson.uniforms.n4,this.n4[this.polyhedronIndex]);this.wilson.gl.uniform1i(this.wilson.uniforms.numNs,this.numNs[this.polyhedronIndex]);window.requestAnimationFrame(this.drawFrame.bind(this));Page.Animate.changeOpacity(this.wilson.canvas,1,Site.opacityAnimationTime)}};

import anime from"/scripts/anime.min.js";import{magnitude,mat3TimesVector,RaymarchApplet}from"/scripts/applets/raymarchApplet.min.js";import{animate}from"/scripts/src/utils.min.js";class Mandelbulb extends RaymarchApplet{animeLoop;fountainFactor=0;constructor({canvas}){super({canvas:canvas,resolution:400,distanceEstimatorGlsl:`
			vec3 z = pos;
			
			float r = length(z);
			float dr = 1.0;
			
			for (int iteration = 0; iteration < 16; iteration++)
			{
				if (r > 16.0)
				{
					break;
				}
				
				float theta = acos(clamp(z.z / r, -1.0, 1.0));
				
				float phi = atan(z.y, z.x);
				
				dr = pow(r, power - 1.0) * power * dr + 1.0;
				
				theta = power * theta + fountainAmount;
				
				phi *= power;
				
				z = pow(r, power) * vec3(
					sin(theta) * cos(phi),
					sin(theta) * sin(phi),
					cos(theta)
				);
				
				z += mix(pos, c, juliaProportion);
				
				z = rotationMatrix * z;
				
				r = length(z);
			}
			
			return .5 * log(r) * r / dr;
		`,getColorGlsl:`
			vec3 z = pos;
			
			float r = length(z);
			float dr = 1.0;
			
			vec3 color = vec3(1.0, 1.0, 1.0);
			float colorScale = .5;
			
			for (int iteration = 0; iteration < 8; iteration++)
			{
				if (r > 16.0)
				{
					break;
				}
				
				float theta = acos(z.z / r);
				
				float phi = atan(z.y, z.x);
				
				dr = pow(r, power - 1.0) * power * dr + 1.0;
				
				theta = power * theta + fountainAmount;
				
				phi *= power;
				
				z = pow(r, power) * vec3(
					sin(theta) * cos(phi),
					sin(theta) * sin(phi),
					cos(theta)
				);
				
				z += mix(pos, c, juliaProportion);
				
				z = rotationMatrix * z;
				
				r = length(z);
				
				color = mix(color, abs(z / r), colorScale);
				
				colorScale *= .5;
			}
			
			color /= max(max(color.x, color.y), color.z);
			
			return color;
		`,uniformsGlsl:`
			uniform float power;
			uniform vec3 c;
			uniform float juliaProportion;
			uniform mat3 rotationMatrix;
			uniform float fountainAmount;
		`,uniforms:{power:8,c:[0,0,0],juliaProportion:0,rotationMatrix:[[1,0,0],[0,1,0],[0,0,1]],fountainAmount:0},theta:4.6601,phi:2.272,cameraPos:[.084365,1.91102,1.69388],lightPos:[-10,0,15],lightBrightness:1.2})}destroy(){super.destroy(),this.animeLoop&&this.animeLoop.pause()}distanceEstimator(x,y,z){let t=[x,y,z],o=0,a=1;var i=this.uniforms.c,r=this.uniforms.juliaProportion,n=this.uniforms.power,e=this.uniforms.rotationMatrix,s=this.uniforms.fountainAmount;for(let m=0;m<16&&!(16<(o=magnitude(t)));m++){var l=Math.acos(t[2]/o),p=Math.atan2(t[1],t[0]),h=(a=Math.pow(o,n-1)*n*a+1,l=l*n+s,p*=n,Math.pow(o,n));t[0]=h*Math.sin(l)*Math.cos(p)+((1-r)*x+r*i[0]),t[1]=h*Math.sin(l)*Math.sin(p)+((1-r)*y+r*i[1]),t[2]=h*Math.cos(l)+((1-r)*z+r*i[2]),t=mat3TimesVector(e,t)}return.5*Math.log(o)*o/a}switchBulb(instant){const o=this.uniforms.juliaProportion,a=0===this.uniforms.juliaProportion?1:0;animate(t=>{this.setUniforms({juliaProportion:(1-t)*o+t*a}),this.needNewFrame=!0},instant?0:650,"easeOutQuad")}async setFountainAnimation(enabled){if(enabled){const o={t:0};this.animeLoop=anime({targets:o,t:-2*Math.PI,duration:3e3,easing:"linear",loop:!0,direction:"forward",update:()=>{this.setUniforms({fountainAmount:o.t*this.fountainFactor})}}),animate(t=>{this.fountainFactor=t},1e3)}else{this.animeLoop.pause();const a=this.uniforms.fountainAmount*this.fountainFactor;animate(t=>{this.setUniforms({fountainAmount:a*(1-t)-2*Math.PI*t})},400*(a+2*Math.PI),"easeOutQuad")}}}export{Mandelbulb};
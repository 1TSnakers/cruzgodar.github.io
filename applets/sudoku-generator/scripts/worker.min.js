"use strict";const gridSize=9;let grid=[],nonzeroCells=[],numSolutionsFound=0;function generateSudokuGrid(){grid=[],generateNumberGrid();for(let i=0;i<gridSize;i++)for(let j=0;j<gridSize;j++)nonzeroCells.push([i,j]);nonzeroCells=shuffleArray(nonzeroCells);for(let i=0;i<nonzeroCells.length;i++){var cellToRemove=nonzeroCells[i],numberToRemove=grid[cellToRemove[0]][cellToRemove[1]];grid[cellToRemove[0]][cellToRemove[1]]=0,1!==(numSolutionsFound=wasmSolvePuzzle(grid))&&(grid[cellToRemove[0]][cellToRemove[1]]=numberToRemove,numSolutionsFound=1)}postMessage([grid])}function shuffleArray(array){let currentIndex=array.length;for(;0!==currentIndex;){var randomIndex=Math.floor(Math.random()*currentIndex),temp=array[--currentIndex];array[currentIndex]=array[randomIndex],array[randomIndex]=temp}return array}function generateNumberGrid(){grid=[[2,9,5,7,4,3,8,6,1],[4,3,1,8,6,5,9,2,7],[8,7,6,1,9,2,5,4,3],[3,8,7,4,5,9,2,1,6],[6,1,2,3,8,7,4,9,5],[5,4,9,2,1,6,7,3,8],[7,6,3,5,2,4,1,8,9],[9,2,8,6,7,1,3,5,4],[1,5,4,9,3,8,6,7,2]];var shuffles=shuffleArray([shuffleGridRows,shuffleGridRows,shuffleGridColumns,shuffleGridColumns,shuffleGridDigits,shuffleGridDigits]);for(let i=0;i<6;i++)shuffles[i]()}function shuffleGridRows(){var row1=Math.floor(3*Math.random()),row2=Math.floor(3*Math.random()),row3=Math.floor(3*Math.random())+3,row4=Math.floor(3*Math.random())+3,row5=Math.floor(3*Math.random())+6,row6=Math.floor(3*Math.random())+6;for(let j=0;j<gridSize;j++){var temp=grid[row1][j];grid[row1][j]=grid[row2][j],grid[row2][j]=temp,temp=grid[row3][j],grid[row3][j]=grid[row4][j],grid[row4][j]=temp,temp=grid[row5][j],grid[row5][j]=grid[row6][j],grid[row6][j]=temp}}function shuffleGridColumns(){var col1=Math.floor(3*Math.random()),col2=Math.floor(3*Math.random()),col3=Math.floor(3*Math.random())+3,col4=Math.floor(3*Math.random())+3,col5=Math.floor(3*Math.random())+6,col6=Math.floor(3*Math.random())+6;for(let i=0;i<gridSize;i++){var temp=grid[i][col1];grid[i][col1]=grid[i][col2],grid[i][col2]=temp,temp=grid[i][col3],grid[i][col3]=grid[i][col4],grid[i][col4]=temp,temp=grid[i][col5],grid[i][col5]=grid[i][col6],grid[i][col6]=temp}}function shuffleGridDigits(){var permutation=shuffleArray([...Array(gridSize).keys()]),tempGrid=[];for(let i=0;i<gridSize;i++){tempGrid[i]=[];for(let j=0;j<gridSize;j++)tempGrid[i][j]=0}for(let i=0;i<gridSize;i++)for(let j=0;j<gridSize;j++)tempGrid[i][j]=permutation[grid[i][j]-1]+1;grid=JSON.parse(JSON.stringify(tempGrid))}function wasmSolvePuzzle(){let gridFlat=[];for(let i=0;i<gridSize;i++)gridFlat=gridFlat.concat(grid[i]);return ccallArrays("solve_puzzle","number",["array"],[gridFlat],{heapIn:"HEAPU8"})}onmessage=()=>{importScripts("/applets/sudoku-generator/scripts/solver.min.js"),Module.onRuntimeInitialized=()=>{importScripts("/scripts/wasm-arrays.min.min.js"),generateSudokuGrid()}};
"use strict";onmessage=function(r){importScripts("/applets/sudoku-generator/scripts/solver.js"),Module.onRuntimeInitialized=function(){importScripts("/scripts/wasm-arrays.min.js"),generateSudokuGrid()}};let gridSize=9,grid=[],nonzeroCells=[],numSolutionsFound=0;function generateSudokuGrid(){grid=[],generateNumberGrid();for(let r=0;r<gridSize;r++)for(let i=0;i<gridSize;i++)nonzeroCells.push([r,i]);nonzeroCells=shuffleArray(nonzeroCells);for(let o=0;o<nonzeroCells.length;o++){let e=nonzeroCells[o],d=grid[e[0]][e[1]];grid[e[0]][e[1]]=0,1!==(numSolutionsFound=wasmSolvePuzzle(grid))&&(grid[e[0]][e[1]]=d,numSolutionsFound=1)}postMessage([grid])}function shuffleArray(r){let i=r.length;for(;0!==i;){let o=Math.floor(Math.random()*i),e=r[i-=1];r[i]=r[o],r[o]=e}return r}function generateNumberGrid(){grid=[[2,9,5,7,4,3,8,6,1],[4,3,1,8,6,5,9,2,7],[8,7,6,1,9,2,5,4,3],[3,8,7,4,5,9,2,1,6],[6,1,2,3,8,7,4,9,5],[5,4,9,2,1,6,7,3,8],[7,6,3,5,2,4,1,8,9],[9,2,8,6,7,1,3,5,4],[1,5,4,9,3,8,6,7,2]];let r=shuffleArray([shuffleGridRows,shuffleGridRows,shuffleGridColumns,shuffleGridColumns,shuffleGridDigits,shuffleGridDigits]);for(let i=0;i<6;i++)r[i]()}function shuffleGridRows(){let r=Math.floor(3*Math.random()),i=Math.floor(3*Math.random()),o=Math.floor(3*Math.random())+3,e=Math.floor(3*Math.random())+3,d=Math.floor(3*Math.random())+6,l=Math.floor(3*Math.random())+6;for(let n=0;n<gridSize;n++){let f=grid[r][n];grid[r][n]=grid[i][n],grid[i][n]=f,f=grid[o][n],grid[o][n]=grid[e][n],grid[e][n]=f,f=grid[d][n],grid[d][n]=grid[l][n],grid[l][n]=f}}function shuffleGridColumns(){let r=Math.floor(3*Math.random()),i=Math.floor(3*Math.random()),o=Math.floor(3*Math.random())+3,e=Math.floor(3*Math.random())+3,d=Math.floor(3*Math.random())+6,l=Math.floor(3*Math.random())+6;for(let n=0;n<gridSize;n++){let f=grid[n][r];grid[n][r]=grid[n][i],grid[n][i]=f,f=grid[n][o],grid[n][o]=grid[n][e],grid[n][e]=f,f=grid[n][d],grid[n][d]=grid[n][l],grid[n][l]=f}}function shuffleGridDigits(){let r=shuffleArray([...Array(gridSize).keys()]),i=[];for(let o=0;o<gridSize;o++){i[o]=[];for(let e=0;e<gridSize;e++)i[o][e]=0}for(let d=0;d<gridSize;d++)for(let l=0;l<gridSize;l++)i[d][l]=r[grid[d][l]-1]+1;grid=JSON.parse(JSON.stringify(i))}function wasmSolvePuzzle(){let r=[];for(let i=0;i<gridSize;i++)r=r.concat(grid[i]);return ccallArrays("solve_puzzle","number",["array"],[r],{heapIn:"HEAPU8"})}
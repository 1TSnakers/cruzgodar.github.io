onmessage=function(b){importScripts("/applets/sudoku-generator/scripts/solver.js");Module.onRuntimeInitialized=function(){importScripts("/scripts/wasm-arrays.min.js");generateSudokuGrid()}};let gridSize=9,grid=[],nonzeroCells=[],numSolutionsFound=0;
function generateSudokuGrid(){grid=[];generateNumberGrid();for(var b=0;b<gridSize;b++)for(var a=0;a<gridSize;a++)nonzeroCells.push([b,a]);nonzeroCells=shuffleArray(nonzeroCells);for(b=0;b<nonzeroCells.length;b++){a=nonzeroCells[b];let d=grid[a[0]][a[1]];grid[a[0]][a[1]]=0;numSolutionsFound=wasmSolvePuzzle(grid);1!==numSolutionsFound&&(grid[a[0]][a[1]]=d,numSolutionsFound=1)}postMessage([grid])}
function shuffleArray(b){let a=b.length;for(;0!==a;){let d=Math.floor(Math.random()*a);--a;let e=b[a];b[a]=b[d];b[d]=e}return b}function generateNumberGrid(){grid=[[2,9,5,7,4,3,8,6,1],[4,3,1,8,6,5,9,2,7],[8,7,6,1,9,2,5,4,3],[3,8,7,4,5,9,2,1,6],[6,1,2,3,8,7,4,9,5],[5,4,9,2,1,6,7,3,8],[7,6,3,5,2,4,1,8,9],[9,2,8,6,7,1,3,5,4],[1,5,4,9,3,8,6,7,2]];let b=shuffleArray([shuffleGridRows,shuffleGridRows,shuffleGridColumns,shuffleGridColumns,shuffleGridDigits,shuffleGridDigits]);for(let a=0;6>a;a++)b[a]()}
function shuffleGridRows(){let b=Math.floor(3*Math.random()),a=Math.floor(3*Math.random()),d=Math.floor(3*Math.random())+3,e=Math.floor(3*Math.random())+3,g=Math.floor(3*Math.random())+6,h=Math.floor(3*Math.random())+6;for(let c=0;c<gridSize;c++){let f=grid[b][c];grid[b][c]=grid[a][c];grid[a][c]=f;f=grid[d][c];grid[d][c]=grid[e][c];grid[e][c]=f;f=grid[g][c];grid[g][c]=grid[h][c];grid[h][c]=f}}
function shuffleGridColumns(){let b=Math.floor(3*Math.random()),a=Math.floor(3*Math.random()),d=Math.floor(3*Math.random())+3,e=Math.floor(3*Math.random())+3,g=Math.floor(3*Math.random())+6,h=Math.floor(3*Math.random())+6;for(let c=0;c<gridSize;c++){let f=grid[c][b];grid[c][b]=grid[c][a];grid[c][a]=f;f=grid[c][d];grid[c][d]=grid[c][e];grid[c][e]=f;f=grid[c][g];grid[c][g]=grid[c][h];grid[c][h]=f}}
function shuffleGridDigits(){let b=shuffleArray([...Array(gridSize).keys()]),a=[];for(var d=0;d<gridSize;d++){a[d]=[];for(var e=0;e<gridSize;e++)a[d][e]=0}for(d=0;d<gridSize;d++)for(e=0;e<gridSize;e++)a[d][e]=b[grid[d][e]-1]+1;grid=JSON.parse(JSON.stringify(a))}function wasmSolvePuzzle(){let b=[];for(let a=0;a<gridSize;a++)b=b.concat(grid[a]);return ccallArrays("solve_puzzle","number",["array"],[b],{heapIn:"HEAPU8"})};

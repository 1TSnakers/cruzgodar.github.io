"use strict";onmessage=function(r){importScripts("/applets/sudoku-generator/scripts/solver.js"),Module.onRuntimeInitialized=function(){importScripts("/scripts/wasm-arrays.min.js"),generate_sudoku_grid()}};let grid_size=9,grid=[],nonzero_cells=[],num_solutions_found=0;function generate_sudoku_grid(){grid=[],generate_number_grid();for(let r=0;r<grid_size;r++)for(let i=0;i<grid_size;i++)nonzero_cells.push([r,i]);nonzero_cells=shuffle_array(nonzero_cells);for(let r=0;r<nonzero_cells.length;r++){let i=nonzero_cells[r],o=grid[i[0]][i[1]];grid[i[0]][i[1]]=0,1!==(num_solutions_found=wasm_solve_puzzle(grid))&&(grid[i[0]][i[1]]=o,num_solutions_found=1)}postMessage([grid])}function shuffle_array(r){let i=r.length;for(;0!==i;){let o=Math.floor(Math.random()*i),e=r[i-=1];r[i]=r[o],r[o]=e}return r}function generate_number_grid(){grid=[[2,9,5,7,4,3,8,6,1],[4,3,1,8,6,5,9,2,7],[8,7,6,1,9,2,5,4,3],[3,8,7,4,5,9,2,1,6],[6,1,2,3,8,7,4,9,5],[5,4,9,2,1,6,7,3,8],[7,6,3,5,2,4,1,8,9],[9,2,8,6,7,1,3,5,4],[1,5,4,9,3,8,6,7,2]];let r=shuffle_array([shuffle_grid_rows,shuffle_grid_rows,shuffle_grid_columns,shuffle_grid_columns,shuffle_grid_digits,shuffle_grid_digits]);for(let i=0;i<6;i++)r[i]()}function shuffle_grid_rows(){let r=Math.floor(3*Math.random()),i=Math.floor(3*Math.random()),o=Math.floor(3*Math.random())+3,e=Math.floor(3*Math.random())+3,t=Math.floor(3*Math.random())+6,d=Math.floor(3*Math.random())+6;for(let l=0;l<grid_size;l++){let s=grid[r][l];grid[r][l]=grid[i][l],grid[i][l]=s,s=grid[o][l],grid[o][l]=grid[e][l],grid[e][l]=s,s=grid[t][l],grid[t][l]=grid[d][l],grid[d][l]=s}}function shuffle_grid_columns(){let r=Math.floor(3*Math.random()),i=Math.floor(3*Math.random()),o=Math.floor(3*Math.random())+3,e=Math.floor(3*Math.random())+3,t=Math.floor(3*Math.random())+6,d=Math.floor(3*Math.random())+6;for(let l=0;l<grid_size;l++){let s=grid[l][r];grid[l][r]=grid[l][i],grid[l][i]=s,s=grid[l][o],grid[l][o]=grid[l][e],grid[l][e]=s,s=grid[l][t],grid[l][t]=grid[l][d],grid[l][d]=s}}function shuffle_grid_digits(){let r=shuffle_array([...Array(grid_size).keys()]),i=[];for(let r=0;r<grid_size;r++){i[r]=[];for(let o=0;o<grid_size;o++)i[r][o]=0}for(let o=0;o<grid_size;o++)for(let e=0;e<grid_size;e++)i[o][e]=r[grid[o][e]-1]+1;grid=JSON.parse(JSON.stringify(i))}function wasm_solve_puzzle(){let r=[];for(let i=0;i<grid_size;i++)r=r.concat(grid[i]);return ccallArrays("solve_puzzle","number",["array"],[r],{heapIn:"HEAPU8"})}
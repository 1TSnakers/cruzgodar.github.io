"use strict";onmessage=()=>{importScripts("/applets/sudoku-generator/scripts/solver.js"),Module.onRuntimeInitialized=()=>{importScripts("/scripts/wasm-arrays.min.js"),generateSudokuGrid()}};let gridSize=9,grid=[],nonzeroCells=[],numSolutionsFound=0;function generateSudokuGrid(){grid=[],generateNumberGrid();for(let i=0;i<gridSize;i++)for(let r=0;r<gridSize;r++)nonzeroCells.push([i,r]);nonzeroCells=shuffleArray(nonzeroCells);for(let r=0;r<nonzeroCells.length;r++){var i=nonzeroCells[r],o=grid[i[0]][i[1]];grid[i[0]][i[1]]=0,1!==(numSolutionsFound=wasmSolvePuzzle(grid))&&(grid[i[0]][i[1]]=o,numSolutionsFound=1)}postMessage([grid])}function shuffleArray(r){let i=r.length;for(;0!==i;){var o=Math.floor(Math.random()*i),e=r[--i];r[i]=r[o],r[o]=e}return r}function generateNumberGrid(){grid=[[2,9,5,7,4,3,8,6,1],[4,3,1,8,6,5,9,2,7],[8,7,6,1,9,2,5,4,3],[3,8,7,4,5,9,2,1,6],[6,1,2,3,8,7,4,9,5],[5,4,9,2,1,6,7,3,8],[7,6,3,5,2,4,1,8,9],[9,2,8,6,7,1,3,5,4],[1,5,4,9,3,8,6,7,2]];var i=shuffleArray([shuffleGridRows,shuffleGridRows,shuffleGridColumns,shuffleGridColumns,shuffleGridDigits,shuffleGridDigits]);for(let r=0;r<6;r++)i[r]()}function shuffleGridRows(){var i=Math.floor(3*Math.random()),o=Math.floor(3*Math.random()),e=Math.floor(3*Math.random())+3,d=Math.floor(3*Math.random())+3,t=Math.floor(3*Math.random())+6,a=Math.floor(3*Math.random())+6;for(let r=0;r<gridSize;r++){var l=grid[i][r];grid[i][r]=grid[o][r],grid[o][r]=l,l=grid[e][r],grid[e][r]=grid[d][r],grid[d][r]=l,l=grid[t][r],grid[t][r]=grid[a][r],grid[a][r]=l}}function shuffleGridColumns(){var i=Math.floor(3*Math.random()),o=Math.floor(3*Math.random()),e=Math.floor(3*Math.random())+3,d=Math.floor(3*Math.random())+3,t=Math.floor(3*Math.random())+6,a=Math.floor(3*Math.random())+6;for(let r=0;r<gridSize;r++){var l=grid[r][i];grid[r][i]=grid[r][o],grid[r][o]=l,l=grid[r][e],grid[r][e]=grid[r][d],grid[r][d]=l,l=grid[r][t],grid[r][t]=grid[r][a],grid[r][a]=l}}function shuffleGridDigits(){var o=shuffleArray([...Array(gridSize).keys()]),e=[];for(let i=0;i<gridSize;i++){e[i]=[];for(let r=0;r<gridSize;r++)e[i][r]=0}for(let i=0;i<gridSize;i++)for(let r=0;r<gridSize;r++)e[i][r]=o[grid[i][r]-1]+1;grid=JSON.parse(JSON.stringify(e))}function wasmSolvePuzzle(){let i=[];for(let r=0;r<gridSize;r++)i=i.concat(grid[r]);return ccallArrays("solve_puzzle","number",["array"],[i],{heapIn:"HEAPU8"})}
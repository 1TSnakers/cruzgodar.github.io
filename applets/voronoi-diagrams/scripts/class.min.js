import{Applet,getFloatGlsl,getMinGlslString,getVectorGlsl}from"/scripts/src/applets.min.js";import{Wilson}from"/scripts/wilson.min.js";class VoronoiDiagram extends Applet{wilsonHidden;lastTimestamp=-1;numPoints=20;metric=2;resolution=1e3;resolutionHidden=100;t;radius;maxRadius;pointRadius;points;colors;constructor({canvas}){super(canvas);var i=`
			precision highp float;
			
			varying vec2 uv;
			
			void main(void)
			{
				gl_FragColor = vec4(0, 0, 0, 1);
			}
		`,t={renderer:"gpu",shader:i,canvasWidth:this.resolution,canvasHeight:this.resolution,useFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"},t=(this.wilson=new Wilson(this.canvas,t),{renderer:"gpu",shader:i,canvasWidth:this.resolutionHidden,canvasHeight:this.resolutionHidden});this.wilsonHidden=new Wilson(this.createHiddenCanvas(),t)}run({resolution=500,numPoints=20,metric=2}){this.resolution=resolution,this.numPoints=numPoints,this.metric=metric,this.t=-.1,this.lastTimestamp=-1,this.wilson.changeCanvasSize(this.resolution,this.resolution),this.generatePoints(),this.wilsonHidden.render.shaderPrograms=[],this.wilsonHidden.render.loadNewShader(this.getFragShaderSource(!0)),this.wilsonHidden.gl.useProgram(this.wilsonHidden.render.shaderPrograms[0]),this.wilsonHidden.render.initUniforms(["radius"]),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.radius,this.radius),this.maxRadius=this.findMaxRadius(),this.wilson.render.shaderPrograms=[],this.wilson.render.loadNewShader(this.getFragShaderSource()),this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[0]),this.wilson.render.initUniforms(["radius"]),this.wilson.gl.uniform1f(this.wilson.uniforms.radius,this.radius),setTimeout(()=>window.requestAnimationFrame(this.drawFrame.bind(this)),100)}getFragShaderSource(forHiddenCanvas=!1){var i=1===this.metric?`
					abs(p.x - q.x) + abs(p.y - q.y)
				`:2===this.metric?`
					distance(p, q)
				`:this.metric===1/0?`
					max(abs(p.x - q.x), abs(p.y - q.y))
				`:`
					pow(
						pow(abs(p.x - q.x), ${getFloatGlsl(this.metric)})
						+ pow(abs(p.y - q.y), ${getFloatGlsl(this.metric)}),
						${getFloatGlsl(1/this.metric)}
					)
				`,t=forHiddenCanvas?`
				if (minDistance < radius)
				{
					gl_FragColor = vec4(color, 1);
					return;
				}
			`:`
			if (minDistance < pointRadius)
			{
				gl_FragColor = vec4(1, 1, 1, 1);
				return;
			}

			if (minDistance < (1.0 + blurRatio) * pointRadius)
			{
				float t = 1.0 - (minDistance - pointRadius) / (blurRatio * pointRadius);

				gl_FragColor = vec4(t, t, t, 1);
				return;
			}

			if (minDistance < radius)
			{
				gl_FragColor = vec4(color, 1);
				return;
			}

			if (minDistance < radius + boundaryWidth)
			{
				gl_FragColor = vec4(color * 0.5, 1);
				return;
			}
		`;return`
			precision highp float;
			
			varying vec2 uv;

			uniform float radius;

			const float pointRadius = 0.01;
			const float blurRatio = 0.5;
			const float boundaryWidth = 0.02;

	${this.points.map((point,index)=>`
			const vec2 point${index} = ${getVectorGlsl(point)};
		`).join("")}

	${this.colors.map((color,index)=>`
			const vec3 color${index} = ${getVectorGlsl(color)};
		`).join("")}
			
			float metricDistance(vec2 p, vec2 q)
			{
				return ${i};
			}

			float getMinDistanceToPoints(vec2 p, out vec3 color)
			{
	${this.points.map((point,index)=>`
			float distance${index+1} = metricDistance(p, point${index});
		`).join("")}

				float minDistance = ${getMinGlslString("distance",this.numPoints)};

	${this.colors.map((color,index)=>`
			if (minDistance == distance${index+1})
			{
				color = color${index};
				return minDistance;
			}
		`).join("")}
			}

			void main(void)
			{
				vec3 color;
				float minDistance = getMinDistanceToPoints(uv, color);

				${t}

				gl_FragColor = vec4(0, 0, 0, 1);
			}
		`}generatePoints(){this.points=new Array(this.numPoints);for(let n=0;n<this.numPoints;n++)this.points[n]=[.9*(Math.random()-.5)*this.wilson.worldWidth,.9*(Math.random()-.5)*this.wilson.worldHeight];var t,s=new Array(this.numPoints),i=.1/this.numPoints;for(let o=0;o<this.numPoints;o++){s[o]=[0,0];for(let i=0;i<this.numPoints;i++)i!==o&&(t=(this.points[i][0]-this.points[o][0])**2+(this.points[i][1]-this.points[o][1])**2,s[o][0]+=(this.points[o][0]-this.points[i][0])/t,s[o][1]+=(this.points[o][1]-this.points[i][1])/t)}for(let r=0;r<this.numPoints;r++)this.points[r][0]+=i*s[r][0],this.points[r][1]+=i*s[r][1],this.points[r][0]=Math.min(Math.max(this.points[r][0],-this.wilson.worldWidth/2),this.wilson.worldWidth/2),this.points[r][1]=Math.min(Math.max(this.points[r][1],-this.wilson.worldHeight/2),this.wilson.worldHeight/2);this.colors=new Array(this.numPoints);for(let e=0;e<this.numPoints;e++)this.colors[e]=this.wilson.utils.hsvToRgb(Math.random(),.5+.25*Math.random(),.5+.5*Math.random()),this.colors[e][0]/=255,this.colors[e][1]/=255,this.colors[e][2]/=255}findMaxRadius(){let i=.5;let t=.25;for(let n=0;n<10;n++){var s=2*i;this.testRadius(s)?9!==n&&(i-=t):i+=t,t/=2}return 2*i+.025}testRadius(radius){this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.radius,radius),this.wilsonHidden.render.drawFrame();var i=this.wilsonHidden.render.getPixelData();for(let t=0;t<i.length;t+=4)if(0===i[t]&&0===i[t+1]&&0===i[t+2])return!1;return!0}drawFrame(timestamp){var i=timestamp-this.lastTimestamp;-1===this.lastTimestamp?(this.lastTimestamp=timestamp,window.requestAnimationFrame(this.drawFrame.bind(this))):(this.lastTimestamp=timestamp,0!=i&&(this.wilson.render.drawFrame(),this.t+=5e-4*i,this.radius=this.t<0?0:(.5+.5*Math.sin(Math.PI*this.t-Math.PI/2))*this.maxRadius,this.wilson.gl.uniform1f(this.wilson.uniforms.radius,this.radius),this.wilson.render.drawFrame(),!this.animationPaused)&&this.t<1&&window.requestAnimationFrame(this.drawFrame.bind(this)))}bezierCurve(controlPoints,t){return(1-t)*(1-t)*(1-t)*controlPoints[0]+3*(1-t)*(1-t)*t*controlPoints[1]+3*(1-t)*t*t*controlPoints[2]+t*t*t*controlPoints[3]}}export{VoronoiDiagram};
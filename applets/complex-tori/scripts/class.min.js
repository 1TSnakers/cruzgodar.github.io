"use strict";class EllipticCurve extends Applet{resolution=500;g2=-2;g3=0;last_timestamp=-1;constructor(t){super(t);let e=`
   precision highp float;
   
   varying vec2 uv;
   
   uniform float step;
   
   uniform float g2_arg;
   uniform float g3_arg;
   
   const int max_iterations = 200;
   
   
   
   float f(vec2 z)
   {
    return z.y * z.y   -   z.x * z.x * z.x   -   g2_arg * z.x   -   g3_arg;
   }
   
   
   
   void main(void)
   {
    float threshhold = 4.0 * 1000.0;
    
    vec2 z = uv * 4.0;
    
    
    
    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    
    
    
    for (int i = 0; i < max_iterations; i++)
    {
     float score = abs(f(z)) / threshhold;
     
     if (score < 1.0)
     {
      float adjacent_score = (abs(f(z + vec2(step, 0.0))) + abs(f(z - vec2(step, 0.0))) + abs(f(z + vec2(0.0, step))) + abs(f(z - vec2(0.0, step)))) / threshhold;
      
      if (adjacent_score >= 6.0)
      {
       gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
       
       return;
      }
     }
     
     threshhold /= 1.25;
    }
   }
  `,s=`
   precision highp float;
   precision highp sampler2D;
   
   varying vec2 uv;
   
   uniform sampler2D u_texture;
   
   uniform float texture_step;
   
   
   
   void main(void)
   {
    //Dilate the pixels to make a thicker line.
    vec2 center = (uv + vec2(1.0, 1.0)) / 2.0;
    
    float state = (4.0 * texture2D(u_texture, center).y +
    
     texture2D(u_texture, center + vec2(texture_step, 0.0)).y +
     texture2D(u_texture, center - vec2(texture_step, 0.0)).y +
     texture2D(u_texture, center + vec2(0.0, texture_step)).y +
     texture2D(u_texture, center - vec2(0.0, texture_step)).y +
     
     texture2D(u_texture, center + vec2(texture_step, texture_step)).y +
     texture2D(u_texture, center + vec2(texture_step, -texture_step)).y +
     texture2D(u_texture, center + vec2(-texture_step, texture_step)).y +
     texture2D(u_texture, center + vec2(-texture_step, -texture_step)).y
    ) / 2.0;
    
    gl_FragColor = vec4(state, state, state, 1.0);
   }
  `,i={renderer:"gpu",shader:e,canvas_width:this.resolution,canvas_height:this.resolution,world_width:8,world_height:8,world_center_x:0,world_center_y:0};this.wilson=new Wilson(t,i),this.wilson.render.init_uniforms(["step","g2_arg","g3_arg"]),this.wilson.gl.uniform1f(this.wilson.uniforms.step,this.wilson.world_width/this.resolution),this.wilson.render.load_new_shader(s),this.wilson.render.init_uniforms(["texture_step"]),this.wilson.gl.uniform1f(this.wilson.uniforms.texture_step,1/this.resolution),this.wilson.render.create_framebuffer_texture_pair(),this.wilson.gl.bindFramebuffer(this.wilson.gl.FRAMEBUFFER,null),window.requestAnimationFrame(this.draw_frame.bind(this))}run(t,e){this.g2=t,this.g3=e,window.requestAnimationFrame(this.draw_frame.bind(this))}draw_frame(t){let e=t-this.last_timestamp;if(this.last_timestamp=t,0===e)return;this.wilson.gl.useProgram(this.wilson.render.shader_programs[0]),this.wilson.gl.uniform1f(this.wilson.uniforms.g2_arg,this.g2),this.wilson.gl.uniform1f(this.wilson.uniforms.g3_arg,this.g3),this.wilson.render.draw_frame();let s=this.wilson.render.get_pixel_data(),i=[],r=this.resolution,n=this.wilson.canvas_width,o=2;for(let l=o;l<this.wilson.canvas_height-o;l++)for(let a=o;a<r-o;a++){let h=r*l+a;if(0!==s[4*h]){let u=s[4*(h-1)]+s[4*(h+1)]+s[4*(h-r)]+s[4*(h+r)]+s[4*(h-1-r)]+s[4*(h+1-r)]+s[4*(h-1+r)]+s[4*(h+1+r)];if(u<=255){let $=s[4*(h-2*r-2)]+s[4*(h-2*r-1)]+s[4*(h-2*r)]+s[4*(h-2*r+1)]+s[4*(h-2*r+2)]+s[4*(h+2*r-2)]+s[4*(h+2*r-1)]+s[4*(h+2*r)]+s[4*(h+2*r+1)]+s[4*(h+2*r+2)]+s[4*(h-r-2)]+s[4*(h-2)]+s[4*(h+r-2)]+s[4*(h-r+2)]+s[4*(h+2)]+s[4*(h+r+2)];0===$?i.push([l,a,!0]):i.push([l,a,!1])}}}for(let g=0;g<i.length;g++){if(i[g][0]<this.wilson.canvas_width/20||i[g][1]<this.wilson.canvas_height/20||i[g][0]>19*this.wilson.canvas_width/20||i[g][1]>19*this.wilson.canvas_height/20)continue;let f=-1,_=n;i[g][2]||(_=n/20);for(let w=0;w<i.length;w++){if(w===g)continue;let c=Math.sqrt((i[g][0]-i[w][0])*(i[g][0]-i[w][0])+(i[g][1]-i[w][1])*(i[g][1]-i[w][1]));if(c<_&&c>=2){let d=(i[w][0]-i[g][0])/c*1.414214,m=(i[w][1]-i[g][1])/c*1.414214;d=Math.sign(d)*Math.floor(Math.abs(d)),m=Math.sign(m)*Math.floor(Math.abs(m));let p=0;if(0===d){let x=r*(i[g][0]+d)+(i[g][1]+m);p+=s[4*x],p+=s[4*(x=r*(i[g][0]+d+1)+(i[g][1]+m))],p+=s[4*(x=r*(i[g][0]+d-1)+(i[g][1]+m))]}else if(0===m){let v=r*(i[g][0]+d)+(i[g][1]+m);p+=s[4*v],p+=s[4*(v=r*(i[g][0]+d)+(i[g][1]+m+1))],p+=s[4*(v=r*(i[g][0]+d)+(i[g][1]+m-1))]}else{let D=r*(i[g][0]+d)+(i[g][1]+m);p+=s[4*D],p+=s[4*(D=r*i[g][0]+(i[g][1]+m))],p+=s[4*(D=r*(i[g][0]+d)+i[g][1])]}0===p&&(f=w,_=c)}}if(-1!==f)for(let y=1;y<2*_;y++){let z=y/(2*_),b=Math.round((1-z)*i[g][0]+z*i[f][0]),F=Math.round((1-z)*i[g][1]+z*i[f][1]),E=r*b+F;s[4*E]=0,s[4*E+1]=255,s[4*E+2]=0}}this.wilson.gl.texImage2D(this.wilson.gl.TEXTURE_2D,0,this.wilson.gl.RGBA,this.wilson.canvas_width,this.wilson.canvas_height,0,this.wilson.gl.RGBA,this.wilson.gl.UNSIGNED_BYTE,s),this.wilson.gl.useProgram(this.wilson.render.shader_programs[1]),this.wilson.render.draw_frame(s)}change_resolution(t){this.resolution=t,this.wilson.change_canvas_size(this.resolution,this.resolution),this.wilson.gl.useProgram(this.wilson.render.shader_programs[0]),this.wilson.gl.uniform1f(this.wilson.uniforms.step,this.wilson.world_width/this.resolution),this.wilson.gl.useProgram(this.wilson.render.shader_programs[1]),this.wilson.gl.uniform1f(this.wilson.uniforms.texture_step,1/this.resolution),window.requestAnimationFrame(this.draw_frame.bind(this))}}
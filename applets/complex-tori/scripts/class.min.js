import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{Wilson}from"/scripts/wilson.min.js";class EllipticCurve extends AnimationFrameApplet{resolution=500;g2=-2;g3=0;constructor({canvas}){super(canvas);var e={renderer:"gpu",shader:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform float step;
			
			uniform float g2Arg;
			uniform float g3Arg;
			
			const int maxIterations = 200;
			
			
			
			float f(vec2 z)
			{
				return z.y * z.y   -   z.x * z.x * z.x   -   g2Arg * z.x   -   g3Arg;
			}
			
			
			
			void main(void)
			{
				float threshhold = 4.0 * 1000.0;
				
				vec2 z = uv * 4.0;
				
				
				
				gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
				
				
				
				for (int i = 0; i < maxIterations; i++)
				{
					float score = abs(f(z)) / threshhold;
					
					if (score < 1.0)
					{
						float adjacentScore = (abs(f(z + vec2(step, 0.0))) + abs(f(z - vec2(step, 0.0))) + abs(f(z + vec2(0.0, step))) + abs(f(z - vec2(0.0, step)))) / threshhold;
						
						if (adjacentScore >= 6.0)
						{
							gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
							
							return;
						}
					}
					
					threshhold /= 1.25;
				}
			}
		`,canvasWidth:this.resolution,canvasHeight:this.resolution,worldWidth:8,worldCenterX:0,worldCenterY:0};this.wilson=new Wilson(canvas,e),this.wilson.render.initUniforms(["step","g2Arg","g3Arg"]),this.wilson.gl.uniform1f(this.wilson.uniforms.step,this.wilson.worldWidth/this.resolution),this.wilson.render.loadNewShader(`
			precision highp float;
			precision highp sampler2D;
			
			varying vec2 uv;
			
			uniform sampler2D uTexture;
			
			uniform float textureStep;
			
			
			
			void main(void)
			{
				//Dilate the pixels to make a thicker line.
				vec2 center = (uv + vec2(1.0, 1.0)) / 2.0;
				
				float state = (4.0 * texture2D(uTexture, center).y +
				
					texture2D(uTexture, center + vec2(textureStep, 0.0)).y +
					texture2D(uTexture, center - vec2(textureStep, 0.0)).y +
					texture2D(uTexture, center + vec2(0.0, textureStep)).y +
					texture2D(uTexture, center - vec2(0.0, textureStep)).y +
					
					texture2D(uTexture, center + vec2(textureStep, textureStep)).y +
					texture2D(uTexture, center + vec2(textureStep, -textureStep)).y +
					texture2D(uTexture, center + vec2(-textureStep, textureStep)).y +
					texture2D(uTexture, center + vec2(-textureStep, -textureStep)).y
				) / 2.0;
				
				gl_FragColor = vec4(state, state, state, 1.0);
			}
		`),this.wilson.render.initUniforms(["textureStep"]),this.wilson.gl.uniform1f(this.wilson.uniforms.textureStep,1/this.resolution),this.wilson.render.createFramebufferTexturePair(),this.wilson.gl.bindFramebuffer(this.wilson.gl.FRAMEBUFFER,null),this.resume()}run({g2,g3}){this.g2=g2,this.g3=g3,this.needNewFrame=!0}drawFrame(){this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[0]),this.wilson.gl.uniform1f(this.wilson.uniforms.g2Arg,this.g2),this.wilson.gl.uniform1f(this.wilson.uniforms.g3Arg,this.g3),this.wilson.render.drawFrame();var s=this.wilson.render.getPixelData(),o=[],n=this.resolution,e=this.wilson.canvasWidth;for(let i=2;i<this.wilson.canvasHeight-2;i++)for(let e=2;e<n-2;e++){var t=n*i+e;0!==s[4*t]&&s[4*(t-1)]+s[4*(t+1)]+s[4*(t-n)]+s[4*(t+n)]+s[4*(t-1-n)]+s[4*(t+1-n)]+s[4*(t-1+n)]+s[4*(t+1+n)]<=255&&(t=s[4*(t-2*n-2)]+s[4*(t-2*n-1)]+s[4*(t-2*n)]+s[4*(t-2*n+1)]+s[4*(t-2*n+2)]+s[4*(t+2*n-2)]+s[4*(t+2*n-1)]+s[4*(t+2*n)]+s[4*(t+2*n+1)]+s[4*(t+2*n+2)]+s[4*(t-n-2)]+s[4*(t-2)]+s[4*(t+n-2)]+s[4*(t-n+2)]+s[4*(t+2)]+s[4*(t+n+2)],o.push(0===t?[i,e,!0]:[i,e,!1]))}for(let f=0;f<o.length;f++)if(!(o[f][0]<this.wilson.canvasWidth/20||o[f][1]<this.wilson.canvasHeight/20||o[f][0]>19*this.wilson.canvasWidth/20||o[f][1]>19*this.wilson.canvasHeight/20)){let t=-1,i=e;o[f][2]||(i=e/20);for(let r=0;r<o.length;r++)if(r!==f){var l=Math.sqrt((o[f][0]-o[r][0])*(o[f][0]-o[r][0])+(o[f][1]-o[r][1])*(o[f][1]-o[r][1]));if(l<i&&2<=l){var a,h,u=(o[r][0]-o[f][0])/l*1.414214,g=(o[r][1]-o[f][1])/l*1.414214,u=Math.sign(u)*Math.floor(Math.abs(u)),g=Math.sign(g)*Math.floor(Math.abs(g));let e=0;0==u?(a=n*(o[f][0]+u)+(o[f][1]+g),e+=s[4*a],a=n*(o[f][0]+u+1)+(o[f][1]+g),e+=s[4*a],a=n*(o[f][0]+u-1)+(o[f][1]+g),e+=s[4*a]):0==g?(a=n*(o[f][0]+u)+(o[f][1]+g),e+=s[4*a],a=n*(o[f][0]+u)+(o[f][1]+g+1),e+=s[4*a],a=n*(o[f][0]+u)+(o[f][1]+g-1),e+=s[4*a]):(h=n*(o[f][0]+u)+(o[f][1]+g),e+=s[4*h],h=n*o[f][0]+(o[f][1]+g),e+=s[4*h],h=n*(o[f][0]+u)+o[f][1],e+=s[4*h]),0===e&&(t=r,i=l)}}if(-1!==t)for(let e=1;e<2*i;e++){var c=e/(2*i),c=n*Math.round((1-c)*o[f][0]+c*o[t][0])+Math.round((1-c)*o[f][1]+c*o[t][1]);s[4*c]=0,s[4*c+1]=255,s[4*c+2]=0}}this.wilson.gl.texImage2D(this.wilson.gl.TEXTURE_2D,0,this.wilson.gl.RGBA,this.wilson.canvasWidth,this.wilson.canvasHeight,0,this.wilson.gl.RGBA,this.wilson.gl.UNSIGNED_BYTE,s),this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[1]),this.wilson.render.drawFrame(s)}changeResolution(resolution){this.resolution=resolution,this.wilson.changeCanvasSize(this.resolution,this.resolution),this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[0]),this.wilson.gl.uniform1f(this.wilson.uniforms.step,this.wilson.worldWidth/this.resolution),this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[1]),this.wilson.gl.uniform1f(this.wilson.uniforms.textureStep,1/this.resolution),this.needNewFrame=!0}}export{EllipticCurve};
"use strict";class EllipticCurve extends Applet{resolution=500;g2=-2;g3=0;lastTimestamp=-1;constructor(e){super(e);let t=`
   precision highp float;
   
   varying vec2 uv;
   
   uniform float step;
   
   uniform float g2Arg;
   uniform float g3Arg;
   
   const int maxIterations = 200;
   
   
   
   float f(vec2 z)
   {
    return z.y * z.y   -   z.x * z.x * z.x   -   g2Arg * z.x   -   g3Arg;
   }
   
   
   
   void main(void)
   {
    float threshhold = 4.0 * 1000.0;
    
    vec2 z = uv * 4.0;
    
    
    
    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    
    
    
    for (int i = 0; i < maxIterations; i++)
    {
     float score = abs(f(z)) / threshhold;
     
     if (score < 1.0)
     {
      float adjacentScore = (abs(f(z + vec2(step, 0.0))) + abs(f(z - vec2(step, 0.0))) + abs(f(z + vec2(0.0, step))) + abs(f(z - vec2(0.0, step)))) / threshhold;
      
      if (adjacentScore >= 6.0)
      {
       gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
       
       return;
      }
     }
     
     threshhold /= 1.25;
    }
   }
  `,i=`
   precision highp float;
   precision highp sampler2D;
   
   varying vec2 uv;
   
   uniform sampler2D uTexture;
   
   uniform float textureStep;
   
   
   
   void main(void)
   {
    //Dilate the pixels to make a thicker line.
    vec2 center = (uv + vec2(1.0, 1.0)) / 2.0;
    
    float state = (4.0 * texture2D(uTexture, center).y +
    
     texture2D(uTexture, center + vec2(textureStep, 0.0)).y +
     texture2D(uTexture, center - vec2(textureStep, 0.0)).y +
     texture2D(uTexture, center + vec2(0.0, textureStep)).y +
     texture2D(uTexture, center - vec2(0.0, textureStep)).y +
     
     texture2D(uTexture, center + vec2(textureStep, textureStep)).y +
     texture2D(uTexture, center + vec2(textureStep, -textureStep)).y +
     texture2D(uTexture, center + vec2(-textureStep, textureStep)).y +
     texture2D(uTexture, center + vec2(-textureStep, -textureStep)).y
    ) / 2.0;
    
    gl_FragColor = vec4(state, state, state, 1.0);
   }
  `,s={renderer:"gpu",shader:t,canvasWidth:this.resolution,canvasHeight:this.resolution,worldWidth:8,worldHeight:8,worldCenterX:0,worldCenterY:0};this.wilson=new Wilson(e,s),this.wilson.render.initUniforms(["step","g2Arg","g3Arg"]),this.wilson.gl.uniform1f(this.wilson.uniforms.step,this.wilson.worldWidth/this.resolution),this.wilson.render.loadNewShader(i),this.wilson.render.initUniforms(["textureStep"]),this.wilson.gl.uniform1f(this.wilson.uniforms.textureStep,1/this.resolution),this.wilson.render.createFramebufferTexturePair(),this.wilson.gl.bindFramebuffer(this.wilson.gl.FRAMEBUFFER,null),window.requestAnimationFrame(this.drawFrame.bind(this))}run(e,t){this.g2=e,this.g3=t,window.requestAnimationFrame(this.drawFrame.bind(this))}drawFrame(e){let t=e-this.lastTimestamp;if(this.lastTimestamp=e,0===t)return;this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[0]),this.wilson.gl.uniform1f(this.wilson.uniforms.g2Arg,this.g2),this.wilson.gl.uniform1f(this.wilson.uniforms.g3Arg,this.g3),this.wilson.render.drawFrame();let i=this.wilson.render.getPixelData(),s=[],r=this.resolution,n=this.wilson.canvasWidth,o=2;for(let l=o;l<this.wilson.canvasHeight-o;l++)for(let h=o;h<r-o;h++){let a=r*l+h;if(0!==i[4*a]){let u=i[4*(a-1)]+i[4*(a+1)]+i[4*(a-r)]+i[4*(a+r)]+i[4*(a-1-r)]+i[4*(a+1-r)]+i[4*(a-1+r)]+i[4*(a+1+r)];if(u<=255){let $=i[4*(a-2*r-2)]+i[4*(a-2*r-1)]+i[4*(a-2*r)]+i[4*(a-2*r+1)]+i[4*(a-2*r+2)]+i[4*(a+2*r-2)]+i[4*(a+2*r-1)]+i[4*(a+2*r)]+i[4*(a+2*r+1)]+i[4*(a+2*r+2)]+i[4*(a-r-2)]+i[4*(a-2)]+i[4*(a+r-2)]+i[4*(a-r+2)]+i[4*(a+2)]+i[4*(a+r+2)];0===$?s.push([l,h,!0]):s.push([l,h,!1])}}}for(let g=0;g<s.length;g++){if(s[g][0]<this.wilson.canvasWidth/20||s[g][1]<this.wilson.canvasHeight/20||s[g][0]>19*this.wilson.canvasWidth/20||s[g][1]>19*this.wilson.canvasHeight/20)continue;let _=-1,f=n;s[g][2]||(f=n/20);for(let c=0;c<s.length;c++){if(c===g)continue;let w=Math.sqrt((s[g][0]-s[c][0])*(s[g][0]-s[c][0])+(s[g][1]-s[c][1])*(s[g][1]-s[c][1]));if(w<f&&w>=2){let d=(s[c][0]-s[g][0])/w*1.414214,m=(s[c][1]-s[g][1])/w*1.414214;d=Math.sign(d)*Math.floor(Math.abs(d)),m=Math.sign(m)*Math.floor(Math.abs(m));let x=0;if(0===d){let v=r*(s[g][0]+d)+(s[g][1]+m);x+=i[4*v],x+=i[4*(v=r*(s[g][0]+d+1)+(s[g][1]+m))],x+=i[4*(v=r*(s[g][0]+d-1)+(s[g][1]+m))]}else if(0===m){let p=r*(s[g][0]+d)+(s[g][1]+m);x+=i[4*p],x+=i[4*(p=r*(s[g][0]+d)+(s[g][1]+m+1))],x+=i[4*(p=r*(s[g][0]+d)+(s[g][1]+m-1))]}else{let S=r*(s[g][0]+d)+(s[g][1]+m);x+=i[4*S],x+=i[4*(S=r*s[g][0]+(s[g][1]+m))],x+=i[4*(S=r*(s[g][0]+d)+s[g][1])]}0===x&&(_=c,f=w)}}if(-1!==_)for(let F=1;F<2*f;F++){let T=F/(2*f),D=Math.round((1-T)*s[g][0]+T*s[_][0]),z=Math.round((1-T)*s[g][1]+T*s[_][1]),A=r*D+z;i[4*A]=0,i[4*A+1]=255,i[4*A+2]=0}}this.wilson.gl.texImage2D(this.wilson.gl.TEXTURE_2D,0,this.wilson.gl.RGBA,this.wilson.canvasWidth,this.wilson.canvasHeight,0,this.wilson.gl.RGBA,this.wilson.gl.UNSIGNED_BYTE,i),this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[1]),this.wilson.render.drawFrame(i)}changeResolution(e){this.resolution=e,this.wilson.changeCanvasSize(this.resolution,this.resolution),this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[0]),this.wilson.gl.uniform1f(this.wilson.uniforms.step,this.wilson.worldWidth/this.resolution),this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[1]),this.wilson.gl.uniform1f(this.wilson.uniforms.textureStep,1/this.resolution),window.requestAnimationFrame(this.drawFrame.bind(this))}}
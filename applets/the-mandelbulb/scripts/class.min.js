import anime from"/scripts/anime.min.js";import{getRotationMatrix,magnitude,mat3TimesVector,RaymarchApplet}from"/scripts/applets/raymarchApplet.min.js";class Mandelbulb extends RaymarchApplet{rotationAngleX=0;rotationAngleY=0;rotationAngleZ=0;constructor({canvas}){super({canvas:canvas,distanceEstimatorGlsl:`
			vec3 z = pos;
			
			float r = length(z);
			float dr = 1.0;
			
			for (int iteration = 0; iteration < 16; iteration++)
			{
				if (r > 16.0)
				{
					break;
				}
				
				float theta = acos(z.z / r);
				
				float phi = atan(z.y, z.x);
				
				dr = pow(r, power - 1.0) * power * dr + 1.0;
				
				theta *= power;
				
				phi *= power;
				
				z = pow(r, power) * vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
				
				z += mix(pos, c, juliaProportion);
				
				z = rotationMatrix * z;
				
				r = length(z);
			}
			
			return .5 * log(r) * r / dr;
		`,getColorGlsl:`
			vec3 z = pos;
			
			float r = length(z);
			float dr = 1.0;
			
			vec3 color = vec3(1.0, 1.0, 1.0);
			float colorScale = .5;
			
			for (int iteration = 0; iteration < 100; iteration++)
			{
				if (r > 16.0)
				{
					break;
				}
				
				float theta = acos(z.z / r);
				
				float phi = atan(z.y, z.x);
				
				dr = pow(r, power - 1.0) * power * dr + 1.0;
				
				theta *= power;
				
				phi *= power;
				
				z = pow(r, power) * vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
				
				z += mix(pos, c, juliaProportion);
				
				z = rotationMatrix * z;
				
				r = length(z);
				
				color = mix(color, abs(z / r), colorScale);
				
				colorScale *= .5;
			}
			
			color /= max(max(color.x, color.y), color.z);
			
			return color;
		`,uniforms:{power:["float",8],c:["vec3",[0,0,0]],juliaProportion:["float",0],rotationMatrix:["mat3",[[1,0,0],[0,1,0],[0,0,1]]]},theta:4.6601,phi:2.272,cameraPos:[.0718,1.6264,1.4416],lightPos:[-10,0,15],lightBrightness:1.25})}updateRotationMatrix(){this.setUniform("rotationMatrix",getRotationMatrix(this.rotationAngleX,this.rotationAngleY,this.rotationAngleZ)),this.needNewFrame=!0}distanceEstimator(x,y,z){let t=[x,y,z],o=0,r=1;var a=this.uniforms.c[1],i=this.uniforms.juliaProportion[1],e=this.uniforms.power[1],n=this.uniforms.rotationMatrix[1];for(let p=0;p<16&&!(16<(o=magnitude(t)));p++){var s=Math.acos(t[2]/o),l=Math.atan2(t[1],t[0]),h=(r=Math.pow(o,e-1)*e*r+1,s*=e,l*=e,Math.pow(o,e));t[0]=h*Math.sin(s)*Math.cos(l)+((1-i)*x+i*a[0]),t[1]=h*Math.sin(s)*Math.sin(l)+((1-i)*y+i*a[1]),t[2]=h*Math.cos(s)+((1-i)*z+i*a[2]),t=mat3TimesVector(n,t)}return.5*Math.log(o)*o/r}switchBulb(){const t={t:0},o=this.uniforms.juliaProportion[1],r=0===this.uniforms.juliaProportion[1]?1:0;anime({targets:t,t:1,duration:1e3,easing:"easeOutSine",update:()=>{this.setUniform("juliaProportion",(1-t.t)*o+t.t*r),this.needNewFrame=!0}})}}export{Mandelbulb};
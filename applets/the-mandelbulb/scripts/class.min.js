class Mandelbulb extends Applet{cXInputElement=null;cYInputElement=null;cZInputElement=null;rotationAngleXInputElement=null;rotationAngleYInputElement=null;rotationAngleZInputElement=null;currentlyDrawing=!1;currentlyAnimatingParameters=!1;currentlyDragging=!1;drawStartTime=0;mouseX=0;mouseY=0;movingForwardKeyboard=!1;movingBackwardKeyboard=!1;movingRightKeyboard=!1;movingLeftKeyboard=!1;movingForwardTouch=!1;movingBackwardTouch=!1;wasMovingTouch=!1;movingSpeed=0;nextMoveVelocity=[0,0,0];moveVelocity=[0,
0,0];moveFriction=.91;moveVelocityStopThreshhold=5E-4;distanceToScene=1;lastTimestamp=-1;theta=4.6601;phi=2.272;nextThetaVelocity=0;nextPhiVelocity=0;thetaVelocity=0;phiVelocity=0;panFriction=.88;panVelocityStartThreshhold=.005;panVelocityStopThreshhold=5E-4;imageSize=500;imageWidth=500;imageHeight=500;maxIterations=16;maxMarches=100;imagePlaneCenterPos=[];forwardVec=[];rightVec=[];upVec=[];cameraPos=[.0828,2.17,1.8925];focalLength=2;lightPos=[0,0,5];power=8;c=[0,0,0];cOld=[0,0,0];cDelta=[0,0,0];rotationAngleX=0;rotationAngleY=0;rotationAngleZ=0;juliaProportion=0;movingPos=1;constructor(a,
b,d,e,h,k,g){super(a);this.cXInputElement=b;this.cYInputElement=d;this.cZInputElement=e;this.rotationAngleXInputElement=h;this.rotationAngleYInputElement=k;this.rotationAngleZInputElement=g;b={renderer:"gpu",shader:"\n\t\t\tprecision highp float;\n\t\t\t\n\t\t\tvarying vec2 uv;\n\t\t\t\n\t\t\tuniform float aspectRatioX;\n\t\t\tuniform float aspectRatioY;\n\t\t\t\n\t\t\tuniform vec3 cameraPos;\n\t\t\tuniform vec3 imagePlaneCenterPos;\n\t\t\tuniform vec3 forwardVec;\n\t\t\tuniform vec3 rightVec;\n\t\t\tuniform vec3 upVec;\n\t\t\t\n\t\t\tuniform float focalLength;\n\t\t\t\n\t\t\tuniform vec3 lightPos;\n\t\t\tconst float lightBrightness = 1.5;\n\t\t\t\n\t\t\tuniform int imageSize;\n\t\t\t\n\t\t\tuniform int drawSphere;\n\t\t\t\n\t\t\tuniform int maxIterations;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tconst float clipDistance = 1000.0;\n\t\t\tuniform int maxMarches;\n\t\t\tuniform float stepFactor;\n\t\t\tconst vec3 fogColor = vec3(0.0, 0.0, 0.0);\n\t\t\tconst float fogScaling = .1;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tuniform mat3 rotationMatrix;\n\t\t\t\n\t\t\tuniform float power;\n\t\t\tuniform vec3 c;\n\t\t\tuniform float juliaProportion;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfloat distanceEstimator(vec3 pos)\n\t\t\t{\n\t\t\t\tvec3 z = pos;\n\t\t\t\t\n\t\t\t\tfloat r = length(z);\n\t\t\t\tfloat dr = 1.0;\n\t\t\t\t\n\t\t\t\tfor (int iteration = 0; iteration < 100; iteration++)\n\t\t\t\t{\n\t\t\t\t\tif (r > 16.0 || iteration >= maxIterations)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfloat theta = acos(z.z / r);\n\t\t\t\t\t\n\t\t\t\t\tfloat phi = atan(z.y, z.x);\n\t\t\t\t\t\n\t\t\t\t\tdr = pow(r, power - 1.0) * power * dr + 1.0;\n\t\t\t\t\t\n\t\t\t\t\ttheta *= power;\n\t\t\t\t\t\n\t\t\t\t\tphi *= power;\n\t\t\t\t\t\n\t\t\t\t\tz = pow(r, power) * vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n\t\t\t\t\t\n\t\t\t\t\tz += mix(pos, c, juliaProportion);\n\t\t\t\t\t\n\t\t\t\t\tz = rotationMatrix * z;\n\t\t\t\t\t\n\t\t\t\t\tr = length(z);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfloat distance1 = .5 * log(r) * r / dr;\n\t\t\t\tfloat distance2 = length(pos - c) - .05;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (distance2 < distance1 && drawSphere == 1)\n\t\t\t\t{\n\t\t\t\t\treturn distance2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\treturn distance1;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvec3 getColor(vec3 pos)\n\t\t\t{\n\t\t\t\tvec3 z = pos;\n\t\t\t\t\n\t\t\t\tfloat r = length(z);\n\t\t\t\tfloat dr = 1.0;\n\t\t\t\t\n\t\t\t\tvec3 color = vec3(1.0, 1.0, 1.0);\n\t\t\t\tfloat colorScale = .5;\n\t\t\t\t\n\t\t\t\tfor (int iteration = 0; iteration < 100; iteration++)\n\t\t\t\t{\n\t\t\t\t\tif (r > 16.0 || iteration >= maxIterations)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfloat theta = acos(z.z / r);\n\t\t\t\t\t\n\t\t\t\t\tfloat phi = atan(z.y, z.x);\n\t\t\t\t\t\n\t\t\t\t\tdr = pow(r, power - 1.0) * power * dr + 1.0;\n\t\t\t\t\t\n\t\t\t\t\ttheta *= power;\n\t\t\t\t\t\n\t\t\t\t\tphi *= power;\n\t\t\t\t\t\n\t\t\t\t\tz = pow(r, power) * vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n\t\t\t\t\t\n\t\t\t\t\tz += mix(pos, c, juliaProportion);\n\t\t\t\t\t\n\t\t\t\t\tz = rotationMatrix * z;\n\t\t\t\t\t\n\t\t\t\t\tr = length(z);\n\t\t\t\t\t\n\t\t\t\t\tcolor = mix(color, abs(z / r), colorScale);\n\t\t\t\t\t\n\t\t\t\t\tcolorScale *= .5;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcolor /= max(max(color.x, color.y), color.z);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfloat distance1 = .5 * log(r) * r / dr;\n\t\t\t\tfloat distance2 = length(pos - c) - .05;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (distance2 < distance1 && drawSphere == 1)\n\t\t\t\t{\n\t\t\t\t\tcolor = vec3(1.0, 1.0, 1.0);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\treturn color;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvec3 getSurfaceNormal(vec3 pos)\n\t\t\t{\n\t\t\t\tfloat xStep1 = distanceEstimator(pos + vec3(.000001, 0.0, 0.0));\n\t\t\t\tfloat yStep1 = distanceEstimator(pos + vec3(0.0, .000001, 0.0));\n\t\t\t\tfloat zStep1 = distanceEstimator(pos + vec3(0.0, 0.0, .000001));\n\t\t\t\t\n\t\t\t\tfloat xStep2 = distanceEstimator(pos - vec3(.000001, 0.0, 0.0));\n\t\t\t\tfloat yStep2 = distanceEstimator(pos - vec3(0.0, .000001, 0.0));\n\t\t\t\tfloat zStep2 = distanceEstimator(pos - vec3(0.0, 0.0, .000001));\n\t\t\t\t\n\t\t\t\treturn normalize(vec3(xStep1 - xStep2, yStep1 - yStep2, zStep1 - zStep2));\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvec3 computeShading(vec3 pos, int iteration)\n\t\t\t{\n\t\t\t\tvec3 surfaceNormal = getSurfaceNormal(pos);\n\t\t\t\t\n\t\t\t\tvec3 lightDirection = normalize(lightPos - pos);\n\t\t\t\t\n\t\t\t\tfloat dotProduct = dot(surfaceNormal, lightDirection);\n\t\t\t\t\n\t\t\t\tfloat lightIntensity = lightBrightness * max(dotProduct, -.25 * dotProduct);\n\t\t\t\t\n\t\t\t\t//The last factor adds ambient occlusion.\n\t\t\t\tvec3 color = getColor(pos) * lightIntensity * max((1.0 - float(iteration) / float(maxMarches)), 0.0);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//Apply fog.\n\t\t\t\treturn mix(color, fogColor, 1.0 - exp(-distance(pos, cameraPos) * fogScaling));\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvec3 raymarch(vec3 startPos)\n\t\t\t{\n\t\t\t\t//That factor of .9 is important -- without it, we're always stepping as far as possible, which results in artefacts and weirdness.\n\t\t\t\tvec3 rayDirectionVec = normalize(startPos - cameraPos) * .9 / stepFactor;\n\t\t\t\t\n\t\t\t\tvec3 finalColor = fogColor;\n\t\t\t\t\n\t\t\t\tfloat epsilon = 0.0;\n\t\t\t\t\n\t\t\t\tfloat t = 0.0;\n\t\t\t\t\n\t\t\t\tfloat lastDistance = 1000.0;\n\t\t\t\t\n\t\t\t\t//int slowedDown = 0;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor (int iteration = 0; iteration < 1024; iteration++)\n\t\t\t\t{\n\t\t\t\t\tif (iteration == maxMarches)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tvec3 pos = startPos + t * rayDirectionVec;\n\t\t\t\t\t\n\t\t\t\t\t//This prevents overstepping, and is honestly a pretty clever fix.\n\t\t\t\t\tfloat distance = min(distanceEstimator(pos), lastDistance);\n\t\t\t\t\tlastDistance = distance;\n\t\t\t\t\t\n\t\t\t\t\t//This lowers the detail far away, which makes everything run nice and fast.\n\t\t\t\t\tepsilon = max(.0000006, .5 * t / float(imageSize));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif (distance < epsilon)\n\t\t\t\t\t{\n\t\t\t\t\t\tfinalColor = computeShading(pos, iteration);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Uncomment to add aggressive understepping when close to the fractal boundary, which helps to prevent flickering but is a significant performance hit.\n\t\t\t\t\t/*\n\t\t\t\t\telse if (lastDistance / distance > .9999 && slowedDown == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\trayDirectionVec = normalize(startPos - cameraPos) * .125;\n\t\t\t\t\t\t\n\t\t\t\t\t\tslowedDown = 1;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse if (lastDistance / distance <= .9999 && slowedDown == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\trayDirectionVec = normalize(startPos - cameraPos) * .9;\n\t\t\t\t\t\t\n\t\t\t\t\t\tslowedDown = 0;\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t\t\n\t\t\t\t\telse if (t > clipDistance)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tt += distance;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\treturn finalColor;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\t//Uncomment to use 2x antialiasing.\n\t\t\t\t//vec3 finalColor = (raymarch(imagePlaneCenterPos + rightVec * (uv.x * aspectRatio + .5 / float(imageSize)) + upVec * (uv.y + .5 / float(imageSize))) + raymarch(imagePlaneCenterPos + rightVec * (uv.x * aspectRatio + .5 / float(imageSize)) + upVec * (uv.y - .5 / float(imageSize))) + raymarch(imagePlaneCenterPos + rightVec * (uv.x * aspectRatio - .5 / float(imageSize)) + upVec * (uv.y + .5 / float(imageSize))) + raymarch(imagePlaneCenterPos + rightVec * (uv.x * aspectRatio - .5 / float(imageSize)) + upVec * (uv.y - .5 / float(imageSize)))) / 4.0;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4(raymarch(imagePlaneCenterPos + rightVec * uv.x * aspectRatioX + upVec * uv.y / aspectRatioY), 1.0);\n\t\t\t}\n\t\t",
canvasWidth:500,canvasHeight:500,useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:()=>this.changeResolution(),mousedownCallback:this.onGrabCanvas.bind(this),touchstartCallback:this.onGrabCanvas.bind(this),mousedragCallback:this.onDragCanvas.bind(this),touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),
touchendCallback:this.onReleaseCanvas.bind(this)};this.wilson=new Wilson(a,b);this.wilson.render.initUniforms("aspectRatioX aspectRatioY imageSize cameraPos imagePlaneCenterPos forwardVec rightVec upVec focalLength lightPos drawSphere power c juliaProportion rotationMatrix maxMarches stepFactor maxIterations".split(" "));this.calculateVectors();this.imageWidth>=this.imageHeight?(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,this.imageWidth/this.imageHeight),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,
1)):(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,1),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,this.imageWidth/this.imageHeight));this.wilson.gl.uniform1i(this.wilson.uniforms.imageSize,this.imageSize);this.wilson.gl.uniform3fv(this.wilson.uniforms.cameraPos,this.cameraPos);this.wilson.gl.uniform3fv(this.wilson.uniforms.imagePlaneCenterPos,this.imagePlaneCenterPos);this.wilson.gl.uniform3fv(this.wilson.uniforms.lightPos,this.lightPos);this.wilson.gl.uniform3fv(this.wilson.uniforms.forwardVec,
this.forwardVec);this.wilson.gl.uniform3fv(this.wilson.uniforms.rightVec,this.rightVec);this.wilson.gl.uniform3fv(this.wilson.uniforms.upVec,this.upVec);this.wilson.gl.uniform1f(this.wilson.uniforms.focalLength,this.focalLength);this.wilson.gl.uniform1i(this.wilson.uniforms.drawSphere,0);this.wilson.gl.uniform1f(this.wilson.uniforms.power,8);this.wilson.gl.uniform3fv(this.wilson.uniforms.c,this.c);this.wilson.gl.uniform1f(this.wilson.uniforms.juliaProportion,0);this.wilson.gl.uniformMatrix3fv(this.wilson.uniforms.rotationMatrix,
!1,[1,0,0,0,1,0,0,0,1]);this.wilson.gl.uniform1i(this.wilson.uniforms.maxMarches,this.maxMarches);this.wilson.gl.uniform1f(this.wilson.uniforms.stepFactor,1);this.wilson.gl.uniform1i(this.wilson.uniforms.maxIterations,this.maxIterations);a=this.handleKeydownEvent.bind(this);document.documentElement.addEventListener("keydown",a);this.handlers.push([document.documentElement,"keydown",a]);a=this.handleKeyupEvent.bind(this);document.documentElement.addEventListener("keyup",a);this.handlers.push([document.documentElement,
"keyup",a]);a=()=>this.changeResolution();window.addEventListener("resize",a);this.handlers.push([window,"resize",a]);window.requestAnimationFrame(this.drawFrame.bind(this))}drawFrame(a){const b=a-this.lastTimestamp;this.lastTimestamp=a;if(0!==b){this.wilson.render.drawFrame();this.movingForwardKeyboard||this.movingBackwardKeyboard||this.movingRightKeyboard||this.movingLeftKeyboard||this.movingForwardTouch||this.movingBackwardTouch?this.updateCameraParameters():50<=b&&(this.phiVelocity=this.thetaVelocity=
this.nextPhiVelocity=this.nextThetaVelocity=0,this.movingBackwardTouch=this.movingForwardTouch=!1,this.moveVelocity[0]=0,this.moveVelocity[1]=0,this.moveVelocity[2]=0,this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0);if(0!==this.thetaVelocity||0!==this.phiVelocity)this.theta+=this.thetaVelocity,this.phi+=this.phiVelocity,this.theta>=2*Math.PI?this.theta-=2*Math.PI:0>this.theta&&(this.theta+=2*Math.PI),this.phi>Math.PI-.01?this.phi=Math.PI-.01:.01>this.phi&&(this.phi=
.01),this.thetaVelocity*=this.panFriction,this.phiVelocity*=this.panFriction,this.thetaVelocity*this.thetaVelocity+this.phiVelocity*this.phiVelocity<this.panVelocityStopThreshhold*this.panVelocityStopThreshhold&&(this.phiVelocity=this.thetaVelocity=0),this.calculateVectors();if(0!==this.moveVelocity[0]||0!==this.moveVelocity[1]||0!==this.moveVelocity[2]){if(this.movingPos)this.cameraPos[0]+=this.moveVelocity[0],this.cameraPos[1]+=this.moveVelocity[1],this.cameraPos[2]+=this.moveVelocity[2];else{this.c[0]+=
this.moveVelocity[0];this.c[1]+=this.moveVelocity[1];this.c[2]+=this.moveVelocity[2];try{this.cXInputElement.value=Math.round(1E6*c[0])/1E6,this.cYInputElement.value=Math.round(1E6*c[1])/1E6,this.cZInputElement.value=Math.round(1E6*c[2])/1E6}catch(d){}this.wilson.gl.uniform3fv(this.wilson.uniforms.c,this.c)}this.moveVelocity[0]*=this.moveFriction;this.moveVelocity[1]*=this.moveFriction;this.moveVelocity[2]*=this.moveFriction;this.moveVelocity[0]*this.moveVelocity[0]+this.moveVelocity[1]*this.moveVelocity[1]+
this.moveVelocity[2]*this.moveVelocity[2]<this.moveVelocityStopThreshhold*this.movingSpeed*this.moveVelocityStopThreshhold*this.movingSpeed&&(this.moveVelocity[0]=0,this.moveVelocity[1]=0,this.moveVelocity[2]=0);this.calculateVectors()}window.requestAnimationFrame(this.drawFrame.bind(this))}}calculateVectors(){this.forwardVec=[Math.cos(this.theta)*Math.sin(this.phi),Math.sin(this.theta)*Math.sin(this.phi),Math.cos(this.phi)];this.rightVec=this.normalize([this.forwardVec[1],-this.forwardVec[0],0]);
this.upVec=this.crossProduct(this.rightVec,this.forwardVec);this.distanceToScene=this.distanceEstimator(this.cameraPos[0],this.cameraPos[1],this.cameraPos[2]);this.focalLength=this.distanceToScene/2;this.rightVec[0]*=this.focalLength/2;this.rightVec[1]*=this.focalLength/2;this.upVec[0]*=this.focalLength/2;this.upVec[1]*=this.focalLength/2;this.upVec[2]*=this.focalLength/2;this.imagePlaneCenterPos=[this.cameraPos[0]+this.focalLength*this.forwardVec[0],this.cameraPos[1]+this.focalLength*this.forwardVec[1],
this.cameraPos[2]+this.focalLength*this.forwardVec[2]];this.wilson.gl.uniform3fv(this.wilson.uniforms.cameraPos,this.cameraPos);this.wilson.gl.uniform3fv(this.wilson.uniforms.imagePlaneCenterPos,this.imagePlaneCenterPos);this.wilson.gl.uniform3fv(this.wilson.uniforms.forwardVec,this.forwardVec);this.wilson.gl.uniform3fv(this.wilson.uniforms.rightVec,this.rightVec);this.wilson.gl.uniform3fv(this.wilson.uniforms.upVec,this.upVec);this.wilson.gl.uniform1f(this.wilson.uniforms.focalLength,this.focalLength)}dotProduct(a,
b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]}crossProduct(a,b){return[a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]]}matMul(a,b){return[[a[0][0]*b[0][0]+a[0][1]*b[1][0]+a[0][2]*b[2][0],a[0][0]*b[0][1]+a[0][1]*b[1][1]+a[0][2]*b[2][1],a[0][0]*b[0][2]+a[0][1]*b[1][2]+a[0][2]*b[2][2]],[a[1][0]*b[0][0]+a[1][1]*b[1][0]+a[1][2]*b[2][0],a[1][0]*b[0][1]+a[1][1]*b[1][1]+a[1][2]*b[2][1],a[1][0]*b[0][2]+a[1][1]*b[1][2]+a[1][2]*b[2][2]],[a[2][0]*b[0][0]+a[2][1]*b[1][0]+a[2][2]*b[2][0],a[2][0]*b[0][1]+
a[2][1]*b[1][1]+a[2][2]*b[2][1],a[2][0]*b[0][2]+a[2][1]*b[1][2]+a[2][2]*b[2][2]]]}updateRotationMatrix(){var a=[[1,0,0],[0,Math.cos(this.rotationAngleX),-Math.sin(this.rotationAngleX)],[0,Math.sin(this.rotationAngleX),Math.cos(this.rotationAngleX)]];a=this.matMul(this.matMul([[Math.cos(this.rotationAngleZ),-Math.sin(this.rotationAngleZ),0],[Math.sin(this.rotationAngleZ),Math.cos(this.rotationAngleZ),0],[0,0,1]],[[Math.cos(this.rotationAngleY),0,-Math.sin(this.rotationAngleY)],[0,1,0],[Math.sin(this.rotationAngleY),
0,Math.cos(this.rotationAngleY)]]),a);this.wilson.gl.uniformMatrix3fv(this.wilson.uniforms.rotationMatrix,!1,[a[0][0],a[1][0],a[2][0],a[0][1],a[1][1],a[2][1],a[0][2],a[1][2],a[2][2]])}normalize(a){const b=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return[a[0]/b,a[1]/b,a[2]/b]}distanceEstimator(a,b,d){const e=[a,b,d];let h=0,k=1;for(let l=0;l<4*this.maxIterations;l++){h=Math.sqrt(this.dotProduct(e,e));if(16<h)break;k=Math.pow(h,this.power-1)*this.power*k+1;var g=Math.pow(h,this.power);e[0]=g*Math.sin(this.theta)*
Math.cos(this.phi)+((1-this.juliaProportion)*a+this.juliaProportion*this.c[0]);e[1]=g*Math.sin(this.theta)*Math.sin(this.phi)+((1-this.juliaProportion)*b+this.juliaProportion*this.c[1]);e[2]=g*Math.cos(this.theta)+((1-this.juliaProportion)*d+this.juliaProportion*this.c[2]);g=e[0];const m=e[1],n=e[2];var f=[[1,0,0],[0,Math.cos(this.rotationAngleX),-Math.sin(this.rotationAngleX)],[0,Math.sin(this.rotationAngleX),Math.cos(this.rotationAngleX)]];f=this.matMul(this.matMul([[Math.cos(this.rotationAngleZ),
-Math.sin(this.rotationAngleZ),0],[Math.sin(this.rotationAngleZ),Math.cos(this.rotationAngleZ),0],[0,0,1]],[[Math.cos(this.rotationAngleY),0,-Math.sin(this.rotationAngleY)],[0,1,0],[Math.sin(this.rotationAngleY),0,Math.cos(this.rotationAngleY)]]),f);e[0]=f[0][0]*g+f[0][1]*m+f[0][2]*n;e[1]=f[1][0]*g+f[1][1]*m+f[1][2]*n;e[2]=f[2][0]*g+f[2][1]*m+f[2][2]*n}return.5*Math.log(h)*h/k}onGrabCanvas(a,b,d){this.phiVelocity=this.thetaVelocity=this.nextPhiVelocity=this.nextThetaVelocity=0;"touchstart"===d.type&&
(2===d.touches.length?(this.movingForwardTouch=!0,this.movingBackwardTouch=!1,this.moveVelocity[0]=0,this.moveVelocity[1]=0,this.moveVelocity[2]=0,this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0):3===d.touches.length?(this.movingForwardTouch=!1,this.movingBackwardTouch=!0,this.moveVelocity[0]=0,this.moveVelocity[1]=0,this.moveVelocity[2]=0,this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0):this.movingBackwardTouch=this.movingForwardTouch=
!1,this.wasMovingTouch=!1)}onDragCanvas(a,b,d,e,h){"touchmove"===h.type&&this.wasMovingTouch?this.wasMovingTouch=!1:(this.theta+=d*Math.PI/2,this.nextThetaVelocity=d*Math.PI/2,this.theta>=2*Math.PI?this.theta-=2*Math.PI:0>this.theta&&(this.theta+=2*Math.PI),this.phi+=e*Math.PI/2,this.nextPhiVelocity=e*Math.PI/2,this.phi>Math.PI-.01?this.phi=Math.PI-.01:.01>this.phi&&(this.phi=.01),this.calculateVectors())}onReleaseCanvas(a,b,d){"touchend"===d.type&&(this.movingBackwardTouch=this.movingForwardTouch=
!1,this.wasMovingTouch=!0,0===this.moveVelocity[0]&&0===this.moveVelocity[1]&&0===this.moveVelocity[2]&&(this.moveVelocity[0]=this.nextMoveVelocity[0],this.moveVelocity[1]=this.nextMoveVelocity[1],this.moveVelocity[2]=this.nextMoveVelocity[2],this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0));(("touchend"===d.type&&d.touches,0===length)||"mouseup"===d.type)&&this.nextThetaVelocity*this.nextThetaVelocity+this.nextPhiVelocity*this.nextPhiVelocity>=this.panVelocityStartThreshhold*
this.panVelocityStartThreshhold&&(this.thetaVelocity=this.nextThetaVelocity,this.phiVelocity=this.nextPhiVelocity)}handleKeydownEvent(a){"INPUT"===document.activeElement.tagName||87!==a.keyCode&&83!==a.keyCode&&68!==a.keyCode&&65!==a.keyCode||(this.nextMoveVelocity=[0,0,0],this.moveVelocity=[0,0,0],87===a.keyCode?this.movingForwardKeyboard=!0:83===a.keyCode&&(this.movingBackwardKeyboard=!0),68===a.keyCode?this.movingRightKeyboard=!0:65===a.keyCode&&(this.movingLeftKeyboard=!0))}handleKeyupEvent(a){"INPUT"===
document.activeElement.tagName||87!==a.keyCode&&83!==a.keyCode&&68!==a.keyCode&&65!==a.keyCode||(0===this.moveVelocity[0]&&0===this.moveVelocity[1]&&0===this.moveVelocity[2]&&(this.moveVelocity[0]=this.nextMoveVelocity[0],this.moveVelocity[1]=this.nextMoveVelocity[1],this.moveVelocity[2]=this.nextMoveVelocity[2],this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0),87===a.keyCode?this.movingForwardKeyboard=!1:83===a.keyCode&&(this.movingBackwardKeyboard=!1),68===a.keyCode?
this.movingRightKeyboard=!1:65===a.keyCode&&(this.movingLeftKeyboard=!1))}updateCameraParameters(){this.movingSpeed=Math.min(Math.max(1E-6,this.distanceToScene/20),.02);if(this.movingPos){var a=[...this.cameraPos];if(this.movingForwardKeyboard||this.movingForwardTouch)this.cameraPos[0]+=this.movingSpeed*this.forwardVec[0],this.cameraPos[1]+=this.movingSpeed*this.forwardVec[1],this.cameraPos[2]+=this.movingSpeed*this.forwardVec[2];else if(this.movingBackwardKeyboard||this.movingBackwardTouch)this.cameraPos[0]-=
this.movingSpeed*this.forwardVec[0],this.cameraPos[1]-=this.movingSpeed*this.forwardVec[1],this.cameraPos[2]-=this.movingSpeed*this.forwardVec[2];this.movingRightKeyboard?(this.cameraPos[0]+=this.movingSpeed*this.rightVec[0]/this.focalLength,this.cameraPos[1]+=this.movingSpeed*this.rightVec[1]/this.focalLength,this.cameraPos[2]+=this.movingSpeed*this.rightVec[2]/this.focalLength):this.movingLeftKeyboard&&(this.cameraPos[0]-=this.movingSpeed*this.rightVec[0]/this.focalLength,this.cameraPos[1]-=this.movingSpeed*
this.rightVec[1]/this.focalLength,this.cameraPos[2]-=this.movingSpeed*this.rightVec[2]/this.focalLength);this.nextMoveVelocity[0]=this.cameraPos[0]-a[0];this.nextMoveVelocity[1]=this.cameraPos[1]-a[1];this.nextMoveVelocity[2]=this.cameraPos[2]-a[2]}else{a=[...this.c];if(this.movingForwardKeyboard||this.movingForwardTouch)this.c[0]+=.5*this.movingSpeed*this.forwardVec[0],this.c[1]+=.5*this.movingSpeed*this.forwardVec[1],this.c[2]+=.5*this.movingSpeed*this.forwardVec[2];else if(this.movingBackwardKeyboard||
this.movingBackwardTouch)this.c[0]-=.5*this.movingSpeed*this.forwardVec[0],this.c[1]-=.5*this.movingSpeed*this.forwardVec[1],this.c[2]-=.5*this.movingSpeed*this.forwardVec[2];this.movingRightKeyboard?(this.c[0]+=.5*this.movingSpeed*this.rightVec[0]/this.focalLength,this.c[1]+=.5*this.movingSpeed*this.rightVec[1]/this.focalLength,this.c[2]+=.5*this.movingSpeed*this.rightVec[2]/this.focalLength):this.movingLeftKeyboard&&(this.c[0]-=.5*this.movingSpeed*this.rightVec[0]/this.focalLength,this.c[1]-=.5*
this.movingSpeed*this.rightVec[1]/this.focalLength,this.c[2]-=.5*this.movingSpeed*this.rightVec[2]/this.focalLength);try{cXInputElement.value=Math.round(1E6*this.c[0])/1E6,cYInputElement.value=Math.round(1E6*this.c[1])/1E6,cZInputElement.value=Math.round(1E6*this.c[2])/1E6}catch(b){}this.wilson.gl.uniform3fv(this.wilson.uniforms.c,this.c);this.nextMoveVelocity[0]=this.c[0]-a[0];this.nextMoveVelocity[1]=this.c[1]-a[1];this.nextMoveVelocity[2]=this.c[2]-a[2]}this.calculateVectors()}changeResolution(a=
this.imageSize){this.imageSize=a;this.wilson.fullscreen.currentlyFullscreen?1<=Page.Layout.aspectRatio?(this.imageWidth=this.imageSize,this.imageHeight=Math.floor(this.imageSize/Page.Layout.aspectRatio)):(this.imageWidth=Math.floor(this.imageSize*Page.Layout.aspectRatio),this.imageHeight=this.imageSize):this.imageHeight=this.imageWidth=this.imageSize;this.wilson.changeCanvasSize(this.imageWidth,this.imageHeight);this.imageWidth>=this.imageHeight?(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,
this.imageWidth/this.imageHeight),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,1)):(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,1),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,this.imageWidth/this.imageHeight));this.wilson.gl.uniform1i(this.wilson.uniforms.imageSize,this.imageSize)}randomizeRotation(a=!0){const b={t:0},d=this.rotationAngleX,e=this.rotationAngleY,h=this.rotationAngleZ,k=2*Math.random()-1,g=2*Math.random()-1,f=2*Math.random()-1;try{this.rotationAngleXInputElement.value=
Math.round(1E6*k)/1E6,this.rotationAngleYInputElement.value=Math.round(1E6*g)/1E6,this.rotationAngleZInputElement.value=Math.round(1E6*f)/1E6}catch(l){}anime({targets:b,t:1,duration:1E3*a+10,easing:"easeOutSine",update:()=>{this.rotationAngleX=(1-b.t)*d+b.t*k;this.rotationAngleY=(1-b.t)*e+b.t*g;this.rotationAngleZ=(1-b.t)*h+b.t*f;this.updateRotationMatrix()}})}randomizeC(a=!0){const b={t:0},d=this.c[0],e=this.c[1],h=this.c[2],k=1.5*Math.random()-.75,g=1.5*Math.random()-.75,f=1.5*Math.random()-.75;
try{this.cXInputElement.value=Math.round(1E6*k)/1E6,this.cYInputElement.value=Math.round(1E6*g)/1E6,this.cZInputElement.value=Math.round(1E6*f)/1E6}catch(l){}anime({targets:b,t:1,duration:1E3*a+10,easing:"easeOutSine",update:()=>{this.c[0]=(1-b.t)*d+b.t*k;this.c[1]=(1-b.t)*e+b.t*g;this.c[2]=(1-b.t)*h+b.t*f;this.wilson.gl.uniform3fv(this.wilson.uniforms.c,this.c)}})}switchBulb(){0===this.juliaProportion?(this.wilson.gl.uniform3fv(this.wilson.uniforms.c,this.c),this.movingPos||this.wilson.gl.uniform1i(this.wilson.uniforms.drawSphere,
1)):(this.movingPos=!0,this.wilson.gl.uniform1i(this.wilson.uniforms.drawSphere,0));const a={t:0},b=this.juliaProportion,d=0===this.juliaProportion?1:0;anime({targets:a,t:1,duration:1E3,easing:"easeOutSine",update:()=>{this.juliaProportion=(1-a.t)*b+a.t*d;this.wilson.gl.uniform1f(this.wilson.uniforms.juliaProportion,this.juliaProportion)}})}switchMovement(){(this.movingPos=!this.movingPos)?this.wilson.gl.uniform1i(this.wilson.uniforms.drawSphere,0):this.wilson.gl.uniform1i(this.wilson.uniforms.drawSphere,
1)}};

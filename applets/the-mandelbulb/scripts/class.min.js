import{magnitude,mat3TimesVector,RaymarchApplet}from"/scripts/applets/raymarchApplet.min.js";import{animate}from"/scripts/src/utils.min.js";class Mandelbulb extends RaymarchApplet{constructor({canvas}){super({canvas:canvas,resolution:400,distanceEstimatorGlsl:`
			vec3 z = pos;
			
			float r = length(z);
			float dr = 1.0;
			
			for (int iteration = 0; iteration < 16; iteration++)
			{
				if (r > 16.0)
				{
					break;
				}
				
				float theta = acos(z.z / r);
				
				float phi = atan(z.y, z.x);
				
				dr = pow(r, power - 1.0) * power * dr + 1.0;
				
				theta *= power;
				
				phi *= power;
				
				z = pow(r, power) * vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
				
				z += mix(pos, c, juliaProportion);
				
				z = rotationMatrix * z;
				
				r = length(z);
			}
			
			return .5 * log(r) * r / dr;
		`,getColorGlsl:`
			vec3 z = pos;
			
			float r = length(z);
			float dr = 1.0;
			
			vec3 color = vec3(1.0, 1.0, 1.0);
			float colorScale = .5;
			
			for (int iteration = 0; iteration < 100; iteration++)
			{
				if (r > 16.0)
				{
					break;
				}
				
				float theta = acos(z.z / r);
				
				float phi = atan(z.y, z.x);
				
				dr = pow(r, power - 1.0) * power * dr + 1.0;
				
				theta *= power;
				
				phi *= power;
				
				z = pow(r, power) * vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
				
				z += mix(pos, c, juliaProportion);
				
				z = rotationMatrix * z;
				
				r = length(z);
				
				color = mix(color, abs(z / r), colorScale);
				
				colorScale *= .5;
			}
			
			color /= max(max(color.x, color.y), color.z);
			
			return color;
		`,uniformsGlsl:`
			uniform float power;
			uniform vec3 c;
			uniform float juliaProportion;
			uniform mat3 rotationMatrix;
		`,uniforms:{power:8,c:[0,0,0],juliaProportion:0,rotationMatrix:[[1,0,0],[0,1,0],[0,0,1]]},theta:4.6601,phi:2.272,cameraPos:[.084365,1.91102,1.69388],lightPos:[-10,0,15],lightBrightness:1.2})}distanceEstimator(x,y,z){let o=[x,y,z],t=0,r=1;var i=this.uniforms.c,a=this.uniforms.juliaProportion,e=this.uniforms.power,n=this.uniforms.rotationMatrix;for(let h=0;h<16&&!(16<(t=magnitude(o)));h++){var s=Math.acos(o[2]/t),l=Math.atan2(o[1],o[0]),p=(r=Math.pow(t,e-1)*e*r+1,s*=e,l*=e,Math.pow(t,e));o[0]=p*Math.sin(s)*Math.cos(l)+((1-a)*x+a*i[0]),o[1]=p*Math.sin(s)*Math.sin(l)+((1-a)*y+a*i[1]),o[2]=p*Math.cos(s)+((1-a)*z+a*i[2]),o=mat3TimesVector(n,o)}return.5*Math.log(t)*t/r}switchBulb(instant){const o=this.uniforms.juliaProportion,r=0===this.uniforms.juliaProportion?1:0;animate(t=>{this.setUniforms({juliaProportion:(1-t)*o+t*r}),this.needNewFrame=!0},instant?0:650,"easeOutQuad")}downloadFrame(){this.uniforms.juliaProportion<.5?this.wilson.downloadFrame("the-mandelbulb.png"):this.wilson.downloadFrame("a-juliabulb.png")}downloadHighResFrame(filename,resolutionMultiplier=1){this.uniforms.juliaProportion<.5?super.downloadHighResFrame("the-mandelbulb.png",resolutionMultiplier):super.downloadHighResFrame("a-juliabulb.png",resolutionMultiplier)}}export{Mandelbulb};
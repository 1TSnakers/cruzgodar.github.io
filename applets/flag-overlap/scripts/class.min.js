import{Applet,rgbToHsv}from"/scripts/applets/applet.min.js";import{changeOpacity}from"/scripts/src/animation.min.js";import{pageUrl}from"/scripts/src/main.min.js";import{animate,sleep}from"/scripts/src/utils.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";const hThreshold=.075,sThreshold=.4,vThreshold=.4;class FlagOverlap extends Applet{possibleFlags=[];won=!1;currentlyAnimating=!1;guessCanvases;overlayCanvases;progressBars;winOverlay;wilsonOverlay;wilsonCorrectFlag;resolution=2048;correctFlag;correctPixels;correctHsv;lastGuessFlagId;guesses=[];showDiffs=!0;constructor({canvas,overlayCanvas,guessCanvases,overlayCanvases,progressBars,winOverlay}){super(canvas),this.guessCanvases=guessCanvases,this.overlayCanvases=overlayCanvases,this.progressBars=progressBars,this.winOverlay=winOverlay;var s=()=>{this.wilson.currentlyFullscreen?this.wilson.exitFullscreen():this.wilson.enterFullscreen()},s={canvasWidth:this.resolution,interactionOptions:{callbacks:{mousedown:s,touchstart:s}}},s=(this.wilson=new WilsonCPU(canvas,s),this.wilsonOverlay=new WilsonCPU(overlayCanvas,s),{canvasWidth:this.resolution}),a=this.createHiddenCanvas(!0,1024/683);this.wilsonCorrectFlag=new WilsonCPU(a,s)}chooseCorrectFlag(){this.correctFlag=this.possibleFlags[Math.floor(Math.random()*this.possibleFlags.length)]}async drawFlag(wilson,flagId){let s;var a=new Promise(r=>s=r);const e=new Image;e.onload=()=>{wilson.ctx.drawImage(e,0,0,wilson.canvasWidth,wilson.canvasHeight),s()},e.src=pageUrl+`/graphics/${flagId}.png`,await a;var t=wilson.ctx.getImageData(0,0,wilson.canvasWidth,wilson.canvasHeight).data,i=new Array(wilson.canvasWidth*wilson.canvasHeight*3);for(let l=0;l<wilson.canvasWidth*wilson.canvasHeight;l++){var n=rgbToHsv(t[4*l],t[4*l+1],t[4*l+2]);i[3*l]=n[0],i[3*l+1]=n[1],i[3*l+2]=n[2]}return{pixels:t,hsvData:i}}updateMainCanvas(){var s=new Uint8ClampedArray(this.wilson.canvasWidth*this.wilson.canvasHeight*4);for(let a=0;a<this.wilson.canvasWidth*this.wilson.canvasHeight;a++){s[4*a]=32,s[4*a+1]=32,s[4*a+2]=32,s[4*a+3]=255;for(const e of this.guesses)if(e.matchingPixels[a]){s[4*a]=this.correctPixels[4*a],s[4*a+1]=this.correctPixels[4*a+1],s[4*a+2]=this.correctPixels[4*a+2];break}}this.wilson.ctx.putImageData(new ImageData(s,this.wilson.canvasWidth,this.wilson.canvasHeight),0,0)}async guessFlag(flagId){if(!this.won&&!this.currentlyAnimating){if(this.currentlyAnimating=!0,void 0===this.correctFlag){this.chooseCorrectFlag();const r=await this.drawFlag(this.wilsonCorrectFlag,this.correctFlag);this.correctPixels=r.pixels,this.correctHsv=r.hsvData}const o={};this.lastGuessFlagId=flagId,o.flagId=flagId,o.matchingPixels=new Array(this.wilson.canvasWidth*this.wilson.canvasHeight);var e=()=>{o.wilsonOverlay.currentlyFullscreen?o.wilsonOverlay.exitFullscreen():o.wilson.currentlyFullscreen?o.wilson.exitFullscreen():(this.showDiffs?o.wilson:o.wilsonOverlay).enterFullscreen()},e={canvasWidth:this.resolution,interactionOptions:{callbacks:{mousedown:e,touchstart:e}}};console.log(this.guessCanvases[this.guesses.length]),o.wilson=new WilsonCPU(this.guessCanvases[this.guesses.length],e),o.wilsonOverlay=new WilsonCPU(this.overlayCanvases[this.guesses.length],e);const[r]=await Promise.all([this.drawFlag(o.wilsonOverlay,flagId),this.drawFlag(this.wilsonOverlay,flagId)]);o.pixels=r.pixels,o.hsvData=r.hsvData;let s=0;for(let a=0;a<this.wilson.canvasWidth*this.wilson.canvasHeight;a++){var i=Math.abs(o.hsvData[3*a]-this.correctHsv[3*a]),i=Math.min(i,1-i),n=Math.abs(o.hsvData[3*a+1]-this.correctHsv[3*a+1]),l=Math.abs(o.hsvData[3*a+2]-this.correctHsv[3*a+2]);o.matchingPixels[a]=0===o.hsvData[3*a+2]?0===l:i<hThreshold&&n<sThreshold&&l<vThreshold,o.matchingPixels[a]?s++:(o.pixels[4*a]=32,o.pixels[4*a+1]=32,o.pixels[4*a+2]=32,o.pixels[4*a+3]=255)}await Promise.all([changeOpacity({element:o.wilsonOverlay.canvas,opacity:1,duration:250}),changeOpacity({element:this.wilsonOverlay.canvas,opacity:1,duration:250})]),o.wilson.ctx.putImageData(new ImageData(o.pixels,this.wilson.canvasWidth,this.wilson.canvasHeight),0,0),this.guesses.push(o),this.updateMainCanvas(),await sleep(100);const c=this.progressBars[this.guesses.length-1],h=s/(this.wilson.canvasWidth*this.wilson.canvasHeight);await animate(t=>{c.style.width=t*h*100+"%",c.style.background=`hsl(${t*h*120}, 70%, 50%)`},500+500*h,"easeInOutQuad"),flagId===this.correctFlag?this.win():(this.showDiffs&&(await sleep(100),await Promise.all([changeOpacity({element:o.wilsonOverlay.canvas,opacity:0,duration:250}),changeOpacity({element:this.wilsonOverlay.canvas,opacity:0,duration:250})])),this.currentlyAnimating=!1)}}async win(){this.currentlyAnimating=!0,this.won=!0,await sleep(200),this.wilsonOverlay.canvas.style.padding="24px",this.wilsonOverlay.canvas.style.borderColor="transparent",this.wilsonOverlay.canvas.style.marginTop="-22px",this.wilsonOverlay.canvas.style.marginLeft="-22px",this.wilsonOverlay.canvas.style.borderRadius="32px",this.winOverlay.style.zIndex=1,changeOpacity({element:this.winOverlay,opacity:1,duration:300}),this.currentlyAnimating=!1}async replaceGuessCanvas(index){this.guesses[index].wilson.destroy(),this.guesses[index].wilsonOverlay.destroy();var s=document.createElement("canvas"),a=(s.classList.add("guess-canvas"),s.style.position="absolute",s.style.top="0",s.style.left="0",this.guessCanvases[index].parentNode.insertBefore(s,this.guessCanvases[index]),document.createElement("div")),e=(a.classList.add("overlay-canvas-container"),this.guessCanvases[index].parentNode.insertBefore(a,this.overlayCanvases[index].parentNode),document.createElement("canvas"));e.classList.add("overlay-canvas"),a.appendChild(e),await Promise.all([changeOpacity({element:this.guessCanvases[index],opacity:0,duration:250}),changeOpacity({element:this.overlayCanvases[index],opacity:0,duration:250})]),s.style.position="",this.guessCanvases[index].remove(),this.overlayCanvases[index].parentNode.remove(),this.guessCanvases[index]=s,this.overlayCanvases[index]=e}async replaceMainCanvas(){this.wilson.destroy(),this.wilsonOverlay.destroy();var s=document.createElement("canvas"),a=(s.id="output-canvas",s.classList.add("output-canvas"),s.style.position="absolute",s.style.top="0",s.style.left="0",this.wilson.canvas.parentNode.insertBefore(s,this.wilson.canvas),document.createElement("canvas")),e=(a.id="overlay-canvas",a.classList.add("output-canvas"),a.style.position="absolute",a.style.top="0",a.style.left="0",this.wilsonOverlay.canvas.parentNode.insertBefore(a,this.wilsonOverlay.canvas),await Promise.all([changeOpacity({element:this.wilson.canvas,opacity:0,duration:250}),changeOpacity({element:this.wilsonOverlay.canvas,opacity:0,duration:250})]),s.style.position="",s.style.top="",s.style.left="",a.style.position="",a.style.top="",a.style.left="",this.wilson.canvas.remove(),this.wilsonOverlay.canvas.remove(),()=>{this.wilson.currentlyFullscreen?this.wilson.exitFullscreen():this.wilson.enterFullscreen()}),e={canvasWidth:this.resolution,interactionOptions:{callbacks:{mousedown:e,touchstart:e}}};await new Promise(resolve=>{requestAnimationFrame(()=>resolve())}),this.wilson=new WilsonCPU(s,e),this.wilsonOverlay=new WilsonCPU(a,e)}async replay(){for(const s of this.progressBars){const a=s.getBoundingClientRect().width;animate(t=>{s.style.width=(1-t)*a+"px"},250,"easeInOutQuad")}for(let e=0;e<this.guesses.length;e++)this.replaceGuessCanvas(e);this.replaceMainCanvas(),changeOpacity({element:this.winOverlay,opacity:0,duration:250}).then(()=>{this.winOverlay.display="none",this.winOverlay.style.zIndex=-1}),this.guesses=[],this.correctFlag=void 0,this.won=!1}setShowDiffs(showDiffs){this.showDiffs=showDiffs;for(const s of this.guesses)changeOpacity({element:s.wilsonOverlay.canvas,opacity:this.showDiffs?0:1,duration:150})}}export{FlagOverlap};
import{Applet,rgbToHsv}from"/scripts/applets/applet.min.js";import{changeOpacity}from"/scripts/src/animation.min.js";import{pageUrl}from"/scripts/src/main.min.js";import{animate,sleep}from"/scripts/src/utils.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";const hThreshold=.075,sThreshold=.4,vThreshold=.4;class FlagOverlap extends Applet{loadPromise;guessCanvases;overlayCanvases;wilsonCorrectFlag;resolution=2048;correctFlag="bw";correctPixels;correctHsv;guesses=[];showDiffs=!0;constructor({canvas,guessCanvases,overlayCanvases}){super(canvas),this.guessCanvases=guessCanvases,this.overlayCanvases=overlayCanvases;var s={canvasWidth:this.resolution,fullscreenOptions:{useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}},s=(this.wilson=new WilsonCPU(canvas,s),{canvasWidth:this.resolution}),a=this.createHiddenCanvas(!0,1024/683);this.wilsonCorrectFlag=new WilsonCPU(a,s),this.loadPromise=new Promise(resolve=>{this.drawFlag(this.wilsonCorrectFlag,this.correctFlag).then(returnValue=>{this.correctPixels=returnValue.pixels,this.correctHsv=returnValue.hsvData,resolve()})})}async drawFlag(wilson,flagId){let s;var a=new Promise(r=>s=r);const e=new Image;e.onload=()=>{wilson.ctx.drawImage(e,0,0,wilson.canvasWidth,wilson.canvasHeight),s()},e.src=pageUrl+`/graphics/${flagId}.png`,await a;var t=wilson.ctx.getImageData(0,0,wilson.canvasWidth,wilson.canvasHeight).data,i=new Array(wilson.canvasWidth*wilson.canvasHeight*3);for(let l=0;l<wilson.canvasWidth*wilson.canvasHeight;l++){var n=rgbToHsv(t[4*l],t[4*l+1],t[4*l+2]);i[3*l]=n[0],i[3*l+1]=n[1],i[3*l+2]=n[2]}return{pixels:t,hsvData:i}}async animateToImageData(wilson,newPixels,duration){const e=wilson.ctx.getImageData(0,0,wilson.canvasWidth,wilson.canvasHeight).data;await animate(t=>{var s=new Uint8ClampedArray(wilson.canvasWidth*wilson.canvasHeight*4);for(let a=0;a<wilson.canvasWidth*wilson.canvasHeight;a++)s[4*a]=newPixels[4*a]*t+e[4*a]*(1-t),s[4*a+1]=newPixels[4*a+1]*t+e[4*a+1]*(1-t),s[4*a+2]=newPixels[4*a+2]*t+e[4*a+2]*(1-t),s[4*a+3]=newPixels[4*a+3]*t+e[4*a+3]*(1-t);wilson.ctx.putImageData(new ImageData(s,wilson.canvasWidth,wilson.canvasHeight),0,0)},duration,"easeOutQuad")}updateMainCanvas(){var s=new Uint8ClampedArray(this.wilson.canvasWidth*this.wilson.canvasHeight*4);for(let a=0;a<this.wilson.canvasWidth*this.wilson.canvasHeight;a++){s[4*a]=32,s[4*a+1]=32,s[4*a+2]=32,s[4*a+3]=255;for(const e of this.guesses)if(e.matchingPixels[a]){s[4*a]=this.correctPixels[4*a],s[4*a+1]=this.correctPixels[4*a+1],s[4*a+2]=this.correctPixels[4*a+2];break}}this.animateToImageData(this.wilson,s,500)}async guessFlag(flagId){const s={};s.flagId=flagId,s.matchingPixels=new Array(this.wilson.canvasWidth*this.wilson.canvasHeight);var a=()=>{s.wilsonOverlay.currentlyFullscreen?s.wilsonOverlay.exitFullscreen():s.wilson.currentlyFullscreen?s.wilson.exitFullscreen():(this.showDiffs?s.wilson:s.wilsonOverlay).enterFullscreen()},a={canvasWidth:this.resolution,interactionOptions:{callbacks:{mousedown:a,touchstart:a}}},a=(s.wilson=new WilsonCPU(this.guessCanvases[this.guesses.length],a),s.wilsonOverlay=new WilsonCPU(this.overlayCanvases[this.guesses.length],a),await this.drawFlag(s.wilsonOverlay,flagId));s.pixels=a.pixels,s.hsvData=a.hsvData;for(let n=0;n<this.wilson.canvasWidth*this.wilson.canvasHeight;n++){var e=Math.abs(s.hsvData[3*n]-this.correctHsv[3*n]),e=Math.min(e,1-e),t=Math.abs(s.hsvData[3*n+1]-this.correctHsv[3*n+1]),i=Math.abs(s.hsvData[3*n+2]-this.correctHsv[3*n+2]);s.matchingPixels[n]=e<hThreshold&&t<sThreshold&&i<vThreshold,s.matchingPixels[n]||(s.pixels[4*n]=32,s.pixels[4*n+1]=32,s.pixels[4*n+2]=32)}await changeOpacity({element:s.wilsonOverlay.canvas,opacity:1,duration:500}),s.wilson.ctx.putImageData(new ImageData(s.pixels,this.wilson.canvasWidth,this.wilson.canvasHeight),0,0),this.guesses.push(s),this.showDiffs&&(await sleep(500),await changeOpacity({element:s.wilsonOverlay.canvas,opacity:0,duration:250}))}setShowDiffs(showDiffs){this.showDiffs=showDiffs;for(const s of this.guesses)changeOpacity({element:s.wilsonOverlay.canvas,opacity:this.showDiffs?0:1,duration:150})}}export{FlagOverlap};
import{Applet,rgbToHsv}from"/scripts/applets/applet.min.js";import{changeOpacity}from"/scripts/src/animation.min.js";import{addTemporaryListener,pageUrl}from"/scripts/src/main.min.js";import{animate,sleep}from"/scripts/src/utils.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";const hThreshold=.075,sThreshold=.4,vThreshold=.4;class FlagOverlap extends Applet{loadPromise;guessCanvases;overlayCanvases;progressBars;winOverlay;wilsonOverlay;wilsonCorrectFlag;resolution=2048;correctFlag="mc";correctPixels;correctHsv;guesses=[];showDiffs=!0;constructor({canvas,overlayCanvas,guessCanvases,overlayCanvases,progressBars,winOverlay}){super(canvas),this.guessCanvases=guessCanvases,this.overlayCanvases=overlayCanvases,this.progressBars=progressBars,this.winOverlay=winOverlay;var s=()=>{this.wilson.currentlyFullscreen?this.wilson.exitFullscreen():this.wilson.enterFullscreen()},s={canvasWidth:this.resolution,interactionOptions:{callbacks:{mousedown:s,touchstart:s}}},s=(this.wilson=new WilsonCPU(canvas,s),this.wilsonOverlay=new WilsonCPU(overlayCanvas,s),{canvasWidth:this.resolution}),a=this.createHiddenCanvas(!0,1024/683);this.wilsonCorrectFlag=new WilsonCPU(a,s),this.loadPromise=new Promise(resolve=>{this.drawFlag(this.wilsonCorrectFlag,this.correctFlag).then(returnValue=>{this.correctPixels=returnValue.pixels,this.correctHsv=returnValue.hsvData,resolve()})})}async drawFlag(wilson,flagId){let s;var a=new Promise(r=>s=r);const e=new Image;e.onload=()=>{wilson.ctx.drawImage(e,0,0,wilson.canvasWidth,wilson.canvasHeight),s()},e.src=pageUrl+`/graphics/${flagId}.png`,await a;var i=wilson.ctx.getImageData(0,0,wilson.canvasWidth,wilson.canvasHeight).data,t=(console.log(wilson,i),new Array(wilson.canvasWidth*wilson.canvasHeight*3));for(let l=0;l<wilson.canvasWidth*wilson.canvasHeight;l++){var n=rgbToHsv(i[4*l],i[4*l+1],i[4*l+2]);t[3*l]=n[0],t[3*l+1]=n[1],t[3*l+2]=n[2]}return{pixels:i,hsvData:t}}updateMainCanvas(){var s=new Uint8ClampedArray(this.wilson.canvasWidth*this.wilson.canvasHeight*4);for(let a=0;a<this.wilson.canvasWidth*this.wilson.canvasHeight;a++){s[4*a]=32,s[4*a+1]=32,s[4*a+2]=32,s[4*a+3]=255;for(const e of this.guesses)if(e.matchingPixels[a]){s[4*a]=this.correctPixels[4*a],s[4*a+1]=this.correctPixels[4*a+1],s[4*a+2]=this.correctPixels[4*a+2];break}}this.wilson.ctx.putImageData(new ImageData(s,this.wilson.canvasWidth,this.wilson.canvasHeight),0,0)}async guessFlag(flagId){const s={};s.flagId=flagId,s.matchingPixels=new Array(this.wilson.canvasWidth*this.wilson.canvasHeight);var a=()=>{s.wilsonOverlay.currentlyFullscreen?s.wilsonOverlay.exitFullscreen():s.wilson.currentlyFullscreen?s.wilson.exitFullscreen():(this.showDiffs?s.wilson:s.wilsonOverlay).enterFullscreen()},a={canvasWidth:this.resolution,interactionOptions:{callbacks:{mousedown:a,touchstart:a}}},[a]=(s.wilson=new WilsonCPU(this.guessCanvases[this.guesses.length],a),s.wilsonOverlay=new WilsonCPU(this.overlayCanvases[this.guesses.length],a),await Promise.all([this.drawFlag(s.wilsonOverlay,flagId),this.drawFlag(this.wilsonOverlay,flagId)]));s.pixels=a.pixels,s.hsvData=a.hsvData;let e=0;for(let h=0;h<this.wilson.canvasWidth*this.wilson.canvasHeight;h++){var i=Math.abs(s.hsvData[3*h]-this.correctHsv[3*h]),i=Math.min(i,1-i),n=Math.abs(s.hsvData[3*h+1]-this.correctHsv[3*h+1]),l=Math.abs(s.hsvData[3*h+2]-this.correctHsv[3*h+2]);s.matchingPixels[h]=i<hThreshold&&n<sThreshold&&l<vThreshold,s.matchingPixels[h]?e++:(s.pixels[4*h]=32,s.pixels[4*h+1]=32,s.pixels[4*h+2]=32,s.pixels[4*h+3]=255)}await Promise.all([changeOpacity({element:s.wilsonOverlay.canvas,opacity:1,duration:500}),changeOpacity({element:this.wilsonOverlay.canvas,opacity:1,duration:500})]),s.wilson.ctx.putImageData(new ImageData(s.pixels,this.wilson.canvasWidth,this.wilson.canvasHeight),0,0),this.guesses.push(s),this.updateMainCanvas(),await sleep(100);const r=this.progressBars[this.guesses.length-1],o=e/(this.wilson.canvasWidth*this.wilson.canvasHeight);await animate(t=>{r.style.width=t*o*100+"%",r.style.background=`hsl(${t*o*120}, 70%, 50%)`},500+500*o,"easeInOutQuad"),flagId===this.correctFlag?this.win():this.showDiffs&&(await sleep(400),await Promise.all([changeOpacity({element:s.wilsonOverlay.canvas,opacity:0,duration:300}),changeOpacity({element:this.wilsonOverlay.canvas,opacity:0,duration:300})]))}async win(){await sleep(500),this.wilsonOverlay.canvas.style.padding="24px",this.wilsonOverlay.canvas.style.borderColor="transparent",this.wilsonOverlay.canvas.style.marginTop="-22px",this.wilsonOverlay.canvas.style.marginLeft="-22px",this.wilsonOverlay.canvas.style.borderRadius="32px",this.winOverlay.style.zIndex=1,changeOpacity({element:this.winOverlay,opacity:1,duration:300}),addTemporaryListener({object:document.documentElement,event:"keydown",callback:e=>{"Enter"===e.key&&this.replay()}})}async replay(){}setShowDiffs(showDiffs){this.showDiffs=showDiffs;for(const s of this.guesses)changeOpacity({element:s.wilsonOverlay.canvas,opacity:this.showDiffs?0:1,duration:150})}}export{FlagOverlap};
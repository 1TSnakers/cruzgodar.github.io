"use strict";onmessage=r=>{gridSize=r.data[0],sigma=r.data[1],rho=r.data[2],beta=r.data[3],maximumSpeed=r.data[4],drawLorenzAttractor()};let gridSize=null,sigma=null,rho=null,beta=null,maximumSpeed=null,pixels=[];const boxSize=50,dt=5e-4,minZ=0;let stepsPerColor=5e3,numColors=null,currentX=1,currentY=1,currentZ=25,currentRow=null,currentCol=null;async function drawLorenzAttractor(){let r=0,e=0;for(numColors=gridSize;0<stepsPerColor;){r===stepsPerColor&&(postMessage([pixels,HSVtoRGB(e/numColors/6.5,1,1)]),pixels=[],e++,r=0,stepsPerColor-=2*Math.floor(5e3/numColors),maximumSpeed||await new Promise(r=>setTimeout(r,8)));var t=currentZ-minZ-boxSize/2;currentCol=Math.floor((currentX+boxSize/2)/boxSize*gridSize),0<=(currentRow=Math.floor((1-(t+boxSize/2)/boxSize)*gridSize))&&0<=currentCol&&currentRow<gridSize&&currentCol<gridSize&&pixels.push([currentRow,currentCol]),currentX+=sigma*(currentY-currentX)*dt,currentY+=(currentX*(rho-currentZ)-currentY)*dt,currentZ+=(currentX*currentY-beta*currentZ)*dt,r++}}function HSVtoRGB(r,e,t){let o,n,u;var a=Math.floor(6*r),r=6*r-a,l=t*(1-e),c=t*(1-r*e),i=t*(1-(1-r)*e);switch(a%6){case 0:o=t,n=i,u=l;break;case 1:o=c,n=t,u=l;break;case 2:o=l,n=t,u=i;break;case 3:o=l,n=c,u=t;break;case 4:o=i,n=l,u=t;break;case 5:o=t,n=l,u=c}return[Math.round(255*o),Math.round(255*n),Math.round(255*u)]}
"use strict";let gridSize=null,sigma=null,rho=null,beta=null,maximumSpeed=null,pixels=[];const boxSize=50,dt=5e-4,minZ=0;let stepsPerColor=5e3,numColors=null,currentX=1,currentY=1,currentZ=25,currentRow=null,currentCol=null;async function drawLorenzAttractor(){let step=0,color=0;for(numColors=gridSize;0<stepsPerColor;){step===stepsPerColor&&(postMessage([pixels,HSVtoRGB(color/numColors/6.5,1,1)]),pixels=[],color++,step=0,stepsPerColor-=2*Math.floor(5e3/numColors),maximumSpeed||await new Promise(resolve=>setTimeout(resolve,8)));var shiftedZ=currentZ-minZ-boxSize/2;currentCol=Math.floor((currentX+boxSize/2)/boxSize*gridSize),0<=(currentRow=Math.floor((1-(shiftedZ+boxSize/2)/boxSize)*gridSize))&&0<=currentCol&&currentRow<gridSize&&currentCol<gridSize&&pixels.push([currentRow,currentCol]),currentX+=sigma*(currentY-currentX)*dt,currentY+=(currentX*(rho-currentZ)-currentY)*dt,currentZ+=(currentX*currentY-beta*currentZ)*dt,step++}}function HSVtoRGB(h,s,v){let r,g,b;var i=Math.floor(6*h),h=6*h-i,p=v*(1-s),q=v*(1-h*s),t=v*(1-(1-h)*s);switch(i%6){case 0:r=v,g=t,b=p;break;case 1:r=q,g=v,b=p;break;case 2:r=p,g=v,b=t;break;case 3:r=p,g=q,b=v;break;case 4:r=t,g=p,b=v;break;case 5:r=v,g=p,b=q}return[Math.round(255*r),Math.round(255*g),Math.round(255*b)]}onmessage=e=>{gridSize=e.data[0],sigma=e.data[1],rho=e.data[2],beta=e.data[3],maximumSpeed=e.data[4],drawLorenzAttractor()};
onmessage=async function(a){gridSize=a.data[0];sigma=a.data[1];rho=a.data[2];beta=a.data[3];maximumSpeed=a.data[4];await drawLorenzAttractor()};let gridSize=null,sigma=null,rho=null,beta=null,maximumSpeed=null,pixels=[];const boxSize=50,dt=5E-4,minZ=0;let stepsPerColor=5E3,numColors=null,currentX=1,currentY=1,currentZ=25,currentRow=null,currentCol=null,numPixelsAtMax=0;
function drawLorenzAttractor(){return new Promise(async function(a,b){let c=b=0;for(numColors=gridSize;0<stepsPerColor;){b===stepsPerColor&&(postMessage([pixels,HSVtoRGB(c/numColors/6.5,1,1)]),pixels=[],c++,b=0,stepsPerColor-=2*Math.floor(5E3/numColors),maximumSpeed||await sleep(8));let d=currentZ-minZ-boxSize/2;currentCol=Math.floor((currentX+boxSize/2)/boxSize*gridSize);currentRow=Math.floor((1-(d+boxSize/2)/boxSize)*gridSize);0<=currentRow&&0<=currentCol&&currentRow<gridSize&&currentCol<gridSize&&
pixels.push([currentRow,currentCol]);currentX+=sigma*(currentY-currentX)*dt;currentY+=(currentX*(rho-currentZ)-currentY)*dt;currentZ+=(currentX*currentY-beta*currentZ)*dt;b++}a()})}function sleep(a){return new Promise(function(b,c){setTimeout(b,a)})}
function HSVtoRGB(a,b,c){let d,e,f,h,k,g;h=Math.floor(6*a);k=6*a-h;a=c*(1-b);g=c*(1-k*b);b=c*(1-(1-k)*b);switch(h%6){case 0:d=c;e=b;f=a;break;case 1:d=g;e=c;f=a;break;case 2:d=a;e=c;f=b;break;case 3:d=a;e=g;f=c;break;case 4:d=b;e=a;f=c;break;case 5:d=c,e=a,f=g}return[Math.round(255*d),Math.round(255*e),Math.round(255*f)]};

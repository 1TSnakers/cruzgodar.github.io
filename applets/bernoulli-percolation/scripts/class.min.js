import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{Wilson}from"/scripts/wilson.min.js";class BernoulliPercolation extends AnimationFrameApplet{colors;connections;connectionsByValue;gridSize=50;resolution=500;threshhold=.5;lastThreshhold=.5;dotRadiusFraction=.25;dotRadiusPixels;constructor({canvas}){super(canvas);var i={renderer:"cpu",canvasWidth:this.resolution,canvasHeight:this.resolution};this.wilson=new Wilson(canvas,i),this.run({})}run({resolution=500,gridSize=50}){this.resolution=resolution,this.gridSize=gridSize,this.dotRadiusPixels=Math.floor(this.resolution/this.gridSize*this.dotRadiusFraction),this.wilson.changeCanvasSize(this.resolution,this.resolution),this.resume()}generateGrid(){this.connectionsByValue={};for(let i=.001;i<=1;i+=.001)this.connectionsByValue[i]=[];this.colors=new Array(this.gridSize),this.connections=new Array(this.gridSize);for(let s=0;s<this.gridSize;s++){this.colors[s]=new Array(this.gridSize),this.connections[s]=new Array(this.gridSize);for(let i=0;i<this.gridSize;i++)this.colors[s][i]=this.wilson.utils.hsvToRgb(Math.random(),.5+.25*Math.random(),.5+.5*Math.random()),this.connections[s][i]=[Math.ceil(1e3*Math.random())/1e3,Math.ceil(1e3*Math.random())/1e3],this.connectionsByValue[this.connections[s][i][0]].push([s,i,0]),this.connectionsByValue[this.connections[s][i][1]].push([s,i,1])}}drawDot(i,j){}prepareFrame(){this.threshhold!==this.lastThreshhold&&(this.needNewFrame=!0)}drawFrame(){this.needNewFrame=!0}}export{BernoulliPercolation};
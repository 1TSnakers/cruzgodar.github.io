import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{convertColor}from"/scripts/src/browser.min.js";import{Wilson}from"/scripts/wilson.min.js";class BernoulliPercolation extends AnimationFrameApplet{colors;connections;connectionsByValue;components;componentsByLocation;gridSize=50;resolution=2e3;threshhold=0;lastThreshhold=0;dotRadiusFraction=.25;dotRadiusPixels;edgeWidthFraction=.1;edgeWidthPixels;edgeLengthPixels;constructor({canvas}){super(canvas);var i={renderer:"cpu",canvasWidth:this.resolution,canvasHeight:this.resolution};this.wilson=new Wilson(canvas,i),this.run({})}run({resolution=2e3,gridSize=50}){this.resolution=resolution,this.gridSize=gridSize,this.dotRadiusPixels=Math.floor(this.resolution/this.gridSize*this.dotRadiusFraction),this.edgeWidthPixels=Math.floor(this.resolution/this.gridSize*this.edgeWidthFraction),this.edgeLengthPixels=Math.floor(this.resolution/this.gridSize),this.wilson.changeCanvasSize(this.resolution,this.resolution),this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.generateGrid(),this.resume()}generateGrid(){this.connectionsByValue=new Array(1e3);for(let i=0;i<1e3;i++)this.connectionsByValue[i]=[];this.colors=new Array(this.gridSize),this.connections=new Array(this.gridSize),this.components=new Array(this.gridSize*this.gridSize),this.componentsByLocation=new Array(this.gridSize);for(let t=0;t<this.gridSize;t++){this.colors[t]=new Array(this.gridSize),this.connections[t]=new Array(this.gridSize),this.componentsByLocation[t]=new Array(this.gridSize);for(let i=0;i<this.gridSize;i++)this.colors[t][i]=this.wilson.utils.hsvToRgb(Math.random(),.4+.25*Math.random(),.5+.5*Math.random()),this.drawDot(t,i),this.connections[t][i]=[Math.ceil(1e3*Math.random()),Math.ceil(1e3*Math.random())],i!==this.gridSize-1&&this.connectionsByValue[Math.floor(this.connections[t][i][0]-1)].push([t,i,0]),t!==this.gridSize-1&&this.connectionsByValue[Math.floor(this.connections[t][i][1]-1)].push([t,i,1]),this.components[this.gridSize*t+i]=[[t,i]],this.componentsByLocation[t][i]=this.gridSize*t+i}}drawDot(i,j){this.wilson.ctx.fillStyle=convertColor(...this.colors[i][j]);var t=(j+.5)/this.gridSize*this.resolution,s=(i+.5)/this.gridSize*this.resolution;this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(t,s),this.wilson.ctx.arc(t,s,this.dotRadiusPixels,0,2*Math.PI,!1),this.wilson.ctx.fill()}drawEdge(i,j,index,remove=!1){this.wilson.ctx.fillStyle=convertColor(...remove?[0,0,0]:this.colors[i][j]);var t=(j+.5)/this.gridSize*this.resolution,s=(i+.5)/this.gridSize*this.resolution;0===index?this.wilson.ctx.fillRect(t,s-this.edgeWidthPixels/2,this.edgeLengthPixels,this.edgeWidthPixels):this.wilson.ctx.fillRect(t-this.edgeWidthPixels/2,s,this.edgeWidthPixels,this.edgeLengthPixels)}addEdge(i,j,index){var t=this.componentsByLocation[i][j],s=this.components[t].length,e=i+(0===index?0:1),o=j+(0===index?1:0),h=this.componentsByLocation[e][o],n=this.components[h].length,r=n<s?i:e,l=n<s?j:o,d=n<s?t:h,a=n<s?h:t;if(a!==d){for(let i=0;i<this.components[a].length;i++){var[c,g]=this.components[a][i];this.colors[c][g]=[...this.colors[r][l]],this.componentsByLocation[c][g]=d,this.drawDot(c,g),g!==this.gridSize-1&&this.connections[c][g][0]<=this.threshhold&&this.drawEdge(c,g,0),c!==this.gridSize-1&&this.connections[c][g][1]<=this.threshhold&&this.drawEdge(c,g,1)}this.components[d]=this.components[d].concat(this.components[a]),this.components[a]=[]}this.drawEdge(i,j,index)}removeEdge(i,j,index){this.drawEdge(i,j,index,!0),this.drawDot(i,j),0===index?this.drawDot(i,j+1):this.drawDot(i+1,j)}prepareFrame(){this.threshhold!==this.lastThreshhold&&(this.needNewFrame=!0)}drawFrame(){if(this.threshhold>this.lastThreshhold)for(let t=this.lastThreshhold+1;t<=this.threshhold;t++)for(let i=0;i<this.connectionsByValue[t-1].length;i++)this.addEdge(...this.connectionsByValue[t-1][i]);else for(let s=this.lastThreshhold;s>this.threshhold;s--)for(let i=0;i<this.connectionsByValue[s-1].length;i++)this.removeEdge(...this.connectionsByValue[s-1][i]);this.lastThreshhold=this.threshhold}}export{BernoulliPercolation};
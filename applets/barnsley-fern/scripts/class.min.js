import{tempShader}from"../../../scripts/applets/applet.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{doubleEncodingGlsl,loadGlsl}from"/scripts/src/complexGlsl.min.js";import{sleep}from"/scripts/src/utils.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";class BarnsleyFern extends AnimationFrameApplet{resolution=1e3;computeResolution=1e3;A1=[[0,0],[0,.16]];A4=[[-.15,.28],[.26,.24]];b2=[0,1.6];wilsonUpdate;loadPromise;texture;imageData;maxBrightness=1;frame;numIterations;constructor({canvas}){super(canvas);var t=this.createHiddenCanvas(),e={shader:tempShader,canvasWidth:this.computeResolution,worldWidth:12,worldCenterX:0,worldCenterY:5,verbose:window.DEBUG},t=(this.wilsonUpdate=new WilsonGPU(t,e),{shader:`
			precision highp float;
			precision highp sampler2D;
			
			varying vec2 uv;
			
			uniform sampler2D uTexture;
			uniform float maxBrightness;
			
			void main(void)
			{
				float state = texture2D(uTexture, (uv + vec2(1.0)) * 0.5).x / maxBrightness * 25.0;
				
				gl_FragColor = vec4(0.0, state, 0.0, 1.0);
			}
		`,uniforms:{maxBrightness:1},canvasWidth:this.resolution,worldWidth:12,worldCenterX:0,worldCenterY:5,draggableOptions:{draggables:{tip:[2.6556,9.95851]},callbacks:{drag:this.onDragDraggable.bind(this),release:this.onReleaseDraggable.bind(this)}},fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"},verbose:window.DEBUG});this.wilson=new WilsonGPU(canvas,t),this.loadPromise=loadGlsl()}run({resolution=1e3}){this.resolution=resolution,this.computeResolution=Math.round(resolution/4),this.wilsonUpdate.resizeCanvas({width:this.computeResolution}),this.wilsonUpdate.createFramebufferTexturePair({id:"update1",textureType:"float"}),this.wilsonUpdate.createFramebufferTexturePair({id:"update2",textureType:"float"}),this.wilson.resizeCanvas({width:this.resolution}),this.wilson.createFramebufferTexturePair({id:"output",textureType:"float"}),this.wilson.useFramebuffer(null),this.wilson.useTexture("output");var t=`
			precision highp float;
			precision highp sampler2D;
			
			varying vec2 uv;
			
			uniform sampler2D uTexture;

			uniform mat2 A1;
			const mat2 A2 = mat2(.85, -.04, .04, .85);
			const mat2 A3 = mat2(.2, .23, -.26, .22);
			uniform mat2 A4;

			uniform vec2 b2;

			${doubleEncodingGlsl}

			float rand(vec2 co)
			{
				co += vec2(${Math.random()}, ${Math.random()});
				return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
			}
			
			void main(void)
			{
				vec2 state = texture2D(uTexture, (uv + vec2(1.0)) * 0.5).xy;

				float r = rand(uv + state);

				if (r < .01)
				{
					state = A1 * state;
				}

				else if (r < .86)
				{
					state = A2 * state + b2;
				}

				else if (r < .93)
				{
					state = A3 * state + b2 * 0.75;
				}

				else
				{
					state = A4 * state + b2 * 0.25;
				}

				gl_FragColor = vec4(state.x, state.y, 0.0, 0.0);
			}
		`;this.texture=new Float32Array(this.computeResolution*this.computeResolution*4),this.imageData=new Float32Array(this.resolution*this.resolution*4),this.maxBrightness=1,this.wilson.setUniforms({maxBrightness:1});for(let i=0;i<this.computeResolution;i++)for(let t=0;t<this.computeResolution;t++){var e=this.computeResolution*i+t,s=this.wilsonUpdate.interpolateCanvasToWorld([i,t]);this.texture[4*e]=s[0],this.texture[4*e+1]=s[1],this.texture[4*e+2]=0,this.texture[4*e+3]=1}this.wilsonUpdate.setTexture({id:"update2",data:this.texture}),this.wilsonUpdate.loadShader({id:"update",shader:t,uniforms:{A1:this.A1,A4:this.A4,b2:this.b2}}),this.frame=0,this.numIterations=150,this.resume()}prepareFrame(){this.frame++,this.needNewFrame=this.frame<this.numIterations}drawFrame(){var t=this.frame%2==0?"update1":"update2",e=this.frame%2==0?"update2":"update1",s=(this.wilsonUpdate.useTexture(t),this.wilsonUpdate.useFramebuffer(e),this.wilsonUpdate.drawFrame(),this.wilsonUpdate.readPixels({format:"float"}));for(let r=0;r<this.computeResolution;r++)for(let t=0;t<this.computeResolution;t++){var i=this.computeResolution*r+t,a=Math.round(((s[4*i+1]-this.wilsonUpdate.worldCenterY)/this.wilsonUpdate.worldHeight+.5)*this.resolution),i=Math.round(((s[4*i]-this.wilsonUpdate.worldCenterX)/this.wilsonUpdate.worldWidth+.5)*this.resolution);0<=a&&a<this.resolution&&0<=i&&i<this.resolution&&(a=a*this.resolution+i,this.imageData[4*a]++,this.maxBrightness=Math.max(this.maxBrightness,this.imageData[4*a]))}this.wilson.setTexture({id:"output",data:this.imageData});t=this.resolution/1e3*Math.min(this.frame/25,1);this.wilson.setUniforms({maxBrightness:this.maxBrightness/t}),this.wilson.drawFrame()}onDragDraggable({x,y}){this.animationPaused=!0,this.needNewFrame=!1,this.b2[0]=.15*x-.04*y,this.b2[1]=.04*x+.15*y;var t=Math.atan2(-this.b2[0],this.b2[1]),e=Math.cos(t),s=Math.sin(t),t=(this.A1=[[0,-.16*s],[0,.16*e]],Math.cos(2*t));this.A4=[[.045-.195*t-.54*e*s,.01+.27*t-.39*e*s],[.27*t-.01-.39*e*s,.045+.195*t+.54*e*s]],this.wilsonUpdate.setUniforms({A1:this.A1,A4:this.A4,b2:this.b2},"updateX"),this.wilsonUpdate.setUniforms({A1:this.A1,A4:this.A4,b2:this.b2},"updateY")}onReleaseDraggable(){this.run({resolution:this.resolution})}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.pause(),await sleep(33)}}export{BarnsleyFern};
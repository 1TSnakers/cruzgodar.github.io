import{tempShader}from"../../../scripts/applets/applet.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{doubleEncodingGlsl,loadGlsl}from"/scripts/src/complexGlsl.min.js";import{Wilson}from"/scripts/wilson.min.js";class BarnsleyFern extends AnimationFrameApplet{resolution=1e3;computeResolution=1e3;A1=[0,0,0,.16];b2=[0,1.6];wilsonUpdate;loadPromise;texture;imageData;maxBrightness=1;frame;numIterations;constructor({canvas}){super(canvas);var t=this.createHiddenCanvas(),e={renderer:"gpu",shader:tempShader,canvasWidth:this.computeResolution,canvasHeight:this.computeResolution,worldWidth:12,worldHeight:12,worldCenterX:0,worldCenterY:5},t=(this.wilsonUpdate=new Wilson(t,e),{renderer:"gpu",shader:`
			precision highp float;
			precision highp sampler2D;
			
			varying vec2 uv;
			
			uniform sampler2D uTexture;
			uniform float maxBrightness;
			
			void main(void)
			{
				float state = texture2D(uTexture, (uv + vec2(1.0)) * 0.5).x / maxBrightness * 25.0;
				
				gl_FragColor = vec4(0.0, state, 0.0, 1.0);
			}
		`,canvasWidth:this.resolution,canvasHeight:this.resolution,worldWidth:12,worldHeight:12,worldCenterX:0,worldCenterY:5,useDraggables:!0,draggablesMousemoveCallback:this.onDragDraggable.bind(this),draggablesTouchmoveCallback:this.onDragDraggable.bind(this),useFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"});this.wilson=new Wilson(canvas,t),this.wilson.render.initUniforms(["maxBrightness"]),this.wilson.gl.uniform1f(this.wilson.uniforms.maxBrightness,1),this.wilson.draggables.add(...this.b2),this.loadPromise=loadGlsl()}run({resolution=1e3}){this.resolution=resolution,this.computeResolution=Math.round(resolution/3),this.wilsonUpdate.changeCanvasSize(this.computeResolution,this.computeResolution),this.wilsonUpdate.render.framebuffers=[],this.wilsonUpdate.render.createFramebufferTexturePair(),this.wilsonUpdate.gl.bindFramebuffer(this.wilsonUpdate.gl.FRAMEBUFFER,null),this.wilsonUpdate.gl.bindTexture(this.wilsonUpdate.gl.TEXTURE_2D,this.wilsonUpdate.render.framebuffers[0].texture),this.wilson.changeCanvasSize(this.resolution,this.resolution),this.wilson.render.framebuffers=[],this.wilson.render.createFramebufferTexturePair(),this.wilson.gl.bindFramebuffer(this.wilson.gl.FRAMEBUFFER,null),this.wilson.gl.bindTexture(this.wilson.gl.TEXTURE_2D,this.wilson.render.framebuffers[0].texture);var t=`
			precision highp float;
			precision highp sampler2D;
			
			varying vec2 uv;
			
			uniform sampler2D uTexture;

			uniform mat2 A1;
			const mat2 A2 = mat2(.85, -.04, .04, .85);
			const mat2 A3 = mat2(.2, .23, -.26, .22);
			const mat2 A4 = mat2(-.15, .26, .28, .24);

			const vec2 b1 = vec2(0.0, 0.0);
			uniform vec2 b2;
			const vec2 b3 = vec2(0.0, 1.6);
			const vec2 b4 = vec2(0.0, .44);

			${doubleEncodingGlsl}

			float rand(vec2 co)
			{
				return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
			}
			
			void main(void)
			{
				vec2 state = texture2D(uTexture, (uv + vec2(1.0)) * 0.5).xy;

				float r = rand(uv + state);

				if (r < .01)
				{
					state = A1 * state + b1;
				}

				else if (r < .86)
				{
					state = A2 * state + b2;
				}

				else if (r < .93)
				{
					state = A3 * state + b2 * 0.75;
				}

				else
				{
					state = A4 * state + b2 * 0.25;
				}
		`,e=`
				${t}

				gl_FragColor = encodeFloat(state.x);
			}
		`,t=`
				${t}

				gl_FragColor = encodeFloat(state.y);
			}
		`;this.texture=new Float32Array(this.computeResolution*this.computeResolution*4),this.imageData=new Float32Array(this.resolution*this.resolution*4),this.maxBrightness=1,this.wilson.gl.uniform1f(this.wilson.uniforms.maxBrightness,1);for(let r=0;r<this.computeResolution;r++)for(let t=0;t<this.computeResolution;t++){var s=this.computeResolution*r+t,i=this.wilsonUpdate.utils.interpolate.canvasToWorld(r,t);this.texture[4*s]=i[0],this.texture[4*s+1]=i[1],this.texture[4*s+2]=0,this.texture[4*s+3]=1}this.wilsonUpdate.render.shaderPrograms=[],this.wilsonUpdate.render.loadNewShader(e),this.wilsonUpdate.render.initUniforms(["A1","b2"],0),this.wilsonUpdate.gl.uniformMatrix2fv(this.wilsonUpdate.uniforms.A1[0],!1,this.A1),this.wilsonUpdate.gl.uniform2fv(this.wilsonUpdate.uniforms.b2[0],this.b2),this.wilsonUpdate.render.loadNewShader(t),this.wilsonUpdate.render.initUniforms(["A1","b2"],1),this.wilsonUpdate.gl.uniformMatrix2fv(this.wilsonUpdate.uniforms.A1[1],!1,this.A1),this.wilsonUpdate.gl.uniform2fv(this.wilsonUpdate.uniforms.b2[1],this.b2),this.frame=0,this.numIterations=150,this.resume()}prepareFrame(){this.frame++,this.needNewFrame=this.frame<this.numIterations}drawFrame(){this.wilsonUpdate.gl.texImage2D(this.wilsonUpdate.gl.TEXTURE_2D,0,this.wilsonUpdate.gl.RGBA,this.computeResolution,this.computeResolution,0,this.wilsonUpdate.gl.RGBA,this.wilsonUpdate.gl.FLOAT,this.texture),this.wilsonUpdate.gl.useProgram(this.wilsonUpdate.render.shaderPrograms[0]),this.wilsonUpdate.render.drawFrame();var e=new Float32Array(this.wilsonUpdate.render.getPixelData().buffer),s=(this.wilsonUpdate.gl.useProgram(this.wilsonUpdate.render.shaderPrograms[1]),this.wilsonUpdate.render.drawFrame(),new Float32Array(this.wilsonUpdate.render.getPixelData().buffer));for(let o=0;o<this.computeResolution;o++)for(let t=0;t<this.computeResolution;t++){var i=this.resolution*o+t,r=(this.texture[4*i]=e[i],this.texture[4*i+1]=s[i],Math.round(((s[i]-this.wilsonUpdate.worldCenterY)/this.wilsonUpdate.worldHeight+.5)*this.resolution)),i=Math.round(((e[i]-this.wilsonUpdate.worldCenterX)/this.wilsonUpdate.worldWidth+.5)*this.resolution);0<=r&&r<this.resolution&&0<=i&&i<this.resolution&&(r=r*this.resolution+i,this.imageData[4*r]++,this.maxBrightness=Math.max(this.maxBrightness,this.imageData[4*r]))}this.wilson.gl.texImage2D(this.wilson.gl.TEXTURE_2D,0,this.wilson.gl.RGBA,this.resolution,this.resolution,0,this.wilson.gl.RGBA,this.wilson.gl.FLOAT,this.imageData),this.wilson.gl.uniform1f(this.wilson.uniforms.maxBrightness,this.maxBrightness/(this.resolution/1250)),this.wilson.render.drawFrame()}onDragDraggable(activeDraggable,x,y){var t;0===activeDraggable&&(this.b2[0]=x,this.b2[1]=y,t=Math.atan2(-x,y),this.A1=[0,0,-.16*Math.sin(t),.16*Math.cos(t)],this.wilsonUpdate.gl.useProgram(this.wilsonUpdate.render.shaderPrograms[0]),this.wilsonUpdate.gl.uniformMatrix2fv(this.wilsonUpdate.uniforms.A1[0],!1,this.A1),this.wilsonUpdate.gl.uniform2fv(this.wilsonUpdate.uniforms.b2[0],this.b2),this.wilsonUpdate.gl.useProgram(this.wilsonUpdate.render.shaderPrograms[1]),this.wilsonUpdate.gl.uniformMatrix2fv(this.wilsonUpdate.uniforms.A1[1],!1,this.A1),this.wilsonUpdate.gl.uniform2fv(this.wilsonUpdate.uniforms.b2[1],this.b2),this.run({resolution:this.resolution}))}}export{BarnsleyFern};
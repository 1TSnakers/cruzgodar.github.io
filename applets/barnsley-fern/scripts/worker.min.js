"use strict";onmessage=async function(r){gridSize=r.data[0],numIterations=r.data[1],await drawFern()};let gridSize=null,numIterations=null,fernGraph=null,randomizationCoefficients=[.1,.1,.1,.1,.5,.5],transformationCoefficients=[[0,0,0,.16,0,0],[.85,.04,-.04,.85,0,1.6],[.2,-.26,.23,.22,0,1.6],[-.15,.28,.26,.24,0,.44]],currentX=0,currentY=0;const minX=-6,maxX=6,minY=-1,maxY=11;function drawFern(){return new Promise(function(r,n){fernGraph=new Uint8ClampedArray(gridSize*gridSize*4);for(let e=0;e<gridSize;e++)for(let t=0;t<gridSize;t++)fernGraph[4*(gridSize*e+t)+3]=255;for(let i=0;i<numIterations;i++){i%Math.floor(numIterations/10)==0&&postMessage([fernGraph]);let o=Math.random(),f=3;if(o<.01?f=0:o<.86?f=1:o<.93&&(f=2),affineTransformation(f),currentX>=6||currentX<=-6||currentY>=11||currentY<=-1)continue;let a=(currentX- -6)/12;a=Math.floor(gridSize*a);let c=(currentY- -1)/12;c=Math.floor(gridSize*(1-c)),fernGraph[4*(gridSize*c+a)+1]++}postMessage([fernGraph]),r()})}function affineTransformation(r){let n=transformationCoefficients[r][0]*currentX+transformationCoefficients[r][1]*currentY+transformationCoefficients[r][4];currentY=transformationCoefficients[r][2]*currentX+transformationCoefficients[r][3]*currentY+transformationCoefficients[r][5],currentX=n}
"use strict";let gridSize=null,numIterations=null,fernGraph=null;const transformationCoefficients=[[0,0,0,.16,0,0],[.85,.04,-.04,.85,0,1.6],[.2,-.26,.23,.22,0,1.6],[-.15,.28,.26,.24,0,.44]];let currentX=0,currentY=0;const minX=-6,maxX=6,minY=-1,maxY=11;function drawFern(){fernGraph=new Uint8ClampedArray(gridSize*gridSize*4);for(let i=0;i<gridSize;i++)for(let j=0;j<gridSize;j++)fernGraph[4*(gridSize*i+j)+3]=255;for(let iteration=0;iteration<numIterations;iteration++){iteration%Math.floor(numIterations/10)==0&&postMessage([fernGraph]);var row,rand=Math.random();let index=3;rand<.01?index=0:rand<.86?index=1:rand<.93&&(index=2),affineTransformation(index),currentX>=maxX||currentX<=minX||currentY>=maxY||currentY<=minY||(rand=(currentX-minX)/(maxX-minX),rand=Math.floor(gridSize*rand),row=(currentY-minY)/(maxY-minY),row=Math.floor(gridSize*(1-row)),fernGraph[4*(gridSize*row+rand)+1]++)}postMessage([fernGraph])}function affineTransformation(index){var temp=transformationCoefficients[index][0]*currentX+transformationCoefficients[index][1]*currentY+transformationCoefficients[index][4];currentY=transformationCoefficients[index][2]*currentX+transformationCoefficients[index][3]*currentY+transformationCoefficients[index][5],currentX=temp}onmessage=e=>{gridSize=e.data[0],numIterations=e.data[1],drawFern()};
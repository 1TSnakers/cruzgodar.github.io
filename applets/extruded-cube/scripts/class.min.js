import{RaymarchApplet}from"/scripts/applets/raymarchApplet.min.js";import{aspectRatio}from"/scripts/src/layout.min.js";import{addTemporaryListener}from"/scripts/src/main.min.js";import{Wilson}from"/scripts/wilson.min.js";class ExtrudedCube extends RaymarchApplet{iterations=16;scale=3;separation=1;cameraPos=[1.749,1.75,1.751];theta=1.25*Math.PI;phi=2.1539;constructor({canvas}){super(canvas);var t={renderer:"gpu",shader:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform float aspectRatioX;
			uniform float aspectRatioY;
			
			uniform vec3 cameraPos;
			uniform vec3 imagePlaneCenterPos;
			uniform vec3 forwardVec;
			uniform vec3 rightVec;
			uniform vec3 upVec;
			
			uniform float focalLength;
			
			const vec3 lightPos = vec3(50.0, 70.0, 100.0);
			const float lightBrightness = 2.0;
			
			uniform int imageSize;
			
			
			
			const float clipDistance = 1000.0;
			const int maxMarches = 256;
			const vec3 fogColor = vec3(0.0, 0.0, 0.0);
			const float fogScaling = .05;
			const int maxIterations = 32;
			
			uniform int iterations;
			uniform float scale;
			uniform float separation;
			
			
			
			float distanceEstimator(vec3 pos)
			{
				float scaleCenter = (scale + 1.0) / (scale - 1.0) * separation;

				vec3 mutablePos = abs(pos);

				float totalDistance = (max(max(mutablePos.x, mutablePos.y), mutablePos.z) - 1.0);

				for (int iteration = 0; iteration < maxIterations; iteration++)
				{
					if (iteration == iterations)
					{
						break;
					}

					if (mutablePos.x > max(mutablePos.y, mutablePos.z))
					{
						mutablePos = scale * mutablePos - (scale - 1.0) * vec3(scaleCenter, 0.0, 0.0);
					}

					else if (mutablePos.y > max(mutablePos.x, mutablePos.z))
					{
						mutablePos = scale * mutablePos - (scale - 1.0) * vec3(0.0, scaleCenter, 0.0);
					}

					else
					{
						mutablePos = scale * mutablePos - (scale - 1.0) * vec3(0.0, 0.0, scaleCenter);
					}

					mutablePos = abs(mutablePos);

					totalDistance = min(
						totalDistance,
						(max(max(mutablePos.x, mutablePos.y), mutablePos.z) - 1.0)
							/ pow(scale, float(iteration + 1))
					);
				}
				
				return totalDistance;
			}
			
			
			
			vec3 getColor(vec3 pos)
			{
				vec3 color = vec3(0.25);

				float scaleCenter = (scale + 1.0) / (scale - 1.0) * separation;

				vec3 mutablePos = abs(pos);

				for (int iteration = 0; iteration < maxIterations; iteration++)
				{
					if (iteration == iterations)
					{
						break;
					}

					if (mutablePos.x > max(mutablePos.y, mutablePos.z))
					{
						mutablePos = scale * mutablePos - (scale - 1.0) * vec3(scaleCenter, 0.0, 0.0);

						color += vec3(0.0, 0.75, 1.0) * pow(2.0, -float(iteration + 1));
					}

					else if (mutablePos.y > max(mutablePos.x, mutablePos.z))
					{
						mutablePos = scale * mutablePos - (scale - 1.0) * vec3(0.0, scaleCenter, 0.0);

						color += vec3(0.75, 0.0, 1.0) * pow(2.0, -float(iteration + 1));
					}

					else
					{
						mutablePos = scale * mutablePos - (scale - 1.0) * vec3(0.0, 0.0, scaleCenter);

						color += vec3(0.0, 0.0, 1.0) * pow(2.0, -float(iteration + 1));
					}

					mutablePos = abs(mutablePos);
				}
				
				return color;
			}
			
			
			
			vec3 getSurfaceNormal(vec3 pos)
			{
				float xStep1 = distanceEstimator(pos + vec3(.000001, 0.0, 0.0));
				float yStep1 = distanceEstimator(pos + vec3(0.0, .000001, 0.0));
				float zStep1 = distanceEstimator(pos + vec3(0.0, 0.0, .000001));
				
				float xStep2 = distanceEstimator(pos - vec3(.000001, 0.0, 0.0));
				float yStep2 = distanceEstimator(pos - vec3(0.0, .000001, 0.0));
				float zStep2 = distanceEstimator(pos - vec3(0.0, 0.0, .000001));
				
				return normalize(vec3(xStep1 - xStep2, yStep1 - yStep2, zStep1 - zStep2));
			}
			
			
			
			vec3 computeShading(vec3 pos, int iteration)
			{
				vec3 surfaceNormal = getSurfaceNormal(pos);
				
				vec3 lightDirection = normalize(lightPos - pos);
				
				float dotProduct = dot(surfaceNormal, lightDirection);
				
				float lightIntensity = lightBrightness * max(dotProduct, -.4 * dotProduct);
				
				//The last factor adds ambient occlusion.
				vec3 color = getColor(pos) * lightIntensity * max((1.0 - float(iteration) / float(64)), 0.0);
				
				
				
				//Apply fog.
				return mix(color, fogColor, 1.0 - exp(-distance(pos, cameraPos) * fogScaling));
			}
			
			
			
			vec3 raymarch(vec3 startPos)
			{
				//That factor of .9 is important -- without it, we're always stepping as far as possible, which results in artefacts and weirdness.
				vec3 rayDirectionVec = normalize(startPos - cameraPos) * .9;
				
				float epsilon = .0000001;
				
				float t = 0.0;
				
				
				
				for (int iteration = 0; iteration < maxMarches; iteration++)
				{
					vec3 pos = startPos + t * rayDirectionVec;
					
					float distance = distanceEstimator(pos);
					
					//This lowers the detail far away, which makes everything run nice and fast.
					epsilon = max(.0000006, 1.0 * t / float(imageSize));
					
					
					
					if (distance < epsilon)
					{
						return computeShading(pos, iteration);
					}
					
					else if (t > clipDistance)
					{
						return fogColor;
					}
					
					
					
					t += distance;
				}
				
				return fogColor;
			}
			
			
			
			void main(void)
			{
				vec3 finalColor = raymarch(imagePlaneCenterPos + rightVec * uv.x * aspectRatioX + upVec * uv.y / aspectRatioY);
				
				gl_FragColor = vec4(finalColor.xyz, 1.0);
			}
		`,canvasWidth:500,canvasHeight:500,worldCenterX:-this.theta,worldCenterY:-this.phi,useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:this.changeResolution.bind(this),mousedownCallback:this.onGrabCanvas.bind(this),touchstartCallback:this.onGrabCanvas.bind(this),mousedragCallback:this.onDragCanvas.bind(this),touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),touchendCallback:this.onReleaseCanvas.bind(this)};this.wilson=new Wilson(canvas,t),this.wilson.render.initUniforms(["aspectRatioX","aspectRatioY","imageSize","cameraPos","imagePlaneCenterPos","forwardVec","rightVec","upVec","focalLength","iterations","scale","separation"]),this.calculateVectors(),this.imageWidth>=this.imageHeight?(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,this.imageWidth/this.imageHeight),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,1)):(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,1),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,this.imageWidth/this.imageHeight)),this.wilson.gl.uniform1i(this.wilson.uniforms.imageSize,this.imageSize),this.wilson.gl.uniform3fv(this.wilson.uniforms.cameraPos,this.cameraPos),this.wilson.gl.uniform3fv(this.wilson.uniforms.imagePlaneCenterPos,this.imagePlaneCenterPos),this.wilson.gl.uniform3fv(this.wilson.uniforms.forwardVec,this.forwardVec),this.wilson.gl.uniform3fv(this.wilson.uniforms.rightVec,this.rightVec),this.wilson.gl.uniform3fv(this.wilson.uniforms.upVec,this.upVec),this.wilson.gl.uniform1f(this.wilson.uniforms.focalLength,this.focalLength),this.wilson.gl.uniform1i(this.wilson.uniforms.iterations,this.iterations),this.wilson.gl.uniform1f(this.wilson.uniforms.scale,this.scale),this.wilson.gl.uniform1f(this.wilson.uniforms.separation,this.separation);addTemporaryListener({object:window,event:"resize",callback:()=>this.changeResolution()}),this.resume()}prepareFrame(timeElapsed){this.pan.update(timeElapsed),this.zoom.update(timeElapsed),this.moveUpdate(timeElapsed)}drawFrame(){this.wilson.worldCenterY=Math.min(Math.max(this.wilson.worldCenterY,.01-Math.PI),-.01),this.theta=-this.wilson.worldCenterX,this.phi=-this.wilson.worldCenterY,this.wilson.render.drawFrame()}distanceEstimator(x,y,z){var t=(this.scale+1)/(this.scale-1)*this.separation;let i=[Math.abs(x),Math.abs(y),Math.abs(z)],e=Math.max(Math.max(i[0],i[1]),i[2])-1;for(let s=0;s<this.iterations;s++)i=i[0]>Math.max(i[1],i[2])?[this.scale*i[0]-(this.scale-1)*t,this.scale*i[1],this.scale*i[2]]:i[1]>Math.max(i[0],i[2])?[this.scale*i[0],this.scale*i[1]-(this.scale-1)*t,this.scale*i[2]]:[this.scale*i[0],this.scale*i[1],this.scale*i[2]-(this.scale-1)*t],i=[Math.abs(i[0]),Math.abs(i[1]),Math.abs(i[2])],e=Math.min(e,(Math.max(Math.max(i[0],i[1]),i[2])-1)/Math.pow(this.scale,s+1));return Math.abs(e)}changeResolution(resolution=this.imageSize){this.imageSize=Math.max(100,resolution),this.wilson.fullscreen.currentlyFullscreen?1<=aspectRatio?(this.imageWidth=this.imageSize,this.imageHeight=Math.floor(this.imageSize/aspectRatio)):(this.imageWidth=Math.floor(this.imageSize*aspectRatio),this.imageHeight=this.imageSize):(this.imageWidth=this.imageSize,this.imageHeight=this.imageSize),this.wilson.changeCanvasSize(this.imageWidth,this.imageHeight),this.imageWidth>=this.imageHeight?(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,this.imageWidth/this.imageHeight),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,1)):(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,1),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,this.imageWidth/this.imageHeight)),this.wilson.gl.uniform1i(this.wilson.uniforms.imageSize,this.imageSize),this.needNewFrame=!0}}export{ExtrudedCube};
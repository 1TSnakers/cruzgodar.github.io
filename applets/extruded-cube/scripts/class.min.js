import{RaymarchApplet}from"/scripts/applets/raymarchApplet.min.js";class ExtrudedCube extends RaymarchApplet{constructor({canvas}){super({canvas:canvas,distanceEstimatorGlsl:`
			float scaleCenter = (scale + 1.0) / (scale - 1.0) * separation;

			vec3 mutablePos = abs(pos);

			float totalDistance = (max(max(mutablePos.x, mutablePos.y), mutablePos.z) - 1.0);

			for (int iteration = 0; iteration < maxIterations; iteration++)
			{
				if (iteration == iterations)
				{
					break;
				}

				if (mutablePos.x > max(mutablePos.y, mutablePos.z))
				{
					mutablePos = scale * mutablePos - (scale - 1.0) * vec3(scaleCenter, 0.0, 0.0);
				}

				else if (mutablePos.y > max(mutablePos.x, mutablePos.z))
				{
					mutablePos = scale * mutablePos - (scale - 1.0) * vec3(0.0, scaleCenter, 0.0);
				}

				else
				{
					mutablePos = scale * mutablePos - (scale - 1.0) * vec3(0.0, 0.0, scaleCenter);
				}

				mutablePos = abs(mutablePos);

				totalDistance = min(
					totalDistance,
					(max(max(mutablePos.x, mutablePos.y), mutablePos.z) - 1.0)
						/ pow(scale, float(iteration + 1))
				);
			}
			
			return totalDistance;
		`,getColorGlsl:`	
			vec3 color = vec3(0.25);

			float scaleCenter = (scale + 1.0) / (scale - 1.0) * separation;

			vec3 mutablePos = abs(pos);

			for (int iteration = 0; iteration < maxIterations; iteration++)
			{
				if (iteration == iterations)
				{
					break;
				}

				if (mutablePos.x > max(mutablePos.y, mutablePos.z))
				{
					mutablePos = scale * mutablePos - (scale - 1.0) * vec3(scaleCenter, 0.0, 0.0);

					color += vec3(0.0, 0.75, 1.0) * pow(2.0, -float(iteration + 1));
				}

				else if (mutablePos.y > max(mutablePos.x, mutablePos.z))
				{
					mutablePos = scale * mutablePos - (scale - 1.0) * vec3(0.0, scaleCenter, 0.0);

					color += vec3(0.75, 0.0, 1.0) * pow(2.0, -float(iteration + 1));
				}

				else
				{
					mutablePos = scale * mutablePos - (scale - 1.0) * vec3(0.0, 0.0, scaleCenter);

					color += vec3(0.0, 0.0, 1.0) * pow(2.0, -float(iteration + 1));
				}

				mutablePos = abs(mutablePos);
			}
			
			return color;
		`,addGlsl:`
			const int maxIterations = 32;
		`,uniforms:{iterations:["int",16],scale:["float",3],separation:["float",1]},cameraPos:[2.0538,2.0548,2.0354],theta:1.25*Math.PI,phi:2.1539})}distanceEstimator(x,y,z){var a=this.uniforms.scale[1],t=this.uniforms.separation[1],e=this.uniforms.iterations[1],s=(a+1)/(a-1)*t;let o=[Math.abs(x),Math.abs(y),Math.abs(z)],l=Math.max(Math.max(o[0],o[1]),o[2])-1;for(let i=0;i<e;i++)o=o[0]>Math.max(o[1],o[2])?[a*o[0]-(a-1)*s,a*o[1],a*o[2]]:o[1]>Math.max(o[0],o[2])?[a*o[0],a*o[1]-(a-1)*s,a*o[2]]:[a*o[0],a*o[1],a*o[2]-(a-1)*s],o=[Math.abs(o[0]),Math.abs(o[1]),Math.abs(o[2])],l=Math.min(l,(Math.max(Math.max(o[0],o[1]),o[2])-1)/Math.pow(a,i+1));return Math.abs(l)}}export{ExtrudedCube};
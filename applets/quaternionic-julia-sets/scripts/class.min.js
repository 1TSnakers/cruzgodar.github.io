"use strict";class QuaternionicJuliaSet extends Applet{currentlyDragging=!1;movingForwardKeyboard=!1;movingBackwardKeyboard=!1;movingRightKeyboard=!1;movingLeftKeyboard=!1;movingSliceUpKeyboard=!1;movingSliceDownKeyboard=!1;movingForwardTouch=!1;movingBackwardTouch=!1;wasMovingTouch=!1;movingSpeed=0;switchBulbButtonElement=null;switchMovementButtonElement=null;randomizeCButtonElement=null;cXInputElement=null;cYInputElement=null;cZInputElement=null;cWInputElement=null;nextMoveVelocity=[0,0,0,0];moveVelocity=[0,0,0,0];moveFriction=.94;moveVelocityStopThreshhold=5e-4;distanceToScene=1;lastTimestamp=-1;theta=1.21557;phi=2.10801;nextThetaVelocity=0;nextPhiVelocity=0;thetaVelocity=0;phiVelocity=0;panFriction=.94;panVelocityStartThreshhold=.005;panVelocityStopThreshhold=5e-4;imageSize=500;imageWidth=500;imageHeight=500;maxIterations=16;maxMarches=100;imagePlaneCenterPos=[];forwardVec=[];rightVec=[];upVec=[];cameraPos=[-1.11619,-2.63802,1.67049];focalLength=2;lightPos=[-5,-5,5];c=[-.54,-.25,-.668];kSlice=0;juliaProportion=1;movingPos=0;constructor(t,i,e,o,s,h,n,a){super(t),this.switchBulbButtonElement=i,this.switchMovementButtonElement=e,this.randomizeCButtonElement=o,this.cXInputElement=s,this.cYInputElement=h,this.cZInputElement=n,this.cWInputElement=a;let c=`
   precision highp float;
   
   varying vec2 uv;
   
   uniform float aspectRatioX;
   uniform float aspectRatioY;
   
   uniform vec3 cameraPos;
   uniform vec3 imagePlaneCenterPos;
   uniform vec3 forwardVec;
   uniform vec3 rightVec;
   uniform vec3 upVec;
   
   uniform float focalLength;
   
   uniform vec3 lightPos;
   const float lightBrightness = 1.5;
   
   uniform int imageSize;
   
   uniform int drawSphere;
   
   uniform int maxIterations;
   
   
   
   const float clipDistance = 1000.0;
   uniform int maxMarches;
   uniform float stepFactor;
   const vec3 fogColor = vec3(0.0, 0.0, 0.0);
   const float fogScaling = .1;
   
   uniform float kSlice;
   
   
   uniform vec3 c;
   uniform float juliaProportion;
   
   
   
   vec4 qmul(vec4 z, vec4 w)
   {
    return vec4(z.x*w.x - z.y*w.y - z.z*w.z - z.w*w.w, z.x*w.y + z.y*w.x + z.z*w.w - z.w*w.z, z.x*w.z - z.y*w.w + z.z*w.x + z.w*w.y, z.x*w.w + z.y*w.z - z.z*w.y + z.w*w.x);
   }
   
   
   float distanceEstimator(vec3 pos)
   {
    vec4 z = vec4(pos, kSlice);
    vec4 zPrime = vec4(1.0, 0.0, 0.0, 0.0);
    float r;
    
    for (int iteration = 0; iteration < 100; iteration++)
    {
     r = length(z);
     
     if (r > 16.0 || iteration >= maxIterations)
     {
      break;
     }
     
     zPrime = 2.0 * qmul(z, zPrime);
     
     z = qmul(z, z);
     
     z += mix(vec4(pos, kSlice), vec4(c, kSlice), juliaProportion);
    }
    
    
    r = length(z);
    float distance1 = .5 * r * log(r) / length(zPrime);
    float distance2 = length(pos - c) - .05;
    
    
    
    if (distance2 < distance1 && drawSphere == 1)
    {
     return distance2;
    }
    
    return distance1;
   }
   
   
   
   vec3 getColor(vec3 pos)
   {
    vec4 z = vec4(pos, kSlice);
    vec4 zPrime = vec4(1.0, 0.0, 0.0, 0.0);
    float r;
    
    vec3 color = vec3(1.0, 1.0, 1.0);
    float colorScale = .5;
    
    for (int iteration = 0; iteration < 100; iteration++)
    {
     r = length(z);
     
     if (r > 16.0 || iteration >= maxIterations)
     {
      break;
     }
     
     zPrime = 2.0 * qmul(z, zPrime);
     
     z = qmul(z, z);
     
     z += mix(vec4(pos, kSlice), vec4(c, kSlice), juliaProportion);
     
     color = mix(color, abs(normalize(z.xyz)), colorScale);
     
     colorScale *= .5;
    }
    
    color /= max(max(color.x, color.y), color.z);
    
    
    r = length(z);
    float distance1 = .5 * r * log(r) / length(zPrime);
    float distance2 = length(pos - c) - .05;
    
    
    
    if (distance2 < distance1 && drawSphere == 1)
    {
     color = vec3(1.0, 1.0, 1.0);
    }
    
    return color;
   }
   
   
   
   vec3 getSurfaceNormal(vec3 pos)
   {
    float xStep1 = distanceEstimator(pos + vec3(.000001, 0.0, 0.0));
    float yStep1 = distanceEstimator(pos + vec3(0.0, .000001, 0.0));
    float zStep1 = distanceEstimator(pos + vec3(0.0, 0.0, .000001));
    
    float xStep2 = distanceEstimator(pos - vec3(.000001, 0.0, 0.0));
    float yStep2 = distanceEstimator(pos - vec3(0.0, .000001, 0.0));
    float zStep2 = distanceEstimator(pos - vec3(0.0, 0.0, .000001));
    
    return normalize(vec3(xStep1 - xStep2, yStep1 - yStep2, zStep1 - zStep2));
   }
   
   
   
   vec3 computeShading(vec3 pos, int iteration)
   {
    vec3 surfaceNormal = getSurfaceNormal(pos);
    
    vec3 lightDirection = normalize(lightPos - pos);
    
    float dotProduct = dot(surfaceNormal, lightDirection);
    
    float lightIntensity = lightBrightness * max(dotProduct, -.25 * dotProduct);
    
    //The last factor adds ambient occlusion.
    vec3 color = getColor(pos) * lightIntensity * max((1.0 - float(iteration) / float(maxMarches)), 0.0);
    
    
    
    //Apply fog.
    return mix(color, fogColor, 1.0 - exp(-distance(pos, cameraPos) * fogScaling));
   }
   
   
   
   vec3 raymarch(vec3 startPos)
   {
    //That factor of .9 is important -- without it, we're always stepping as far as possible, which results in artefacts and weirdness.
    vec3 rayDirectionVec = normalize(startPos - cameraPos) * .9 / stepFactor;
    
    vec3 finalColor = fogColor;
    
    float epsilon = 0.0;
    
    float t = 0.0;
    
    float lastDistance = 1000.0;
    
    //int slowedDown = 0;
    
    
    
    for (int iteration = 0; iteration < 1024; iteration++)
    {
     if (iteration == maxMarches)
     {
      break;
     }
     
     
     
     vec3 pos = startPos + t * rayDirectionVec;
     
     //This prevents overstepping, and is honestly a pretty clever fix.
     float distance = min(distanceEstimator(pos), lastDistance);
     lastDistance = distance;
     
     //This lowers the detail far away, which makes everything run nice and fast.
     epsilon = max(.0000006, .5 * t / float(imageSize));
     
     
     
     if (distance < epsilon)
     {
      finalColor = computeShading(pos, iteration);
      break;
     }
     
     //Uncomment to add aggressive understepping when close to the fractal boundary, which helps to prevent flickering but is a significant performance hit.
     /*
     else if (lastDistance / distance > .9999 && slowedDown == 0)
     {
      rayDirectionVec = normalize(startPos - cameraPos) * .125;
      
      slowedDown = 1;
     }
     
     else if (lastDistance / distance <= .9999 && slowedDown == 1)
     {
      rayDirectionVec = normalize(startPos - cameraPos) * .9;
      
      slowedDown = 0;
     }
     */
     
     else if (t > clipDistance)
     {
      break;
     }
     
     
     
     t += distance;
    }
    
    
    
    return finalColor;
   }
   
   
   
   void main(void)
   {
    //Uncomment to use 2x antialiasing.
    //vec3 finalColor = (raymarch(imagePlaneCenterPos + rightVec * (uv.x * aspectRatio + .5 / float(imageSize)) + upVec * (uv.y + .5 / float(imageSize))) + raymarch(imagePlaneCenterPos + rightVec * (uv.x * aspectRatio + .5 / float(imageSize)) + upVec * (uv.y - .5 / float(imageSize))) + raymarch(imagePlaneCenterPos + rightVec * (uv.x * aspectRatio - .5 / float(imageSize)) + upVec * (uv.y + .5 / float(imageSize))) + raymarch(imagePlaneCenterPos + rightVec * (uv.x * aspectRatio - .5 / float(imageSize)) + upVec * (uv.y - .5 / float(imageSize)))) / 4.0;
    
    gl_FragColor = vec4(raymarch(imagePlaneCenterPos + rightVec * (uv.x) * aspectRatioX + upVec * (uv.y) / aspectRatioY), 1.0);
   }
  `,r={renderer:"gpu",shader:c,canvasWidth:500,canvasHeight:500,useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:()=>this.changeResolution(this.imageSize),mousedownCallback:this.onGrabCanvas.bind(this),touchstartCallback:this.onGrabCanvas.bind(this),mousedragCallback:this.onDragCanvas.bind(this),touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),touchendCallback:this.onReleaseCanvas.bind(this)};this.wilson=new Wilson(t,r),this.wilson.render.initUniforms(["aspectRatioX","aspectRatioY","imageSize","cameraPos","imagePlaneCenterPos","forwardVec","rightVec","upVec","focalLength","lightPos","drawSphere","c","juliaProportion","maxMarches","stepFactor","maxIterations","kSlice"]),this.calculateVectors(),this.imageWidth>=this.imageHeight?(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,this.imageWidth/this.imageHeight),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,1)):(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,1),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,this.imageWidth/this.imageHeight)),this.wilson.gl.uniform1i(this.wilson.uniforms.imageSize,this.imageSize),this.wilson.gl.uniform3fv(this.wilson.uniforms.cameraPos,this.cameraPos),this.wilson.gl.uniform3fv(this.wilson.uniforms.imagePlaneCenterPos,this.imagePlaneCenterPos),this.wilson.gl.uniform3fv(this.wilson.uniforms.lightPos,this.lightPos),this.wilson.gl.uniform3fv(this.wilson.uniforms.forwardVec,this.forwardVec),this.wilson.gl.uniform3fv(this.wilson.uniforms.rightVec,this.rightVec),this.wilson.gl.uniform3fv(this.wilson.uniforms.upVec,this.upVec),this.wilson.gl.uniform1f(this.wilson.uniforms.focalLength,this.focalLength),this.wilson.gl.uniform1i(this.wilson.uniforms.drawSphere,0),this.wilson.gl.uniform3fv(this.wilson.uniforms.c,this.c),this.wilson.gl.uniform1f(this.wilson.uniforms.juliaProportion,1),this.wilson.gl.uniform1f(this.wilson.uniforms.kSlice,0),this.wilson.gl.uniform1i(this.wilson.uniforms.maxMarches,this.maxMarches),this.wilson.gl.uniform1f(this.wilson.uniforms.stepFactor,1),this.wilson.gl.uniform1i(this.wilson.uniforms.maxIterations,this.maxIterations);let l=this.handleKeydownEvent.bind(this);document.documentElement.addEventListener("keydown",l),this.handlers.push([document.documentElement,"keydown",l]);let m=this.handleKeyupEvent.bind(this);document.documentElement.addEventListener("keyup",m),this.handlers.push([document.documentElement,"keyup",m]),window.requestAnimationFrame(this.drawFrame.bind(this))}drawFrame(t){let i=t-this.lastTimestamp;if(this.lastTimestamp=t,0!==i){if(this.wilson.render.drawFrame(),(this.movingForwardKeyboard||this.movingBackwardKeyboard||this.movingRightKeyboard||this.movingLeftKeyboard||this.movingForwardTouch||this.movingBackwardTouch||this.movingSliceUpKeyboard||this.movingSliceDownKeyboard)&&this.updateCameraParameters(),(0!==this.thetaVelocity||0!==this.phiVelocity)&&(this.theta+=this.thetaVelocity,this.phi+=this.phiVelocity,this.theta>=2*Math.PI?this.theta-=2*Math.PI:this.theta<0&&(this.theta+=2*Math.PI),this.phi>Math.PI-.01?this.phi=Math.PI-.01:this.phi<.01&&(this.phi=.01),this.thetaVelocity*=this.panFriction,this.phiVelocity*=this.panFriction,this.thetaVelocity*this.thetaVelocity+this.phiVelocity*this.phiVelocity<this.panVelocityStopThreshhold*this.panVelocityStopThreshhold&&(this.thetaVelocity=0,this.phiVelocity=0),this.calculateVectors()),0!==this.moveVelocity[0]||0!==this.moveVelocity[1]||0!==this.moveVelocity[2]||0!==this.moveVelocity[3]){if(this.movingPos)this.cameraPos[0]+=this.moveVelocity[0],this.cameraPos[1]+=this.moveVelocity[1],this.cameraPos[2]+=this.moveVelocity[2];else{this.c[0]+=this.moveVelocity[0],this.c[1]+=this.moveVelocity[1],this.c[2]+=this.moveVelocity[2],this.kSlice+=this.moveVelocity[3];try{this.cXInputElement.value=Math.round(1e6*this.c[0])/1e6,this.cYInputElement.value=Math.round(1e6*this.c[1])/1e6,this.cZInputElement.value=Math.round(1e6*this.c[2])/1e6,this.cWInputElement.value=Math.round(1e6*this.kSlice)/1e6}catch(e){}this.wilson.gl.uniform3fv(this.wilson.uniforms.c,this.c),this.wilson.gl.uniform1f(this.wilson.uniforms.kSlice,this.kSlice)}this.moveVelocity[0]*=this.moveFriction,this.moveVelocity[1]*=this.moveFriction,this.moveVelocity[2]*=this.moveFriction,this.moveVelocity[3]*=this.moveFriction,this.moveVelocity[0]*this.moveVelocity[0]+this.moveVelocity[1]*this.moveVelocity[1]+this.moveVelocity[2]*this.moveVelocity[2]+this.moveVelocity[3]*this.moveVelocity[3]<this.moveVelocityStopThreshhold*this.movingSpeed*this.moveVelocityStopThreshhold*this.movingSpeed&&(this.moveVelocity[0]=0,this.moveVelocity[1]=0,this.moveVelocity[2]=0,this.moveVelocity[3]=0),this.calculateVectors()}this.animationPaused||window.requestAnimationFrame(this.drawFrame.bind(this))}}calculateVectors(){this.forwardVec=[Math.cos(this.theta)*Math.sin(this.phi),Math.sin(this.theta)*Math.sin(this.phi),Math.cos(this.phi)],this.rightVec=this.normalize([this.forwardVec[1],-this.forwardVec[0],0]),this.upVec=this.crossProduct(this.rightVec,this.forwardVec),this.distanceToScene=this.distanceEstimator(this.cameraPos[0],this.cameraPos[1],this.cameraPos[2]),this.focalLength=this.distanceToScene/2,this.rightVec[0]*=this.focalLength/2,this.rightVec[1]*=this.focalLength/2,this.upVec[0]*=this.focalLength/2,this.upVec[1]*=this.focalLength/2,this.upVec[2]*=this.focalLength/2,this.imagePlaneCenterPos=[this.cameraPos[0]+this.focalLength*this.forwardVec[0],this.cameraPos[1]+this.focalLength*this.forwardVec[1],this.cameraPos[2]+this.focalLength*this.forwardVec[2]],this.wilson.gl.uniform3fv(this.wilson.uniforms.cameraPos,this.cameraPos),this.wilson.gl.uniform3fv(this.wilson.uniforms.imagePlaneCenterPos,this.imagePlaneCenterPos),this.wilson.gl.uniform3fv(this.wilson.uniforms.forwardVec,this.forwardVec),this.wilson.gl.uniform3fv(this.wilson.uniforms.rightVec,this.rightVec),this.wilson.gl.uniform3fv(this.wilson.uniforms.upVec,this.upVec),this.wilson.gl.uniform1f(this.wilson.uniforms.focalLength,this.focalLength)}dotProduct(t,i){return t[0]*i[0]+t[1]*i[1]+t[2]*i[2]}dotProduct4(t,i){return t[0]*i[0]+t[1]*i[1]+t[2]*i[2]+t[3]*i[3]}crossProduct(t,i){return[t[1]*i[2]-t[2]*i[1],t[2]*i[0]-t[0]*i[2],t[0]*i[1]-t[1]*i[0]]}normalize(t){let i=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);return[t[0]/i,t[1]/i,t[2]/i]}qmul(t,i,e,o,s,h,n,a){return[t*s-i*h-e*e-o*a,t*h+i*s+e*a-o*n,t*n-i*a+e*s+o*h,t*a+i*n-e*h+o*s]}distanceEstimator(t,i,e){let o=[t,i,e,this.kSlice],s=[1,0,0,0],h=0;for(let n=0;n<4*this.maxIterations&&!((h=Math.sqrt(this.dotProduct4(o,o)))>16);n++)s=this.qmul(...o,...s),s[0]*=2,s[1]*=2,s[2]*=2,s[3]*=2,o=this.qmul(...o,...o),o[0]+=(1-this.juliaProportion)*t+this.juliaProportion*this.c[0],o[1]+=(1-this.juliaProportion)*i+this.juliaProportion*this.c[1],o[2]+=(1-this.juliaProportion)*e+this.juliaProportion*this.c[2],o[3]+=this.kSlice;return .5*Math.log(h)*h/Math.sqrt(this.dotProduct4(s,s))}onGrabCanvas(t,i,e){this.nextThetaVelocity=0,this.nextPhiVelocity=0,this.thetaVelocity=0,this.phiVelocity=0,"touchstart"===e.type&&(2===e.touches.length?(this.movingForwardTouch=!0,this.movingBackwardTouch=!1,this.moveVelocity[0]=0,this.moveVelocity[1]=0,this.moveVelocity[2]=0,this.moveVelocity[3]=0,this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0,this.nextMoveVelocity[3]=0):3===e.touches.length?(this.movingForwardTouch=!1,this.movingBackwardTouch=!0,this.moveVelocity[0]=0,this.moveVelocity[1]=0,this.moveVelocity[2]=0,this.moveVelocity[3]=0,this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0,this.nextMoveVelocity[3]=0):(this.movingForwardTouch=!1,this.movingBackwardTouch=!1),this.wasMovingTouch=!1)}onDragCanvas(t,i,e,o,s){if("touchmove"===s.type&&this.wasMovingTouch){this.wasMovingTouch=!1;return}this.theta+=e*Math.PI/2,this.nextThetaVelocity=e*Math.PI/2,this.theta>=2*Math.PI?this.theta-=2*Math.PI:this.theta<0&&(this.theta+=2*Math.PI),this.phi+=o*Math.PI/2,this.nextPhiVelocity=o*Math.PI/2,this.phi>Math.PI-.01?this.phi=Math.PI-.01:this.phi<.01&&(this.phi=.01),this.calculateVectors()}onReleaseCanvas(t,i,e){"touchend"===e.type&&(this.movingForwardTouch=!1,this.movingBackwardTouch=!1,this.wasMovingTouch=!0,0===this.moveVelocity[0]&&0===this.moveVelocity[1]&&0===this.moveVelocity[2]&&(this.moveVelocity[0]=this.nextMoveVelocity[0],this.moveVelocity[1]=this.nextMoveVelocity[1],this.moveVelocity[2]=this.nextMoveVelocity[2],this.moveVelocity[3]=this.nextMoveVelocity[3],this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0,this.nextMoveVelocity[3]=0)),("touchend"===e.type&&0===e.touches.length||"mouseup"===e.type)&&this.nextThetaVelocity*this.nextThetaVelocity+this.nextPhiVelocity*this.nextPhiVelocity>=this.panVelocityStartThreshhold*this.panVelocityStartThreshhold&&(this.thetaVelocity=this.nextThetaVelocity,this.phiVelocity=this.nextPhiVelocity)}handleKeydownEvent(t){"INPUT"!==document.activeElement.tagName&&(87===t.keyCode||83===t.keyCode||68===t.keyCode||65===t.keyCode||69===t.keyCode||81===t.keyCode)&&(this.nextMoveVelocity=[0,0,0,0],this.moveVelocity=[0,0,0,0],87===t.keyCode?this.movingForwardKeyboard=!0:83===t.keyCode&&(this.movingBackwardKeyboard=!0),68===t.keyCode?this.movingRightKeyboard=!0:65===t.keyCode&&(this.movingLeftKeyboard=!0),69===t.keyCode?this.movingSliceUpKeyboard=!0:81===t.keyCode&&(this.movingSliceDownKeyboard=!0))}handleKeyupEvent(t){"INPUT"!==document.activeElement.tagName&&(87===t.keyCode||83===t.keyCode||68===t.keyCode||65===t.keyCode||69===t.keyCode||81===t.keyCode)&&(0===this.moveVelocity[0]&&0===this.moveVelocity[1]&&0===this.moveVelocity[2]&&0===this.moveVelocity[3]&&(this.moveVelocity[0]=this.nextMoveVelocity[0],this.moveVelocity[1]=this.nextMoveVelocity[1],this.moveVelocity[2]=this.nextMoveVelocity[2],this.moveVelocity[3]=this.nextMoveVelocity[3],this.nextMoveVelocity[0]=0,this.nextMoveVelocity[1]=0,this.nextMoveVelocity[2]=0,this.nextMoveVelocity[3]=0),87===t.keyCode?this.movingForwardKeyboard=!1:83===t.keyCode&&(this.movingBackwardKeyboard=!1),68===t.keyCode?this.movingRightKeyboard=!1:65===t.keyCode&&(this.movingLeftKeyboard=!1),69===t.keyCode?this.movingSliceUpKeyboard=!1:81===t.keyCode&&(this.movingSliceDownKeyboard=!1))}updateCameraParameters(){if(this.movingSpeed=Math.min(Math.max(1e-6,this.distanceToScene/20),.02),this.movingPos){let t=[...this.cameraPos];this.movingForwardKeyboard||this.movingForwardTouch?(this.cameraPos[0]+=this.movingSpeed*this.forwardVec[0],this.cameraPos[1]+=this.movingSpeed*this.forwardVec[1],this.cameraPos[2]+=this.movingSpeed*this.forwardVec[2]):(this.movingBackwardKeyboard||this.movingBackwardTouch)&&(this.cameraPos[0]-=this.movingSpeed*this.forwardVec[0],this.cameraPos[1]-=this.movingSpeed*this.forwardVec[1],this.cameraPos[2]-=this.movingSpeed*this.forwardVec[2]),this.movingRightKeyboard?(this.cameraPos[0]+=this.movingSpeed*this.rightVec[0]/this.focalLength,this.cameraPos[1]+=this.movingSpeed*this.rightVec[1]/this.focalLength,this.cameraPos[2]+=this.movingSpeed*this.rightVec[2]/this.focalLength):this.movingLeftKeyboard&&(this.cameraPos[0]-=this.movingSpeed*this.rightVec[0]/this.focalLength,this.cameraPos[1]-=this.movingSpeed*this.rightVec[1]/this.focalLength,this.cameraPos[2]-=this.movingSpeed*this.rightVec[2]/this.focalLength),this.nextMoveVelocity[0]=this.cameraPos[0]-t[0],this.nextMoveVelocity[1]=this.cameraPos[1]-t[1],this.nextMoveVelocity[2]=this.cameraPos[2]-t[2]}else{let i=[...this.c],e=this.kSlice;this.movingForwardKeyboard||this.movingForwardTouch?(this.c[0]+=.5*this.movingSpeed*this.forwardVec[0],this.c[1]+=.5*this.movingSpeed*this.forwardVec[1],this.c[2]+=.5*this.movingSpeed*this.forwardVec[2]):(this.movingBackwardKeyboard||this.movingBackwardTouch)&&(this.c[0]-=.5*this.movingSpeed*this.forwardVec[0],this.c[1]-=.5*this.movingSpeed*this.forwardVec[1],this.c[2]-=.5*this.movingSpeed*this.forwardVec[2]),this.movingRightKeyboard?(this.c[0]+=.5*this.movingSpeed*this.rightVec[0]/this.focalLength,this.c[1]+=.5*this.movingSpeed*this.rightVec[1]/this.focalLength,this.c[2]+=.5*this.movingSpeed*this.rightVec[2]/this.focalLength):this.movingLeftKeyboard&&(this.c[0]-=.5*this.movingSpeed*this.rightVec[0]/this.focalLength,this.c[1]-=.5*this.movingSpeed*this.rightVec[1]/this.focalLength,this.c[2]-=.5*this.movingSpeed*this.rightVec[2]/this.focalLength),this.movingSliceUpKeyboard?this.kSlice+=.5*this.movingSpeed:this.movingSliceDownKeyboard&&(this.kSlice-=.5*this.movingSpeed);try{this.cXInputElement.value=Math.round(1e6*this.c[0])/1e6,this.cYInputElement.value=Math.round(1e6*this.c[1])/1e6,this.cZInputElement.value=Math.round(1e6*this.c[2])/1e6,this.cWInputElement.value=Math.round(1e6*this.kSlice)/1e6}catch(o){}this.wilson.gl.uniform3fv(this.wilson.uniforms.c,this.c),this.wilson.gl.uniform1f(this.wilson.uniforms.kSlice,this.kSlice),this.nextMoveVelocity[0]=this.c[0]-i[0],this.nextMoveVelocity[1]=this.c[1]-i[1],this.nextMoveVelocity[2]=this.c[2]-i[2],this.nextMoveVelocity[3]=this.kSlice-e}this.calculateVectors()}changeResolution(t){this.imageSize=t,this.wilson.fullscreen.currentlyFullscreen?Page.Layout.aspectRatio>=1?(this.imageWidth=this.imageSize,this.imageHeight=Math.floor(this.imageSize/Page.Layout.aspectRatio)):(this.imageWidth=Math.floor(this.imageSize*Page.Layout.aspectRatio),this.imageHeight=this.imageSize):(this.imageWidth=this.imageSize,this.imageHeight=this.imageSize),this.wilson.changeCanvasSize(this.imageWidth,this.imageHeight),this.imageWidth>=this.imageHeight?(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,this.imageWidth/this.imageHeight),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,1)):(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,1),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,this.imageWidth/this.imageHeight)),this.wilson.gl.uniform1i(this.wilson.uniforms.imageSize,this.imageSize)}randomizeC(t=!0){this.updateC([2*Math.random()-1,2*Math.random()-1,2*Math.random()-1,this.c[3]],t)}updateC(t,i=!0){try{this.cXInputElement.value=Math.round(1e6*t[0])/1e6,this.cYInputElement.value=Math.round(1e6*t[1])/1e6,this.cZInputElement.value=Math.round(1e6*t[2])/1e6}catch(e){}let o={t:0},s=[...this.c];anime({targets:o,t:1,duration:1500*i+10,easing:"easeOutQuad",update:()=>{this.c[0]=(1-o.t)*s[0]+o.t*t[0],this.c[1]=(1-o.t)*s[1]+o.t*t[1],this.c[2]=(1-o.t)*s[2]+o.t*t[2],this.wilson.gl.uniform3fv(this.wilson.uniforms.c,this.c)}})}switchBulb(){if(0!==this.juliaProportion&&1!==this.juliaProportion)return;let t=this.juliaProportion,i=1-this.juliaProportion;try{Page.Animate.changeOpacity(this.switchBulbButtonElement,0,Site.opacityAnimationTime),setTimeout(()=>{0===t?this.switchBulbButtonElement.textContent="Switch to Mandelbrot Set":this.switchBulbButtonElement.textContent="Switch to Julia Set",Page.Animate.changeOpacity(this.switchBulbButtonElement,1,Site.opacityAnimationTime)},Site.opacityAnimationTime)}catch(e){}if(0===this.juliaProportion)this.wilson.gl.uniform3fv(this.wilson.uniforms.c,this.c),this.movingPos||this.wilson.gl.uniform1i(this.wilson.uniforms.drawSphere,1),setTimeout(()=>{try{Page.Animate.changeOpacity(this.switchMovementButtonElement,1,Site.opacityAnimationTime),Page.Animate.changeOpacity(this.randomizeCButtonElement,1,Site.opacityAnimationTime)}catch(t){}},Site.opacityAnimationTime);else{this.movingPos=!0,this.wilson.gl.uniform1i(this.wilson.uniforms.drawSphere,0);try{Page.Animate.changeOpacity(this.switchMovementButtonElement,0,Site.opacityAnimationTime),Page.Animate.changeOpacity(this.randomizeCButtonElement,0,Site.opacityAnimationTime)}catch(o){}}let s={t:0};anime({targets:s,t:1,duration:1500,easing:"easeOutQuad",update:()=>{this.juliaProportion=(1-s.t)*t+s.t*i,this.wilson.gl.uniform1f(this.wilson.uniforms.juliaProportion,this.juliaProportion)}})}switchMovement(){this.movingPos=!this.movingPos;try{Page.Animate.changeOpacity(this.switchMovementButtonElement,0,Site.opacityAnimationTime),setTimeout(()=>{this.movingPos?this.switchMovementButtonElement.textContent="Change Julia Set":this.switchMovementButtonElement.textContent="Move Camera",Page.Animate.changeOpacity(this.switchMovementButtonElement,1,Site.opacityAnimationTime)},Site.opacityAnimationTime)}catch(t){}this.movingPos?this.wilson.gl.uniform1i(this.wilson.uniforms.drawSphere,0):this.wilson.gl.uniform1i(this.wilson.uniforms.drawSphere,1)}}
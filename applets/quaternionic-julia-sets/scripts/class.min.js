import anime from"/scripts/anime.min.js";import{dotProduct4,qmul,RaymarchApplet}from"/scripts/applets/raymarchApplet.min.js";class QuaternionicJuliaSet extends RaymarchApplet{constructor({canvas}){super({canvas:canvas,distanceEstimatorGlsl:`
			vec4 z = vec4(pos, 0.0);
			vec4 zPrime = vec4(1.0, 0.0, 0.0, 0.0);
			float r;
			
			for (int iteration = 0; iteration < 16; iteration++)
			{
				r = length(z);
				
				if (r > 16.0)
				{
					break;
				}
				
				zPrime = 2.0 * qmul(z, zPrime);
				
				z = qmul(z, z);
				
				z += mix(vec4(pos, 0.0), vec4(c, 0.0), juliaProportion);
			}
			
			
			r = length(z);
			return .5 * r * log(r) / length(zPrime);
		`,getColorGlsl:`
			vec4 z = vec4(pos, 0.0);
			vec4 zPrime = vec4(1.0, 0.0, 0.0, 0.0);
			float r;
			
			vec3 color = vec3(1.0, 1.0, 1.0);
			float colorScale = .5;
			
			for (int iteration = 0; iteration < 16; iteration++)
			{
				r = length(z);
				
				if (r > 16.0)
				{
					break;
				}
				
				zPrime = 2.0 * qmul(z, zPrime);
				
				z = qmul(z, z);
				
				z += mix(vec4(pos, 0.0), vec4(c, 0.0), juliaProportion);
				
				color = mix(color, abs(normalize(z.xyz)), colorScale);
				
				colorScale *= .5;
			}
			
			color /= max(max(color.x, color.y), color.z);
			
			return color;
		`,addGlsl:`
			vec4 qmul(vec4 z, vec4 w)
			{
				return vec4(z.x*w.x - z.y*w.y - z.z*w.z - z.w*w.w, z.x*w.y + z.y*w.x + z.z*w.w - z.w*w.z, z.x*w.z - z.y*w.w + z.z*w.x + z.w*w.y, z.x*w.w + z.y*w.z - z.z*w.y + z.w*w.x);
			}
		`,uniforms:{c:["vec3",[-.54,-.25,-.668]],juliaProportion:["float",1]},stepFactor:.75,theta:1.3094,phi:1.9975,cameraPos:[-.6265,-2.3421,1.1022],lightPos:[-5,-5,5],lightBrightness:1.25})}distanceEstimator(x,y,z){var r=this.uniforms.c[1],t=this.uniforms.juliaProportion[1];let o=[x,y,z,0],e=[1,0,0,0],i=0;for(let a=0;a<16&&!(16<(i=Math.sqrt(dotProduct4(o,o))));a++)(e=qmul(...o,...e))[0]*=2,e[1]*=2,e[2]*=2,e[3]*=2,(o=qmul(...o,...o))[0]+=(1-t)*x+t*r[0],o[1]+=(1-t)*y+t*r[1],o[2]+=(1-t)*z+t*r[2];return.5*Math.log(i)*i/Math.sqrt(dotProduct4(e,e))}switchBulb(instant){var r=this.uniforms.juliaProportion[1];if(Math.floor(r)===r){const t=r,o=1-r,e={t:0};anime({targets:e,t:1,duration:instant?10:1e3,easing:"easeOutQuad",update:()=>{this.setUniform("juliaProportion",(1-e.t)*t+e.t*o),this.needNewFrame=!0}})}}}export{QuaternionicJuliaSet};
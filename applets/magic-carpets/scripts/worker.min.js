"use strict";onmessage=function(e){gridSize=e.data[0],maxCageSize=e.data[1],uniqueSolution=e.data[2],generateMagicCarpet()};let gridSize=null,maxCageSize=null,uniqueSolution=null,cages=[],cagesByLocation=[],numSolutionsFound=0;function generateMagicCarpet(){cages=[],cagesByLocation=[],initializeGrid();let r=JSON.parse(JSON.stringify(cages)),i=JSON.parse(JSON.stringify(cagesByLocation));for(;;){let a=!1;var g=shuffleArray([...Array(cages.length).keys()]);g.sort((e,a)=>cages[e][2]*cages[e][3]-cages[a][2]*cages[a][3]);for(let e=0;e<g.length;e++)if(expandCage(g[e])){for(let e=0;e<g.length;e++)g[e]>=cages.length&&g[e]--;uniqueSolution?1!==(numSolutionsFound=solvePuzzle())?(cages=JSON.parse(JSON.stringify(r)),cagesByLocation=JSON.parse(JSON.stringify(i)),numSolutionsFound=1):(a=!0,r=JSON.parse(JSON.stringify(cages)),i=JSON.parse(JSON.stringify(cagesByLocation))):a=!0}if(!a||cages.length<=gridSize)return void postMessage([cages.sort((e,a)=>a[3]*gridSize+a[2]-(e[3]*gridSize+e[2]))])}}function printGrid(){let r="";var i=new Array(gridSize);for(let a=0;a<gridSize;a++){i[a]=new Array(gridSize);for(let e=0;e<gridSize;e++)i[a][e]=0}for(let e=0;e<cages.length;e++){var a=cages[e][0]+cages[e][4],g=cages[e][1]+cages[e][5];i[a][g]=cages[e][2]*cages[e][3]}for(let a=0;a<gridSize;a++){for(let e=0;e<gridSize;e++)r+=`${0!==i[a][e]?i[a][e]:" "} `;r+="\n"}postMessage(r)}function initializeGrid(){cages=new Array(gridSize*gridSize),cagesByLocation=new Array(gridSize);let r=0;for(let a=0;a<gridSize;a++){cagesByLocation[a]=new Array(gridSize);for(let e=0;e<gridSize;e++)cages[r]=[a,e,1,1,0,0],cagesByLocation[a][e]=r,r++}}function shuffleArray(e){let a=e.length;for(;0!==a;){var r=Math.floor(Math.random()*a),i=e[--a];e[a]=e[r],e[r]=i}return e}function expandCage(r){var e=cages[r],a=e[0],i=e[1],g=e[2],t=e[3],s=e[4],e=e[5],o=[];if(0!==a&&(n=cages[cagesByLocation[a-1][i]])[1]===i&&n[3]===t&&n[2]*n[3]+t*g<=maxCageSize&&o.push([1,0]),0!==i&&(n=cages[cagesByLocation[a][i-1]])[0]===a&&n[2]===g&&n[2]*n[3]+t*g<=maxCageSize&&o.push([0,1]),0===o.length)return!1;var n=o[Math.floor(Math.random()*o.length)],c=cagesByLocation[a-n[0]][i-n[1]];Math.random()<.5&&(cages[c][4]=cages[c][2]*n[0]+s,cages[c][5]=cages[c][3]*n[1]+e),cages[c][2]+=g*n[0],cages[c][3]+=t*n[1],cages.splice(r,1);for(let a=0;a<gridSize;a++)for(let e=0;e<gridSize;e++)cagesByLocation[a][e]===r&&(cagesByLocation[a][e]=c),cagesByLocation[a][e]>r&&cagesByLocation[a][e]--;return!0}function solvePuzzle(){var r=new Array(gridSize);for(let a=0;a<gridSize;a++){r[a]=new Array(gridSize);for(let e=0;e<gridSize;e++)r[a][e]=!1}for(let e=0;e<cages.length;e++){var a=cages[e][0]+cages[e][4],i=cages[e][1]+cages[e][5];r[a][i]=!0}return solvePuzzleStep(0,r)}function solvePuzzleStep(c,l){if(c===cages.length)return 1;const S=cages[c][0]+cages[c][4],f=cages[c][1]+cages[c][5],i=cages[c][2]*cages[c][3];if(1==i)return solvePuzzleStep(c+1,l);let u=0;var a=[];for(let e=1;e<=Math.sqrt(i);e++)i%e!=0||e>gridSize||i/e>gridSize||(a.push(e),i/e!==e&&a.push(i/e));return a.forEach(e=>{var t=i/e,a=Math.max(S-e+1,0),r=Math.min(S,gridSize-e),s=Math.max(f-t+1,0),o=Math.min(f,gridSize-t);for(let g=a;g<=r;g++)for(let i=s;i<=o;i++){let r=!1;for(let a=0;a<e;a++){for(let e=0;e<t;e++)if(l[g+a][i+e]&&(g+a!==S||i+e!==f)){r=!0;break}if(r)break}if(!r){var n=new Array(gridSize);for(let a=0;a<gridSize;a++){n[a]=new Array(gridSize);for(let e=0;e<gridSize;e++)n[a][e]=l[a][e]}for(let a=0;a<e;a++)for(let e=0;e<t;e++)n[g+a][i+e]=!0;u+=solvePuzzleStep(c+1,n)}}}),u}
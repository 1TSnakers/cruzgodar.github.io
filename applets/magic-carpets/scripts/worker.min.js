"use strict";onmessage=function(e){gridSize=e.data[0],maxCageSize=e.data[1],uniqueSolution=e.data[2],generateMagicCarpet()};let gridSize=null,maxCageSize=null,uniqueSolution=null,cages=[],cagesByLocation=[],numSolutionsFound=0;function generateMagicCarpet(){cages=[],cagesByLocation=[],initializeGrid();let e=JSON.parse(JSON.stringify(cages)),i=JSON.parse(JSON.stringify(cagesByLocation));for(;;){let g=!1,t=shuffleArray([...Array(cages.length).keys()]);t.sort((e,i)=>cages[e][2]*cages[e][3]-cages[i][2]*cages[i][3]);for(let a=0;a<t.length;a++){let r=t[a];if(expandCage(r)){for(let o=0;o<t.length;o++)t[o]>=cages.length&&t[o]--;uniqueSolution?1!==(numSolutionsFound=solvePuzzle())?(cages=JSON.parse(JSON.stringify(e)),cagesByLocation=JSON.parse(JSON.stringify(i)),numSolutionsFound=1):(g=!0,e=JSON.parse(JSON.stringify(cages)),i=JSON.parse(JSON.stringify(cagesByLocation))):g=!0}}if(!g||cages.length<=gridSize){postMessage([cages.sort((e,i)=>i[3]*gridSize+i[2]-(e[3]*gridSize+e[2]))]);return}}}function printGrid(){let e="",i=Array(gridSize);for(let g=0;g<gridSize;g++){i[g]=Array(gridSize);for(let t=0;t<gridSize;t++)i[g][t]=0}for(let a=0;a<cages.length;a++){let r=cages[a][0]+cages[a][4],o=cages[a][1]+cages[a][5];i[r][o]=cages[a][2]*cages[a][3]}for(let s=0;s<gridSize;s++){for(let c=0;c<gridSize;c++)e+=`${0!==i[s][c]?i[s][c]:" "} `;e+="\n"}postMessage(e)}function initializeGrid(){cages=Array(gridSize*gridSize),cagesByLocation=Array(gridSize);let e=0;for(let i=0;i<gridSize;i++){cagesByLocation[i]=Array(gridSize);for(let g=0;g<gridSize;g++)cages[e]=[i,g,1,1,0,0],cagesByLocation[i][g]=e,e++}}function shuffleArray(e){let i=e.length;for(;0!==i;){let g=Math.floor(Math.random()*i);i--;let t=e[i];e[i]=e[g],e[g]=t}return e}function expandCage(e){let i=cages[e],g=i[0],t=i[1],a=i[2],r=i[3],o=i[4],s=i[5],c=[];if(0!==g){let n=cages[cagesByLocation[g-1][t]];n[1]===t&&n[3]===r&&n[2]*n[3]+r*a<=maxCageSize&&c.push([1,0])}if(0!==t){let l=cages[cagesByLocation[g][t-1]];l[0]===g&&l[2]===a&&l[2]*l[3]+r*a<=maxCageSize&&c.push([0,1])}if(0===c.length)return!1;let f=c[Math.floor(Math.random()*c.length)],$=cagesByLocation[g-f[0]][t-f[1]];.5>Math.random()&&(cages[$][4]=cages[$][2]*f[0]+o,cages[$][5]=cages[$][3]*f[1]+s),cages[$][2]+=a*f[0],cages[$][3]+=r*f[1],cages.splice(e,1);for(let u=0;u<gridSize;u++)for(let z=0;z<gridSize;z++)cagesByLocation[u][z]===e&&(cagesByLocation[u][z]=$),cagesByLocation[u][z]>e&&cagesByLocation[u][z]--;return!0}function solvePuzzle(){let e=Array(gridSize);for(let i=0;i<gridSize;i++){e[i]=Array(gridSize);for(let g=0;g<gridSize;g++)e[i][g]=!1}for(let t=0;t<cages.length;t++){let a=cages[t][0]+cages[t][4],r=cages[t][1]+cages[t][5];e[a][r]=!0}return solvePuzzleStep(0,e)}function solvePuzzleStep(e,i){if(e===cages.length)return 1;let g=cages[e][0]+cages[e][4],t=cages[e][1]+cages[e][5],a=cages[e][2]*cages[e][3];if(1===a)return solvePuzzleStep(e+1,i);let r=0,o=[];for(let s=1;s<=Math.sqrt(a);s++)a%s==0&&!(s>gridSize)&&!(a/s>gridSize)&&(o.push(s),a/s!==s&&o.push(a/s));return o.forEach(o=>{let s=a/o,c=Math.max(g-o+1,0),n=Math.min(g,gridSize-o),l=Math.max(t-s+1,0),f=Math.min(t,gridSize-s);for(let $=c;$<=n;$++)for(let u=l;u<=f;u++){let z=!1;for(let d=0;d<o;d++){for(let S=0;S<s;S++)if(i[$+d][u+S]&&!($+d===g&&u+S===t)){z=!0;break}if(z)break}if(!z){let _=Array(gridSize);for(let y=0;y<gridSize;y++){_[y]=Array(gridSize);for(let p=0;p<gridSize;p++)_[y][p]=i[y][p]}for(let h=0;h<o;h++)for(let B=0;B<s;B++)_[$+h][u+B]=!0;r+=solvePuzzleStep(e+1,_)}}}),r}
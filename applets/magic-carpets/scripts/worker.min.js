"use strict";let gridSize,maxCageSize,uniqueSolution,cages=[],cagesByLocation=[],numSolutionsFound=0;function generateMagicCarpet(){cages=[],cagesByLocation=[],initializeGrid();let r=JSON.parse(JSON.stringify(cages)),i=JSON.parse(JSON.stringify(cagesByLocation));for(;;){let a=!1;var g=shuffleArray([...Array(cages.length).keys()]);g.sort((a,b)=>cages[a][2]*cages[a][3]-cages[b][2]*cages[b][3]);for(let e=0;e<g.length;e++)if(expandCage(g[e])){for(let e=0;e<g.length;e++)g[e]>=cages.length&&g[e]--;uniqueSolution?1!==(numSolutionsFound=solvePuzzle())?(cages=JSON.parse(JSON.stringify(r)),cagesByLocation=JSON.parse(JSON.stringify(i)),numSolutionsFound=1):(a=!0,r=JSON.parse(JSON.stringify(cages)),i=JSON.parse(JSON.stringify(cagesByLocation))):a=!0}if(!a||cages.length<=gridSize)return void postMessage([cages.sort((a,b)=>b[3]*gridSize+b[2]-(a[3]*gridSize+a[2]))])}}function initializeGrid(){cages=new Array(gridSize*gridSize),cagesByLocation=new Array(gridSize);let a=0;for(let r=0;r<gridSize;r++){cagesByLocation[r]=new Array(gridSize);for(let e=0;e<gridSize;e++)cages[a]=[r,e,1,1,0,0],cagesByLocation[r][e]=a,a++}}function shuffleArray(array){let e=array.length;for(;0!==e;){var a=Math.floor(Math.random()*e),r=array[--e];array[e]=array[a],array[a]=r}return array}function expandCage(cageIndex){var e=cages[cageIndex],a=e[0],r=e[1],i=e[2],g=e[3],t=e[4],e=e[5],n=[];if(0!==a&&(c=cages[cagesByLocation[a-1][r]])[1]===r&&c[3]===g&&c[2]*c[3]+g*i<=maxCageSize&&n.push([1,0]),0!==r&&(c=cages[cagesByLocation[a][r-1]])[0]===a&&c[2]===i&&c[2]*c[3]+g*i<=maxCageSize&&n.push([0,1]),0===n.length)return!1;var c=n[Math.floor(Math.random()*n.length)],o=cagesByLocation[a-c[0]][r-c[1]];Math.random()<.5&&(cages[o][4]=cages[o][2]*c[0]+t,cages[o][5]=cages[o][3]*c[1]+e),cages[o][2]+=i*c[0],cages[o][3]+=g*c[1],cages.splice(cageIndex,1);for(let s=0;s<gridSize;s++)for(let e=0;e<gridSize;e++)cagesByLocation[s][e]===cageIndex&&(cagesByLocation[s][e]=o),cagesByLocation[s][e]>cageIndex&&cagesByLocation[s][e]--;return!0}function solvePuzzle(){var a=new Array(gridSize);for(let i=0;i<gridSize;i++){a[i]=new Array(gridSize);for(let e=0;e<gridSize;e++)a[i][e]=!1}for(let g=0;g<cages.length;g++){var e=cages[g][0]+cages[g][4],r=cages[g][1]+cages[g][5];a[e][r]=!0}return solvePuzzleStep(0,a)}function solvePuzzleStep(cageIndex,occupiedCageLocations){if(cageIndex===cages.length)return 1;var t=cages[cageIndex][0]+cages[cageIndex][4],n=cages[cageIndex][1]+cages[cageIndex][5],e=cages[cageIndex][2]*cages[cageIndex][3];if(1==e)return solvePuzzleStep(cageIndex+1,occupiedCageLocations);let c=0;var a=[];for(let i=1;i<=Math.sqrt(e);i++)e%i!=0||i>gridSize||e/i>gridSize||(a.push(i),e/i!==i&&a.push(e/i));for(const u of a){var o=e/u,r=Math.max(t-u+1,0),s=Math.min(t,gridSize-u),l=Math.max(n-o+1,0),d=Math.min(n,gridSize-o);for(let g=r;g<=s;g++)for(let i=l;i<=d;i++){let a=!1;for(let r=0;r<u;r++){for(let e=0;e<o;e++)if(occupiedCageLocations[g+r][i+e]&&(g+r!==t||i+e!==n)){a=!0;break}if(a)break}if(!a){var S=new Array(gridSize);for(let a=0;a<gridSize;a++){S[a]=new Array(gridSize);for(let e=0;e<gridSize;e++)S[a][e]=occupiedCageLocations[a][e]}for(let r=0;r<u;r++)for(let e=0;e<o;e++)S[g+r][i+e]=!0;c+=solvePuzzleStep(cageIndex+1,S)}}}return c}onmessage=function(e){gridSize=e.data[0],maxCageSize=e.data[1],uniqueSolution=e.data[2],generateMagicCarpet()};
import{hsvToRgb}from"../../../scripts/applets/applet.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{convertColor}from"/scripts/src/browser.min.js";import{addTemporaryWorker}from"/scripts/src/main.min.js";import{sleep}from"/scripts/src/utils.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";class FiniteSubdivisions extends AnimationFrameApplet{resolution=3e3;numVertices;numIterations;webWorker;polygons;linesToDraw=[];constructor({canvas}){super(canvas);var s={canvasWidth:this.resolution,useResetButton:!0,resetButtonIconPath:"/graphics/general-icons/reset.png",draggableOptions:{callbacks:{drag:this.onDragDraggable.bind(this)}},fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"},verbose:window.DEBUG};this.wilson=new WilsonCPU(canvas,s)}run({numVertices,numIterations}){this.webWorker?.terminate&&this.webWorker.terminate(),this.pause(),this.numVertices=numVertices;const s=Array(this.numVertices).fill(0).map((_,i)=>"vertex"+i);var t=Object.keys(this.wilson.draggables).filter(id=>!s.includes(id)),t=(this.wilson.removeDraggables(t),this.polygons=this.getDefaultPolygons(),Object.fromEntries(s.map((id,index)=>[id,this.wilson.interpolateCanvasToWorld(this.polygons[0][index])])));this.wilson.setDraggables(t),this.numIterations=numIterations,this.wilson.ctx.lineWidth=Math.max(10-this.numIterations,1),this.drawPreviewPolygon()}animate(){this.wilson.ctx.fillStyle=convertColor(0,0,0),this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.linesToDraw=[],this.webWorker=addTemporaryWorker("/applets/finite-subdivisions/scripts/worker.js"),this.webWorker.onmessage=e=>{this.linesToDraw.push(e.data),this.needNewFrame=!0},this.webWorker.postMessage([this.numVertices,this.numIterations,this.polygons]),this.resume()}drawFrame(){for(const s of this.linesToDraw)this.wilson.ctx.strokeStyle=convertColor(...s[4]),this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(s[1],s[0]),this.wilson.ctx.lineTo(s[3],s[2]),this.wilson.ctx.stroke();this.linesToDraw=[]}onDragDraggable({id,x,y}){this.webWorker?.terminate&&this.webWorker.terminate();var s=id.slice(6);this.polygons[0][s]=this.wilson.interpolateWorldToCanvas([x,y]),this.drawPreviewPolygon()}getDefaultPolygons(){var s=[[]],t=2*Math.floor(this.numVertices/2)*Math.PI/this.numVertices,e=this.resolution/2-this.resolution/2.5,t=this.resolution/2-this.resolution/2.5*Math.cos(t),e=e+(this.resolution-t),i=Math.floor(e/2+this.resolution/2.5),o=Math.floor(this.resolution/2);for(let l=0;l<this.numVertices;l++){var n=l/this.numVertices*2*Math.PI,r=Math.floor(-Math.cos(n)*this.resolution/2.5+i),n=Math.floor(Math.sin(n)*this.resolution/2.5+o);s[0].push([r,n])}return s}drawPreviewPolygon(){this.wilson.ctx.fillStyle=convertColor(0,0,0),this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution);for(let e=0;e<this.numVertices;e++){var s=hsvToRgb((2*e+1)/(2*this.numVertices),1,1);this.wilson.ctx.strokeStyle=convertColor(...s),this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.polygons[0][e][1],this.polygons[0][e][0]),this.wilson.ctx.lineTo(this.polygons[0][(e+1)%this.numVertices][1],this.polygons[0][(e+1)%this.numVertices][0]),this.wilson.ctx.stroke()}let t=structuredClone(this.polygons);for(let i=0;i<this.numIterations;i++)t=this.drawLines(t)}drawLines(polygons){var o=[],n=[];for(let r=0;r<polygons.length;r++){let s=0,t=0;for(let e=0;e<polygons[r].length;e++)s+=polygons[r][e][0],t+=polygons[r][e][1];s/=polygons[r].length,t/=polygons[r].length;for(let i=0;i<polygons[r].length;i++)o.push([polygons[r][i],[s,t]]),n.push([[s,t],polygons[r][i],polygons[r][(i+1)%polygons[r].length]])}for(let t=0;t<o.length;t++){var s=hsvToRgb(t/o.length,1,1);this.wilson.ctx.strokeStyle=convertColor(...s),this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(o[t][0][1],o[t][0][0]),this.wilson.ctx.lineTo(o[t][1][1],o[t][1][0]),this.wilson.ctx.stroke()}return n}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.animationPaused=!0,await sleep(33)}}export{FiniteSubdivisions};
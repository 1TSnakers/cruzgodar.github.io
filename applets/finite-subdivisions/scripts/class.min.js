import{Applet,hsvToRgb}from"../../../scripts/applets/applet.min.js";import{convertColor}from"/scripts/src/browser.min.js";import{addTemporaryWorker}from"/scripts/src/main.min.js";import{siteSettings}from"/scripts/src/settings.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";class FiniteSubdivisions extends Applet{resolution=3e3;numVertices;numIterations;webWorker;polygons;constructor({canvas}){super(canvas);var t={canvasWidth:this.resolution,reduceMotion:siteSettings.reduceMotion,draggableOptions:{callbacks:{ondrag:this.onDragDraggable.bind(this)}},fullscreenOptions:{useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonCPU(canvas,t)}run({numVertices,numIterations}){this.webWorker?.terminate&&this.webWorker.terminate(),this.numVertices=numVertices;const t=Array(this.numVertices).fill(0).map((_,i)=>"vertex"+i);var s=Object.keys(this.wilson.draggables).filter(id=>!t.includes(id)),s=(this.wilson.removeDraggables(s),this.polygons=this.getDefaultPolygons(),Object.fromEntries(t.map((id,index)=>[id,this.wilson.interpolateCanvasToWorld(this.polygons[0][index])])));this.wilson.setDraggables(s),this.numIterations=numIterations,this.wilson.ctx.lineWidth=Math.max(10-this.numIterations,1),this.drawPreviewPolygon()}animate(){this.wilson.ctx.fillStyle=convertColor(0,0,0),this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.webWorker=addTemporaryWorker("/applets/finite-subdivisions/scripts/worker.js"),this.webWorker.onmessage=e=>{this.wilson.ctx.strokeStyle=convertColor(...e.data[4]),this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(e.data[1],e.data[0]),this.wilson.ctx.lineTo(e.data[3],e.data[2]),this.wilson.ctx.stroke()},this.webWorker.postMessage([this.numVertices,this.numIterations,this.polygons])}onDragDraggable({id,x,y}){this.webWorker?.terminate&&this.webWorker.terminate();var t=id.slice(6);this.polygons[0][t]=this.wilson.interpolateWorldToCanvas([x,y]),this.drawPreviewPolygon()}getDefaultPolygons(){var t=[[]],s=2*Math.floor(this.numVertices/2)*Math.PI/this.numVertices,o=this.resolution/2-this.resolution/2.5,s=this.resolution/2-this.resolution/2.5*Math.cos(s),o=o+(this.resolution-s),i=Math.floor(o/2+this.resolution/2.5),e=Math.floor(this.resolution/2);for(let l=0;l<this.numVertices;l++){var n=l/this.numVertices*2*Math.PI,r=Math.floor(-Math.cos(n)*this.resolution/2.5+i),n=Math.floor(Math.sin(n)*this.resolution/2.5+e);t[0].push([r,n])}return t}drawPreviewPolygon(){this.wilson.ctx.fillStyle=convertColor(0,0,0),this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution);for(let o=0;o<this.numVertices;o++){var t=hsvToRgb((2*o+1)/(2*this.numVertices),1,1);this.wilson.ctx.strokeStyle=convertColor(...t),this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.polygons[0][o][1],this.polygons[0][o][0]),this.wilson.ctx.lineTo(this.polygons[0][(o+1)%this.numVertices][1],this.polygons[0][(o+1)%this.numVertices][0]),this.wilson.ctx.stroke()}let s=structuredClone(this.polygons);for(let i=0;i<this.numIterations;i++)s=this.drawLines(s)}drawLines(polygons){var e=[],n=[];for(let r=0;r<polygons.length;r++){let t=0,s=0;for(let o=0;o<polygons[r].length;o++)t+=polygons[r][o][0],s+=polygons[r][o][1];t/=polygons[r].length,s/=polygons[r].length;for(let i=0;i<polygons[r].length;i++)e.push([polygons[r][i],[t,s]]),n.push([[t,s],polygons[r][i],polygons[r][(i+1)%polygons[r].length]])}for(let s=0;s<e.length;s++){var t=hsvToRgb(s/e.length,1,1);this.wilson.ctx.strokeStyle=convertColor(...t),this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(e[s][0][1],e[s][0][0]),this.wilson.ctx.lineTo(e[s][1][1],e[s][1][0]),this.wilson.ctx.stroke()}return n}}export{FiniteSubdivisions};
import{getFloatGlsl,tempShader}from"../../../scripts/applets/applet.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{sleep}from"/scripts/src/utils.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";class KickedRotator extends AnimationFrameApplet{resolution=1e3;computeResolution=1e3;wilsonUpdate;loadPromise;texture;imageData;maxBrightness=1;frame;numIterations;constructor({canvas}){super(canvas);var t=this.createHiddenCanvas(),e={shader:tempShader,canvasWidth:this.computeResolution,worldCenterX:Math.PI,worldCenterY:Math.PI,worldWidth:2*Math.PI,verbose:window.DEBUG},t=(this.wilsonUpdate=new WilsonGPU(t,e),{shader:`
			precision highp float;
			precision highp sampler2D;
			
			varying vec2 uv;
			
			uniform sampler2D uTexture;
			uniform float maxBrightness;

			vec3 hsvToRgb(vec3 c)
			{
				vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
				vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
				return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
			}
			
			void main(void)
			{
				float state = pow(
					texture2D(uTexture, (uv + vec2(1.0)) * 0.5).x / (maxBrightness * 2.25),
					0.475
				) * 2.25;
				
				gl_FragColor = vec4(hsvToRgb(vec3(
					atan(uv.x, uv.y) / 6.283,
					min(length(uv) * 1.5, 1.0),
					state))
				, 1.0);
			}
		`,uniforms:{maxBrightness:1},canvasWidth:this.resolution,fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"},verbose:window.DEBUG});this.wilson=new WilsonGPU(canvas,t)}run({resolution=1e3,k=.75}){this.resolution=resolution,this.computeResolution=resolution,this.wilsonUpdate.resizeCanvas({width:this.computeResolution}),this.wilsonUpdate.createFramebufferTexturePair({id:"update1",textureType:"float"}),this.wilsonUpdate.createFramebufferTexturePair({id:"update2",textureType:"float"}),this.wilson.resizeCanvas({width:this.resolution}),this.wilson.createFramebufferTexturePair({id:"output",textureType:"float"}),this.wilson.useFramebuffer(null),this.wilson.useTexture("output");var t=`
			precision highp float;
			precision highp sampler2D;
			
			varying vec2 uv;
			
			uniform sampler2D uTexture;

			const float pi = ${Math.PI};

			float rand(vec2 co)
			{
				co += vec2(${Math.random()}, ${Math.random()});

				return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
			}
			
			void main(void)
			{
				vec2 state = texture2D(uTexture, (uv + vec2(1.0)) * 0.5).xy;

				float newY = state.y + ${getFloatGlsl(k)} * sin(state.x);

				state = mod(
					vec2(
						state.x + newY,
						newY
					),
					2.0 * pi
				);

				gl_FragColor = vec4(state.x, state.y, 0.0, 0.0);
			}
		`;this.texture=new Float32Array(this.computeResolution*this.computeResolution*4),this.imageData=new Float32Array(this.resolution*this.resolution*4),this.maxBrightness=1,this.wilson.setUniforms({maxBrightness:1});for(let i=0;i<this.computeResolution;i++)for(let t=0;t<this.computeResolution;t++){var e=this.computeResolution*i+t,s=this.wilsonUpdate.interpolateCanvasToWorld([i,t]);this.texture[4*e]=(s[0]-Math.PI)/22+Math.PI+.2*(Math.random()-.5),this.texture[4*e+1]=s[1],this.texture[4*e+2]=0,this.texture[4*e+3]=1}this.wilsonUpdate.loadShader({id:"update",shader:t}),this.wilsonUpdate.setTexture({id:"update2",data:this.texture}),this.frame=0,this.numIterations=100,this.resume()}prepareFrame(){this.frame++,this.needNewFrame=this.frame<this.numIterations}drawFrame(){var t=this.frame%2==0?"update1":"update2",e=this.frame%2==0?"update2":"update1",s=(this.wilsonUpdate.useTexture(t),this.wilsonUpdate.useFramebuffer(e),this.wilsonUpdate.drawFrame(),this.wilsonUpdate.readPixels({format:"float"}));for(let r=0;r<this.computeResolution;r++)for(let t=0;t<this.computeResolution;t++){var i=this.computeResolution*r+t,a=Math.round(((s[4*i+1]-this.wilsonUpdate.worldCenterY)/this.wilsonUpdate.worldHeight+.5)*this.resolution),i=Math.round(((s[4*i]-this.wilsonUpdate.worldCenterX)/this.wilsonUpdate.worldWidth+.5)*this.resolution);0<=a&&a<this.resolution&&0<=i&&i<this.resolution&&(a=a*this.resolution+i,this.imageData[4*a]++,this.maxBrightness=Math.max(this.maxBrightness,this.imageData[4*a]))}this.wilson.setTexture({id:"output",data:this.imageData});t=Math.min(this.frame/15,1);this.wilson.setUniforms({maxBrightness:this.maxBrightness/t}),this.wilson.drawFrame()}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.pause(),await sleep(33)}}export{KickedRotator};
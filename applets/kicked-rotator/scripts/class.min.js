import{getFloatGlsl,tempShader}from"../../../scripts/applets/applet.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{doubleEncodingGlsl,loadGlsl}from"/scripts/src/complexGlsl.min.js";import{Wilson}from"/scripts/wilson.min.js";class KickedRotator extends AnimationFrameApplet{resolution=1e3;computeResolution=1e3;wilsonUpdate;loadPromise;texture;imageData;maxBrightness=1;frame;numIterations;constructor({canvas}){super(canvas);var e=this.createHiddenCanvas(),t={renderer:"gpu",shader:tempShader,canvasWidth:this.computeResolution,canvasHeight:this.computeResolution,worldCenterX:Math.PI,worldCenterY:Math.PI,worldWidth:2*Math.PI,worldHeight:2*Math.PI},e=(this.wilsonUpdate=new Wilson(e,t),{renderer:"gpu",shader:`
			precision highp float;
			precision highp sampler2D;
			
			varying vec2 uv;
			
			uniform sampler2D uTexture;
			uniform float maxBrightness;

			vec3 hsv2rgb(vec3 c)
			{
				vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
				vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
				return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
			}
			
			void main(void)
			{
				float state = pow(
					texture2D(uTexture, (uv + vec2(1.0)) * 0.5).x / (maxBrightness * 2.25),
					0.475
				) * 2.25;
				
				gl_FragColor = vec4(hsv2rgb(vec3(
					atan(uv.x, uv.y) / 6.283,
					min(length(uv) * 1.5, 1.0),
					state))
				, 1.0);
			}
		`,canvasWidth:this.resolution,canvasHeight:this.resolution,useFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"});this.wilson=new Wilson(canvas,e),this.wilson.render.initUniforms(["maxBrightness"]),this.wilson.gl.uniform1f(this.wilson.uniforms.maxBrightness,1),this.loadPromise=loadGlsl()}run({resolution=1e3,k=.75}){this.resolution=resolution,this.computeResolution=resolution,this.wilsonUpdate.changeCanvasSize(this.computeResolution,this.computeResolution),this.wilsonUpdate.render.framebuffers=[],this.wilsonUpdate.render.createFramebufferTexturePair(),this.wilsonUpdate.gl.bindFramebuffer(this.wilsonUpdate.gl.FRAMEBUFFER,null),this.wilsonUpdate.gl.bindTexture(this.wilsonUpdate.gl.TEXTURE_2D,this.wilsonUpdate.render.framebuffers[0].texture),this.wilson.changeCanvasSize(this.resolution,this.resolution),this.wilson.render.framebuffers=[],this.wilson.render.createFramebufferTexturePair(),this.wilson.gl.bindFramebuffer(this.wilson.gl.FRAMEBUFFER,null),this.wilson.gl.bindTexture(this.wilson.gl.TEXTURE_2D,this.wilson.render.framebuffers[0].texture);var e=`
			precision highp float;
			precision highp sampler2D;
			
			varying vec2 uv;
			
			uniform sampler2D uTexture;

			const float pi = ${Math.PI};

			${doubleEncodingGlsl}

			float rand(vec2 co)
			{
				return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
			}
			
			void main(void)
			{
				vec2 state = texture2D(uTexture, (uv + vec2(1.0)) * 0.5).xy;

				float newY = state.y + ${getFloatGlsl(k)} * sin(state.x);

				state = mod(
					vec2(
						state.x + newY,
						newY
					),
					2.0 * pi
				);
			`,t=`
				${e}

				gl_FragColor = encodeFloat(state.x);
			}
		`,e=`
				${e}

				gl_FragColor = encodeFloat(state.y);
			}
		`;this.texture=new Float32Array(this.computeResolution*this.computeResolution*4),this.imageData=new Float32Array(this.resolution*this.resolution*4),this.maxBrightness=1,this.wilson.gl.uniform1f(this.wilson.uniforms.maxBrightness,1);for(let r=0;r<this.computeResolution;r++)for(let e=0;e<this.computeResolution;e++){var s=this.computeResolution*r+e,i=this.wilsonUpdate.utils.interpolate.canvasToWorld(r,e);this.texture[4*s]=(i[0]-Math.PI)/22+Math.PI+.2*(Math.random()-.5),this.texture[4*s+1]=i[1],this.texture[4*s+2]=0,this.texture[4*s+3]=1}this.wilsonUpdate.render.shaderPrograms=[],this.wilsonUpdate.render.loadNewShader(t),this.wilsonUpdate.render.loadNewShader(e),this.frame=0,this.numIterations=100,this.resume()}prepareFrame(){this.frame++,this.needNewFrame=this.frame<this.numIterations}drawFrame(){this.wilsonUpdate.gl.texImage2D(this.wilsonUpdate.gl.TEXTURE_2D,0,this.wilsonUpdate.gl.RGBA,this.computeResolution,this.computeResolution,0,this.wilsonUpdate.gl.RGBA,this.wilsonUpdate.gl.FLOAT,this.texture),this.wilsonUpdate.gl.useProgram(this.wilsonUpdate.render.shaderPrograms[0]),this.wilsonUpdate.render.drawFrame();var t=new Float32Array(this.wilsonUpdate.render.getPixelData().buffer),s=(this.wilsonUpdate.gl.useProgram(this.wilsonUpdate.render.shaderPrograms[1]),this.wilsonUpdate.render.drawFrame(),new Float32Array(this.wilsonUpdate.render.getPixelData().buffer));for(let o=0;o<this.computeResolution;o++)for(let e=0;e<this.computeResolution;e++){var i=this.resolution*o+e,r=(this.texture[4*i]=t[i],this.texture[4*i+1]=s[i],Math.round(((s[i]-this.wilsonUpdate.worldCenterY)/this.wilsonUpdate.worldHeight+.5)*this.resolution)),i=Math.round(((t[i]-this.wilsonUpdate.worldCenterX)/this.wilsonUpdate.worldWidth+.5)*this.resolution);0<=r&&r<this.resolution&&0<=i&&i<this.resolution&&(r=r*this.resolution+i,this.imageData[4*r]++,this.maxBrightness=Math.max(this.maxBrightness,this.imageData[4*r]))}this.wilson.gl.texImage2D(this.wilson.gl.TEXTURE_2D,0,this.wilson.gl.RGBA,this.resolution,this.resolution,0,this.wilson.gl.RGBA,this.wilson.gl.FLOAT,this.imageData);var e=Math.min(this.frame/15,1);this.wilson.gl.uniform1f(this.wilson.uniforms.maxBrightness,this.maxBrightness/e),this.wilson.render.drawFrame()}}export{KickedRotator};
"use strict";onmessage=async function(e){gridSize=e.data[0],numNodes=e.data[1],maximumSpeed=e.data[2],coolingFactor=1/(numNodes*numNodes*numNodes),await drawAnnealingGraph()};let gridSize=null,numNodes=null,maximumSpeed=null,initialTemperature=500,temperature=null,coolingFactor=null,nodes=[],currentPath=[],currentDistance=null;async function drawAnnealingGraph(){nodes=[],currentPath=[],currentDistance=0,temperature=initialTemperature;let e=0;for(let n=0;n<numNodes;n++)nodes[n]=[Math.floor(Math.random()*gridSize),Math.floor(Math.random()*gridSize)],postMessage([0,nodes[n][1],nodes[n][0],4,"rgb(255, 0, 0)"]);for(let r=0;r<numNodes;r++)currentPath[r]=r;for(let t=0;t<numNodes-1;t++)postMessage([1,nodes[t][1],nodes[t][0],nodes[t+1][1],nodes[t+1][0],"rgb(255, 0, 0)"]),currentDistance+=euclideanDistance(t,t+1);for(postMessage([1,nodes[numNodes-1][1],nodes[numNodes-1][0],nodes[0][1],nodes[0][0],"rgb(255, 0, 0)"]),currentDistance+=euclideanDistance(numNodes-1,0);temperature>.001;){let a=[];a[0]=Math.floor(Math.random()*numNodes),a[1]=Math.floor(Math.random()*(numNodes-1)),a[1]>=a[0]&&a[1]++;let u=0,i=a[0]-1,o=a[0]+1;-1===i&&(i=numNodes-1),o===numNodes&&(o=0),u-=euclideanDistance(currentPath[i],currentPath[a[0]]),u+=euclideanDistance(currentPath[i],currentPath[a[1]]),u-=euclideanDistance(currentPath[a[0]],currentPath[o]),u+=euclideanDistance(currentPath[a[1]],currentPath[o]),i=a[1]-1,o=a[1]+1,-1===i&&(i=numNodes-1),o===numNodes&&(o=0),u-=euclideanDistance(currentPath[i],currentPath[a[1]]),u+=euclideanDistance(currentPath[i],currentPath[a[0]]),u-=euclideanDistance(currentPath[a[1]],currentPath[o]),u+=euclideanDistance(currentPath[a[0]],currentPath[o]),(1===Math.abs(a[0]-a[1])||Math.abs(a[0]-a[1])===numNodes-1)&&(u+=2*euclideanDistance(currentPath[a[0]],currentPath[a[1]]));let d=-1/temperature*u;d>1e3?d=1e3:d<-1e3&&(d=-1e3);if(Math.random()<Math.min(1,Math.exp(d))){let c=currentPath[a[0]];currentPath[a[0]]=currentPath[a[1]],currentPath[a[1]]=c,currentDistance+=u,e++,maximumSpeed||e%50!=0||await drawLines()}temperature*=1-coolingFactor}temperature=0,drawLines()}function euclideanDistance(e,n){return Math.sqrt((nodes[e][1]-nodes[n][1])*(nodes[e][1]-nodes[n][1])+(nodes[e][0]-nodes[n][0])*(nodes[e][0]-nodes[n][0]))}function drawLines(){return new Promise(function(e,n){postMessage([2]);for(let r=0;r<numNodes;r++)postMessage([0,nodes[r][1],nodes[r][0],4,`rgb(255, ${255*(initialTemperature-temperature)/initialTemperature}, ${255*(initialTemperature-temperature)/initialTemperature})`]);for(let t=0;t<numNodes-1;t++)postMessage([1,nodes[currentPath[t]][1],nodes[currentPath[t]][0],nodes[currentPath[t+1]][1],nodes[currentPath[t+1]][0],`rgb(255, ${255*(initialTemperature-temperature)/initialTemperature}, ${255*(initialTemperature-temperature)/initialTemperature})`]);postMessage([1,nodes[currentPath[numNodes-1]][1],nodes[currentPath[numNodes-1]][0],nodes[currentPath[0]][1],nodes[currentPath[0]][0],`rgb(255, ${255*(initialTemperature-temperature)/initialTemperature}, ${255*(initialTemperature-temperature)/initialTemperature})`]),setTimeout(e,50)})}
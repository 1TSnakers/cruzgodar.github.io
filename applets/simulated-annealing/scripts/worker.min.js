"use strict";onmessage=async function(e){grid_size=e.data[0],num_nodes=e.data[1],maximum_speed=e.data[2],cooling_factor=1/(100*num_nodes),await draw_annealing_graph(),postMessage(["done"])};let grid_size=null,num_nodes=null,maximum_speed=null,initial_temperature=500,temperature=null,cooling_factor=null,nodes=[],current_path=[],current_distance=null;async function draw_annealing_graph(){nodes=[],current_path=[],current_distance=0,temperature=initial_temperature;let e=0;for(let e=0;e<num_nodes;e++)nodes[e]=[Math.floor(Math.random()*grid_size),Math.floor(Math.random()*grid_size)],postMessage(["node",nodes[e][1],nodes[e][0],4,"rgb(255, 0, 0)"]);for(let e=0;e<num_nodes;e++)current_path[e]=e;for(let e=0;e<num_nodes-1;e++)postMessage(["line",nodes[e][1],nodes[e][0],nodes[e+1][1],nodes[e+1][0],"rgb(255, 0, 0)"]),current_distance+=euclidean_distance(e,e+1);for(postMessage(["line",nodes[num_nodes-1][1],nodes[num_nodes-1][0],nodes[0][1],nodes[0][0],"rgb(255, 0, 0)"]),current_distance+=euclidean_distance(num_nodes-1,0);temperature>.001;){let t=[];t[0]=Math.floor(Math.random()*num_nodes),t[1]=Math.floor(Math.random()*(num_nodes-1)),t[1]>=t[0]&&t[1]++;let n=0,r=t[0]-1,a=t[0]+1;-1==r&&(r=num_nodes-1),a==num_nodes&&(a=0),n-=euclidean_distance(current_path[r],current_path[t[0]]),n+=euclidean_distance(current_path[r],current_path[t[1]]),n-=euclidean_distance(current_path[t[0]],current_path[a]),n+=euclidean_distance(current_path[t[1]],current_path[a]),r=t[1]-1,a=t[1]+1,-1==r&&(r=num_nodes-1),a==num_nodes&&(a=0),n-=euclidean_distance(current_path[r],current_path[t[1]]),n+=euclidean_distance(current_path[r],current_path[t[0]]),n-=euclidean_distance(current_path[t[1]],current_path[a]),n+=euclidean_distance(current_path[t[0]],current_path[a]),1!=Math.abs(t[0]-t[1])&&Math.abs(t[0]-t[1])!=num_nodes-1||(n+=2*euclidean_distance(current_path[t[0]],current_path[t[1]]));let u=-1/temperature*n;u>1e3?u=1e3:u<-1e3&&(u=-1e3);let s=Math.min(1,Math.exp(u));if(Math.random()<s){let r=current_path[t[0]];current_path[t[0]]=current_path[t[1]],current_path[t[1]]=r,current_distance+=n,e++,maximum_speed||e%50!=0||await draw_lines()}temperature*=1-cooling_factor}temperature=0,draw_lines()}function euclidean_distance(e,t){return Math.sqrt((nodes[e][1]-nodes[t][1])*(nodes[e][1]-nodes[t][1])+(nodes[e][0]-nodes[t][0])*(nodes[e][0]-nodes[t][0]))}function draw_lines(){return new Promise(function(e,t){postMessage(["clear"]);for(let e=0;e<num_nodes;e++)postMessage(["node",nodes[e][1],nodes[e][0],4,`rgb(255, ${255*(initial_temperature-temperature)/initial_temperature}, ${255*(initial_temperature-temperature)/initial_temperature})`]);for(let e=0;e<num_nodes-1;e++)postMessage(["line",nodes[current_path[e]][1],nodes[current_path[e]][0],nodes[current_path[e+1]][1],nodes[current_path[e+1]][0],`rgb(255, ${255*(initial_temperature-temperature)/initial_temperature}, ${255*(initial_temperature-temperature)/initial_temperature})`]);postMessage(["line",nodes[current_path[num_nodes-1]][1],nodes[current_path[num_nodes-1]][0],nodes[current_path[0]][1],nodes[current_path[0]][0],`rgb(255, ${255*(initial_temperature-temperature)/initial_temperature}, ${255*(initial_temperature-temperature)/initial_temperature})`]),setTimeout(e,50)})}
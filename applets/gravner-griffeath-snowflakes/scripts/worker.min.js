"use strict";onmessage=async function(a){grid_size=a.data[0],rho=a.data[1],beta=a.data[2],alpha=a.data[3],theta=a.data[4],kappa=a.data[5],mu=a.data[6],gamma=a.data[7],await draw_snowflake()};let grid_size=null,attachment_flag=[],boundary_mass=[],crystal_mass=[],diffusive_mass=[],new_attachment_flag=[],new_boundary_mass=[],new_crystal_mass=[],new_diffusive_mass=[],on_boundary=[],cells_on_boundary=[],cells_outside_flake=[],rho=.5*(.5+Math.random()),beta=1.3*(.5+Math.random()),alpha=.08*(.5+Math.random()),theta=.025*(.5+Math.random()),kappa=.003*(.5+Math.random()),mu=.07*(.5+Math.random()),gamma=5e-5*(.5+Math.random()),sigma=0,max_distance=0,terminate=!1;function draw_snowflake(){return new Promise(async function(a,e){for(let a=0;a<grid_size;a++){attachment_flag.push([]),boundary_mass.push([]),crystal_mass.push([]),diffusive_mass.push([]),new_attachment_flag.push([]),new_boundary_mass.push([]),new_crystal_mass.push([]),new_diffusive_mass.push([]),on_boundary.push([]);for(let e=0;e<grid_size;e++)attachment_flag[a].push(0),boundary_mass[a].push(0),crystal_mass[a].push(0),diffusive_mass[a].push(rho),new_attachment_flag[a].push(0),new_boundary_mass[a].push(0),new_crystal_mass[a].push(0),new_diffusive_mass[a].push(0),on_boundary[a].push(0),cells_outside_flake.push([a,e])}let s=Math.floor(grid_size/2);for(add_cell_to_flake(s,s),crystal_mass[s][s]=1,diffusive_mass[s][s]=0;evaluate_diffusion_step(),evaluate_freezing_step(),evaluate_attachment_step(),evaluate_melting_step(),evaluate_noise_step(),post_edgeless_crystal_mass(),!terminate;);a()})}function add_cell_to_flake(a,e){if(attachment_flag[a][e]=1,new_attachment_flag[a][e]=0,0===on_boundary[a+1][e]&&0===attachment_flag[a+1][e]&&0===new_attachment_flag[a+1][e]&&(on_boundary[a+1][e]=1,cells_on_boundary.push([a+1,e])),0===on_boundary[a-1][e]&&0===attachment_flag[a-1][e]&&0===new_attachment_flag[a-1][e]&&(on_boundary[a-1][e]=1,cells_on_boundary.push([a-1,e])),0===on_boundary[a][e+1]&&0===attachment_flag[a][e+1]&&0===new_attachment_flag[a][e+1]&&(on_boundary[a][e+1]=1,cells_on_boundary.push([a,e+1])),0===on_boundary[a][e-1]&&0===attachment_flag[a][e-1]&&0===new_attachment_flag[a][e-1]&&(on_boundary[a][e-1]=1,cells_on_boundary.push([a,e-1])),e%2==0?(0===on_boundary[a-1][e-1]&&0===attachment_flag[a-1][e-1]&&0===new_attachment_flag[a-1][e-1]&&(on_boundary[a-1][e-1]=1,cells_on_boundary.push([a-1,e-1])),0===on_boundary[a-1][e+1]&&0===attachment_flag[a-1][e+1]&&0===new_attachment_flag[a-1][e+1]&&(on_boundary[a-1][e+1]=1,cells_on_boundary.push([a-1,e+1]))):(0===on_boundary[a+1][e-1]&&0===attachment_flag[a+1][e-1]&&0===new_attachment_flag[a+1][e-1]&&(on_boundary[a+1][e-1]=1,cells_on_boundary.push([a+1,e-1])),0===on_boundary[a+1][e+1]&&0===attachment_flag[a+1][e+1]&&0===new_attachment_flag[a+1][e+1]&&(on_boundary[a+1][e+1]=1,cells_on_boundary.push([a+1,e+1]))),1===on_boundary[a][e]){on_boundary[a][e]=0;for(let s=0;s<cells_on_boundary.length;s++)if(cells_on_boundary[s][0]===a&&cells_on_boundary[s][1]===e){cells_on_boundary.splice(s,1);break}}else for(let s=0;s<cells_outside_flake.length;s++)if(cells_outside_flake[s][0]===a&&cells_outside_flake[s][1]===e){cells_outside_flake.splice(s,1);break}a-grid_size/2>max_distance&&(max_distance=a-grid_size/2)/(grid_size/2)>.8&&(terminate=!0)}function evaluate_diffusion_step(){for(let a=0;a<cells_outside_flake.length;a++){let e=cells_outside_flake[a][0],s=cells_outside_flake[a][1];if(0===e||0===s||e===grid_size-1||s===grid_size-1)continue;let _=get_neighbors(e,s,!0),n=0;for(let a=0;a<7;a++)n+=diffusive_mass[_[a][0]][_[a][1]];new_diffusive_mass[e][s]=n/7}for(let a=0;a<cells_on_boundary.length;a++){let e=cells_on_boundary[a][0],s=cells_on_boundary[a][1];if(0===e||0===s||e===grid_size-1||s===grid_size-1)continue;let _=get_neighbors(e,s,!0),n=0;for(let a=0;a<7;a++)1===attachment_flag[_[a][0]][_[a][1]]?n+=diffusive_mass[e][s]:n+=diffusive_mass[_[a][0]][_[a][1]];new_diffusive_mass[e][s]=n/7}update_values()}function evaluate_freezing_step(){for(let a=0;a<cells_on_boundary.length;a++){let e=cells_on_boundary[a][0],s=cells_on_boundary[a][1];0!==e&&0!==s&&e!==grid_size-1&&s!==grid_size-1&&(new_boundary_mass[e][s]=boundary_mass[e][s]+(1-kappa)*diffusive_mass[e][s],new_crystal_mass[e][s]=crystal_mass[e][s]+kappa*diffusive_mass[e][s],new_diffusive_mass[e][s]=0)}update_values()}function evaluate_attachment_step(){for(let a=0;a<cells_on_boundary.length;a++){let e=cells_on_boundary[a][0],s=cells_on_boundary[a][1];if(0===e||0===s||e===grid_size-1||s===grid_size-1)continue;let _=0,n=get_neighbors(e,s,!0);for(let a=0;a<7;a++)1===attachment_flag[n[a][0]][n[a][1]]&&_++;if(1===_||2===_)boundary_mass[e][s]>=beta&&(new_attachment_flag[e][s]=1);else if(3===_){if(boundary_mass[e][s]>=1)new_attachment_flag[e][s]=1;else if(boundary_mass[e][s]>=alpha){let a=0;for(let e=0;e<7;e++)a+=diffusive_mass[n[e][0]][n[e][1]];a<theta&&boundary_mass[e][s]>=alpha&&(new_attachment_flag[e][s]=1)}}else _>=4&&(new_attachment_flag[e][s]=1);1===new_attachment_flag[e][s]&&(new_crystal_mass[e][s]=boundary_mass[e][s]+crystal_mass[e][s],new_boundary_mass[e][s]=0)}update_values()}function evaluate_melting_step(){for(let a=0;a<cells_on_boundary.length;a++){let e=cells_on_boundary[a][0],s=cells_on_boundary[a][1];0!==e&&0!==s&&e!==grid_size-1&&s!==grid_size-1&&(new_boundary_mass[e][s]=(1-mu)*boundary_mass[e][s],new_crystal_mass[e][s]=(1-gamma)*crystal_mass[e][s],new_diffusive_mass[e][s]=diffusive_mass[e][s]+mu*boundary_mass[e][s]+gamma*crystal_mass[e][s])}update_values()}function evaluate_noise_step(){if(0!==sigma){for(let a=0;a<grid_size;a++)for(let e=0;e<grid_size;e++)0!==a&&0!==e&&a!==grid_size-1&&e!==grid_size-1&&(Math.random()<.5?new_diffusive_mass[a][e]=(1+sigma)*diffusive_mass[a][e]:new_diffusive_mass[a][e]=(1-sigma)*diffusive_mass[a][e]);update_values()}}function update_values(){for(let a=0;a<grid_size;a++)for(let e=0;e<grid_size;e++)0===attachment_flag[a][e]&&1===new_attachment_flag[a][e]&&add_cell_to_flake(a,e),boundary_mass[a][e]=new_boundary_mass[a][e],crystal_mass[a][e]=new_crystal_mass[a][e],diffusive_mass[a][e]=new_diffusive_mass[a][e]}function post_edgeless_crystal_mass(){let a=JSON.parse(JSON.stringify(crystal_mass));for(let e=0;e<cells_on_boundary.length;e++){let s=cells_on_boundary[e][0],_=cells_on_boundary[e][1];a[s+1][_]*=1.5,a[s-1][_]*=1.5,a[s][_+1]*=1.5,a[s][_-1]*=1.5,_%2==0?(a[s-1][_+1]*=1.5,a[s-1][_-1]*=1.5):(a[s+1][_+1]*=1.5,a[s+1][_-1]*=1.5)}postMessage([a])}function get_neighbors(a,e,s){let _=[[a-1,e],[a+1,e],[a,e+1],[a,e-1]];return e%2==0?(_.push([a-1,e-1]),_.push([a-1,e+1])):(_.push([a+1,e-1]),_.push([a+1,e+1])),s&&_.push([a,e]),_}
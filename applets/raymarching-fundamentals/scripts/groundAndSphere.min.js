import{RaymarchingFundamentals}from"./class.min.js";import{extrudedCubeDE}from"./distanceEstimators.min.js";class GroundAndSphere extends RaymarchingFundamentals{constructor({canvas}){super({canvas:canvas,shader:`
			precision highp float;
			
			varying vec2 uv;

			uniform float aspectRatioX;
			uniform float aspectRatioY;
			uniform int imageSize;
			uniform vec3 cameraPos;
			uniform vec3 imagePlaneCenterPos;
			uniform vec3 forwardVec;
			uniform vec3 rightVec;
			uniform vec3 upVec;
			uniform float epsilonScaling;
			uniform float minEpsilon;


			uniform float showSphereAmount;
			uniform float groundTextureAmount;
			uniform float fogAmount;
			uniform float ambientOcclusionAmount;
			uniform float pointLightAmount;
			uniform float ambientLightAmount;
			uniform float shadowAmount;
			uniform float softShadowAmount;
			uniform float reflectivityAmount;
			uniform float showRoomsAmount;
			uniform float modPosAmount;
			uniform float sphereWeight;
			uniform float extrudedCubeWeight;
			uniform float extrudedCubeSeparation;
			
			const vec3 lightPos = vec3(50, 70, 100);
			const float lightBrightness = float(1);
			const float bloomPower = float(1);
			
			const float clipDistance = float(1000);
			const int maxMarches = 192;
			const int maxShadowMarches = 128;
			const int maxReflectionMarches = 128;
			const vec3 fogColor = vec3(0.6, 0.73, 0.87);
			const float fogScaling = 0.1;
			const float maxShadowAmount = 0.5;

			
			
			float rand(vec2 co)
			{
				return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
			}
			
			${extrudedCubeDE[0]}
			${extrudedCubeDE[1]}

			float distanceEstimatorGround(vec3 pos)
			{
				return abs(pos.z);
			}

			float distanceEstimatorObject(vec3 pos)
			{
				float distanceObject = 0.0;

				float c = cos(objectRotation);
				float s = sin(objectRotation);
				vec3 rotatedPos = mat3(c, s, 0.0, -s, c, 0.0, 0.0, 0.0, 1.0) * (pos + vec3(0.0, 0.0, objectFloat));

				if (sphereWeight > 0.0)
				{
					distanceObject += sphereWeight * distanceEstimatorRoomSphere(rotatedPos);
				}

				if (extrudedCubeWeight > 0.0)
				{
					distanceObject += extrudedCubeWeight * distanceEstimatorExtrudedCube(rotatedPos);
				}
				
				return distanceObject;
			}
			
			float distanceEstimator(vec3 pos)
			{
				float distanceGround = distanceEstimatorGround(pos);
				float distanceObject = distanceEstimatorObject(pos);

				return min(distanceGround, distanceObject);
			}

			vec3 getColorObject(vec3 pos)
			{
				vec3 color = vec3(0.0, 0.0, 0.0);

				float c = cos(objectRotation);
				float s = sin(objectRotation);
				vec3 rotatedPos = mat3(c, s, 0.0, -s, c, 0.0, 0.0, 0.0, 1.0) * (pos + vec3(0.0, 0.0, objectFloat));

				if (sphereWeight > 0.0)
				{
					color += sphereWeight * getColorRoomSphere(rotatedPos);
				}

				if (extrudedCubeWeight > 0.0)
				{
					color += extrudedCubeWeight * getColorExtrudedCube(rotatedPos);
				}

				return color;
			}
		
			float distanceEstimator(vec3 pos)
			{
				float distanceGround = distanceEstimatorGround(pos);
				float distanceObject = distanceEstimatorObject(pos);

				return min(distanceGround, distanceObject);
			}
			
			vec3 getColor(vec3 pos)
			{
				float distanceGround = distanceEstimatorGround(pos);
				float distanceObject = distanceEstimatorObject(pos);

				float minDistance = min(distanceGround, distanceObject);

				if (minDistance == distanceGround)
				{
					vec2 co = floor(pos.xy * 50.0);
					return vec3(0.5, 0.5, 0.5)
						* (1.0 + .2 * (rand(co) - .5));
				}

				if (minDistance == distanceObject)
				{
					return getColorObject(pos);
				}
			}


			
			vec3 getSurfaceNormal(vec3 pos, float epsilon)
			{
				float xStep1 = distanceEstimator(pos + vec3(epsilon, 0.0, 0.0));
				float yStep1 = distanceEstimator(pos + vec3(0.0, epsilon, 0.0));
				float zStep1 = distanceEstimator(pos + vec3(0.0, 0.0, epsilon));
				
				float xStep2 = distanceEstimator(pos - vec3(epsilon, 0.0, 0.0));
				float yStep2 = distanceEstimator(pos - vec3(0.0, epsilon, 0.0));
				float zStep2 = distanceEstimator(pos - vec3(0.0, 0.0, epsilon));
				
				return normalize(vec3(xStep1 - xStep2, yStep1 - yStep2, zStep1 - zStep2));
			}
			
			float computeBloom(vec3 rayDirectionVec)
			{
				return pow(
					(3.0 - distance(
						normalize(rayDirectionVec),
						normalize(lightPos - cameraPos)
					)) / 2.99,
					float(20)
				);
			}

			vec3 computeShading(
				vec3 pos,
				float epsilon,
				float correctionDistance,
				int iteration
			) {
				vec3 surfaceNormal = getSurfaceNormal(pos, epsilon);

				// This corrects the position so that it's exactly on the surface (we probably marched a little bit inside).
				pos -= surfaceNormal * correctionDistance;
				
				vec3 lightDirection = normalize(lightPos - pos);
				
				float dotProduct = dot(surfaceNormal, lightDirection);
				
				float lightIntensity = max(
					lightBrightness * dotProduct,
					0.25
				);

				vec3 color = getColor(pos)
					* lightIntensity
					* max((1.0 - float(iteration) / float(maxMarches)), 0.0);
				
				//Apply fog.
				return mix(color, fogColor, 1.0 - exp(-distance(pos, cameraPos) * fogScaling));
			}


			
			vec3 raymarch(vec3 startPos)
			{
				vec3 rayDirectionVec = normalize(startPos - cameraPos) * 0.95;
				
				float t = 0.0;
				
				for (int iteration = 0; iteration < maxMarches; iteration++)
				{
					vec3 pos = cameraPos + t * rayDirectionVec;;
					
					float distanceToScene = distanceEstimator(pos);

					float epsilon = max(t / (float(imageSize) * epsilonScaling), minEpsilon);
					
					if (distanceToScene < epsilon)
					{
						return computeShading(
							pos,
							epsilon,
							distanceToScene - 2.0 * epsilon,
							iteration
						);
					}
					
					else if (t > clipDistance)
					{
						return mix(fogColor, vec3(1.0), computeBloom(rayDirectionVec));
					}
					
					t += distanceToScene;
				}
				
				return mix(fogColor, vec3(1.0), computeBloom(rayDirectionVec));
			}
			
			
			
			void main(void)
			{
				vec3 finalColor = raymarch(
					imagePlaneCenterPos + rightVec * uv.x * aspectRatioX + upVec * uv.y / aspectRatioY
				);
				
				gl_FragColor = vec4(finalColor.xyz, 1.0);
			}
		`,uniforms:{objectRotation:["float",0],objectFloat:["float",0],sphereWeight:["float",0],extrudedCubeWeight:["float",1],extrudedCubeSeparation:["float",1.5],mengerSpongeWeight:["float",0],mengerSpongeScale:["float",3]}}),this.wilson.gl.uniform1f(this.wilson.uniforms.showSphereAmount,1),this.wilson.gl.uniform1f(this.wilson.uniforms.groundTextureAmount,1),this.wilson.gl.uniform1f(this.wilson.uniforms.fogAmount,1),this.wilson.gl.uniform1f(this.wilson.uniforms.ambientOcclusionAmount,1),this.wilson.gl.uniform1f(this.wilson.uniforms.pointLightAmount,1),this.wilson.gl.uniform1f(this.wilson.uniforms.ambientLightAmount,1),this.wilson.gl.uniform1f(this.wilson.uniforms.shadowAmount,1),this.wilson.gl.uniform1f(this.wilson.uniforms.softShadowAmount,1),this.wilson.gl.uniform1f(this.wilson.uniforms.reflectivityAmount,0),this.wilson.gl.uniform1f(this.wilson.uniforms.showRoomsAmount,1),this.wilson.gl.uniform1f(this.wilson.uniforms.modPosAmount,1),this.wilson.gl.uniform1f(this.wilson.uniforms.sphereWeight,1),this.wilson.gl.uniform1f(this.wilson.uniforms.extrudedCubeWeight,0),this.wilson.gl.uniform1f(this.wilson.uniforms.extrudedCubeSeparation,2)}}export{GroundAndSphere};
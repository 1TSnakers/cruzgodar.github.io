"use strict";onmessage=function(e){grid_size=e.data[0],max_cage_size=e.data[1],generate_calcudoku_grid(),postMessage(["done"])};let grid_size=null,max_cage_size=null,grid=[],cages=[],cages_by_location=[],num_solutions_found=0;function generate_calcudoku_grid(){grid=[],cages=[],cages_by_location=[],grid=generate_number_grid(grid_size),assign_initial_cages(),postMessage(["first_grid_complete"]);let e=JSON.parse(JSON.stringify(cages)),a=JSON.parse(JSON.stringify(cages_by_location));for(;;){let s=!1,g=shuffle_array([...Array(cages.length).keys()]);g.sort((e,a)=>cages[e][2].length-cages[a][2].length);for(let t=0;t<g.length;t++){if(-1!==expand_cages(g[t])){s=!0;for(let e=0;e<g.length;e++)g[e]>=cages.length&&g[e]--}solve_puzzle(cages),1!==num_solutions_found?(cages=JSON.parse(JSON.stringify(e)),cages_by_location=JSON.parse(JSON.stringify(a)),num_solutions_found=1):(e=JSON.parse(JSON.stringify(cages)),a=JSON.parse(JSON.stringify(cages_by_location)),postMessage([grid,cages,cages_by_location]))}if(!1===s)return}}function shuffle_array(e){let a=e.length;for(;0!==a;){let s=Math.floor(Math.random()*a),g=e[a-=1];e[a]=e[s],e[s]=g}return e}function generate_number_grid(){let e=[];for(let a=0;a<grid_size;a++){e[a]=[];for(let s=0;s<grid_size;s++)e[a][s]=0}let a=[];for(let e=0;e<grid_size;e++){a[e]=[];for(let s=0;s<grid_size;s++)a[e][s]=[...Array(grid_size).keys()].map(e=>e+1)}let s=[];for(let e=0;e<grid_size;e++)for(let a=0;a<grid_size;a++)s.push([e,a]);return generate_number_grid_step(e,a,s)}function generate_number_grid_step(e,a,s){if(0===s.length)return e;let g=s[Math.floor(Math.random()*s.length)],t=g[0],c=g[1];if(0===a[t][c].length)return!1;for(let g=0;g<a[t][c].length;g++){let i=JSON.parse(JSON.stringify(e)),l=JSON.parse(JSON.stringify(a)),_=JSON.parse(JSON.stringify(s));place_digit(i,l,_,t,c,a[t][c][g]);let o=generate_number_grid_step(i,l,_);if(!1!==o)return o}return!1}function assign_initial_cages(){cages=[],cages_by_location=[],cages_by_location=[];for(let e=0;e<grid_size;e++){cages_by_location[e]=[];for(let a=0;a<grid_size;a++){let s=grid[e][a];cages.push(["",s,[[e,a]],s,s,s]),cages_by_location[e][a]=cages.length-1}}}function expand_cages(e){let a=null,s=cages[e][2][0][0],g=cages[e][2][0][1];if(Math.random()<.5)if(0!==s&&cages_by_location[s-1][g]!==e&&try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s-1][g]))a=cages_by_location[s-1][g];else if(s!==grid_size-1&&cages_by_location[s+1][g]!==e&&try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s+1][g]))a=cages_by_location[s+1][g];else if(0!==g&&cages_by_location[s][g-1]!==e&&try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s][g-1]))a=cages_by_location[s][g-1];else{if(g===grid_size-1||cages_by_location[s][g+1]===e||!try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s][g+1]))return;a=cages_by_location[s][g+1]}else if(0!==g&&cages_by_location[s][g-1]!==e&&try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s][g-1]))a=cages_by_location[s][g-1];else if(g!==grid_size-1&&cages_by_location[s][g+1]!==e&&try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s][g+1]))a=cages_by_location[s][g+1];else if(0!==s&&cages_by_location[s-1][g]!==e&&try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s-1][g]))a=cages_by_location[s-1][g];else{if(s===grid_size-1||cages_by_location[s+1][g]===e||!try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s+1][g]))return;a=cages_by_location[s+1][g]}add_cage_to_cage(e,a),cages.splice(e,1);for(let a=0;a<grid_size;a++)for(let s=0;s<grid_size;s++)cages_by_location[a][s]>e&&cages_by_location[a][s]--}function try_to_add_cage_to_cage(e,a){if(cages[a][2].length+cages[e][2].length>max_cage_size)return!1;if(""===cages[a][0])return!0;if("+"===cages[a][0])return!0;if("x"===cages[a][0])return!0;if("-"===cages[a][0]&&cages[a][4]+cages[e][4]<=2*Math.max(cages[a][3],cages[e][3]))return!0;if(":"===cages[a][0]){let s=Math.max(cages[a][3],cages[e][3]);if(s*s%(cages[a][5]*cages[e][5])==0)return!0}return!1}function add_cage_to_cage(e,a){if(""===cages[a][0]){let s=["+","x"],g=[cages[a][1]+cages[e][4],cages[a][1]*cages[e][5]],t=Math.max(cages[a][1],cages[e][3]);if(2*t>=cages[a][1]+cages[e][4]&&(s.push("-"),g.push(2*t-(cages[a][1]+cages[e][4]))),t*t%(cages[a][1]*cages[e][5])==0&&(s.push(":"),g.push(t*t/(cages[a][1]*cages[e][5]))),s.includes(":")&&Math.random()<.5){let e=s.indexOf(":");cages[a][0]=s[e],cages[a][1]=g[e]}else{let e=Math.floor(Math.random()*s.length);cages[a][0]=s[e],cages[a][1]=g[e]}}else if("+"===cages[a][0])cages[a][1]+=cages[e][4];else if("x"===cages[a][0])cages[a][1]*=cages[e][5];else if("-"===cages[a][0])cages[a][1]=2*Math.max(cages[a][3],cages[e][3])-(cages[a][4]+cages[e][4]);else if(":"===cages[a][0]){let s=Math.max(cages[a][3],cages[e][3]),g=cages[a][5]*cages[e][5];cages[a][1]=s*s/g}cages[a][2]=cages[a][2].concat(cages[e][2]),cages[a][3]=Math.max(cages[a][3],cages[e][3]),cages[a][4]+=cages[e][4],cages[a][5]*=cages[e][5];for(let s=0;s<cages[e][2].length;s++){let g=cages[e][2][s][0],t=cages[e][2][s][1];cages_by_location[g][t]=a}}function solve_puzzle(e){let a=[];for(let e=0;e<grid_size;e++){a[e]=[];for(let s=0;s<grid_size;s++)a[e][s]=0}let s=[];for(let e=0;e<grid_size;e++){s[e]=[];for(let a=0;a<grid_size;a++)s[e][a]=[...Array(grid_size).keys()].map(e=>e+1)}let g=[];for(let e=0;e<grid_size;e++)for(let a=0;a<grid_size;a++)g.push([e,a]);for(let t=0;t<e.length;t++)if(""===e[t][0])place_digit(a,s,g,e[t][2][0][0],e[t][2][0][1],e[t][1]);else if("+"===e[t][0]){let a=e[t][4]-e[t][2].length+1;for(let g=0;g<e[t][2].length;g++){let c=e[t][2][g][0],i=e[t][2][g][1];for(let e=a+1;e<=grid_size;e++){let a=s[c][i].indexOf(e);-1!==a&&s[c][i].splice(a,1)}}}else if("x"===e[t][0])for(let a=0;a<e[t][2].length;a++){let g=e[t][2][a][0],c=e[t][2][a][1];for(let a=2;a<=grid_size;a++)if(e[t][5]%a!=0){let e=s[g][c].indexOf(a);-1!==e&&s[g][c].splice(e,1)}}num_solutions_found=0,solve_puzzle_step(a,s,g)}function update_cage_possibilities(e,a,s,g){let t=cages_by_location[e][a];if("+"===cages[t][0]){let e=0;for(let a=0;a<cages[t][2].length;a++){let g=cages[t][2][a][0],c=cages[t][2][a][1];e+=s[g][c]}let a=cages[t][4]-e-cages[t][2].length+1;for(let e=0;e<cages[t][2].length;e++){let s=cages[t][2][e][0],c=cages[t][2][e][1];for(let e=a+1;e<=grid_size;e++){let a=g[s][c].indexOf(e);-1!==a&&g[s][c].splice(a,1)}}}else if("x"===cages[t][0]){let e=1;for(let a=0;a<cages[t][2].length;a++){let g=cages[t][2][a][0],c=cages[t][2][a][1];0!==s[g][c]&&(e*=s[g][c])}for(let a=0;a<cages[t][2].length;a++){let s=cages[t][2][a][0],c=cages[t][2][a][1];for(let a=2;a<=grid_size;a++)if(cages[t][5]/e%a!=0){let e=g[s][c].indexOf(a);-1!==e&&g[s][c].splice(e,1)}}}}function solve_puzzle_step(e,a,s){if(0===s.length)return num_solutions_found++,!0;let g=1e3,t=0;for(let e=0;e<s.length;e++){let c=s[e][0],i=s[e][1];a[c][i].length<g&&(g=a[c][i].length,t=[c,i])}let c=t[0],i=t[1];if(0!==a[c][i].length)for(let g=0;g<a[c][i].length;g++){let t=JSON.parse(JSON.stringify(e)),l=JSON.parse(JSON.stringify(a)),_=JSON.parse(JSON.stringify(s));if(place_digit(t,l,_,c,i,a[c][i][g]),!1!==check_cage(t,cages_by_location[c][i])&&(solve_puzzle_step(t,l,_),num_solutions_found>1))return}}function check_cage(e,a){for(let s=0;s<cages[a][2].length;s++){let g=cages[a][2][s][0],t=cages[a][2][s][1];if(0===e[g][t])return!0}if("+"===cages[a][0]){let s=0;for(let g=0;g<cages[a][2].length;g++){let t=cages[a][2][g][0],c=cages[a][2][g][1];s+=e[t][c]}if(s!==cages[a][1])return!1}else if("x"===cages[a][0]){let s=1;for(let g=0;g<cages[a][2].length;g++){let t=cages[a][2][g][0],c=cages[a][2][g][1];s*=e[t][c]}if(s!==cages[a][1])return!1}else if("-"===cages[a][0]){let s=0;for(let g=0;g<cages[a][2].length;g++){let t=cages[a][2][g][0],c=cages[a][2][g][1];s+=e[t][c]}if(2*cages[a][3]-s!==cages[a][1])return!1}else if(":"===cages[a][0]){let s=1;for(let g=0;g<cages[a][2].length;g++){let t=cages[a][2][g][0],c=cages[a][2][g][1];s*=e[t][c]}if(cages[a][3]*cages[a][3]/s!==cages[a][1])return!1}return!0}function place_digit(e,a,s,g,t,c){e[g][t]=c;for(let e=0;e<grid_size;e++){let s=a[g][e].indexOf(c);-1!==s&&a[g][e].splice(s,1),-1!==(s=a[e][t].indexOf(c))&&a[e][t].splice(s,1)}a[g][t]=[c];let i=pair_in_array([g,t],s);-1!==i&&s.splice(i,1)}function pair_in_array(e,a){for(let s=0;s<a.length;s++)if(a[s][0]===e[0]&&a[s][1]===e[1])return s;return-1}
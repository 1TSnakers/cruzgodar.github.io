"use strict";onmessage=function(e){grid_size=e.data[0],max_cage_size=e.data[1],importScripts("/applets/calcudoku-generator/scripts/solver.js"),Module.onRuntimeInitialized=function(){importScripts("/scripts/wasm-arrays.min.js"),generate_calcudoku_grid()}};let grid_size=null,max_cage_size=null,grid=[],cages=[],cages_by_location=[],num_solutions_found=0;function generate_calcudoku_grid(){grid=[],cages=[],cages_by_location=[],generate_number_grid(),assign_initial_cages();let e=JSON.parse(JSON.stringify(cages)),a=JSON.parse(JSON.stringify(cages_by_location));for(;;){let s=!1,g=shuffle_array([...Array(cages.length).keys()]);g.sort(((e,a)=>cages[e][2].length-cages[a][2].length));for(let c=0;c<g.length;c++){if(-1!==expand_cages(g[c])){s=!0;for(let e=0;e<g.length;e++)g[e]>=cages.length&&g[e]--}num_solutions_found=wasm_solve_puzzle(cages),1!==num_solutions_found?(cages=JSON.parse(JSON.stringify(e)),cages_by_location=JSON.parse(JSON.stringify(a)),num_solutions_found=1):(e=JSON.parse(JSON.stringify(cages)),a=JSON.parse(JSON.stringify(cages_by_location)),postMessage([grid,cages,cages_by_location]))}if(!1===s)return}}function shuffle_array(e){let a=e.length;for(;0!==a;){const s=Math.floor(Math.random()*a);a-=1;let g=e[a];e[a]=e[s],e[s]=g}return e}function generate_number_grid(){grid=[];for(let e=0;e<grid_size;e++){grid[e]=[];for(let a=0;a<grid_size;a++)grid[e][a]=0}for(let e=0;e<grid_size;e++)for(let a=0;a<grid_size;a++)grid[e][a]=(a+e)%grid_size+1;const e=shuffle_array([shuffle_grid_rows,shuffle_grid_rows,shuffle_grid_columns,shuffle_grid_columns,shuffle_grid_digits,shuffle_grid_digits]);for(let a=0;a<6;a++)e[a]()}function shuffle_grid_rows(){const e=shuffle_array([...Array(grid_size).keys()]);let a=[];for(let e=0;e<grid_size;e++){a[e]=[];for(let s=0;s<grid_size;s++)a[e][s]=0}for(let s=0;s<grid_size;s++)a[s]=JSON.parse(JSON.stringify(grid[e[s]]));grid=JSON.parse(JSON.stringify(a))}function shuffle_grid_columns(){const e=shuffle_array([...Array(grid_size).keys()]);let a=[];for(let e=0;e<grid_size;e++){a[e]=[];for(let s=0;s<grid_size;s++)a[e][s]=0}for(let s=0;s<grid_size;s++)for(let g=0;g<grid_size;g++)a[s][g]=grid[s][e[g]];grid=JSON.parse(JSON.stringify(a))}function shuffle_grid_digits(){const e=shuffle_array([...Array(grid_size).keys()]);let a=[];for(let e=0;e<grid_size;e++){a[e]=[];for(let s=0;s<grid_size;s++)a[e][s]=0}for(let s=0;s<grid_size;s++)for(let g=0;g<grid_size;g++)a[s][g]=e[grid[s][g]-1]+1;grid=JSON.parse(JSON.stringify(a))}function assign_initial_cages(){cages=[],cages_by_location=[],cages_by_location=[];for(let e=0;e<grid_size;e++){cages_by_location[e]=[];for(let a=0;a<grid_size;a++){const s=grid[e][a];cages.push(["",s,[[e,a]],s,s,s]),cages_by_location[e][a]=cages.length-1}}}function expand_cages(e){let a=null;const s=cages[e][2][0][0],g=cages[e][2][0][1];if(Math.random()<.5)if(0!==s&&cages_by_location[s-1][g]!==e&&try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s-1][g]))a=cages_by_location[s-1][g];else if(s!==grid_size-1&&cages_by_location[s+1][g]!==e&&try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s+1][g]))a=cages_by_location[s+1][g];else if(0!==g&&cages_by_location[s][g-1]!==e&&try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s][g-1]))a=cages_by_location[s][g-1];else{if(g===grid_size-1||cages_by_location[s][g+1]===e||!try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s][g+1]))return;a=cages_by_location[s][g+1]}else if(0!==g&&cages_by_location[s][g-1]!==e&&try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s][g-1]))a=cages_by_location[s][g-1];else if(g!==grid_size-1&&cages_by_location[s][g+1]!==e&&try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s][g+1]))a=cages_by_location[s][g+1];else if(0!==s&&cages_by_location[s-1][g]!==e&&try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s-1][g]))a=cages_by_location[s-1][g];else{if(s===grid_size-1||cages_by_location[s+1][g]===e||!try_to_add_cage_to_cage(cages_by_location[s][g],cages_by_location[s+1][g]))return;a=cages_by_location[s+1][g]}add_cage_to_cage(e,a),cages.splice(e,1);for(let a=0;a<grid_size;a++)for(let s=0;s<grid_size;s++)cages_by_location[a][s]>e&&cages_by_location[a][s]--}function try_to_add_cage_to_cage(e,a){if(cages[a][2].length+cages[e][2].length>max_cage_size)return!1;if(""===cages[a][0])return!0;if("+"===cages[a][0])return!0;if("x"===cages[a][0])return!0;if("-"===cages[a][0]&&cages[a][4]+cages[e][4]<=2*Math.max(cages[a][3],cages[e][3]))return!0;if(":"===cages[a][0]){const s=Math.max(cages[a][3],cages[e][3]);if(s*s%(cages[a][5]*cages[e][5])==0)return!0}return!1}function add_cage_to_cage(e,a){if(""===cages[a][0]){let s=["+","x"],g=[cages[a][1]+cages[e][4],cages[a][1]*cages[e][5]];const c=Math.max(cages[a][1],cages[e][3]);if(2*c>=cages[a][1]+cages[e][4]&&(s.push("-"),g.push(2*c-(cages[a][1]+cages[e][4]))),c*c%(cages[a][1]*cages[e][5])==0&&(s.push(":"),g.push(c*c/(cages[a][1]*cages[e][5]))),s.includes(":")&&Math.random()<.5){let e=s.indexOf(":");cages[a][0]=s[e],cages[a][1]=g[e]}else{let e=Math.floor(Math.random()*s.length);cages[a][0]=s[e],cages[a][1]=g[e]}}else if("+"===cages[a][0])cages[a][1]+=cages[e][4];else if("x"===cages[a][0])cages[a][1]*=cages[e][5];else if("-"===cages[a][0])cages[a][1]=2*Math.max(cages[a][3],cages[e][3])-(cages[a][4]+cages[e][4]);else if(":"===cages[a][0]){const s=Math.max(cages[a][3],cages[e][3]),g=cages[a][5]*cages[e][5];cages[a][1]=s*s/g}cages[a][2]=cages[a][2].concat(cages[e][2]),cages[a][3]=Math.max(cages[a][3],cages[e][3]),cages[a][4]+=cages[e][4],cages[a][5]*=cages[e][5];for(let s=0;s<cages[e][2].length;s++){const g=cages[e][2][s][0],c=cages[e][2][s][1];cages_by_location[g][c]=a}}function wasm_solve_puzzle(){let e=[];const a={"":0,"+":1,x:2,"-":3,":":4};let s=[],g=[],c=[],_=[],i=[];for(let t=0;t<cages.length;t++)e[t]=a[cages[t][0]],s[t]=cages[t][1],g[t]=cages[t][2].length,c[t]=cages[t][3],_[t]=cages[t][4],i[t]=cages[t][5];let t=[];for(let e=0;e<grid_size;e++)t=t.concat(cages_by_location[e]);return ccallArrays("solve_puzzle","number",["number","array","array","array","array","array","array","array"],[grid_size,e,s,g,c,_,i,t],{heapIn:"HEAPU32"})}function pair_in_array(e,a){for(let s=0;s<a.length;s++)if(a[s][0]===e[0]&&a[s][1]===e[1])return s;return-1}
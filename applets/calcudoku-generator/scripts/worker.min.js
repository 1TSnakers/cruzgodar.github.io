"use strict";let gridSize=null,maxCageSize=null,grid=[],cages=[],cagesByLocation=[],numSolutionsFound=0;function generateCalcudokuGrid(){grid=[],cages=[],cagesByLocation=[],generateNumberGrid(),assignInitialCages();let cagesBackup=JSON.parse(JSON.stringify(cages)),cagesByLocationBackup=JSON.parse(JSON.stringify(cagesByLocation));for(;;){let expandedACage=!1;var cageOrder=shuffleArray([...Array(cages.length).keys()]);cageOrder.sort((a,b)=>cages[a][2].length-cages[b][2].length);for(let i=0;i<cageOrder.length;i++){if(-1!==expandCages(cageOrder[i])){expandedACage=!0;for(let j=0;j<cageOrder.length;j++)cageOrder[j]>=cages.length&&cageOrder[j]--}1!==(numSolutionsFound=wasmSolvePuzzle(cages))?(cages=JSON.parse(JSON.stringify(cagesBackup)),cagesByLocation=JSON.parse(JSON.stringify(cagesByLocationBackup)),numSolutionsFound=1):(cagesBackup=JSON.parse(JSON.stringify(cages)),cagesByLocationBackup=JSON.parse(JSON.stringify(cagesByLocation)),postMessage([grid,cages,cagesByLocation]))}if(!1===expandedACage)return}}function shuffleArray(array){let currentIndex=array.length;for(;0!==currentIndex;){var randomIndex=Math.floor(Math.random()*currentIndex),temp=array[--currentIndex];array[currentIndex]=array[randomIndex],array[randomIndex]=temp}return array}function generateNumberGrid(){grid=[];for(let i=0;i<gridSize;i++){grid[i]=[];for(let j=0;j<gridSize;j++)grid[i][j]=0}for(let i=0;i<gridSize;i++)for(let j=0;j<gridSize;j++)grid[i][j]=(j+i)%gridSize+1;var shuffles=shuffleArray([shuffleGridRows,shuffleGridRows,shuffleGridColumns,shuffleGridColumns,shuffleGridDigits,shuffleGridDigits]);for(let i=0;i<6;i++)shuffles[i]()}function shuffleGridRows(){var permutation=shuffleArray([...Array(gridSize).keys()]),tempGrid=[];for(let i=0;i<gridSize;i++){tempGrid[i]=[];for(let j=0;j<gridSize;j++)tempGrid[i][j]=0}for(let i=0;i<gridSize;i++)tempGrid[i]=JSON.parse(JSON.stringify(grid[permutation[i]]));grid=JSON.parse(JSON.stringify(tempGrid))}function shuffleGridColumns(){var permutation=shuffleArray([...Array(gridSize).keys()]),tempGrid=[];for(let i=0;i<gridSize;i++){tempGrid[i]=[];for(let j=0;j<gridSize;j++)tempGrid[i][j]=0}for(let i=0;i<gridSize;i++)for(let j=0;j<gridSize;j++)tempGrid[i][j]=grid[i][permutation[j]];grid=JSON.parse(JSON.stringify(tempGrid))}function shuffleGridDigits(){var permutation=shuffleArray([...Array(gridSize).keys()]),tempGrid=[];for(let i=0;i<gridSize;i++){tempGrid[i]=[];for(let j=0;j<gridSize;j++)tempGrid[i][j]=0}for(let i=0;i<gridSize;i++)for(let j=0;j<gridSize;j++)tempGrid[i][j]=permutation[grid[i][j]-1]+1;grid=JSON.parse(JSON.stringify(tempGrid))}function assignInitialCages(){cages=[],cagesByLocation=[],cagesByLocation=[];for(let i=0;i<gridSize;i++){cagesByLocation[i]=[];for(let j=0;j<gridSize;j++){var value=grid[i][j];cages.push(["",value,[[i,j]],value,value,value]),cagesByLocation[i][j]=cages.length-1}}}function expandCages(cageToDestroy){let cageThatGrew=null;var row=cages[cageToDestroy][2][0][0],col=cages[cageToDestroy][2][0][1];if(Math.random()<.5)if(0!==row&&cagesByLocation[row-1][col]!==cageToDestroy&&tryToAddCageToCage(cagesByLocation[row][col],cagesByLocation[row-1][col]))cageThatGrew=cagesByLocation[row-1][col];else if(row!==gridSize-1&&cagesByLocation[row+1][col]!==cageToDestroy&&tryToAddCageToCage(cagesByLocation[row][col],cagesByLocation[row+1][col]))cageThatGrew=cagesByLocation[row+1][col];else if(0!==col&&cagesByLocation[row][col-1]!==cageToDestroy&&tryToAddCageToCage(cagesByLocation[row][col],cagesByLocation[row][col-1]))cageThatGrew=cagesByLocation[row][col-1];else{if(col===gridSize-1||cagesByLocation[row][col+1]===cageToDestroy||!tryToAddCageToCage(cagesByLocation[row][col],cagesByLocation[row][col+1]))return;cageThatGrew=cagesByLocation[row][col+1]}else if(0!==col&&cagesByLocation[row][col-1]!==cageToDestroy&&tryToAddCageToCage(cagesByLocation[row][col],cagesByLocation[row][col-1]))cageThatGrew=cagesByLocation[row][col-1];else if(col!==gridSize-1&&cagesByLocation[row][col+1]!==cageToDestroy&&tryToAddCageToCage(cagesByLocation[row][col],cagesByLocation[row][col+1]))cageThatGrew=cagesByLocation[row][col+1];else if(0!==row&&cagesByLocation[row-1][col]!==cageToDestroy&&tryToAddCageToCage(cagesByLocation[row][col],cagesByLocation[row-1][col]))cageThatGrew=cagesByLocation[row-1][col];else{if(row===gridSize-1||cagesByLocation[row+1][col]===cageToDestroy||!tryToAddCageToCage(cagesByLocation[row][col],cagesByLocation[row+1][col]))return;cageThatGrew=cagesByLocation[row+1][col]}addCageToCage(cageToDestroy,cageThatGrew),cages.splice(cageToDestroy,1);for(let i=0;i<gridSize;i++)for(let j=0;j<gridSize;j++)cagesByLocation[i][j]>cageToDestroy&&cagesByLocation[i][j]--}function tryToAddCageToCage(cageToDestroy,cageToGrow){if(!(cages[cageToGrow][2].length+cages[cageToDestroy][2].length>maxCageSize)){if(""===cages[cageToGrow][0])return!0;if("+"===cages[cageToGrow][0])return!0;if("x"===cages[cageToGrow][0])return!0;if("-"===cages[cageToGrow][0]&&cages[cageToGrow][4]+cages[cageToDestroy][4]<=2*Math.max(cages[cageToGrow][3],cages[cageToDestroy][3]))return!0;if(":"===cages[cageToGrow][0]){var maxDigit=Math.max(cages[cageToGrow][3],cages[cageToDestroy][3]);if(maxDigit*maxDigit%(cages[cageToGrow][5]*cages[cageToDestroy][5])==0)return!0}}return!1}function addCageToCage(cageToDestroy,cageToGrow){if(""===cages[cageToGrow][0]){var possibleOperations=["+","x"],possibleValues=[cages[cageToGrow][1]+cages[cageToDestroy][4],cages[cageToGrow][1]*cages[cageToDestroy][5]],newMaxDigit=Math.max(cages[cageToGrow][1],cages[cageToDestroy][3]);if(2*newMaxDigit>=cages[cageToGrow][1]+cages[cageToDestroy][4]&&(possibleOperations.push("-"),possibleValues.push(2*newMaxDigit-(cages[cageToGrow][1]+cages[cageToDestroy][4]))),newMaxDigit*newMaxDigit%(cages[cageToGrow][1]*cages[cageToDestroy][5])==0&&(possibleOperations.push(":"),possibleValues.push(newMaxDigit*newMaxDigit/(cages[cageToGrow][1]*cages[cageToDestroy][5]))),possibleOperations.includes(":")&&Math.random()<.5){newMaxDigit=possibleOperations.indexOf(":");cages[cageToGrow][0]=possibleOperations[newMaxDigit],cages[cageToGrow][1]=possibleValues[newMaxDigit]}else{const operationIndex=Math.floor(Math.random()*possibleOperations.length);cages[cageToGrow][0]=possibleOperations[operationIndex],cages[cageToGrow][1]=possibleValues[operationIndex]}}else"+"===cages[cageToGrow][0]?cages[cageToGrow][1]+=cages[cageToDestroy][4]:"x"===cages[cageToGrow][0]?cages[cageToGrow][1]*=cages[cageToDestroy][5]:"-"===cages[cageToGrow][0]?cages[cageToGrow][1]=2*Math.max(cages[cageToGrow][3],cages[cageToDestroy][3])-(cages[cageToGrow][4]+cages[cageToDestroy][4]):":"===cages[cageToGrow][0]&&(newMaxDigit=Math.max(cages[cageToGrow][3],cages[cageToDestroy][3]),possibleOperations=cages[cageToGrow][5]*cages[cageToDestroy][5],cages[cageToGrow][1]=newMaxDigit*newMaxDigit/possibleOperations);cages[cageToGrow][2]=cages[cageToGrow][2].concat(cages[cageToDestroy][2]),cages[cageToGrow][3]=Math.max(cages[cageToGrow][3],cages[cageToDestroy][3]),cages[cageToGrow][4]+=cages[cageToDestroy][4],cages[cageToGrow][5]*=cages[cageToDestroy][5];for(let i=0;i<cages[cageToDestroy][2].length;i++){var row=cages[cageToDestroy][2][i][0],col=cages[cageToDestroy][2][i][1];cagesByLocation[row][col]=cageToGrow}}function wasmSolvePuzzle(){var cageOperations=[],cageOperationsTable={"":0,"+":1,x:2,"-":3,":":4},cageValues=[],cageLengths=[],cageMaxDigits=[],cageSums=[],cageProducts=[];for(let i=0;i<cages.length;i++)cageOperations[i]=cageOperationsTable[cages[i][0]],cageValues[i]=cages[i][1],cageLengths[i]=cages[i][2].length,cageMaxDigits[i]=cages[i][3],cageSums[i]=cages[i][4],cageProducts[i]=cages[i][5];let cagesByLocationFlat=[];for(let i=0;i<gridSize;i++)cagesByLocationFlat=cagesByLocationFlat.concat(cagesByLocation[i]);return ccallArrays("solve_puzzle","number",["number","array","array","array","array","array","array","array"],[gridSize,cageOperations,cageValues,cageLengths,cageMaxDigits,cageSums,cageProducts,cagesByLocationFlat],{heapIn:"HEAPU32"})}onmessage=e=>{gridSize=e.data[0],maxCageSize=e.data[1],importScripts("/applets/calcudoku-generator/scripts/solver.min.js"),Module.onRuntimeInitialized=function(){importScripts("/scripts/wasm-arrays.min.min.js"),generateCalcudokuGrid()}};
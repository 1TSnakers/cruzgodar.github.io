"use strict";onmessage=function(e){gridSize=e.data[0],maxCageSize=e.data[1],importScripts("/applets/calcudoku-generator/scripts/solver.js"),Module.onRuntimeInitialized=function(){importScripts("/scripts/wasm-arrays.min.js"),generateCalcudokuGrid()}};let gridSize=null,maxCageSize=null,grid=[],cages=[],cagesByLocation=[],numSolutionsFound=0;function generateCalcudokuGrid(){grid=[],cages=[],cagesByLocation=[],generateNumberGrid(),assignInitialCages();let e=JSON.parse(JSON.stringify(cages)),a=JSON.parse(JSON.stringify(cagesByLocation));for(;;){let g=!1,s=shuffleArray([...Array(cages.length).keys()]);s.sort((e,a)=>cages[e][2].length-cages[a][2].length);for(let i=0;i<s.length;i++){let c=s[i];if(-1!==expandCages(c)){g=!0;for(let r=0;r<s.length;r++)s[r]>=cages.length&&s[r]--}1!==(numSolutionsFound=wasmSolvePuzzle(cages))?(cages=JSON.parse(JSON.stringify(e)),cagesByLocation=JSON.parse(JSON.stringify(a)),numSolutionsFound=1):(e=JSON.parse(JSON.stringify(cages)),a=JSON.parse(JSON.stringify(cagesByLocation)),postMessage([grid,cages,cagesByLocation]))}if(!1===g)return}}function shuffleArray(e){let a=e.length;for(;0!==a;){let g=Math.floor(Math.random()*a),s=e[a-=1];e[a]=e[g],e[g]=s}return e}function generateNumberGrid(){grid=[];for(let e=0;e<gridSize;e++){grid[e]=[];for(let a=0;a<gridSize;a++)grid[e][a]=0}for(let g=0;g<gridSize;g++)for(let s=0;s<gridSize;s++)grid[g][s]=(s+g)%gridSize+1;let i=shuffleArray([shuffleGridRows,shuffleGridRows,shuffleGridColumns,shuffleGridColumns,shuffleGridDigits,shuffleGridDigits]);for(let c=0;c<6;c++)i[c]()}function shuffleGridRows(){let e=shuffleArray([...Array(gridSize).keys()]),a=[];for(let g=0;g<gridSize;g++){a[g]=[];for(let s=0;s<gridSize;s++)a[g][s]=0}for(let i=0;i<gridSize;i++)a[i]=JSON.parse(JSON.stringify(grid[e[i]]));grid=JSON.parse(JSON.stringify(a))}function shuffleGridColumns(){let e=shuffleArray([...Array(gridSize).keys()]),a=[];for(let g=0;g<gridSize;g++){a[g]=[];for(let s=0;s<gridSize;s++)a[g][s]=0}for(let i=0;i<gridSize;i++)for(let c=0;c<gridSize;c++)a[i][c]=grid[i][e[c]];grid=JSON.parse(JSON.stringify(a))}function shuffleGridDigits(){let e=shuffleArray([...Array(gridSize).keys()]),a=[];for(let g=0;g<gridSize;g++){a[g]=[];for(let s=0;s<gridSize;s++)a[g][s]=0}for(let i=0;i<gridSize;i++)for(let c=0;c<gridSize;c++)a[i][c]=e[grid[i][c]-1]+1;grid=JSON.parse(JSON.stringify(a))}function assignInitialCages(){cages=[],cagesByLocation=[],cagesByLocation=[];for(let e=0;e<gridSize;e++){cagesByLocation[e]=[];for(let a=0;a<gridSize;a++){let g=grid[e][a];cages.push(["",g,[[e,a]],g,g,g]),cagesByLocation[e][a]=cages.length-1}}}function expandCages(e){let a=null,g=cages[e][2][0][0],s=cages[e][2][0][1];if(.5>Math.random()){if(0!==g&&cagesByLocation[g-1][s]!==e&&tryToAddCageToCage(cagesByLocation[g][s],cagesByLocation[g-1][s]))a=cagesByLocation[g-1][s];else if(g!==gridSize-1&&cagesByLocation[g+1][s]!==e&&tryToAddCageToCage(cagesByLocation[g][s],cagesByLocation[g+1][s]))a=cagesByLocation[g+1][s];else if(0!==s&&cagesByLocation[g][s-1]!==e&&tryToAddCageToCage(cagesByLocation[g][s],cagesByLocation[g][s-1]))a=cagesByLocation[g][s-1];else{if(!(s!==gridSize-1&&cagesByLocation[g][s+1]!==e&&tryToAddCageToCage(cagesByLocation[g][s],cagesByLocation[g][s+1])))return;a=cagesByLocation[g][s+1]}}else if(0!==s&&cagesByLocation[g][s-1]!==e&&tryToAddCageToCage(cagesByLocation[g][s],cagesByLocation[g][s-1]))a=cagesByLocation[g][s-1];else if(s!==gridSize-1&&cagesByLocation[g][s+1]!==e&&tryToAddCageToCage(cagesByLocation[g][s],cagesByLocation[g][s+1]))a=cagesByLocation[g][s+1];else if(0!==g&&cagesByLocation[g-1][s]!==e&&tryToAddCageToCage(cagesByLocation[g][s],cagesByLocation[g-1][s]))a=cagesByLocation[g-1][s];else{if(!(g!==gridSize-1&&cagesByLocation[g+1][s]!==e&&tryToAddCageToCage(cagesByLocation[g][s],cagesByLocation[g+1][s])))return;a=cagesByLocation[g+1][s]}addCageToCage(e,a),cages.splice(e,1);for(let i=0;i<gridSize;i++)for(let c=0;c<gridSize;c++)cagesByLocation[i][c]>e&&cagesByLocation[i][c]--}function tryToAddCageToCage(e,a){if(cages[a][2].length+cages[e][2].length>maxCageSize)return!1;if(""===cages[a][0]||"+"===cages[a][0]||"x"===cages[a][0])return!0;if("-"===cages[a][0]&&cages[a][4]+cages[e][4]<=2*Math.max(cages[a][3],cages[e][3]))return!0;if(":"===cages[a][0]){let g=Math.max(cages[a][3],cages[e][3]),s=cages[a][5]*cages[e][5];if(g*g%s==0)return!0}return!1}function addCageToCage(e,a){if(""===cages[a][0]){let g=["+","x"],s=[cages[a][1]+cages[e][4],cages[a][1]*cages[e][5]],i=Math.max(cages[a][1],cages[e][3]);if(2*i>=cages[a][1]+cages[e][4]&&(g.push("-"),s.push(2*i-(cages[a][1]+cages[e][4]))),i*i%(cages[a][1]*cages[e][5])==0&&(g.push(":"),s.push(i*i/(cages[a][1]*cages[e][5]))),g.includes(":")&&.5>Math.random()){let c=g.indexOf(":");cages[a][0]=g[c],cages[a][1]=s[c]}else{let r=Math.floor(Math.random()*g.length);cages[a][0]=g[r],cages[a][1]=s[r]}}else if("+"===cages[a][0])cages[a][1]+=cages[e][4];else if("x"===cages[a][0])cages[a][1]*=cages[e][5];else if("-"===cages[a][0])cages[a][1]=2*Math.max(cages[a][3],cages[e][3])-(cages[a][4]+cages[e][4]);else if(":"===cages[a][0]){let o=Math.max(cages[a][3],cages[e][3]),t=cages[a][5]*cages[e][5];cages[a][1]=o*o/t}cages[a][2]=cages[a][2].concat(cages[e][2]),cages[a][3]=Math.max(cages[a][3],cages[e][3]),cages[a][4]+=cages[e][4],cages[a][5]*=cages[e][5];for(let n=0;n<cages[e][2].length;n++){let l=cages[e][2][n][0],f=cages[e][2][n][1];cagesByLocation[l][f]=a}}function wasmSolvePuzzle(){let e=[],a={"":0,"+":1,x:2,"-":3,":":4},g=[],s=[],i=[],c=[],r=[];for(let o=0;o<cages.length;o++)e[o]=a[cages[o][0]],g[o]=cages[o][1],s[o]=cages[o][2].length,i[o]=cages[o][3],c[o]=cages[o][4],r[o]=cages[o][5];let t=[];for(let n=0;n<gridSize;n++)t=t.concat(cagesByLocation[n]);return ccallArrays("solve_puzzle","number",["number","array","array","array","array","array","array","array"],[gridSize,e,g,s,i,c,r,t],{heapIn:"HEAPU32"})}function pairInArray(e,a){for(let g=0;g<a.length;g++)if(a[g][0]===e[0]&&a[g][1]===e[1])return g;return -1}
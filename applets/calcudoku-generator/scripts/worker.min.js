"use strict";onmessage=function(e){grid_size=e.data[0],max_cage_size=e.data[1],generate_calcudoku_grid(),postMessage(["done"])};let grid_size=null,max_cage_size=null,grid=[],cages=[],cages_by_location=[],num_solutions_found=0;function generate_calcudoku_grid(){for(grid=generate_number_grid(grid_size),cages=[],cages_by_location=[],num_solutions_found=0;1!=num_solutions_found;)solve_puzzle(cages=assign_initial_cages(grid));for(;1==num_solutions_found;){if(postMessage([grid,cages,cages_by_location]),-1===expand_cages(cages))break;solve_puzzle(cages)}}function generate_number_grid(){let e=[];for(let a=0;a<grid_size;a++){e[a]=[];for(let t=0;t<grid_size;t++)e[a][t]=0}let a=[];for(let e=0;e<grid_size;e++){a[e]=[];for(let t=0;t<grid_size;t++)a[e][t]=[...Array(grid_size).keys()].map(e=>e+1)}let t=[];for(let e=0;e<grid_size;e++)for(let a=0;a<grid_size;a++)t.push([e,a]);return generate_number_grid_step(e,a,t)}function generate_number_grid_step(e,a,t){if(0==t.length)return e;let s=t[Math.floor(Math.random()*t.length)],g=s[0],c=s[1];if(0==a[g][c].length)return!1;for(let s=0;s<a[g][c].length;s++){let _=JSON.parse(JSON.stringify(e)),i=JSON.parse(JSON.stringify(a)),l=JSON.parse(JSON.stringify(t));place_digit(_,i,l,g,c,a[g][c][s]);let o=generate_number_grid_step(_,i,l);if(!1!==o)return o}return!1}function assign_initial_cages(e){let a=[],t=[];for(let e=0;e<grid_size;e++)for(let a=0;a<grid_size;a++)t.push([e,a]);cages_by_location=[];for(let e=0;e<grid_size;e++){cages_by_location[e]=[];for(let a=0;a<grid_size;a++)cages_by_location[e][a]=-1}for(;t.length>0;){let e=Math.floor(Math.random()*t.length),s=t[e],g=s[0],c=s[1];if(Math.random()<.5){let e=pair_in_array([g-1,c],t);if(-1!=e)a.push(["",0,[s,[g-1,c]]]),cages_by_location[g][c]=a.length-1,cages_by_location[g-1][c]=a.length-1,t.splice(e,1);else{let e=pair_in_array([g+1,c],t);-1!=e?(a.push(["",0,[s,[g+1,c]]]),cages_by_location[g][c]=a.length-1,cages_by_location[g+1][c]=a.length-1,t.splice(e,1)):(a.push(["",0,[s]]),cages_by_location[g][c]=a.length-1)}}else{let e=pair_in_array([g,c-1],t);if(-1!=e)a.push(["",0,[s,[g,c-1]]]),cages_by_location[g][c]=a.length-1,cages_by_location[g][c-1]=a.length-1,t.splice(e,1);else{let e=pair_in_array([g,c+1],t);-1!=e?(a.push(["",0,[s,[g,c+1]]]),cages_by_location[g][c]=a.length-1,cages_by_location[g][c+1]=a.length-1,t.splice(e,1)):(a.push(["",0,[s]]),cages_by_location[g][c]=a.length-1)}}e=pair_in_array(s,t),t.splice(e,1)}for(let t=0;t<a.length;t++){let s=e[a[t][2][0][0]][a[t][2][0][1]],g=e[a[t][2][0][0]][a[t][2][0][1]],c=e[a[t][2][0][0]][a[t][2][0][1]];if(a[t][2].length>1&&(e[a[t][2][1][0]][a[t][2][1][1]]>s&&(s=e[a[t][2][1][0]][a[t][2][1][1]]),g+=e[a[t][2][1][0]][a[t][2][1][1]],c*=e[a[t][2][1][0]][a[t][2][1][1]]),a[t].push(s),a[t].push(g),a[t].push(c),1==a[t][2].length){a[t][1]=a[t][3];continue}let _=["+","x"],i=[a[t][4]];if(i.push(e[a[t][2][0][0]][a[t][2][0][1]]*e[a[t][2][1][0]][a[t][2][1][1]]),a[t][4]<=2*a[t][3]&&(_.push("-"),i.push(Math.abs(e[a[t][2][0][0]][a[t][2][0][1]]-e[a[t][2][1][0]][a[t][2][1][1]]))),a[t][3]%e[a[t][2][0][0]][a[t][2][0][1]]==0&&a[t][3]%e[a[t][2][1][0]][a[t][2][1][1]]==0&&(_.push(":"),i.push(a[t][3]*a[t][3]/i[1])),_.includes(":")&&Math.random()<.5){let e=_.indexOf(":");a[t][0]=_[e],a[t][1]=i[e]}else{let e=Math.floor(Math.random()*_.length);a[t][0]=_[e],a[t][1]=i[e]}}return a}function expand_cages(){let e=cages.length-1;for(;void 0!==cages[e][6];)if(-1==--e)return-1;let a=null,t=cages[e][2][0][0],s=cages[e][2][0][1];if(Math.random()<.5)if(0!=t&&cages_by_location[t-1][s]!=e&&try_to_add_cage_to_cage(cages_by_location[t][s],cages_by_location[t-1][s]))a=cages_by_location[t-1][s];else if(t!=grid_size-1&&cages_by_location[t+1][s]!=e&&try_to_add_cage_to_cage(cages_by_location[t][s],cages_by_location[t+1][s]))a=cages_by_location[t+1][s];else if(0!=s&&cages_by_location[t][s-1]!=e&&try_to_add_cage_to_cage(cages_by_location[t][s],cages_by_location[t][s-1]))a=cages_by_location[t][s-1];else{if(s==grid_size-1||cages_by_location[t][s+1]==e||!try_to_add_cage_to_cage(cages_by_location[t][s],cages_by_location[t][s+1]))return void cages[e].push(!0);a=cages_by_location[t][s+1]}else if(0!=s&&cages_by_location[t][s-1]!=e&&try_to_add_cage_to_cage(cages_by_location[t][s],cages_by_location[t][s-1]))a=cages_by_location[t][s-1];else if(s!=grid_size-1&&cages_by_location[t][s+1]!=e&&try_to_add_cage_to_cage(cages_by_location[t][s],cages_by_location[t][s+1]))a=cages_by_location[t][s+1];else if(0!=t&&cages_by_location[t-1][s]!=e&&try_to_add_cage_to_cage(cages_by_location[t][s],cages_by_location[t-1][s]))a=cages_by_location[t-1][s];else{if(t==grid_size-1||cages_by_location[t+1][s]==e||!try_to_add_cage_to_cage(cages_by_location[t][s],cages_by_location[t+1][s]))return void cages[e].push(!0);a=cages_by_location[t+1][s]}add_cage_to_cage(e,a),cages.splice(e,1);for(let a=0;a<grid_size;a++)for(let t=0;t<grid_size;t++)cages_by_location[a][t]>e&&cages_by_location[a][t]--;console.log("Added cage "+e+" to cage "+a)}function try_to_add_cage_to_cage(e,a){if(cages[a][2].length+cages[e][2].length>max_cage_size)return!1;if("+"===cages[a][0])return!0;if("x"===cages[a][0])return!0;if("-"===cages[a][0]&&cages[a][4]+cages[e][4]<=2*Math.max(cages[a][3],cages[e][3]))return!0;if(":"===cages[a][0]){let t=Math.max(cages[a][3],cages[e][3]);if(t*t%(cages[a][5]*cages[e][5])==0)return!0}return!1}function add_cage_to_cage(e,a){if("+"===cages[a][0])cages[a][1]+=cages[e][4];else if("x"===cages[a][0])cages[a][1]*=cages[e][5];else if("-"===cages[a][0])cages[a][1]=2*Math.max(cages[a][3],cages[e][3])-(cages[a][4]+cages[e][4]);else if(":"===cages[a][0]){let t=Math.max(cages[a][3],cages[e][3]),s=cages[a][5]*cages[e][5];cages[a][1]=t*t/s}cages[a][2]=cages[a][2].concat(cages[e][2]),cages[a][3]=Math.max(cages[a][3],cages[e][3]),cages[a][4]+=cages[e][4],cages[a][5]*=cages[e][5];for(let t=0;t<cages[e][2].length;t++){let s=cages[e][2][t][0],g=cages[e][2][t][1];cages_by_location[s][g]=a}}function solve_puzzle(e){let a=[];for(let e=0;e<grid_size;e++){a[e]=[];for(let t=0;t<grid_size;t++)a[e][t]=0}let t=[];for(let e=0;e<grid_size;e++){t[e]=[];for(let a=0;a<grid_size;a++)t[e][a]=[...Array(grid_size).keys()].map(e=>e+1)}let s=[];for(let e=0;e<grid_size;e++)for(let a=0;a<grid_size;a++)s.push([e,a]);for(let g=0;g<e.length;g++)if(""===e[g][0])place_digit(a,t,s,e[g][2][0][0],e[g][2][0][1],e[g][1]);else if("+"===e[g][0]){let a=e[g][4]-e[g][2].length+1;for(let s=0;s<e[g][2].length;s++){let c=e[g][2][s][0],_=e[g][2][s][1];for(let e=a+1;e<=grid_size;e++){let a=t[c][_].indexOf(e);-1!=a&&t[c][_].splice(a,1)}}}else if("x"===e[g][0])for(let a=0;a<e[g][2].length;a++){let s=e[g][2][a][0],c=e[g][2][a][1];for(let a=2;a<=grid_size;a++)if(e[g][5]%a!=0){let e=t[s][c].indexOf(a);-1!=e&&t[s][c].splice(e,1)}}num_solutions_found=0,solve_puzzle_step(a,t,s)}function solve_puzzle_step(e,a,t){if(0==t.length)return num_solutions_found++,!0;let s=1e3,g=0;for(let e=0;e<t.length;e++){let c=t[e][0],_=t[e][1];a[c][_].length<s&&(s=a[c][_].length,g=[c,_])}let c=g[0],_=g[1];if(0!=a[c][_].length)for(let s=0;s<a[c][_].length;s++){let g=JSON.parse(JSON.stringify(e)),i=JSON.parse(JSON.stringify(a)),l=JSON.parse(JSON.stringify(t));if(place_digit(g,i,l,c,_,a[c][_][s]),!1!==check_cage(g,cages_by_location[c][_])&&(solve_puzzle_step(g,i,l),num_solutions_found>1))return}}function check_cage(e,a){for(let t=0;t<cages[a][2].length;t++){let s=cages[a][2][t][0],g=cages[a][2][t][1];if(0==e[s][g])return!0}if("+"==cages[a][0]){let t=0;for(let s=0;s<cages[a][2].length;s++){let g=cages[a][2][s][0],c=cages[a][2][s][1];t+=e[g][c]}if(t!=cages[a][1])return!1}else if("x"==cages[a][0]){let t=1;for(let s=0;s<cages[a][2].length;s++){let g=cages[a][2][s][0],c=cages[a][2][s][1];t*=e[g][c]}if(t!=cages[a][1])return!1}else if("-"==cages[a][0]){let t=0;for(let s=0;s<cages[a][2].length;s++){let g=cages[a][2][s][0],c=cages[a][2][s][1];t+=e[g][c]}if(2*cages[a][3]-t!=cages[a][1])return!1}else if(":"==cages[a][0]){let t=1;for(let s=0;s<cages[a][2].length;s++){let g=cages[a][2][s][0],c=cages[a][2][s][1];t*=e[g][c]}if(cages[a][3]*cages[a][3]/t!=cages[a][1])return!1}return!0}function place_digit(e,a,t,s,g,c){e[s][g]=c;for(let e=0;e<grid_size;e++){let t=a[s][e].indexOf(c);-1!=t&&a[s][e].splice(t,1),-1!=(t=a[e][g].indexOf(c))&&a[e][g].splice(t,1)}a[s][g]=[c];let _=pair_in_array([s,g],t);-1!=_&&t.splice(_,1)}function pair_in_array(e,a){for(let t=0;t<a.length;t++)if(a[t][0]==e[0]&&a[t][1]==e[1])return t;return-1}
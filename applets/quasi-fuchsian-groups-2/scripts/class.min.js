"use strict";class QuasiFuchsianGroup extends Applet{resolution=500;coefficients=[[[1,0],[0,0],[0,-2],[1,0]],[[1,-1],[1,0],[1,0],[1,1]],[[1,0],[0,0],[0,2],[1,0]],[[1,1],[-1,0],[-1,0],[1,-1]]];last_timestamp=-1;update_resolution=243;update_texture=null;update_canvas=null;wilson_update=null;constructor(t){super(t),this.update_canvas=document.createElement("canvas"),this.update_canvas.classList.add("output-canvas"),this.hidden_canvases.push(this.update_canvas),Page.element.appendChild(this.update_canvas);let i=`
   precision highp float;
   precision highp int;
   precision highp sampler2D;
   
   varying vec2 uv;
   
   uniform sampler2D u_texture;
   
   const float resolution = 243.0;
   
   const vec2 m0a = vec2(1.0, 0.0);
   const vec2 m0b = vec2(0.0, 0.0);
   const vec2 m0c = vec2(0.0, -2.0);
   const vec2 m0d = vec2(1.0, 0.0);
   
   const vec2 m1a = vec2(1.0, -1.0);
   const vec2 m1b = vec2(1.0, 0.0);
   const vec2 m1c = vec2(1.0, 0.0);
   const vec2 m1d = vec2(1.0, 1.0);
   
   const vec2 m2a = vec2(1.0, 0.0);
   const vec2 m2b = vec2(0.0, 0.0);
   const vec2 m2c = vec2(0.0, 2.0);
   const vec2 m2d = vec2(1.0, 0.0);
   
   const vec2 m3a = vec2(1.0, 1.0);
   const vec2 m3b = vec2(-1.0, 0.0);
   const vec2 m3c = vec2(-1.0, -2.0);
   const vec2 m3d = vec2(1.0, -1.0);
   
   
   
   //Don't know how, but this writes an honest float32 to the 32 bits of output, which JS then decodes.
   
   float shift_right(float v, float amt)
   {
    v = floor(v) + 0.5;
    return floor(v / exp2(amt));
   }
   
   float shift_left(float v, float amt)
   {
    return floor(v * exp2(amt) + 0.5);
   }
   
   float mask_last(float v, float bits)
   {
    return mod(v, shift_left(1.0, bits));
   }
   
   float extract_bits(float num, float from, float to)
   {
    from = floor(from + 0.5); to = floor(to + 0.5);
    return mask_last(shift_right(num, from), to - from);
   }
   
   vec4 encode_float(float val)
   {
    if (val == 0.0) return vec4(0, 0, 0, 0);
    float sign = val > 0.0 ? 0.0 : 1.0;
    val = abs(val);
    float exponent = floor(log2(val));
    float biased_exponent = exponent + 127.0;
    float fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0;
    float t = biased_exponent / 2.0;
    float last_bit_of_biased_exponent = fract(t) * 2.0;
    float remaining_bits_of_biased_exponent = floor(t);
    float byte4 = extract_bits(fraction, 0.0, 8.0) / 255.0;
    float byte3 = extract_bits(fraction, 8.0, 16.0) / 255.0;
    float byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)) / 255.0;
    float byte1 = (sign * 128.0 + remaining_bits_of_biased_exponent) / 255.0; 
    return vec4(byte4, byte3, byte2, byte1);
   }
   
   
   
   vec2 cmul(vec2 z, vec2 w)
   {
    return vec2(z.x * w.x - z.y * w.y, z.x * w.y + z.y * w.x);
   }
   
   vec2 cdiv(vec2 z, vec2 w)
   {
    float len_w = w.x * w.x + w.y * w.y;
    
    if (len_w == 0.0)
    {
     return vec2(1.0, 0.0);
    }
    
    return vec2(z.x * w.x + z.y * w.y, -z.x * w.y + z.y * w.x) / len_w;
   }
   
   void m0(inout vec2 a, inout vec2 b, inout vec2 c, inout vec2 d)
   {
    vec2 new_a = cmul(m0a, a) + cmul(m0b, c);
    vec2 new_b = cmul(m0a, b) + cmul(m0b, d);
    vec2 new_c = cmul(m0c, a) + cmul(m0d, c);
    d = cmul(m0c, b) + cmul(m0d, d);
    
    a = new_a;
    b = new_b;
    c = new_c;
   }
   
   void m1(inout vec2 a, inout vec2 b, inout vec2 c, inout vec2 d)
   {
    vec2 new_a = cmul(m1a, a) + cmul(m1b, c);
    vec2 new_b = cmul(m1a, b) + cmul(m1b, d);
    vec2 new_c = cmul(m1c, a) + cmul(m1d, c);
    d = cmul(m1c, b) + cmul(m1d, d);
    
    a = new_a;
    b = new_b;
    c = new_c;
   }
   
   void m2(inout vec2 a, inout vec2 b, inout vec2 c, inout vec2 d)
   {
    vec2 new_a = cmul(m2a, a) + cmul(m2b, c);
    vec2 new_b = cmul(m2a, b) + cmul(m2b, d);
    vec2 new_c = cmul(m2c, a) + cmul(m2d, c);
    d = cmul(m2c, b) + cmul(m2d, d);
    
    a = new_a;
    b = new_b;
    c = new_c;
   }
   
   void m3(inout vec2 a, inout vec2 b, inout vec2 c, inout vec2 d)
   {
    vec2 new_a = cmul(m3a, a) + cmul(m3b, c);
    vec2 new_b = cmul(m3a, b) + cmul(m3b, d);
    vec2 new_c = cmul(m3c, a) + cmul(m3d, c);
    d = cmul(m3c, b) + cmul(m3d, d);
    
    a = new_a;
    b = new_b;
    c = new_c;
   }
   
   
   
   void main(void)
   {
    vec2 location = (uv + vec2(1.0, 1.0)) / 2.0;
    
    vec4 state = vec4(0.0, 0.0, 0.0, 0.0);//texture2D(u_texture, location);
    
    vec2 z = state.xy;
    int m = int(state.z);
    
    location *= resolution;
    
    int m_string[10];
    
    vec2 a = vec2(1.0, 0.0);
    vec2 b = vec2(0.0, 0.0);
    vec2 c = vec2(0.0, 0.0);
    vec2 d = vec2(1.0, 0.0);
    
    m_string[0] = int(mod(floor(location.x / 81.0), 3.0));
    m_string[1] = int(mod(floor(location.x / 27.0), 3.0));
    m_string[2] = int(mod(floor(location.x / 9.0), 3.0));
    m_string[3] = int(mod(floor(location.x / 3.0), 3.0));
    m_string[4] = int(mod(floor(location.x), 3.0));
    
    m_string[5] = int(mod(floor(location.y / 81.0), 3.0));
    m_string[6] = int(mod(floor(location.y / 27.0), 3.0));
    m_string[7] = int(mod(floor(location.y / 9.0), 3.0));
    m_string[8] = int(mod(floor(location.y / 3.0), 3.0));
    m_string[9] = int(mod(floor(location.y), 3.0));
    
    
    
    for (int i = 0; i < 10; i++)
    {
     m = int(mod(float(m) + float(m_string[i]) + 1.0, 4.0));
     
     if (m == 0)
     {
      m0(a, b, c, d);
     }
     
     else if (m == 1)
     {
      m1(a, b, c, d);
     }
     
     else if (m == 2)
     {
      m2(a, b, c, d);
     }
     
     else
     {
      m3(a, b, c, d);
     }
    }
    
    z = cdiv(cmul(a, z) + b, cmul(c, z) + d);
  `,e=`
   ${i}
    
    gl_FragColor = encode_float(z.x);
   }
  `,s=`
   ${i}
    
    gl_FragColor = encode_float(z.y);
   }
  `,o={renderer:"gpu",shader:e,canvas_width:this.update_resolution,canvas_height:this.update_resolution};this.wilson_update=new Wilson(this.update_canvas,o),this.wilson_update.render.load_new_shader(s);let l=`
   precision highp float;
   precision highp sampler2D;
   
   varying vec2 uv;
   
   uniform sampler2D u_texture;
   
   
   
   void main(void)
   {
    gl_FragColor = texture2D(u_texture, (uv + vec2(1.0, 1.0)) / 2.0);
   }
  `,n={renderer:"gpu",shader:l,canvas_width:this.resolution,canvas_height:this.resolution};this.wilson=new Wilson(t,n),this.run()}run(t=500){this.resolution=t,this.wilson.change_canvas_size(this.resolution,this.resolution),window.requestAnimationFrame(this.draw_frame.bind(this))}draw_frame(t){try{let i=t-this.last_timestamp;if(this.last_timestamp=t,0===i)return;if(this.num_particles<this.max_particles){let e=Math.min(Math.ceil(this.max_particles/80),this.max_particles-this.num_particles);for(let s=this.free_particle_slots.length-e;s<this.free_particle_slots.length;s++)this.create_particle(this.free_particle_slots[s]);this.free_particle_slots.splice(this.free_particle_slots.length-e,e)}if(this.last_pan_velocities_x.push(this.next_pan_velocity_x),this.last_pan_velocities_y.push(this.next_pan_velocity_y),this.last_pan_velocities_x.shift(),this.last_pan_velocities_y.shift(),0!==this.next_pan_velocity_x||0!==this.next_pan_velocity_y){let o=-this.next_pan_velocity_x,l=-this.next_pan_velocity_y;1>Math.abs(o/this.wilson.world_width*this.wilson.canvas_width)?o=0:this.next_pan_velocity_x=0,1>Math.abs(l/this.wilson.world_height*this.wilson.canvas_height)?l=0:this.next_pan_velocity_y=0,(0!==o||0!==l)&&(this.pan_grid(o,l),this.wilson.world_center_y-=l,this.wilson.world_center_x-=o)}else if(0!==this.pan_velocity_x||0!==this.pan_velocity_y){let n=-this.pan_velocity_x,a=-this.pan_velocity_y;1>Math.abs(n/this.wilson.world_width*this.wilson.canvas_width)&&(n=0),1>Math.abs(a/this.wilson.world_height*this.wilson.canvas_height)&&(a=0),this.pan_grid(n,a),this.wilson.world_center_y-=a,this.pan_velocity_y*=this.pan_friction,this.wilson.world_center_x-=n,this.pan_velocity_x*=this.pan_friction,this.pan_velocity_x*this.pan_velocity_x+this.pan_velocity_y*this.pan_velocity_y<this.pan_velocity_stop_threshhold*this.pan_velocity_stop_threshhold&&(this.pan_velocity_x=0,this.pan_velocity_y=0)}this.last_zoom_velocities.push(this.next_zoom_velocity),this.last_zoom_velocities.shift(),0!==this.next_zoom_velocity&&(this.zoom_canvas(),this.zoom_grid(this.fixed_point_x,this.fixed_point_y,this.next_zoom_velocity),this.next_zoom_velocity=0),0!==this.zoom_velocity&&(this.zoom_canvas(this.fixed_point_x,this.fixed_point_y),this.zoom_grid(this.fixed_point_x,this.fixed_point_y,this.zoom_velocity),this.zoom_level=Math.min(Math.max(this.zoom_level+this.zoom_velocity,-3),3),this.zoom_velocity*=this.zoom_friction,Math.abs(this.zoom_velocity)<this.zoom_velocity_stop_threshhold&&(this.zoom_velocity=0)),this.update_particles(),this.draw_field(),this.animation_paused||window.requestAnimationFrame(this.draw_frame.bind(this))}catch(h){this.generate_new_field()}}create_particle(t){this.particles[t][0]=this.wilson.world_center_x+this.wilson.world_width*(Math.random()-.5),this.particles[t][1]=this.wilson.world_center_y+this.wilson.world_height*(Math.random()-.5),this.particles[t][2]=Math.round(this.lifetime*(.5*Math.random()+.75)),this.num_particles++}destroy_particle(t){this.particles[t][2]=0,this.free_particle_slots.push(t),this.num_particles--}update_particles(){for(let t=0;t<this.wilson_update.canvas_height;t++)for(let i=0;i<this.wilson_update.canvas_width;i++){let e=this.wilson_update.canvas_width*t+i;e<this.particles.length&&this.particles[e][2]?(this.update_texture[4*e]=this.particles[e][0],this.update_texture[4*e+1]=this.particles[e][1],this.update_texture[4*e+2]=1):this.update_texture[4*e+2]=0}this.wilson_update.gl.texImage2D(this.wilson_update.gl.TEXTURE_2D,0,this.wilson_update.gl.RGBA,this.wilson_update.canvas_width,this.wilson_update.canvas_height,0,this.wilson_update.gl.RGBA,this.wilson_update.gl.FLOAT,this.update_texture),this.wilson_update.gl.useProgram(this.wilson_update.render.shader_programs[0]),this.wilson_update.render.draw_frame();let s=new Float32Array(this.wilson_update.render.get_pixel_data().buffer);this.wilson_update.gl.useProgram(this.wilson_update.render.shader_programs[1]),this.wilson_update.render.draw_frame();let o=new Float32Array(this.wilson_update.render.get_pixel_data().buffer);this.wilson_update.gl.useProgram(this.wilson_update.render.shader_programs[2]),this.wilson_update.render.draw_frame();let l=new Float32Array(this.wilson_update.render.get_pixel_data().buffer);this.wilson_update.gl.useProgram(this.wilson_update.render.shader_programs[3]),this.wilson_update.render.draw_frame();let n=new Float32Array(this.wilson_update.render.get_pixel_data().buffer);for(let a=0;a<this.wilson_update.canvas_height;a++)for(let h=0;h<this.wilson_update.canvas_width;h++){let c=this.wilson_update.canvas_width*a+h;if(c<this.particles.length&&this.particles[c][2]){this.particles[c][0]=s[c],this.particles[c][1]=o[c];let r=Math.round((.5-(this.particles[c][1]-this.wilson.world_center_y)/this.wilson.world_height)*this.wilson.canvas_height),d=Math.round(((this.particles[c][0]-this.wilson.world_center_x)/this.wilson.world_width+.5)*this.wilson.canvas_width);if(r>=0&&r<this.wilson.canvas_height&&d>=0&&d<this.wilson.canvas_width){let m=r*this.wilson.canvas_width+d;this.dim_texture[4*m]=this.lifetime,this.dim_texture[4*m+1]=255*l[c],this.dim_texture[4*m+2]=255*n[c],this.particles[c][2]--,this.particles[c][2]<=0&&this.destroy_particle(c)}else this.destroy_particle(c)}}}draw_field(){this.wilson_dim.gl.texImage2D(this.wilson_dim.gl.TEXTURE_2D,0,this.wilson_dim.gl.RGBA,this.wilson_dim.canvas_width,this.wilson_dim.canvas_height,0,this.wilson_dim.gl.RGBA,this.wilson_dim.gl.UNSIGNED_BYTE,this.dim_texture),this.wilson_dim.render.draw_frame(),this.dim_texture=this.wilson_dim.render.get_pixel_data(),this.wilson.gl.texImage2D(this.wilson.gl.TEXTURE_2D,0,this.wilson.gl.RGBA,this.wilson.canvas_width,this.wilson.canvas_height,0,this.wilson.gl.RGBA,this.wilson.gl.UNSIGNED_BYTE,this.dim_texture),this.wilson.render.draw_frame()}pan_grid(t,i){this.wilson_dim.gl.useProgram(this.wilson_dim.render.shader_programs[1]),this.wilson_dim.gl.uniform2f(this.wilson_dim.uniforms.pan[1],t/this.wilson.world_width,-i/this.wilson.world_height),this.draw_field(),this.wilson_dim.gl.useProgram(this.wilson_dim.render.shader_programs[0])}zoom_grid(t,i,e){if(this.zoom_level<=-3||this.zoom_level>=3)return;let s=(t-this.wilson.world_center_x)/this.wilson.world_width+.5,o=(this.wilson.world_center_y-i)/this.wilson.world_height+.5;if(this.wilson_dim.gl.useProgram(this.wilson_dim.render.shader_programs[2]),this.wilson_dim.gl.uniform1f(this.wilson_dim.uniforms.scale[2],Math.pow(2,e)),this.wilson_dim.gl.uniform2f(this.wilson_dim.uniforms.fixed_point[2],s,o),this.draw_field(),this.wilson_dim.gl.useProgram(this.wilson_dim.render.shader_programs[0]),e>0){let l=Math.pow(2,1.5*e);for(let n=0;n<this.particles.length;n++)this.particles[n][2]&&n%l>=1&&this.destroy_particle(n)}}on_grab_canvas(t,i,e){this.pan_velocity_x=0,this.pan_velocity_y=0,this.zoom_velocity=0,this.last_pan_velocities_x=[0,0,0,0],this.last_pan_velocities_y=[0,0,0,0],this.last_zoom_velocities=[0,0,0,0]}on_drag_canvas(t,i,e,s,o){this.next_pan_velocity_x+=-e,this.next_pan_velocity_y+=-s}on_release_canvas(t,i,e){let s=0;this.last_pan_velocities_x.forEach((t,i)=>{Math.abs(t)>this.pan_velocity_x&&(this.pan_velocity_x=Math.abs(t),s=i)}),this.pan_velocity_x<this.pan_velocity_start_threshhold?this.pan_velocity_x=0:this.pan_velocity_x=this.last_pan_velocities_x[s],this.last_pan_velocities_y.forEach((t,i)=>{Math.abs(t)>this.pan_velocity_y&&(this.pan_velocity_y=Math.abs(t),s=i)}),this.pan_velocity_y<this.pan_velocity_start_threshhold?this.pan_velocity_y=0:this.pan_velocity_y=this.last_pan_velocities_y[s],this.last_zoom_velocities.forEach((t,i)=>{Math.abs(t)>this.zoom_velocity&&(this.zoom_velocity=Math.abs(t),s=i)}),this.zoom_velocity<this.zoom_velocity_start_threshhold?this.zoom_velocity=0:this.zoom_velocity=this.last_zoom_velocities[s]}on_wheel_canvas(t,i,e,s){this.fixed_point_x=t,this.fixed_point_y=i,.3>Math.abs(e/100)?(this.next_zoom_velocity=e/100,this.zoom_level=Math.min(Math.max(this.zoom_level+e/100,-3),3)):this.zoom_velocity+=.05*Math.sign(e)}on_pinch_canvas(t,i,e,s){let o;o=this.aspect_ratio>=1?e/this.wilson.world_width*10:e/this.wilson.world_height*10,this.zoom_level=Math.min(Math.max(this.zoom_level-o,-3),3),this.next_zoom_velocity=-o,this.fixed_point_x=t,this.fixed_point_y=i}zoom_canvas(){if(this.aspect_ratio>=1){let t=this.wilson.input.get_zoomed_world_center(this.fixed_point_x,this.fixed_point_y,4*Math.pow(2,this.zoom_level)*this.aspect_ratio,4*Math.pow(2,this.zoom_level));this.wilson.world_width=4*Math.pow(2,this.zoom_level)*this.aspect_ratio,this.wilson.world_height=4*Math.pow(2,this.zoom_level),this.wilson.world_center_x=t[0],this.wilson.world_center_y=t[1]}else{let i=this.wilson.input.get_zoomed_world_center(this.fixed_point_x,this.fixed_point_y,4*Math.pow(2,this.zoom_level),4*Math.pow(2,this.zoom_level)/this.aspect_ratio);this.wilson.world_width=4*Math.pow(2,this.zoom_level),this.wilson.world_height=4*Math.pow(2,this.zoom_level)/this.aspect_ratio,this.wilson.world_center_x=i[0],this.wilson.world_center_y=i[1]}}change_aspect_ratio(){this.wilson.fullscreen.currently_fullscreen?(this.aspect_ratio=window.innerWidth/window.innerHeight,this.aspect_ratio>=1?(this.wilson.change_canvas_size(Math.ceil(this.resolution*this.aspect_ratio),this.resolution),this.wilson_dim.change_canvas_size(Math.ceil(this.resolution*this.aspect_ratio),this.resolution),this.wilson.world_width=4*Math.pow(2,this.zoom_level)*this.aspect_ratio,this.wilson.world_height=4*Math.pow(2,this.zoom_level)):(this.wilson.change_canvas_size(this.resolution,Math.ceil(this.resolution/this.aspect_ratio)),this.wilson_dim.change_canvas_size(this.resolution,Math.ceil(this.resolution/this.aspect_ratio)),this.wilson.world_width=4*Math.pow(2,this.zoom_level),this.wilson.world_height=4*Math.pow(2,this.zoom_level)/this.aspect_ratio)):(this.aspect_ratio=1,this.wilson.change_canvas_size(this.resolution,this.resolution),this.wilson_dim.change_canvas_size(this.resolution,this.resolution),this.wilson.world_width=4*Math.pow(2,this.zoom_level),this.wilson.world_height=4*Math.pow(2,this.zoom_level))}handle_resize_event(){this.wilson.fullscreen.currently_fullscreen&&this.generate_new_field()}}
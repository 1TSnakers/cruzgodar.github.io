"use strict";class QuasiFuchsianGroup extends Applet{resolution=500;computations_per_frame=25;max_brightness=1;max_depth=100;particles=[];last_timestamp=-1;update_resolution=81;update_texture=null;update_canvas=null;wilson_update=null;draw_texture=null;constructor(t){super(t),this.update_canvas=document.createElement("canvas"),this.update_canvas.classList.add("hidden-canvas"),this.hidden_canvases.push(this.update_canvas),Page.element.appendChild(this.update_canvas);let e=`
   precision highp float;
   precision highp int;
   
   varying vec2 uv;
   
   uniform vec2 start_z;
   uniform int last_m;
   
   const float resolution = 81.0;
   
   uniform mat2 m0a;
   uniform mat2 m0b;
   
   uniform mat2 m1a;
   uniform mat2 m1b;
   
   uniform mat2 m2a;
   uniform mat2 m2b;
   
   uniform mat2 m3a;
   uniform mat2 m3b;
   
   
   
   //Don't know how, but this writes an honest float32 to the 32 bits of output, which JS then decodes.
   
   float shift_right(float v, float amt)
   {
    v = floor(v) + 0.5;
    return floor(v / exp2(amt));
   }
   
   float shift_left(float v, float amt)
   {
    return floor(v * exp2(amt) + 0.5);
   }
   
   float mask_last(float v, float bits)
   {
    return mod(v, shift_left(1.0, bits));
   }
   
   float extract_bits(float num, float from, float to)
   {
    from = floor(from + 0.5); to = floor(to + 0.5);
    return mask_last(shift_right(num, from), to - from);
   }
   
   vec4 encode_float(float val)
   {
    if (val == 0.0) return vec4(0, 0, 0, 0);
    float sign = val > 0.0 ? 0.0 : 1.0;
    val = abs(val);
    float exponent = floor(log2(val));
    float biased_exponent = exponent + 127.0;
    float fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0;
    float t = biased_exponent / 2.0;
    float last_bit_of_biased_exponent = fract(t) * 2.0;
    float remaining_bits_of_biased_exponent = floor(t);
    float byte4 = extract_bits(fraction, 0.0, 8.0) / 255.0;
    float byte3 = extract_bits(fraction, 8.0, 16.0) / 255.0;
    float byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)) / 255.0;
    float byte1 = (sign * 128.0 + remaining_bits_of_biased_exponent) / 255.0; 
    return vec4(byte4, byte3, byte2, byte1);
   }
   
   
   
   vec2 cmul(vec2 z, vec2 w)
   {
    return vec2(z.x * w.x - z.y * w.y, z.x * w.y + z.y * w.x);
   }
   
   vec2 cdiv(vec2 z, vec2 w)
   {
    float len_w = w.x * w.x + w.y * w.y;
    
    if (len_w == 0.0)
    {
     return vec2(1.0, 0.0);
    }
    
    return vec2(z.x * w.x + z.y * w.y, -z.x * w.y + z.y * w.x) / len_w;
   }
   
   void m0(inout mat2 a, inout mat2 b)
   {
    mat2 temp = m0a * a - m0b * b;
    b = m0a * b + m0b * a;
    a = temp;
   }
   
   void m1(inout mat2 a, inout mat2 b)
   {
    mat2 temp = m1a * a - m1b * b;
    b = m1a * b + m1b * a;
    a = temp;
   }
   
   void m2(inout mat2 a, inout mat2 b)
   {
    mat2 temp = m2a * a - m2b * b;
    b = m2a * b + m2b * a;
    a = temp;
   }
   
   void m3(inout mat2 a, inout mat2 b)
   {
    mat2 temp = m3a * a - m3b * b;
    b = m3a * b + m3b * a;
    a = temp;
   }
   
   
   
   void main(void)
   {
    vec2 location = (uv + vec2(1.0, 1.0)) / 2.0 * resolution;
    
    vec2 z = start_z;
    int m = last_m;
    
    int m_string[10];
    
    mat2 a = mat2(1.0, 0.0, 0.0, 1.0);
    mat2 b = mat2(0.0, 0.0, 0.0, 0.0);
    
    m_string[0] = int(mod(floor(location.x / 27.0), 3.0));
    m_string[1] = int(mod(floor(location.x / 9.0), 3.0));
    m_string[2] = int(mod(floor(location.x / 3.0), 3.0));
    m_string[3] = int(mod(floor(location.x), 3.0));
    
    m_string[4] = int(mod(floor(location.y / 27.0), 3.0));
    m_string[5] = int(mod(floor(location.y / 9.0), 3.0));
    m_string[6] = int(mod(floor(location.y / 3.0), 3.0));
    m_string[7] = int(mod(floor(location.y), 3.0));
    
    
    
    for (int i = 0; i < 8; i++)
    {
     m = int(mod(float(m) + float(m_string[i]) + 1.0, 4.0));
     
     if (m == 0)
     {
      m0(a, b);
     }
     
     else if (m == 1)
     {
      m1(a, b);
     }
     
     else if (m == 2)
     {
      m2(a, b);
     }
     
     else
     {
      m3(a, b);
     }
    }
    
    vec2 num = cmul(vec2(a[0][0], b[0][0]), z) + vec2(a[1][0], b[1][0]);
    vec2 den = cmul(vec2(a[0][1], b[0][1]), z) + vec2(a[1][1], b[1][1]);
    
    if (den.x * den.x + den.y * den.y < .01)
    {
     gl_FragColor = encode_float(-10.0);
     
     return;
    }
    
    z = cdiv(num, den);
  `,i=`
   ${e}
   
    gl_FragColor = encode_float(z.x);
   }
  `,s=`
   ${e}
   
    gl_FragColor = encode_float(z.y);
   }
  `,o=`
   precision highp float;
   precision highp int;
   
   varying vec2 uv;
   
   uniform int last_m;
   
   const float resolution = 81.0;
   
   void main(void)
   {
    vec2 location = (uv + vec2(1.0, 1.0)) / 2.0 * resolution;
    
    int m = last_m;
    
    int m_string[8];
    
    m_string[0] = int(mod(floor(location.x / 27.0), 3.0));
    m_string[1] = int(mod(floor(location.x / 9.0), 3.0));
    m_string[2] = int(mod(floor(location.x / 3.0), 3.0));
    m_string[3] = int(mod(floor(location.x), 3.0));
    
    m_string[4] = int(mod(floor(location.y / 27.0), 3.0));
    m_string[5] = int(mod(floor(location.y / 9.0), 3.0));
    m_string[6] = int(mod(floor(location.y / 3.0), 3.0));
    m_string[7] = int(mod(floor(location.y), 3.0));
    
    
    
    for (int i = 0; i < 8; i++)
    {
     m = int(mod(float(m) + float(m_string[i]) + 1.0, 4.0));
    }
    
    gl_FragColor = vec4(float(m) / 4.0, 0.0, 0.0, 0.0);
   }
  `,a={renderer:"gpu",shader:i,canvas_width:this.update_resolution,canvas_height:this.update_resolution};this.wilson_update=new Wilson(this.update_canvas,a),this.wilson_update.render.init_uniforms(["start_z","last_m","m0a","m0b","m1a","m1b","m2a","m2b","m3a","m3b"],0),this.wilson_update.render.load_new_shader(s),this.wilson_update.render.init_uniforms(["start_z","last_m","m0a","m0b","m1a","m1b","m2a","m2b","m3a","m3b"],1),this.wilson_update.render.load_new_shader(o),this.wilson_update.render.init_uniforms(["last_m"],2);let r=`
   precision highp float;
   precision highp sampler2D;
   
   varying vec2 uv;
   
   uniform sampler2D u_texture;
   
   const float max_brightness = 1.0;
   
   const float step = 1.0 / 1000.0;
   
   
   
   vec3 hsv2rgb(vec3 c)
   {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
   }
   
   void main(void)
   {
    vec2 center = (uv + vec2(1.0, 1.0)) / 2.0;
    
    float state = texture2D(u_texture, center).x;
    
    float state_around = texture2D(u_texture, center + vec2(step, 0.0)).x +
    texture2D(u_texture, center + vec2(-step, 0.0)).x +
    texture2D(u_texture, center + vec2(0.0, step)).x +
    texture2D(u_texture, center + vec2(0.0, -step)).x +
    
    texture2D(u_texture, center + vec2(step, step)).x +
    texture2D(u_texture, center + vec2(step, -step)).x + texture2D(u_texture, center + vec2(-step, step)).x + texture2D(u_texture, center + vec2(-step, -step)).x + texture2D(u_texture, center + vec2(step, 0.0)).x + texture2D(u_texture, center + vec2(-step, 0.0)).x + texture2D(u_texture, center + vec2(0.0, step)).x + texture2D(u_texture, center + vec2(0.0, -step)).x + texture2D(u_texture, center + vec2(step, step)).x + texture2D(u_texture, center + vec2(step, -step)).x + texture2D(u_texture, center + vec2(-step, step)).x + texture2D(u_texture, center + vec2(-step, -step)).x;
    
    if (state_around <= 1.0 / 255.0)
    {
     gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
     
     return;
    }
    
    gl_FragColor = vec4(hsv2rgb(vec3(atan(uv.y, uv.x) / 6.28318530718, 1.0, state)) * 255.0 / max_brightness, 1.0);
   }
  `,n={renderer:"gpu",shader:r,canvas_width:this.resolution,canvas_height:this.resolution,world_width:4,world_height:4,use_draggables:!0,draggables_mousedown_callback:this.bake_coefficients.bind(this),draggables_touchstart_callback:this.bake_coefficients.bind(this),draggables_mousemove_callback:this.bake_coefficients.bind(this),draggables_touchmove_callback:this.bake_coefficients.bind(this)};this.wilson=new Wilson(t,n),this.wilson.render.create_framebuffer_texture_pair(this.wilson.gl.UNSIGNED_BYTE),this.wilson.gl.bindTexture(this.wilson.gl.TEXTURE_2D,this.wilson.render.framebuffers[0].texture),this.wilson.gl.bindFramebuffer(this.wilson.gl.FRAMEBUFFER,null),this.wilson.draggables.add(0,0),this.wilson.draggables.add(0,0),Site.scripts_loaded.complexjs?this.run():Site.load_script("/scripts/complex.min.js").then(()=>{Site.scripts_loaded.complexjs=!0,this.run()}).catch(t=>{console.error("Could not load ComplexJS")})}run(t=1e3,e=10){this.resolution=t,this.computations_per_frame=e,this.wilson.change_canvas_size(this.resolution,this.resolution),this.draw_texture=new Uint8Array(this.resolution*this.resolution*4),this.bake_coefficients(),window.requestAnimationFrame(this.draw_frame.bind(this))}draw_frame(t){let e=t-this.last_timestamp;if(this.last_timestamp=t,0!==e){this.total_time=0;for(let i=0;i<this.computations_per_frame;i++){if(0===this.particles.length)return;let s=this.particles.length-1;this.wilson_update.gl.useProgram(this.wilson_update.render.shader_programs[0]),this.wilson_update.gl.uniform2fv(this.wilson_update.uniforms.start_z[0],this.particles[s][0]),this.wilson_update.gl.uniform1i(this.wilson_update.uniforms.last_m[0],this.particles[s][1]),this.wilson_update.render.draw_frame();let o=new Float32Array(this.wilson_update.render.get_pixel_data().buffer);this.wilson_update.gl.useProgram(this.wilson_update.render.shader_programs[1]),this.wilson_update.gl.uniform2fv(this.wilson_update.uniforms.start_z[1],this.particles[s][0]),this.wilson_update.gl.uniform1i(this.wilson_update.uniforms.last_m[1],this.particles[s][1]),this.wilson_update.render.draw_frame();let a=new Float32Array(this.wilson_update.render.get_pixel_data().buffer);this.wilson_update.gl.useProgram(this.wilson_update.render.shader_programs[2]),this.wilson_update.gl.uniform1i(this.wilson_update.uniforms.last_m[2],this.particles[s][1]),this.wilson_update.render.draw_frame();let r=this.wilson_update.render.get_pixel_data();for(let n=0;n<o.length;n++){let l=this.wilson.utils.interpolate.world_to_canvas(o[n],a[n]);if(l[0]>=0&&l[0]<this.resolution&&l[1]>=0&&l[1]<this.resolution){let $=4*(this.resolution*l[0]+l[1]);this.draw_texture[$]<this.max_brightness&&(this.particles[s][2]>=2&&this.draw_texture[$]++,this.particles[s][2]<this.max_depth&&this.particles.push([[o[n],a[n]],r[n],this.particles[s][2]+1]))}}this.particles.splice(s,1)}this.wilson.gl.texImage2D(this.wilson.gl.TEXTURE_2D,0,this.wilson.gl.RGBA,this.resolution,this.resolution,0,this.wilson.gl.RGBA,this.wilson.gl.UNSIGNED_BYTE,this.draw_texture),this.wilson.render.draw_frame(),this.animation_paused||window.requestAnimationFrame(this.draw_frame.bind(this))}}bake_coefficients(){for(let t=0;t<this.resolution*this.resolution;t++){let e=4*t;this.draw_texture[e]=0,this.draw_texture[e+1]=0,this.draw_texture[e+2]=0,this.draw_texture[e+3]=255}this.particles=[[[0,0],0,0]];let i=new Complex((this.wilson.draggables.world_coordinates[0][0]+2)/4+1.85,this.wilson.draggables.world_coordinates[0][1]/2),s=new Complex((this.wilson.draggables.world_coordinates[1][0]+2)/4+2,this.wilson.draggables.world_coordinates[1][1]/2),o=new Complex([0,0]);o=i.mul(s);let a=new Complex([0,0]);a=i.mul(i).add(s.mul(s));let r=new Complex([0,0]);r=o.mul(o).sub(a.mul(4)).arg()>0?o.sub(o.mul(o).sub(a.mul(4)).sqrt()).div(2):o.add(o.mul(o).sub(a.mul(4)).sqrt()).div(2);let n=new Complex([0,0]);n=r.sub(2).mul(s).div(s.mul(r).sub(i.mul(2)).add(r.mul(new Complex([0,2]))));let l=new Complex([0,0]),$=[[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]]];l=i.div(2),$[0][0][0]=l.re,$[0][0][1]=l.im,$[0][3][0]=l.re,$[0][3][1]=l.im,l=i.mul(r).sub(s.mul(2)).add(new Complex([0,4])).div(r.mul(2).add(4).mul(n)),$[0][1][0]=l.re,$[0][1][1]=l.im,l=i.mul(r).sub(s.mul(2)).sub(new Complex([0,4])).mul(n).div(r.mul(2).sub(4)),$[0][2][0]=l.re,$[0][2][1]=l.im,l=s.sub(new Complex([0,2])).div(2),$[1][0][0]=l.re,$[1][0][1]=l.im,l=s.div(2),$[1][1][0]=l.re,$[1][1][1]=l.im,$[1][2][0]=l.re,$[1][2][1]=l.im,l=s.add(new Complex([0,2])).div(2),$[1][3][0]=l.re,$[1][3][1]=l.im;for(let u=0;u<2;u++){let m=$[u][0][0],h=$[u][0][1],d=$[u][1][0],c=$[u][1][1],f=$[u][2][0],p=$[u][2][1],w=$[u][3][0],_=$[u][3][1];$[u+2]=[[w,_],[-d,-c],[-f,-p],[m,h]]}for(let v=0;v<2;v++)this.wilson_update.gl.useProgram(this.wilson_update.render.shader_programs[v]),this.wilson_update.gl.uniformMatrix2fv(this.wilson_update.uniforms.m0a[v],!1,[$[0][0][0],$[0][2][0],$[0][1][0],$[0][3][0]]),this.wilson_update.gl.uniformMatrix2fv(this.wilson_update.uniforms.m0b[v],!1,[$[0][0][1],$[0][2][1],$[0][1][1],$[0][3][1]]),this.wilson_update.gl.uniformMatrix2fv(this.wilson_update.uniforms.m1a[v],!1,[$[1][0][0],$[1][2][0],$[1][1][0],$[1][3][0]]),this.wilson_update.gl.uniformMatrix2fv(this.wilson_update.uniforms.m1b[v],!1,[$[1][0][1],$[1][2][1],$[1][1][1],$[1][3][1]]),this.wilson_update.gl.uniformMatrix2fv(this.wilson_update.uniforms.m2a[v],!1,[$[2][0][0],$[2][2][0],$[2][1][0],$[2][3][0]]),this.wilson_update.gl.uniformMatrix2fv(this.wilson_update.uniforms.m2b[v],!1,[$[2][0][1],$[2][2][1],$[2][1][1],$[2][3][1]]),this.wilson_update.gl.uniformMatrix2fv(this.wilson_update.uniforms.m3a[v],!1,[$[3][0][0],$[3][2][0],$[3][1][0],$[3][3][0]]),this.wilson_update.gl.uniformMatrix2fv(this.wilson_update.uniforms.m3b[v],!1,[$[3][0][1],$[3][2][1],$[3][1][1],$[3][3][1]]);window.requestAnimationFrame(this.draw_frame.bind(this))}change_aspect_ratio(){this.wilson.fullscreen.currently_fullscreen?(this.aspect_ratio=window.innerWidth/window.innerHeight,this.aspect_ratio>=1?(this.wilson.change_canvas_size(Math.ceil(this.resolution*this.aspect_ratio),this.resolution),this.wilson_dim.change_canvas_size(Math.ceil(this.resolution*this.aspect_ratio),this.resolution),this.wilson.world_width=4*Math.pow(2,this.zoom_level)*this.aspect_ratio,this.wilson.world_height=4*Math.pow(2,this.zoom_level)):(this.wilson.change_canvas_size(this.resolution,Math.ceil(this.resolution/this.aspect_ratio)),this.wilson_dim.change_canvas_size(this.resolution,Math.ceil(this.resolution/this.aspect_ratio)),this.wilson.world_width=4*Math.pow(2,this.zoom_level),this.wilson.world_height=4*Math.pow(2,this.zoom_level)/this.aspect_ratio)):(this.aspect_ratio=1,this.wilson.change_canvas_size(this.resolution,this.resolution),this.wilson_dim.change_canvas_size(this.resolution,this.resolution),this.wilson.world_width=4*Math.pow(2,this.zoom_level),this.wilson.world_height=4*Math.pow(2,this.zoom_level))}}
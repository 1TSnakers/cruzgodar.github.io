class AbelianSandpile extends Applet{wilsonUpscale=null;numGrains=1E4;resolution=500;lastTimestamp=-1;computationsPerFrame=20;lastPixelData=null;constructor(a){super(a);const b=this.createHiddenCanvas();this.wilson=new Wilson(b,{renderer:"gpu",shader:"\n\t\t\tprecision highp float;\n\t\t\tprecision highp sampler2D;\n\t\t\t\n\t\t\tvarying vec2 uv;\n\t\t\t\n\t\t\tuniform sampler2D uTexture;\n\t\t\t\n\t\t\tuniform float step;\n\t\t\t\n\t\t\tuniform vec4 startGrains;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tvec2 center = (uv + vec2(1.0, 1.0)) / 2.0;\n\t\t\t\t\n\t\t\t\tif (length(center - vec2(.5, .5)) < step / 2.0)\n\t\t\t\t{\n\t\t\t\t\tgl_FragColor = startGrains;\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\t\t",
canvasWidth:this.resolution,canvasHeight:this.resolution});this.wilson.render.loadNewShader("\n\t\t\tprecision highp float;\n\t\t\tprecision highp sampler2D;\n\t\t\t\n\t\t\tvarying vec2 uv;\n\t\t\t\n\t\t\tuniform sampler2D uTexture;\n\t\t\t\n\t\t\tuniform float step;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tvec2 center = (uv + vec2(1.0, 1.0)) / 2.0;\n\t\t\t\tvec4 state = texture2D(uTexture, center);\n\t\t\t\tfloat leftover = mod(floor(256.0 * state.w), 4.0) / 256.0;\n\t\t\t\t\n\t\t\t\tif (center.x <= step || center.x >= 1.0 - step || center.y <= step || center.y >= 1.0 - step)\n\t\t\t\t{\n\t\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvec4 state1 = texture2D(uTexture, center + vec2(step, 0.0));\n\t\t\t\tvec4 state2 = texture2D(uTexture, center + vec2(-step, 0.0));\n\t\t\t\tvec4 state3 = texture2D(uTexture, center + vec2(0.0, step));\n\t\t\t\tvec4 state4 = texture2D(uTexture, center + vec2(0.0, -step));\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//The general idea: this is carrying in reverse. The largest place is supposed to be divided by four, so we start by extracting the portion that is too small for it to see and adding it to the next place down (not dividing by 256 effectively multiplies it by 256). Then what's left is divided by 4 and effectively floored.\n\t\t\t\tstate1.y += mod(floor(state1.x * 256.0), 4.0);\n\t\t\t\tstate1.x = floor(state1.x * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\tstate1.z += mod(floor(state1.y * 256.0), 4.0);\n\t\t\t\tstate1.y = floor(state1.y * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\tstate1.w += mod(floor(state1.z * 256.0), 4.0);\n\t\t\t\tstate1.z = floor(state1.z * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\tstate1.w = floor(state1.w * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tstate2.y += mod(floor(state2.x * 256.0), 4.0);\n\t\t\t\tstate2.x = floor(state2.x * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\tstate2.z += mod(floor(state2.y * 256.0), 4.0);\n\t\t\t\tstate2.y = floor(state2.y * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\tstate2.w += mod(floor(state2.z * 256.0), 4.0);\n\t\t\t\tstate2.z = floor(state2.z * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\tstate2.w = floor(state2.w * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tstate3.y += mod(floor(state3.x * 256.0), 4.0);\n\t\t\t\tstate3.x = floor(state3.x * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\tstate3.z += mod(floor(state3.y * 256.0), 4.0);\n\t\t\t\tstate3.y = floor(state3.y * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\tstate3.w += mod(floor(state3.z * 256.0), 4.0);\n\t\t\t\tstate3.z = floor(state3.z * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\tstate3.w = floor(state3.w * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tstate4.y += mod(floor(state4.x * 256.0), 4.0);\n\t\t\t\tstate4.x = floor(state4.x * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\tstate4.z += mod(floor(state4.y * 256.0), 4.0);\n\t\t\t\tstate4.y = floor(state4.y * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\tstate4.w += mod(floor(state4.z * 256.0), 4.0);\n\t\t\t\tstate4.z = floor(state4.z * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\tstate4.w = floor(state4.w * 64.0) / 256.0;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//The new state should be what used to be here, mod 4, plus the floor of 1/4 of each of the neighbors.\n\t\t\t\tvec4 newState = vec4(0.0, 0.0, 0.0, leftover) + state1 + state2 + state3 + state4;\n\t\t\t\t\n\t\t\t\tnewState.z += floor(newState.w) / 256.0;\n\t\t\t\tnewState.w = mod(newState.w, 1.0);\n\t\t\t\t\n\t\t\t\tnewState.y += floor(newState.z) / 256.0;\n\t\t\t\tnewState.z = mod(newState.z, 1.0);\n\t\t\t\t\n\t\t\t\tnewState.x += floor(newState.y) / 256.0;\n\t\t\t\tnewState.y = mod(newState.y, 1.0);\n\t\t\t\t\n\t\t\t\tgl_FragColor = newState;\n\t\t\t}\n\t\t");
this.wilson.render.loadNewShader("\n\t\t\tprecision highp float;\n\t\t\tprecision highp sampler2D;\n\t\t\t\n\t\t\tvarying vec2 uv;\n\t\t\t\n\t\t\tuniform sampler2D uTexture;\n\t\t\t\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tvec2 state = floor(256.0 * texture2D(uTexture, (uv + vec2(1.0, 1.0)) / 2.0).zw);\n\t\t\t\t\n\t\t\t\tif (state.x != 0.0)\n\t\t\t\t{\n\t\t\t\t\tgl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.y == 1.0)\n\t\t\t\t{\n\t\t\t\t\tgl_FragColor = vec4(0.0, 0.25, 1.0, 1.0);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.y == 2.0)\n\t\t\t\t{\n\t\t\t\t\tgl_FragColor = vec4(0.5, 0.0, 1.0, 1.0);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.y == 3.0)\n\t\t\t\t{\n\t\t\t\t\tgl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.y >= 4.0)\n\t\t\t\t{\n\t\t\t\t\tfloat brightness = (state.y - 3.0) / 512.0 + .5;\n\t\t\t\t\tgl_FragColor = vec4(brightness, brightness, brightness, 1.0);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t}\n\t\t");
this.wilson.render.initUniforms(["step","startGrains"],0);this.wilson.render.initUniforms(["step"],1);this.wilson.render.createFramebufferTexturePair();this.wilson.render.createFramebufferTexturePair();this.wilson.gl.bindTexture(this.wilson.gl.TEXTURE_2D,this.wilson.render.framebuffers[0].texture);this.wilson.gl.bindFramebuffer(this.wilson.gl.FRAMEBUFFER,null);this.wilsonUpscale=new Wilson(a,{renderer:"gpu",shader:"\n\t\t\tprecision highp float;\n\t\t\tprecision highp sampler2D;\n\t\t\t\n\t\t\tvarying vec2 uv;\n\t\t\t\n\t\t\tuniform sampler2D uTexture;\n\t\t\t\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tgl_FragColor = texture2D(uTexture, (uv + vec2(1.0, 1.0)) / 2.0);\n\t\t\t}\n\t\t",
canvasWidth:this.resolution,canvasHeight:this.resolution,useFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"});this.wilsonUpscale.render.createFramebufferTexturePair(this.wilsonUpscale.gl.UNSIGNED_BYTE)}run(a=1E4,b=25){this.resume();this.numGrains=a;this.resolution=Math.floor(Math.sqrt(this.numGrains))+2;this.resolution=this.resolution+1-this.resolution%2;this.computationsPerFrame=
b;a=this.numGrains%256/256;b=Math.floor(this.numGrains/256)%256/256;const c=Math.floor(this.numGrains/65536)%256/256,d=Math.floor(this.numGrains/16777216)%256/256;this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[0]);this.wilson.gl.uniform1f(this.wilson.uniforms.step[0],1/this.resolution);this.wilson.gl.uniform4f(this.wilson.uniforms.startGrains[0],d,c,b,a);this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[1]);this.wilson.gl.uniform1f(this.wilson.uniforms.step[1],1/this.resolution);
this.wilson.changeCanvasSize(this.resolution,this.resolution);this.wilson.gl.bindTexture(this.wilson.gl.TEXTURE_2D,this.wilson.render.framebuffers[0].texture);this.wilson.gl.texImage2D(this.wilson.gl.TEXTURE_2D,0,this.wilson.gl.RGBA,this.wilson.canvasWidth,this.wilson.canvasHeight,0,this.wilson.gl.RGBA,this.wilson.gl.FLOAT,null);this.wilson.gl.bindTexture(this.wilson.gl.TEXTURE_2D,this.wilson.render.framebuffers[1].texture);this.wilson.gl.texImage2D(this.wilson.gl.TEXTURE_2D,0,this.wilson.gl.RGBA,
this.wilson.canvasWidth,this.wilson.canvasHeight,0,this.wilson.gl.RGBA,this.wilson.gl.FLOAT,null);a=Math.max(this.resolution,this.canvas.getBoundingClientRect().width);this.wilsonUpscale.gl.bindTexture(this.wilsonUpscale.gl.TEXTURE_2D,this.wilsonUpscale.render.framebuffers[0].texture);this.wilsonUpscale.changeCanvasSize(a,a);this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[0]);this.wilson.gl.bindTexture(this.wilson.gl.TEXTURE_2D,this.wilson.render.framebuffers[0].texture);this.wilson.gl.bindFramebuffer(this.wilson.gl.FRAMEBUFFER,
this.wilson.render.framebuffers[0].framebuffer);this.wilson.render.drawFrame();window.requestAnimationFrame(this.drawFrame.bind(this))}drawFrame(a){var b=a-this.lastTimestamp;this.lastTimestamp=a;if(0!==b){this.wilson.gl.viewport(0,0,this.resolution,this.resolution);for(a=0;a<this.computationsPerFrame;a++)this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[1]),this.wilson.gl.bindFramebuffer(this.wilson.gl.FRAMEBUFFER,this.wilson.render.framebuffers[1].framebuffer),this.wilson.render.drawFrame(),
this.wilson.gl.bindTexture(this.wilson.gl.TEXTURE_2D,this.wilson.render.framebuffers[1].texture),this.wilson.gl.bindFramebuffer(this.wilson.gl.FRAMEBUFFER,this.wilson.render.framebuffers[0].framebuffer),this.wilson.render.drawFrame(),this.wilson.gl.bindTexture(this.wilson.gl.TEXTURE_2D,this.wilson.render.framebuffers[0].texture);this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[2]);this.wilson.gl.bindFramebuffer(this.wilson.gl.FRAMEBUFFER,null);this.wilson.render.drawFrame();a=this.wilson.render.getPixelData();
if(null!==this.lastPixelData){b=!1;for(let c=0;c<a.length;c++)if(a[c]!==this.lastPixelData[c]){b=!0;break}if(!b)return}this.lastPixelData=a;this.wilsonUpscale.gl.texImage2D(this.wilsonUpscale.gl.TEXTURE_2D,0,this.wilsonUpscale.gl.RGBA,this.wilson.canvasWidth,this.wilson.canvasHeight,0,this.wilsonUpscale.gl.RGBA,this.wilsonUpscale.gl.UNSIGNED_BYTE,a);this.wilsonUpscale.gl.bindFramebuffer(this.wilsonUpscale.gl.FRAMEBUFFER,null);this.wilsonUpscale.render.drawFrame();this.animationPaused||window.requestAnimationFrame(this.drawFrame.bind(this))}}}
;

"use strict";class JuliaSet extends Applet{loadPromise=null;wilsonHidden=null;juliaMode=0;aspectRatio=1;numIterations=100;zoomLevel=0;useDoublePrecision=!1;doublePrecision=!1;switchJuliaModeButtonElement=null;doublePrecisionZoomThreshhold=-16;pastBrightnessScales=[];a=0;b=1;resolution=1e3;resolutionHidden=100;fixedPointX=0;fixedPointY=0;nextPanVelocityX=0;nextPanVelocityY=0;nextZoomVelocity=0;panVelocityX=0;panVelocityY=0;zoomVelocity=0;panFriction=.96;panVelocityStartThreshhold=.0025;panVelocityStopThreshhold=25e-5;zoomFriction=.93;zoomVelocityStartThreshhold=.01;zoomVelocityStopThreshhold=.001;lastTimestamp=-1;constructor(i,e=null){super(i),this.switchJuliaModeButtonElement=e;let t=this.createHiddenCanvas();this.loadPromise=new Promise(async(e,o)=>{await Site.loadGLSL();let s=`
    precision highp float;
    
    varying vec2 uv;
    
    uniform float aspectRatio;
    
    uniform vec2 worldCenterX;
    uniform vec2 worldCenterY;
    uniform float worldSize;
    
    uniform float a;
    uniform float b;
    uniform int numIterations;
    uniform float brightnessScale;
    
    
    
    void main(void)
    {
     vec2 z;
     
     if (aspectRatio >= 1.0)
     {
      z = vec2(uv.x * aspectRatio * worldSize + worldCenterX.x, uv.y * worldSize + worldCenterY.x);
     }
     
     else
     {
      z = vec2(uv.x * worldSize + worldCenterX.x, uv.y / aspectRatio * worldSize + worldCenterY.x);
     }
     
     vec2 c = z;
     
     vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     float brightness = exp(-length(z));
     
     
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
       return;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
      
      brightness += exp(-length(z));
     }
     
     
     gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
    }
   `,n=`
    precision highp float;
    
    varying vec2 uv;
    
    uniform float aspectRatio;
    
    uniform vec2 worldCenterX;
    uniform vec2 worldCenterY;
    uniform float worldSize;
    
    uniform float a;
    uniform float b;
    uniform int numIterations;
    uniform float brightnessScale;
    
    
    
    void main(void)
    {
     vec2 z;
     
     if (aspectRatio >= 1.0)
     {
      z = vec2(uv.x * aspectRatio * worldSize + worldCenterX.x, uv.y * worldSize + worldCenterY.x);
     }
     
     else
     {
      z = vec2(uv.x * worldSize + worldCenterX.x, uv.y / aspectRatio * worldSize + worldCenterY.x);
     }
     
     vec2 c = vec2(a, b);
     
     vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     float brightness = exp(-length(z));
     
     
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
       return;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
      
      brightness += exp(-length(z));
     }
     
     
     gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
    }
   `,r=`
    precision highp float;
    
    varying vec2 uv;
    
    uniform float aspectRatio;
    
    uniform vec2 worldCenterX;
    uniform vec2 worldCenterY;
    uniform float worldSize;
    
    uniform float a;
    uniform float b;
    uniform int numIterations;
    uniform float brightnessScale;
    
    
    
    void main(void)
    {
     vec2 z;
     
     if (aspectRatio >= 1.0)
     {
      z = vec2(uv.x * aspectRatio * worldSize + worldCenterX.x, uv.y * worldSize + worldCenterY.x);
     }
     
     else
     {
      z = vec2(uv.x * worldSize + worldCenterX.x, uv.y / aspectRatio * worldSize + worldCenterY.x);
     }
     
     vec2 c = z;
     
     vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     float brightness = exp(-length(z));
     
     
     
     bool broken = false;
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
       
       broken = true;
       
       break;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
      
      brightness += exp(-length(z));
     }
     
     
     
     if (!broken)
     {
      gl_FragColor = vec4(.5 * brightness / brightnessScale * color, 1.0);
     }
     
     
     
     z = vec2(uv.x * aspectRatio * 2.0, uv.y * 2.0);
     
     color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     brightness = exp(-length(z));
     
     broken = false;
     
     c = vec2(a, b);
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor.xyz /= 4.0;
       
       broken = true;
       
       break;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
      
      brightness += exp(-length(z));
     }
     
     if (!broken)
     {
      gl_FragColor += vec4(brightness / brightnessScale * color, 0.0);
     }
    }
   `,l=`
    precision highp float;
    
    varying vec2 uv;
    
    uniform float aspectRatio;
    
    uniform vec2 worldCenterX;
    uniform vec2 worldCenterY;
    uniform float worldSize;
    
    uniform float a;
    uniform float b;
    uniform int numIterations;
    uniform float brightnessScale;
    
    
    
    ${Site.doubleEmulationGLSL}
    
    
    
    void main(void)
    {
     vec4 z;
     
     if (aspectRatio >= 1.0)
     {
      z = dcAdd(dcMul(vec4(uv.x * aspectRatio, 0.0, uv.y, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
     }
     
     else
     {
      z = dcAdd(dcMul(vec4(uv.x, 0.0, uv.y / aspectRatio, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
     }
     
     vec4 c = z;
     
     vec3 color = normalize(vec3(abs(z.x + z.z) / 2.0, abs(z.x) / 2.0, abs(z.z) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     float brightness = exp(-length(z));
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
       return;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = dcAdd(dcMul(z, z), c);
      
      brightness += exp(-length(z));
     }
     
     gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
    }
   `,a=`
    precision highp float;
    
    varying vec2 uv;
    
    uniform float aspectRatio;
    
    uniform vec2 worldCenterX;
    uniform vec2 worldCenterY;
    uniform float worldSize;
    
    uniform float a;
    uniform float b;
    uniform int numIterations;
    uniform float brightnessScale;
    
    
    
    ${Site.doubleEmulationGLSL}
    
    
    
    void main(void)
    {
     vec4 z;
     
     if (aspectRatio >= 1.0)
     {
      z = dcAdd(dcMul(vec4(uv.x * aspectRatio, 0.0, uv.y, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
     }
     
     else
     {
      z = dcAdd(dcMul(vec4(uv.x, 0.0, uv.y / aspectRatio, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
     }
     
     vec4 c = vec4(a, 0.0, b, 0.0);
     
     vec3 color = normalize(vec3(abs(z.x + z.z) / 2.0, abs(z.x) / 2.0, abs(z.z) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     float brightness = exp(-length(z));
     
     
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
       return;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = dcAdd(dcMul(z, z), c);
      
      brightness += exp(-length(z));
     }
     
     
     gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
    }
   `,h=`
    precision highp float;
    
    varying vec2 uv;
    
    uniform float aspectRatio;
    
    uniform vec2 worldCenterX;
    uniform vec2 worldCenterY;
    uniform float worldSize;
    
    uniform float a;
    uniform float b;
    uniform int numIterations;
    uniform float brightnessScale;
    
    
    
    ${Site.doubleEmulationGLSL}
    
    
    
    void main(void)
    {
     vec4 z;
     
     if (aspectRatio >= 1.0)
     {
      z = dcAdd(dcMul(vec4(uv.x * aspectRatio, 0.0, uv.y, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
     }
     
     else
     {
      z = dcAdd(dcMul(vec4(uv.x, 0.0, uv.y / aspectRatio, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
     }
     
     vec4 c = z;
     
     vec3 color = normalize(vec3(abs(z.x + z.z) / 2.0, abs(z.x) / 2.0, abs(z.z) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     float brightness = exp(-length(z));
     
     
     
     bool broken = false;
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
       
       broken = true;
       
       break;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = dcAdd(dcMul(z, z), c);
      
      brightness += exp(-length(z));
     }
     
     
     
     if (!broken)
     {
      gl_FragColor = vec4(.5 * brightness / brightnessScale * color, 1.0);
     }
     
     
     
     z = c;
     
     c = vec4(a, 0.0, b, 0.0);
     
     color = normalize(vec3(abs(z.x + z.z) / 2.0, abs(z.x) / 2.0, abs(z.z) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     brightness = exp(-length(z));
     
     broken = false;
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor.xyz /= 4.0;
       
       broken = true;
       
       break;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = dcAdd(dcMul(z, z), c);
      
      brightness += exp(-length(z));
     }
     
     if (!broken)
     {
      gl_FragColor += vec4(brightness / brightnessScale * color, 0.0);
     }
    }
   `,d={renderer:"gpu",shader:s,canvasWidth:1e3,canvasHeight:1e3,worldWidth:4,worldHeight:4,worldCenterX:-.75,worldCenterY:0,useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:this.changeAspectRatio.bind(this),mousedownCallback:this.onGrabCanvas.bind(this),touchstartCallback:this.onGrabCanvas.bind(this),mousemoveCallback:this.onHoverCanvas.bind(this),mousedragCallback:this.onDragCanvas.bind(this),touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),touchendCallback:this.onReleaseCanvas.bind(this),wheelCallback:this.onWheelCanvas.bind(this),pinchCallback:this.onPinchCanvas.bind(this)},c={renderer:"gpu",shader:s,canvasWidth:100,canvasHeight:100};this.wilson=new Wilson(i,d),this.wilson.render.loadNewShader(n),this.wilson.render.loadNewShader(r),this.wilson.render.loadNewShader(l),this.wilson.render.loadNewShader(a),this.wilson.render.loadNewShader(h);for(let w=0;w<6;w++)this.wilson.render.initUniforms(["aspectRatio","worldCenterX","worldCenterY","worldSize","a","b","numIterations","brightnessScale"],w);this.wilsonHidden=new Wilson(t,c),this.wilsonHidden.render.loadNewShader(n),this.wilsonHidden.render.loadNewShader(r),this.wilsonHidden.render.loadNewShader(l),this.wilsonHidden.render.loadNewShader(a),this.wilsonHidden.render.loadNewShader(h);for(let $=0;$<6;$++)this.wilsonHidden.render.initUniforms(["aspectRatio","worldCenterX","worldCenterY","worldSize","a","b","numIterations","brightnessScale"],$);window.requestAnimationFrame(this.drawFrame.bind(this));let u=this.changeAspectRatio.bind(this);window.addEventListener("resize",u),this.handlers.push([window,"resize",u])})}toggleUseDoublePrecision(){this.useDoublePrecision=!this.useDoublePrecision,this.zoomCanvas()}toggleDoublePrecision(){this.doublePrecision=!this.doublePrecision,this.doublePrecision?this.wilson.canvas.style.borderColor="rgb(127, 0, 0)":this.wilson.canvas.style.borderColor="rgb(127, 127, 127)"}advanceJuliaMode(){0===this.juliaMode?(this.juliaMode=2,this.a=0,this.b=0,this.panVelocityX=0,this.panVelocityY=0,this.zoomVelocity=0,this.nextPanVelocityX=0,this.nextPanVelocityY=0,this.nextZoomVelocity=0,this.pastBrightnessScales=[],window.requestAnimationFrame(this.drawFrame.bind(this))):1===this.juliaMode&&(this.juliaMode=0,this.wilson.worldCenterX=-.75,this.wilson.worldCenterY=0,this.wilson.worldWidth=4,this.wilson.worldHeight=4,this.zoomLevel=0,this.pastBrightnessScales=[],window.requestAnimationFrame(this.drawFrame.bind(this)))}onGrabCanvas(i,e,t){if(this.panVelocityX=0,this.panVelocityY=0,this.zoomVelocity=0,this.nextPanVelocityX=0,this.nextPanVelocityY=0,this.nextZoomVelocity=0,2===this.juliaMode&&"mousedown"===t.type){this.juliaMode=1,this.wilson.worldCenterX=0,this.wilson.worldCenterY=0,this.wilson.worldWidth=4,this.wilson.worldHeight=4,this.zoomLevel=0,this.pastBrightnessScales=[];try{Page.Animate.changeOpacity(this.switchJuliaModeButtonElement,1,Site.opacityAnimationTime)}catch(o){}window.requestAnimationFrame(this.drawFrame.bind(this))}}onDragCanvas(i,e,t,o,s){2===this.juliaMode&&"touchmove"===s.type?(this.a=i,this.b=e):(this.wilson.worldCenterX-=t,this.wilson.worldCenterY-=o,this.nextPanVelocityX=-t/this.wilson.worldWidth,this.nextPanVelocityY=-o/this.wilson.worldHeight,this.wilson.worldCenterX=Math.min(Math.max(this.wilson.worldCenterX,-2),2),this.wilson.worldCenterY=Math.min(Math.max(this.wilson.worldCenterY,-2),2)),window.requestAnimationFrame(this.drawFrame.bind(this))}onHoverCanvas(i,e,t,o,s){2===this.juliaMode&&"mousemove"===s.type&&(this.a=i,this.b=e,window.requestAnimationFrame(this.drawFrame.bind(this)))}onReleaseCanvas(i,e,t){if(2===this.juliaMode&&"touchend"===t.type){this.juliaMode=1,this.wilson.worldCenterX=0,this.wilson.worldCenterY=0,this.wilson.worldWidth=4,this.wilson.worldHeight=4,this.zoomLevel=0,this.pastBrightnessScales=[];try{Page.Animate.changeOpacity(this.switchJuliaModeButtonElement,1,Site.opacityAnimationTime)}catch(o){}window.requestAnimationFrame(this.drawFrame.bind(this))}else Math.sqrt(this.nextPanVelocityX*this.nextPanVelocityX+this.nextPanVelocityY*this.nextPanVelocityY)>=this.panVelocityStartThreshhold&&(this.panVelocityX=this.nextPanVelocityX,this.panVelocityY=this.nextPanVelocityY),Math.abs(this.nextZoomVelocity)>=this.zoomVelocityStartThreshhold&&(this.zoomVelocity=this.nextZoomVelocity);window.requestAnimationFrame(this.drawFrame.bind(this))}onWheelCanvas(i,e,t,o){this.fixedPointX=i,this.fixedPointY=e,.3>Math.abs(t/100)?(this.zoomLevel+=t/100,this.zoomLevel=Math.min(this.zoomLevel,1)):this.zoomVelocity+=.05*Math.sign(t),this.zoomCanvas()}onPinchCanvas(i,e,t,o){2!==this.juliaMode&&(this.aspectRatio>=1?(this.zoomLevel-=t/this.wilson.worldWidth*10,this.nextZoomVelocity=-t/this.wilson.worldWidth*10):(this.zoomLevel-=t/this.wilson.worldHeight*10,this.nextZoomVelocity=-t/this.wilson.worldHeight*10),this.zoomLevel=Math.min(this.zoomLevel,1),this.fixedPointX=i,this.fixedPointY=e,this.zoomCanvas())}zoomCanvas(){if(this.aspectRatio>=1){let i=this.wilson.input.getZoomedWorldCenter(this.fixedPointX,this.fixedPointY,4*Math.pow(2,this.zoomLevel)*this.aspectRatio,4*Math.pow(2,this.zoomLevel));this.wilson.worldWidth=4*Math.pow(2,this.zoomLevel)*this.aspectRatio,this.wilson.worldHeight=4*Math.pow(2,this.zoomLevel),this.wilson.worldCenterX=i[0],this.wilson.worldCenterY=i[1]}else{let e=this.wilson.input.getZoomedWorldCenter(this.fixedPointX,this.fixedPointY,4*Math.pow(2,this.zoomLevel),4*Math.pow(2,this.zoomLevel)/this.aspectRatio);this.wilson.worldWidth=4*Math.pow(2,this.zoomLevel),this.wilson.worldHeight=4*Math.pow(2,this.zoomLevel)/this.aspectRatio,this.wilson.worldCenterX=e[0],this.wilson.worldCenterY=e[1]}this.numIterations=-(30*this.zoomLevel)+200,(!this.doublePrecision&&this.zoomLevel<this.doublePrecisionZoomThreshhold&&this.useDoublePrecision||this.doublePrecision&&(this.zoomLevel>this.doublePrecisionZoomThreshhold||!this.useDoublePrecision))&&this.toggleDoublePrecision(),window.requestAnimationFrame(this.drawFrame.bind(this))}drawFrame(i){let e=i-this.lastTimestamp;if(this.lastTimestamp=i,0===e)return;let t=Applet.doubleToDf(this.wilson.worldCenterX),o=Applet.doubleToDf(this.wilson.worldCenterY),s=this.juliaMode+3*this.doublePrecision;this.wilsonHidden.gl.useProgram(this.wilsonHidden.render.shaderPrograms[s]),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.aspectRatio[s],1),this.wilsonHidden.gl.uniform2fv(this.wilsonHidden.uniforms.worldCenterX[s],t),this.wilsonHidden.gl.uniform2fv(this.wilsonHidden.uniforms.worldCenterY[s],o),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.worldSize[s],Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2),this.wilsonHidden.gl.uniform1i(this.wilsonHidden.uniforms.numIterations[s],this.numIterations),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.a[s],this.a),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.b[s],this.b),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.brightnessScale[s],20*(Math.abs(this.zoomLevel)+1)),this.wilsonHidden.render.drawFrame();let n=this.wilsonHidden.render.getPixelData(),r=Array(this.resolutionHidden*this.resolutionHidden);for(let l=0;l<this.resolutionHidden*this.resolutionHidden;l++)r[l]=n[4*l]+n[4*l+1]+n[4*l+2];r.sort((i,e)=>i-e);let a=(r[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+r[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)])/255*15*(Math.abs(this.zoomLevel/2)+1);this.pastBrightnessScales.push(a);let h=this.pastBrightnessScales.length;h>10&&this.pastBrightnessScales.shift(),a=Math.max(this.pastBrightnessScales.reduce((i,e)=>i+e)/h,.5),this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[s]),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatio[s],this.aspectRatio),this.wilson.gl.uniform2fv(this.wilson.uniforms.worldCenterX[s],t),this.wilson.gl.uniform2fv(this.wilson.uniforms.worldCenterY[s],o),this.wilson.gl.uniform1f(this.wilson.uniforms.worldSize[s],Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2),this.wilson.gl.uniform1i(this.wilson.uniforms.numIterations[s],this.numIterations),this.wilson.gl.uniform1f(this.wilson.uniforms.a[s],this.a),this.wilson.gl.uniform1f(this.wilson.uniforms.b[s],this.b),this.wilson.gl.uniform1f(this.wilson.uniforms.brightnessScale[s],a),this.wilson.render.drawFrame(),e>=50&&(this.panVelocityX=0,this.panVelocityY=0,this.zoomVelocity=0,this.nextPanVelocityX=0,this.nextPanVelocityY=0,this.nextZoomVelocity=0),(0!==this.panVelocityX||0!==this.panVelocityY||0!==this.zoomVelocity)&&(this.wilson.worldCenterX+=this.panVelocityX*this.wilson.worldWidth,this.wilson.worldCenterY+=this.panVelocityY*this.wilson.worldHeight,this.wilson.worldCenterX=Math.min(Math.max(this.wilson.worldCenterX,-2),2),this.wilson.worldCenterY=Math.min(Math.max(this.wilson.worldCenterY,-2),2),this.panVelocityX*=this.panFriction,this.panVelocityY*=this.panFriction,Math.sqrt(this.panVelocityX*this.panVelocityX+this.panVelocityY*this.panVelocityY)<this.panVelocityStopThreshhold&&(this.panVelocityX=0,this.panVelocityY=0),this.zoomLevel+=this.zoomVelocity,this.zoomLevel=Math.min(this.zoomLevel,1),this.zoomCanvas(),this.zoomVelocity*=this.zoomFriction,Math.abs(this.zoomVelocity)<this.zoomVelocityStopThreshhold&&(this.zoomVelocity=0),window.requestAnimationFrame(this.drawFrame.bind(this)))}changeAspectRatio(){this.wilson.fullscreen.currentlyFullscreen?(this.aspectRatio=window.innerWidth/window.innerHeight,this.aspectRatio>=1?(this.wilson.changeCanvasSize(this.resolution,Math.floor(this.resolution/this.aspectRatio)),this.wilson.worldWidth=4*Math.pow(2,this.zoomLevel)*this.aspectRatio,this.wilson.worldHeight=4*Math.pow(2,this.zoomLevel)):(this.wilson.changeCanvasSize(Math.floor(this.resolution*this.aspectRatio),this.resolution),this.wilson.worldWidth=4*Math.pow(2,this.zoomLevel),this.wilson.worldHeight=4*Math.pow(2,this.zoomLevel)/this.aspectRatio)):(this.aspectRatio=1,this.wilson.changeCanvasSize(this.resolution,this.resolution),this.wilson.worldWidth=4*Math.pow(2,this.zoomLevel),this.wilson.worldHeight=4*Math.pow(2,this.zoomLevel)),window.requestAnimationFrame(this.drawFrame.bind(this))}}
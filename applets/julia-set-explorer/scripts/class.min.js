class JuliaSet extends Applet{loadPromise=null;wilsonHidden=null;juliaMode=0;aspectRatio=1;numIterations=100;useDoublePrecision=!1;doublePrecision=!1;switchJuliaModeButtonElement=null;doublePrecisionZoomThreshhold=-16;pastBrightnessScales=[];a=0;b=1;resolution=1E3;resolutionHidden=100;lastTimestamp=-1;constructor(c,d=null){super(c);this.pan.minX=-2.75;this.pan.maxX=1.25;this.pan.minY=-2;this.pan.maxY=2;this.switchJuliaModeButtonElement=d;const a=this.createHiddenCanvas();this.loadPromise=new Promise(async(b,
f)=>{await Site.loadGLSL();b=`
				precision highp float;
				
				varying vec2 uv;
				
				uniform float aspectRatio;
				
				uniform vec2 worldCenterX;
				uniform vec2 worldCenterY;
				uniform float worldSize;
				
				uniform float a;
				uniform float b;
				uniform int numIterations;
				uniform float brightnessScale;
				
				
				
				${Site.doubleEmulationGLSL}
				
				
				
				void main(void)
				{
					vec4 z;
					
					if (aspectRatio >= 1.0)
					{
						z = dcAdd(dcMul(vec4(uv.x * aspectRatio, 0.0, uv.y, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
					}
					
					else
					{
						z = dcAdd(dcMul(vec4(uv.x, 0.0, uv.y / aspectRatio, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
					}
					
					vec4 c = z;
					
					vec3 color = normalize(vec3(abs(z.x + z.z) / 2.0, abs(z.x) / 2.0, abs(z.z) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
					
					float brightness = exp(-length(z));
					
					for (int iteration = 0; iteration < 3001; iteration++)
					{
						if (iteration == numIterations)
						{
							gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
							return;
						}
						
						if (length(z) >= 4.0)
						{
							break;
						}
						
						z = dcAdd(dcMul(z, z), c);
						
						brightness += exp(-length(z));
					}
					
					gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
				}
			`;f=`
				precision highp float;
				
				varying vec2 uv;
				
				uniform float aspectRatio;
				
				uniform vec2 worldCenterX;
				uniform vec2 worldCenterY;
				uniform float worldSize;
				
				uniform float a;
				uniform float b;
				uniform int numIterations;
				uniform float brightnessScale;
				
				
				
				${Site.doubleEmulationGLSL}
				
				
				
				void main(void)
				{
					vec4 z;
					
					if (aspectRatio >= 1.0)
					{
						z = dcAdd(dcMul(vec4(uv.x * aspectRatio, 0.0, uv.y, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
					}
					
					else
					{
						z = dcAdd(dcMul(vec4(uv.x, 0.0, uv.y / aspectRatio, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
					}
					
					vec4 c = vec4(a, 0.0, b, 0.0);
					
					vec3 color = normalize(vec3(abs(z.x + z.z) / 2.0, abs(z.x) / 2.0, abs(z.z) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
					
					float brightness = exp(-length(z));
					
					
					
					for (int iteration = 0; iteration < 3001; iteration++)
					{
						if (iteration == numIterations)
						{
							gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
							return;
						}
						
						if (length(z) >= 4.0)
						{
							break;
						}
						
						z = dcAdd(dcMul(z, z), c);
						
						brightness += exp(-length(z));
					}
					
					
					gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
				}
			`;const e=`
				precision highp float;
				
				varying vec2 uv;
				
				uniform float aspectRatio;
				
				uniform vec2 worldCenterX;
				uniform vec2 worldCenterY;
				uniform float worldSize;
				
				uniform float a;
				uniform float b;
				uniform int numIterations;
				uniform float brightnessScale;
				
				
				
				${Site.doubleEmulationGLSL}
				
				
				
				void main(void)
				{
					vec4 z;
					
					if (aspectRatio >= 1.0)
					{
						z = dcAdd(dcMul(vec4(uv.x * aspectRatio, 0.0, uv.y, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
					}
					
					else
					{
						z = dcAdd(dcMul(vec4(uv.x, 0.0, uv.y / aspectRatio, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
					}
					
					vec4 c = z;
					
					vec3 color = normalize(vec3(abs(z.x + z.z) / 2.0, abs(z.x) / 2.0, abs(z.z) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
					
					float brightness = exp(-length(z));
					
					
					
					bool broken = false;
					
					for (int iteration = 0; iteration < 3001; iteration++)
					{
						if (iteration == numIterations)
						{
							gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
							
							broken = true;
							
							break;
						}
						
						if (length(z) >= 4.0)
						{
							break;
						}
						
						z = dcAdd(dcMul(z, z), c);
						
						brightness += exp(-length(z));
					}
					
					
					
					if (!broken)
					{
						gl_FragColor = vec4(.5 * brightness / brightnessScale * color, 1.0);
					}
					
					
					
					z = c;
					
					c = vec4(a, 0.0, b, 0.0);
					
					color = normalize(vec3(abs(z.x + z.z) / 2.0, abs(z.x) / 2.0, abs(z.z) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
					
					brightness = exp(-length(z));
					
					broken = false;
					
					for (int iteration = 0; iteration < 3001; iteration++)
					{
						if (iteration == numIterations)
						{
							gl_FragColor.xyz /= 4.0;
							
							broken = true;
							
							break;
						}
						
						if (length(z) >= 4.0)
						{
							break;
						}
						
						z = dcAdd(dcMul(z, z), c);
						
						brightness += exp(-length(z));
					}
					
					if (!broken)
					{
						gl_FragColor += vec4(brightness / brightnessScale * color, 0.0);
					}
				}
			`;var g={renderer:"gpu",shader:"\n\t\t\t\tprecision highp float;\n\t\t\t\t\n\t\t\t\tvarying vec2 uv;\n\t\t\t\t\n\t\t\t\tuniform float aspectRatio;\n\t\t\t\t\n\t\t\t\tuniform vec2 worldCenterX;\n\t\t\t\tuniform vec2 worldCenterY;\n\t\t\t\tuniform float worldSize;\n\t\t\t\t\n\t\t\t\tuniform float a;\n\t\t\t\tuniform float b;\n\t\t\t\tuniform int numIterations;\n\t\t\t\tuniform float brightnessScale;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tvoid main(void)\n\t\t\t\t{\n\t\t\t\t\tvec2 z;\n\t\t\t\t\t\n\t\t\t\t\tif (aspectRatio >= 1.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tz = vec2(uv.x * aspectRatio * worldSize + worldCenterX.x, uv.y * worldSize + worldCenterY.x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tz = vec2(uv.x * worldSize + worldCenterX.x, uv.y / aspectRatio * worldSize + worldCenterY.x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvec2 c = z;\n\t\t\t\t\t\n\t\t\t\t\tvec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));\n\t\t\t\t\t\n\t\t\t\t\tfloat brightness = exp(-length(z));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tfor (int iteration = 0; iteration < 3001; iteration++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (iteration == numIterations)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (length(z) >= 4.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\t\t\t\t\t\t\n\t\t\t\t\t\tbrightness += exp(-length(z));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4(brightness / brightnessScale * color, 1.0);\n\t\t\t\t}\n\t\t\t",
canvasWidth:1E3,canvasHeight:1E3,worldWidth:4,worldHeight:4,worldCenterX:-.75,worldCenterY:0,useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:()=>this.changeAspectRatio(!0),mousedownCallback:this.onGrabCanvas.bind(this),touchstartCallback:this.onGrabCanvas.bind(this),mousemoveCallback:this.onHoverCanvas.bind(this),
mousedragCallback:this.onDragCanvas.bind(this),touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),touchendCallback:this.onReleaseCanvas.bind(this),wheelCallback:this.onWheelCanvas.bind(this),pinchCallback:this.onPinchCanvas.bind(this)};this.wilson=new Wilson(c,g);this.wilson.render.loadNewShader("\n\t\t\t\tprecision highp float;\n\t\t\t\t\n\t\t\t\tvarying vec2 uv;\n\t\t\t\t\n\t\t\t\tuniform float aspectRatio;\n\t\t\t\t\n\t\t\t\tuniform vec2 worldCenterX;\n\t\t\t\tuniform vec2 worldCenterY;\n\t\t\t\tuniform float worldSize;\n\t\t\t\t\n\t\t\t\tuniform float a;\n\t\t\t\tuniform float b;\n\t\t\t\tuniform int numIterations;\n\t\t\t\tuniform float brightnessScale;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tvoid main(void)\n\t\t\t\t{\n\t\t\t\t\tvec2 z;\n\t\t\t\t\t\n\t\t\t\t\tif (aspectRatio >= 1.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tz = vec2(uv.x * aspectRatio * worldSize + worldCenterX.x, uv.y * worldSize + worldCenterY.x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tz = vec2(uv.x * worldSize + worldCenterX.x, uv.y / aspectRatio * worldSize + worldCenterY.x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvec2 c = vec2(a, b);\n\t\t\t\t\t\n\t\t\t\t\tvec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));\n\t\t\t\t\t\n\t\t\t\t\tfloat brightness = exp(-length(z));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tfor (int iteration = 0; iteration < 3001; iteration++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (iteration == numIterations)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (length(z) >= 4.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\t\t\t\t\t\t\n\t\t\t\t\t\tbrightness += exp(-length(z));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4(brightness / brightnessScale * color, 1.0);\n\t\t\t\t}\n\t\t\t");
this.wilson.render.loadNewShader("\n\t\t\t\tprecision highp float;\n\t\t\t\t\n\t\t\t\tvarying vec2 uv;\n\t\t\t\t\n\t\t\t\tuniform float aspectRatio;\n\t\t\t\t\n\t\t\t\tuniform vec2 worldCenterX;\n\t\t\t\tuniform vec2 worldCenterY;\n\t\t\t\tuniform float worldSize;\n\t\t\t\t\n\t\t\t\tuniform float a;\n\t\t\t\tuniform float b;\n\t\t\t\tuniform int numIterations;\n\t\t\t\tuniform float brightnessScale;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tvoid main(void)\n\t\t\t\t{\n\t\t\t\t\tvec2 z;\n\t\t\t\t\t\n\t\t\t\t\tif (aspectRatio >= 1.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tz = vec2(uv.x * aspectRatio * worldSize + worldCenterX.x, uv.y * worldSize + worldCenterY.x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tz = vec2(uv.x * worldSize + worldCenterX.x, uv.y / aspectRatio * worldSize + worldCenterY.x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvec2 c = z;\n\t\t\t\t\t\n\t\t\t\t\tvec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));\n\t\t\t\t\t\n\t\t\t\t\tfloat brightness = exp(-length(z));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tbool broken = false;\n\t\t\t\t\t\n\t\t\t\t\tfor (int iteration = 0; iteration < 3001; iteration++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (iteration == numIterations)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tbroken = true;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (length(z) >= 4.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\t\t\t\t\t\t\n\t\t\t\t\t\tbrightness += exp(-length(z));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif (!broken)\n\t\t\t\t\t{\n\t\t\t\t\t\tgl_FragColor = vec4(.5 * brightness / brightnessScale * color, 1.0);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tz = vec2(uv.x * aspectRatio * 2.0, uv.y * 2.0);\n\t\t\t\t\t\n\t\t\t\t\tcolor = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));\n\t\t\t\t\t\n\t\t\t\t\tbrightness = exp(-length(z));\n\t\t\t\t\t\n\t\t\t\t\tbroken = false;\n\t\t\t\t\t\n\t\t\t\t\tc = vec2(a, b);\n\t\t\t\t\t\n\t\t\t\t\tfor (int iteration = 0; iteration < 3001; iteration++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (iteration == numIterations)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgl_FragColor.xyz /= 4.0;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tbroken = true;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (length(z) >= 4.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\t\t\t\t\t\t\n\t\t\t\t\t\tbrightness += exp(-length(z));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!broken)\n\t\t\t\t\t{\n\t\t\t\t\t\tgl_FragColor += vec4(brightness / brightnessScale * color, 0.0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t");
this.wilson.render.loadNewShader(b);this.wilson.render.loadNewShader(f);this.wilson.render.loadNewShader(e);for(g=0;6>g;g++)this.wilson.render.initUniforms("aspectRatio worldCenterX worldCenterY worldSize a b numIterations brightnessScale".split(" "),g);this.wilsonHidden=new Wilson(a,{renderer:"gpu",shader:"\n\t\t\t\tprecision highp float;\n\t\t\t\t\n\t\t\t\tvarying vec2 uv;\n\t\t\t\t\n\t\t\t\tuniform float aspectRatio;\n\t\t\t\t\n\t\t\t\tuniform vec2 worldCenterX;\n\t\t\t\tuniform vec2 worldCenterY;\n\t\t\t\tuniform float worldSize;\n\t\t\t\t\n\t\t\t\tuniform float a;\n\t\t\t\tuniform float b;\n\t\t\t\tuniform int numIterations;\n\t\t\t\tuniform float brightnessScale;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tvoid main(void)\n\t\t\t\t{\n\t\t\t\t\tvec2 z;\n\t\t\t\t\t\n\t\t\t\t\tif (aspectRatio >= 1.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tz = vec2(uv.x * aspectRatio * worldSize + worldCenterX.x, uv.y * worldSize + worldCenterY.x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tz = vec2(uv.x * worldSize + worldCenterX.x, uv.y / aspectRatio * worldSize + worldCenterY.x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvec2 c = z;\n\t\t\t\t\t\n\t\t\t\t\tvec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));\n\t\t\t\t\t\n\t\t\t\t\tfloat brightness = exp(-length(z));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tfor (int iteration = 0; iteration < 3001; iteration++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (iteration == numIterations)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (length(z) >= 4.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\t\t\t\t\t\t\n\t\t\t\t\t\tbrightness += exp(-length(z));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4(brightness / brightnessScale * color, 1.0);\n\t\t\t\t}\n\t\t\t",
canvasWidth:100,canvasHeight:100});this.wilsonHidden.render.loadNewShader("\n\t\t\t\tprecision highp float;\n\t\t\t\t\n\t\t\t\tvarying vec2 uv;\n\t\t\t\t\n\t\t\t\tuniform float aspectRatio;\n\t\t\t\t\n\t\t\t\tuniform vec2 worldCenterX;\n\t\t\t\tuniform vec2 worldCenterY;\n\t\t\t\tuniform float worldSize;\n\t\t\t\t\n\t\t\t\tuniform float a;\n\t\t\t\tuniform float b;\n\t\t\t\tuniform int numIterations;\n\t\t\t\tuniform float brightnessScale;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tvoid main(void)\n\t\t\t\t{\n\t\t\t\t\tvec2 z;\n\t\t\t\t\t\n\t\t\t\t\tif (aspectRatio >= 1.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tz = vec2(uv.x * aspectRatio * worldSize + worldCenterX.x, uv.y * worldSize + worldCenterY.x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tz = vec2(uv.x * worldSize + worldCenterX.x, uv.y / aspectRatio * worldSize + worldCenterY.x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvec2 c = vec2(a, b);\n\t\t\t\t\t\n\t\t\t\t\tvec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));\n\t\t\t\t\t\n\t\t\t\t\tfloat brightness = exp(-length(z));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tfor (int iteration = 0; iteration < 3001; iteration++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (iteration == numIterations)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (length(z) >= 4.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\t\t\t\t\t\t\n\t\t\t\t\t\tbrightness += exp(-length(z));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4(brightness / brightnessScale * color, 1.0);\n\t\t\t\t}\n\t\t\t");
this.wilsonHidden.render.loadNewShader("\n\t\t\t\tprecision highp float;\n\t\t\t\t\n\t\t\t\tvarying vec2 uv;\n\t\t\t\t\n\t\t\t\tuniform float aspectRatio;\n\t\t\t\t\n\t\t\t\tuniform vec2 worldCenterX;\n\t\t\t\tuniform vec2 worldCenterY;\n\t\t\t\tuniform float worldSize;\n\t\t\t\t\n\t\t\t\tuniform float a;\n\t\t\t\tuniform float b;\n\t\t\t\tuniform int numIterations;\n\t\t\t\tuniform float brightnessScale;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tvoid main(void)\n\t\t\t\t{\n\t\t\t\t\tvec2 z;\n\t\t\t\t\t\n\t\t\t\t\tif (aspectRatio >= 1.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tz = vec2(uv.x * aspectRatio * worldSize + worldCenterX.x, uv.y * worldSize + worldCenterY.x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tz = vec2(uv.x * worldSize + worldCenterX.x, uv.y / aspectRatio * worldSize + worldCenterY.x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvec2 c = z;\n\t\t\t\t\t\n\t\t\t\t\tvec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));\n\t\t\t\t\t\n\t\t\t\t\tfloat brightness = exp(-length(z));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tbool broken = false;\n\t\t\t\t\t\n\t\t\t\t\tfor (int iteration = 0; iteration < 3001; iteration++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (iteration == numIterations)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tbroken = true;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (length(z) >= 4.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\t\t\t\t\t\t\n\t\t\t\t\t\tbrightness += exp(-length(z));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif (!broken)\n\t\t\t\t\t{\n\t\t\t\t\t\tgl_FragColor = vec4(.5 * brightness / brightnessScale * color, 1.0);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tz = vec2(uv.x * aspectRatio * 2.0, uv.y * 2.0);\n\t\t\t\t\t\n\t\t\t\t\tcolor = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));\n\t\t\t\t\t\n\t\t\t\t\tbrightness = exp(-length(z));\n\t\t\t\t\t\n\t\t\t\t\tbroken = false;\n\t\t\t\t\t\n\t\t\t\t\tc = vec2(a, b);\n\t\t\t\t\t\n\t\t\t\t\tfor (int iteration = 0; iteration < 3001; iteration++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (iteration == numIterations)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgl_FragColor.xyz /= 4.0;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tbroken = true;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (length(z) >= 4.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\t\t\t\t\t\t\n\t\t\t\t\t\tbrightness += exp(-length(z));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!broken)\n\t\t\t\t\t{\n\t\t\t\t\t\tgl_FragColor += vec4(brightness / brightnessScale * color, 0.0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t");
this.wilsonHidden.render.loadNewShader(b);this.wilsonHidden.render.loadNewShader(f);this.wilsonHidden.render.loadNewShader(e);for(b=0;6>b;b++)this.wilsonHidden.render.initUniforms("aspectRatio worldCenterX worldCenterY worldSize a b numIterations brightnessScale".split(" "),b);this.zoom.init();window.requestAnimationFrame(this.drawFrame.bind(this));b=()=>this.changeAspectRatio(!0);window.addEventListener("resize",b);this.handlers.push([window,"resize",b])})}toggleUseDoublePrecision(){this.useDoublePrecision=
!this.useDoublePrecision;this.zoomCanvas()}toggleDoublePrecision(){this.doublePrecision=!this.doublePrecision;this.wilson.canvas.style.borderColor=this.doublePrecision?"rgb(127, 0, 0)":"rgb(127, 127, 127)"}advanceJuliaMode(){if(0===this.juliaMode){this.juliaMode=2;this.b=this.a=0;this.pastBrightnessScales=[];try{Page.Animate.changeOpacity(this.switchJuliaModeButtonElement,0,Site.opacityAnimationTime).then(()=>{this.switchJuliaModeButtonElement.textContent="Return to Mandelbrot"})}catch(c){}}else if(1===
this.juliaMode){this.juliaMode=0;this.wilson.worldCenterX=-.75;this.wilson.worldCenterY=0;this.wilson.worldWidth=4;this.wilson.worldHeight=4;this.pan.minX=-2.75;this.pan.maxX=1.25;this.pan.minY=-2;this.pan.maxY=2;this.zoom.init();this.pastBrightnessScales=[];try{Page.Animate.changeOpacity(this.switchJuliaModeButtonElement,0,Site.opacityAnimationTime).then(()=>{this.switchJuliaModeButtonElement.textContent="Pick Julia Set";Page.Animate.changeOpacity(this.switchJuliaModeButtonElement,1,Site.opacityAnimationTime)})}catch(c){}}}onGrabCanvas(c,
d,a){this.pan.onGrabCanvas();this.zoom.onGrabCanvas();if(2===this.juliaMode&&"mousedown"===a.type){this.juliaMode=1;this.wilson.worldCenterX=0;this.wilson.worldCenterY=0;this.wilson.worldWidth=4;this.wilson.worldHeight=4;this.pan.minX=-2;this.pan.maxX=2;this.pan.minY=-2;this.pan.maxY=2;this.zoom.init();this.pastBrightnessScales=[];try{Page.Animate.changeOpacity(this.switchJuliaModeButtonElement,1,Site.opacityAnimationTime)}catch(b){}}}onDragCanvas(c,d,a,b,f){if(2===this.juliaMode&&"touchmove"===f.type)this.a=
c,this.b=d;else this.pan.onDragCanvas(c,d,a,b)}onHoverCanvas(c,d,a,b,f){2===this.juliaMode&&"mousemove"===f.type&&(this.a=c,this.b=d)}onReleaseCanvas(c,d,a){if(2===this.juliaMode&&"touchend"===a.type){this.juliaMode=1;this.wilson.worldCenterX=0;this.wilson.worldCenterY=0;this.wilson.worldWidth=4;this.wilson.worldHeight=4;this.pan.minX=-2;this.pan.maxX=2;this.pan.minY=-2;this.pan.maxY=2;this.zoom.init();this.pastBrightnessScales=[];try{Page.Animate.changeOpacity(this.switchJuliaModeButtonElement,1,
Site.opacityAnimationTime)}catch(b){}}else this.pan.onReleaseCanvas(),this.zoom.onReleaseCanvas()}onWheelCanvas(c,d,a,b){if(2!==this.juliaMode)this.zoom.onWheelCanvas(c,d,a)}onPinchCanvas(c,d,a,b){if(2!==this.juliaMode)this.zoom.onPinchCanvas(c,d,a)}drawFrame(c){var d=c-this.lastTimestamp;this.lastTimestamp=c;if(0!==d){this.pan.update();this.zoom.update();(!this.doublePrecision&&this.zoom.level<this.doublePrecisionZoomThreshhold&&this.useDoublePrecision||this.doublePrecision&&(this.zoom.level>this.doublePrecisionZoomThreshhold||
!this.useDoublePrecision))&&this.toggleDoublePrecision();c=Applet.doubleToDf(this.wilson.worldCenterX);d=Applet.doubleToDf(this.wilson.worldCenterY);var a=this.juliaMode+3*this.doublePrecision;this.numIterations=30*-this.zoom.level+200;this.wilsonHidden.gl.useProgram(this.wilsonHidden.render.shaderPrograms[a]);this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.aspectRatio[a],1);this.wilsonHidden.gl.uniform2fv(this.wilsonHidden.uniforms.worldCenterX[a],c);this.wilsonHidden.gl.uniform2fv(this.wilsonHidden.uniforms.worldCenterY[a],
d);this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.worldSize[a],Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2);this.wilsonHidden.gl.uniform1i(this.wilsonHidden.uniforms.numIterations[a],this.numIterations);this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.a[a],this.a);this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.b[a],this.b);this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.brightnessScale[a],20*(Math.abs(this.zoom.level)+1));this.wilsonHidden.render.drawFrame();
var b=this.wilsonHidden.render.getPixelData(),f=Array(this.resolutionHidden*this.resolutionHidden);for(let e=0;e<this.resolutionHidden*this.resolutionHidden;e++)f[e]=b[4*e]+b[4*e+1]+b[4*e+2];f.sort((e,g)=>e-g);b=(f[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+f[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)])/255*15*(Math.abs(this.zoom.level/2)+1);this.pastBrightnessScales.push(b);b=this.pastBrightnessScales.length;10<b&&this.pastBrightnessScales.shift();b=Math.max(this.pastBrightnessScales.reduce((e,
g)=>e+g)/b,.5);this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[a]);this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatio[a],this.aspectRatio);this.wilson.gl.uniform2fv(this.wilson.uniforms.worldCenterX[a],c);this.wilson.gl.uniform2fv(this.wilson.uniforms.worldCenterY[a],d);this.wilson.gl.uniform1f(this.wilson.uniforms.worldSize[a],Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2);this.wilson.gl.uniform1i(this.wilson.uniforms.numIterations[a],this.numIterations);this.wilson.gl.uniform1f(this.wilson.uniforms.a[a],
this.a);this.wilson.gl.uniform1f(this.wilson.uniforms.b[a],this.b);this.wilson.gl.uniform1f(this.wilson.uniforms.brightnessScale[a],b);this.wilson.render.drawFrame();this.animationPaused||window.requestAnimationFrame(this.drawFrame.bind(this))}}};

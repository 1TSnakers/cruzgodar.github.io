import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{getFloatGlsl,getVectorGlsl,tempShader}from"/scripts/applets/applet.min.js";import{changeOpacity}from"/scripts/src/animation.min.js";import{getGlslBundle,loadGlsl}from"/scripts/src/complexGlsl.min.js";import{currentlyTouchDevice}from"/scripts/src/interaction.min.js";import{animate,sleep}from"/scripts/src/utils.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";const bubbleRadius=1;class JuliaSetExplorer extends AnimationFrameApplet{wilsonPreview;wilsonHidden;generatingCode;worldAdjust;maxWorldSize;needDraggable;bailoutRadius;juliaMode="mandelbrot";numIterations=500;switchJuliaModeButton;ignoreBrightnessCalculation=!1;pastBrightnessScales=[];c=[0,0];resolution=1e3;resolutionHidden=50;constructor({canvas,previewCanvas,switchJuliaModeButton,generatingCode,worldAdjust=[0,0],maxWorldSize=4,bailoutRadius=4}){super(canvas),this.switchJuliaModeButton=switchJuliaModeButton;var i={shader:tempShader,canvasWidth:this.resolution,worldWidth:4,worldCenterX:0,worldCenterY:0,minWorldX:-maxWorldSize/2,maxWorldX:maxWorldSize/2,minWorldY:-maxWorldSize/2,maxWorldY:maxWorldSize/2,minWorldWidth:1e-5,minWorldHeight:1e-5,useResetButton:!0,resetButtonIconPath:"/graphics/general-icons/reset.png",onResizeCanvas:()=>this.needNewFrame=!0,draggableOptions:{draggables:{draggableArg:[0,0]},callbacks:{drag:this.onDragDraggable.bind(this)}},interactionOptions:{useForPanAndZoom:!0,onPanAndZoom:()=>this.needNewFrame=!0,callbacks:{mousemove:this.onMousemove.bind(this),mousedown:this.onMousedown.bind(this),touchstart:this.onTouchstart.bind(this),touchmove:this.onTouchmove.bind(this),touchend:this.onTouchend.bind(this)}},fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"},verbose:window.DEBUG},e=(this.wilson=new WilsonGPU(canvas,i),this.createHiddenCanvas()),e=(this.wilsonHidden=new WilsonGPU(e,{...i,canvasWidth:this.resolutionHidden,draggableOptions:{}}),this.wilsonHidden.createFramebufferTexturePair({id:"draw",textureType:"float"}),this.wilsonHidden.useFramebuffer("draw"),{shader:tempShader,canvasWidth:Math.ceil(this.resolution/4),worldWidth:3,worldCenterX:-worldAdjust[0],worldCenterY:-worldAdjust[1],verbose:window.DEBUG});this.wilsonPreview=new WilsonGPU(previewCanvas,e),this.wilson.canvas.parentElement.appendChild(this.wilsonPreview.canvas),this.run({generatingCode:generatingCode,worldAdjust:worldAdjust,maxWorldSize:maxWorldSize,bailoutRadius:bailoutRadius})}async getShaders(forHiddenCanvas=!1){await loadGlsl();var i=this.needDraggable?"uniform vec2 draggableArg;":"",e=getVectorGlsl(this.worldAdjust),t=getFloatGlsl(this.bailoutRadius),s=getGlslBundle(this.generatingCode),r=forHiddenCanvas?"vec3(1.0)":"color";return{mandelbrot:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform int numIterations;
			uniform float brightnessScale;
			
			${i}
					
			${s}
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter + ${e};
				
				vec2 c = z;

				float r = length(z);
				
				vec3 color = normalize(
					vec3(
						abs(z.x + z.y) / 2.0,
						abs(z.x) / 2.0,
						abs(z.y) / 2.0
					)
					+ .1 / r * vec3(1.0)
				);
				
				float brightness = exp(-r);
				
				
				
				for (int iteration = 0; iteration < 8001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (r >= ${t})
					{
						break;
					}
					
					z = ${this.generatingCode};

					r = length(z);
					
					brightness += exp(-r);
				}
				
				// Lets us determine which points are in the Mandelbrot set.
				gl_FragColor = vec4(brightness / brightnessScale * ${r}, 1.0);
			}
		`,juliaPicker:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 juliaC;
			uniform int numIterations;
			uniform float brightnessScale;
			uniform float juliaRadius;
			uniform float crosshairSize;
			
			${i}
					
			${s}
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter + ${e};

				vec2 diffFromC = z - juliaC - ${e};
				float minWorldSize = min(worldSize.x, worldSize.y);

				vec2 minMaxDistanceToCrosshair = vec2(
					min(abs(diffFromC.x), abs(diffFromC.y)),
					max(abs(diffFromC.x), abs(diffFromC.y))
				) / minWorldSize;

				if (minMaxDistanceToCrosshair.x < 0.002 && minMaxDistanceToCrosshair.y < crosshairSize)
				{
					gl_FragColor = vec4(0.75, 0.75, 0.75, 1.0);
					return;
				}

				float distanceFromMouse = clamp(
					length(diffFromC) / minWorldSize * juliaRadius * 10.0,
					0.0,
					1.0
				);

				float t = distanceFromMouse < 0.5
					? 2.0 * distanceFromMouse * distanceFromMouse 
					: 1.0 - (-2.0 * distanceFromMouse + 2.0) * (-2.0 * distanceFromMouse + 2.0) / 2.0;
				
				// Remove the bias as the bubble expands.
				vec2 c = mix(juliaC + ${e}, z, t);
				
				vec3 color = normalize(
					vec3(
						abs(z.x + z.y) / 2.0,
						abs(z.x) / 2.0,
						abs(z.y) / 2.0
					)
					+ .1 / length(z) * vec3(1.0)
				);

				float r = length(z);
				
				float brightness = exp(-r);
				
				
				
				for (int iteration = 0; iteration < 8001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						
						return;
					}
					
					if (r >= ${t})
					{
						break;
					}
					
					z = ${this.generatingCode};

					r = length(z);
					
					brightness += exp(-r);
				}
				
				gl_FragColor = vec4(brightness / brightnessScale * ${r}, 1.0);
			}
		`,julia:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 c;
			uniform int numIterations;
			uniform float brightnessScale;
			
			${i}
					
			${s}
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter + ${e};
				
				vec3 color = normalize(
					vec3(
						abs(z.x + z.y) / 2.0,
						abs(z.x) / 2.0,
						abs(z.y) / 2.0
					)
					+ .1 / length(z) * vec3(1.0)
				);

				float r = length(z);
				
				float brightness = exp(-r);
				
				
				
				for (int iteration = 0; iteration < 8001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (r >= ${t})
					{
						break;
					}
					
					z = ${this.generatingCode};

					r = length(z);
					
					brightness += exp(-r);
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * ${r}, 1.0);
			}
		`,juliaToMandelbrot:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 juliaC;
			uniform int numIterations;
			uniform float brightnessScale;
			uniform float juliaProportion;
			
			${i}
					
			${s}
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter + ${e};
				
				vec3 color = normalize(
					vec3(
						abs(z.x + z.y) / 2.0,
						abs(z.x) / 2.0,
						abs(z.y) / 2.0
					)
					+ .1 / length(z) * vec3(1.0)
				);

				float r = length(z);
				
				float brightness = exp(-r);

				vec2 c = mix(z, juliaC, juliaProportion);
				
				
				
				for (int iteration = 0; iteration < 8001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (r >= ${t})
					{
						break;
					}
					
					z = ${this.generatingCode};

					r = length(z);
					
					brightness += exp(-r);
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * ${r}, 1.0);
			}
		`}}async run({generatingCode=this.generatingCode,worldAdjust=this.worldAdjust,maxWorldSize=this.maxWorldSize,bailoutRadius=this.bailoutRadius}){this.juliaMode="mandelbrot",this.generatingCode=generatingCode,this.worldAdjust=worldAdjust,this.maxWorldSize=maxWorldSize,this.bailoutRadius=bailoutRadius,this.needDraggable=-1!==generatingCode.indexOf("draggableArg");var[i,e]=await Promise.all([this.getShaders(),this.getShaders(!0)]);this.wilson.loadShader({id:"mandelbrot",shader:i.mandelbrot,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,draggableArg:[0,0]}}),this.wilson.loadShader({id:"juliaPicker",shader:i.juliaPicker,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,juliaC:this.c,juliaRadius:bubbleRadius,crosshairSize:.002,draggableArg:[0,0]}}),this.wilson.loadShader({id:"julia",shader:i.julia,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,c:this.c,draggableArg:[0,0]}}),this.wilson.loadShader({id:"juliaToMandelbrot",shader:i.juliaToMandelbrot,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,juliaProportion:1,juliaC:this.c,draggableArg:[0,0]}}),this.wilsonHidden.loadShader({id:"mandelbrot",shader:e.mandelbrot,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,draggableArg:[0,0]}}),this.wilsonHidden.loadShader({id:"juliaPicker",shader:e.juliaPicker,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,juliaC:this.c,juliaRadius:bubbleRadius,crosshairSize:.002,draggableArg:[0,0]}}),this.wilsonHidden.loadShader({id:"julia",shader:e.julia,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,c:this.c,draggableArg:[0,0]}}),this.wilsonHidden.loadShader({id:"juliaToMandelbrot",shader:e.juliaToMandelbrot,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,juliaProportion:1,juliaC:this.c,draggableArg:[0,0]}}),this.wilsonPreview.loadShader({id:"julia",shader:i.julia,uniforms:{worldCenter:[-worldAdjust[0],-worldAdjust[1]],worldSize:[3,3],numIterations:this.numIterations,brightnessScale:10,c:this.c,draggableArg:[0,0]}}),this.wilson.resizeWorld({width:4,height:4,centerX:0,centerY:0,minWorldX:-this.maxWorldSize/2,maxWorldX:this.maxWorldSize/2,minWorldY:-this.maxWorldSize/2,maxWorldY:this.maxWorldSize/2,minWidth:1e-5,minHeight:1e-5}),this.wilsonHidden.resizeWorld({width:4,height:4,centerX:0,centerY:0}),this.wilson.draggables.draggableArg.element.style.display=this.needDraggable?"block":"none",this.wilson.useShader("mandelbrot"),this.wilsonHidden.useShader("mandelbrot"),this.needNewFrame=!0,this.resume()}async advanceJuliaMode(){if("mandelbrot"===this.juliaMode)this.juliaMode="juliaPicker",this.wilson.setUniforms({juliaRadius:bubbleRadius},"juliaPicker"),this.wilsonHidden.setUniforms({juliaRadius:bubbleRadius},"juliaPicker"),this.wilsonPreview.canvas.style.opacity=0,this.wilsonPreview.canvas.style.zIndex=0,await new Promise(r=>requestAnimationFrame(r)),changeOpacity({element:this.wilsonPreview.canvas,opacity:1,duration:100}),this.c=[1e4,1e4];else if("julia"===this.juliaMode){this.juliaMode="juliaToMandelbrot",this.wilson.useShader(this.juliaMode),this.wilsonHidden.useShader(this.juliaMode),this.wilson.setUniforms({juliaProportion:1,c:this.c}),this.wilsonHidden.setUniforms({juliaProportion:1,c:this.c});const e=this.wilson.worldWidth,s=this.wilson.worldHeight,r=this.wilson.worldCenterX,o=this.wilson.worldCenterY;var i=Math.abs(Math.min(Math.log2(e/4),Math.log2(s/4)));await animate(t=>{this.wilson.resizeWorld({width:e*(1-t)+4*t,height:s*(1-t)+4*t,centerX:r*(1-t),centerY:o*(1-t)}),this.needNewFrame=!0},1<i?500:0<i?200:0,"easeInOutCubic"),0<i&&await sleep(100),await animate(t=>{this.wilson.setUniforms({juliaProportion:1-t}),this.wilsonHidden.setUniforms({juliaProportion:1-t}),this.wilson.resizeWorld({minX:-this.maxWorldSize/2-this.worldAdjust[0]*(1-t),maxX:this.maxWorldSize/2-this.worldAdjust[0]*(1-t),minY:-this.maxWorldSize/2-this.worldAdjust[1]*(1-t),maxY:this.maxWorldSize/2-this.worldAdjust[1]*(1-t)}),this.needNewFrame=!0},500,"easeInOutQuad"),this.juliaMode="mandelbrot"}else this.juliaMode="julia",this.ignoreBrightnessCalculation=!0,changeOpacity({element:this.wilsonPreview.canvas,opacity:0,duration:100}).then(()=>{this.wilsonPreview.canvas.style.zIndex=-1}),animate(t=>{this.wilson.setUniforms({juliaRadius:(1-t)*bubbleRadius}),this.wilsonHidden.setUniforms({juliaRadius:(1-t)*bubbleRadius}),this.needNewFrame=!0},600,"cubicBezier(0.2, 1, 0.2, 1)"),await sleep(500),this.ignoreBrightnessCalculation=!1,await animate(t=>{this.wilson.resizeWorld({minX:-this.maxWorldSize/2-this.worldAdjust[0]*t,maxX:this.maxWorldSize/2-this.worldAdjust[0]*t,minY:-this.maxWorldSize/2-this.worldAdjust[1]*t,maxY:this.maxWorldSize/2-this.worldAdjust[1]*t}),this.needNewFrame=!0},300,"easeInOutQuad"),this.c[0]+=this.worldAdjust[0],this.c[1]+=this.worldAdjust[1];this.wilson.useShader(this.juliaMode),this.wilsonHidden.useShader(this.juliaMode),"juliaPicker"===this.juliaMode&&currentlyTouchDevice?this.wilson.useInteractionForPanAndZoom=!1:this.wilson.useInteractionForPanAndZoom=!0,this.switchJuliaModeButton&&(this.switchJuliaModeButton.disabled="juliaPicker"===this.juliaMode),this.needNewFrame=!0}onMousemove({x,y}){"juliaPicker"===this.juliaMode&&(this.c=[x,y],this.wilson.setUniforms({crosshairSize:0}),this.wilsonHidden.setUniforms({crosshairSize:0}),this.needNewFrame=!0)}onMousedown(){"juliaPicker"===this.juliaMode&&this.advanceJuliaMode()}onTouchstart({x,y,event}){var i;event.preventDefault(),"juliaPicker"===this.juliaMode&&(i=.15*Math.min(this.wilson.worldHeight,this.wilson.worldWidth),this.c=[x,y+i],currentlyTouchDevice&&animate(t=>{this.wilson.setUniforms({crosshairSize:.02*t}),this.wilsonHidden.setUniforms({crosshairSize:.02*t}),this.needNewFrame=!0},100,"easeOutQuad"),this.needNewFrame=!0)}onTouchmove({x,y,event}){var i;event.preventDefault(),"juliaPicker"===this.juliaMode&&(i=.15*Math.min(this.wilson.worldHeight,this.wilson.worldWidth),this.c=[x,y+i],this.needNewFrame=!0)}onTouchend(){"juliaPicker"===this.juliaMode&&(this.advanceJuliaMode(),animate(t=>{this.wilson.setUniforms({crosshairSize:.02*(1-t)}),this.wilsonHidden.setUniforms({crosshairSize:.02*(1-t)}),this.needNewFrame=!0},100,"easeOutQuad"))}onDragDraggable({x,y}){for(const i of["mandelbrot","juliaPicker","julia","juliaToMandelbrot"])this.wilson.setUniforms({draggableArg:[x,y]},i),this.wilsonHidden.setUniforms({draggableArg:[x,y]},i);this.wilsonPreview.setUniforms({draggableArg:[x,y]}),this.needNewFrame=!0}updateBrightnessScale(){this.wilsonHidden.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:1}),"julia"===this.juliaMode?this.wilsonHidden.setUniforms({c:this.c}):"mandelbrot"!==this.juliaMode&&this.wilsonHidden.setUniforms({juliaC:this.c}),this.wilsonHidden.drawFrame();var i=this.wilsonHidden.readPixels({format:"float"}),e=new Array(this.resolutionHidden*this.resolutionHidden);for(let s=0;s<this.resolutionHidden*this.resolutionHidden;s++)e[s]=i[4*s];e.sort((a,b)=>a-b);var t=(e[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)]+e[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)])/1.5;this.pastBrightnessScales.push(t)}drawFrame(){this.ignoreBrightnessCalculation||this.updateBrightnessScale(),10<this.pastBrightnessScales.length&&this.pastBrightnessScales.shift();let i=0;for(let e=0;e<this.pastBrightnessScales.length;e++)i+=this.pastBrightnessScales[e];i/=this.pastBrightnessScales.length,this.wilson.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:i}),"julia"===this.juliaMode?this.wilson.setUniforms({c:this.c}):"juliaToMandelbrot"===this.juliaMode?this.wilson.setUniforms({juliaC:this.c}):"juliaPicker"===this.juliaMode&&(this.wilson.setUniforms({juliaC:this.c}),this.wilsonPreview.setUniforms({c:[this.c[0]+this.worldAdjust[0],this.c[1]+this.worldAdjust[1]]}),this.wilsonPreview.drawFrame()),this.wilson.drawFrame()}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.animationPaused=!0,await sleep(33)}}export{JuliaSetExplorer};
"use strict";class JuliaSet extends Applet{loadPromise=null;wilsonHidden=null;juliaMode=0;aspectRatio=1;numIterations=100;useDoublePrecision=!1;doublePrecision=!1;switchJuliaModeButtonElement=null;doublePrecisionZoomThreshhold=-16;pastBrightnessScales=[];a=0;b=1;resolution=1e3;resolutionHidden=100;lastTimestamp=-1;constructor(i,e=null){super(i),this.pan.minX=-2.75,this.pan.maxX=1.25,this.pan.minY=-2,this.pan.maxY=2,this.switchJuliaModeButtonElement=e;let t=this.createHiddenCanvas();this.loadPromise=new Promise(async(e,o)=>{await Site.loadGLSL();let n=`
    precision highp float;
    
    varying vec2 uv;
    
    uniform float aspectRatio;
    
    uniform vec2 worldCenterX;
    uniform vec2 worldCenterY;
    uniform float worldSize;
    
    uniform float a;
    uniform float b;
    uniform int numIterations;
    uniform float brightnessScale;
    
    
    
    void main(void)
    {
     vec2 z;
     
     if (aspectRatio >= 1.0)
     {
      z = vec2(uv.x * aspectRatio * worldSize + worldCenterX.x, uv.y * worldSize + worldCenterY.x);
     }
     
     else
     {
      z = vec2(uv.x * worldSize + worldCenterX.x, uv.y / aspectRatio * worldSize + worldCenterY.x);
     }
     
     vec2 c = z;
     
     vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     float brightness = exp(-length(z));
     
     
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
       return;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
      
      brightness += exp(-length(z));
     }
     
     
     gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
    }
   `,s=`
    precision highp float;
    
    varying vec2 uv;
    
    uniform float aspectRatio;
    
    uniform vec2 worldCenterX;
    uniform vec2 worldCenterY;
    uniform float worldSize;
    
    uniform float a;
    uniform float b;
    uniform int numIterations;
    uniform float brightnessScale;
    
    
    
    void main(void)
    {
     vec2 z;
     
     if (aspectRatio >= 1.0)
     {
      z = vec2(uv.x * aspectRatio * worldSize + worldCenterX.x, uv.y * worldSize + worldCenterY.x);
     }
     
     else
     {
      z = vec2(uv.x * worldSize + worldCenterX.x, uv.y / aspectRatio * worldSize + worldCenterY.x);
     }
     
     vec2 c = vec2(a, b);
     
     vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     float brightness = exp(-length(z));
     
     
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
       return;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
      
      brightness += exp(-length(z));
     }
     
     
     gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
    }
   `,r=`
    precision highp float;
    
    varying vec2 uv;
    
    uniform float aspectRatio;
    
    uniform vec2 worldCenterX;
    uniform vec2 worldCenterY;
    uniform float worldSize;
    
    uniform float a;
    uniform float b;
    uniform int numIterations;
    uniform float brightnessScale;
    
    
    
    void main(void)
    {
     vec2 z;
     
     if (aspectRatio >= 1.0)
     {
      z = vec2(uv.x * aspectRatio * worldSize + worldCenterX.x, uv.y * worldSize + worldCenterY.x);
     }
     
     else
     {
      z = vec2(uv.x * worldSize + worldCenterX.x, uv.y / aspectRatio * worldSize + worldCenterY.x);
     }
     
     vec2 c = z;
     
     vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     float brightness = exp(-length(z));
     
     
     
     bool broken = false;
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
       
       broken = true;
       
       break;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
      
      brightness += exp(-length(z));
     }
     
     
     
     if (!broken)
     {
      gl_FragColor = vec4(.5 * brightness / brightnessScale * color, 1.0);
     }
     
     
     
     z = vec2(uv.x * aspectRatio * 2.0, uv.y * 2.0);
     
     color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     brightness = exp(-length(z));
     
     broken = false;
     
     c = vec2(a, b);
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor.xyz /= 4.0;
       
       broken = true;
       
       break;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
      
      brightness += exp(-length(z));
     }
     
     if (!broken)
     {
      gl_FragColor += vec4(brightness / brightnessScale * color, 0.0);
     }
    }
   `,a=`
    precision highp float;
    
    varying vec2 uv;
    
    uniform float aspectRatio;
    
    uniform vec2 worldCenterX;
    uniform vec2 worldCenterY;
    uniform float worldSize;
    
    uniform float a;
    uniform float b;
    uniform int numIterations;
    uniform float brightnessScale;
    
    
    
    ${Site.doubleEmulationGLSL}
    
    
    
    void main(void)
    {
     vec4 z;
     
     if (aspectRatio >= 1.0)
     {
      z = dcAdd(dcMul(vec4(uv.x * aspectRatio, 0.0, uv.y, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
     }
     
     else
     {
      z = dcAdd(dcMul(vec4(uv.x, 0.0, uv.y / aspectRatio, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
     }
     
     vec4 c = z;
     
     vec3 color = normalize(vec3(abs(z.x + z.z) / 2.0, abs(z.x) / 2.0, abs(z.z) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     float brightness = exp(-length(z));
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
       return;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = dcAdd(dcMul(z, z), c);
      
      brightness += exp(-length(z));
     }
     
     gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
    }
   `,l=`
    precision highp float;
    
    varying vec2 uv;
    
    uniform float aspectRatio;
    
    uniform vec2 worldCenterX;
    uniform vec2 worldCenterY;
    uniform float worldSize;
    
    uniform float a;
    uniform float b;
    uniform int numIterations;
    uniform float brightnessScale;
    
    
    
    ${Site.doubleEmulationGLSL}
    
    
    
    void main(void)
    {
     vec4 z;
     
     if (aspectRatio >= 1.0)
     {
      z = dcAdd(dcMul(vec4(uv.x * aspectRatio, 0.0, uv.y, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
     }
     
     else
     {
      z = dcAdd(dcMul(vec4(uv.x, 0.0, uv.y / aspectRatio, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
     }
     
     vec4 c = vec4(a, 0.0, b, 0.0);
     
     vec3 color = normalize(vec3(abs(z.x + z.z) / 2.0, abs(z.x) / 2.0, abs(z.z) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     float brightness = exp(-length(z));
     
     
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
       return;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = dcAdd(dcMul(z, z), c);
      
      brightness += exp(-length(z));
     }
     
     
     gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
    }
   `,h=`
    precision highp float;
    
    varying vec2 uv;
    
    uniform float aspectRatio;
    
    uniform vec2 worldCenterX;
    uniform vec2 worldCenterY;
    uniform float worldSize;
    
    uniform float a;
    uniform float b;
    uniform int numIterations;
    uniform float brightnessScale;
    
    
    
    ${Site.doubleEmulationGLSL}
    
    
    
    void main(void)
    {
     vec4 z;
     
     if (aspectRatio >= 1.0)
     {
      z = dcAdd(dcMul(vec4(uv.x * aspectRatio, 0.0, uv.y, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
     }
     
     else
     {
      z = dcAdd(dcMul(vec4(uv.x, 0.0, uv.y / aspectRatio, 0.0), vec2(worldSize, 0.0)), vec4(worldCenterX, worldCenterY));
     }
     
     vec4 c = z;
     
     vec3 color = normalize(vec3(abs(z.x + z.z) / 2.0, abs(z.x) / 2.0, abs(z.z) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     float brightness = exp(-length(z));
     
     
     
     bool broken = false;
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
       
       broken = true;
       
       break;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = dcAdd(dcMul(z, z), c);
      
      brightness += exp(-length(z));
     }
     
     
     
     if (!broken)
     {
      gl_FragColor = vec4(.5 * brightness / brightnessScale * color, 1.0);
     }
     
     
     
     z = c;
     
     c = vec4(a, 0.0, b, 0.0);
     
     color = normalize(vec3(abs(z.x + z.z) / 2.0, abs(z.x) / 2.0, abs(z.z) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
     
     brightness = exp(-length(z));
     
     broken = false;
     
     for (int iteration = 0; iteration < 3001; iteration++)
     {
      if (iteration == numIterations)
      {
       gl_FragColor.xyz /= 4.0;
       
       broken = true;
       
       break;
      }
      
      if (length(z) >= 4.0)
      {
       break;
      }
      
      z = dcAdd(dcMul(z, z), c);
      
      brightness += exp(-length(z));
     }
     
     if (!broken)
     {
      gl_FragColor += vec4(brightness / brightnessScale * color, 0.0);
     }
    }
   `,d={renderer:"gpu",shader:n,canvasWidth:1e3,canvasHeight:1e3,worldWidth:4,worldHeight:4,worldCenterX:-.75,worldCenterY:0,useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:this.changeAspectRatio.bind(this),mousedownCallback:this.onGrabCanvas.bind(this),touchstartCallback:this.onGrabCanvas.bind(this),mousemoveCallback:this.onHoverCanvas.bind(this),mousedragCallback:this.onDragCanvas.bind(this),touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),touchendCallback:this.onReleaseCanvas.bind(this),wheelCallback:this.onWheelCanvas.bind(this),pinchCallback:this.onPinchCanvas.bind(this)},c={renderer:"gpu",shader:n,canvasWidth:100,canvasHeight:100};this.wilson=new Wilson(i,d),this.wilson.render.loadNewShader(s),this.wilson.render.loadNewShader(r),this.wilson.render.loadNewShader(a),this.wilson.render.loadNewShader(l),this.wilson.render.loadNewShader(h);for(let u=0;u<6;u++)this.wilson.render.initUniforms(["aspectRatio","worldCenterX","worldCenterY","worldSize","a","b","numIterations","brightnessScale"],u);this.wilsonHidden=new Wilson(t,c),this.wilsonHidden.render.loadNewShader(s),this.wilsonHidden.render.loadNewShader(r),this.wilsonHidden.render.loadNewShader(a),this.wilsonHidden.render.loadNewShader(l),this.wilsonHidden.render.loadNewShader(h);for(let $=0;$<6;$++)this.wilsonHidden.render.initUniforms(["aspectRatio","worldCenterX","worldCenterY","worldSize","a","b","numIterations","brightnessScale"],$);this.zoom.init(),window.requestAnimationFrame(this.drawFrame.bind(this));let w=this.changeAspectRatio.bind(this);window.addEventListener("resize",w),this.handlers.push([window,"resize",w])})}toggleUseDoublePrecision(){this.useDoublePrecision=!this.useDoublePrecision,this.zoomCanvas()}toggleDoublePrecision(){this.doublePrecision=!this.doublePrecision,this.doublePrecision?this.wilson.canvas.style.borderColor="rgb(127, 0, 0)":this.wilson.canvas.style.borderColor="rgb(127, 127, 127)"}advanceJuliaMode(){if(0===this.juliaMode){this.juliaMode=2,this.a=0,this.b=0,this.pastBrightnessScales=[];try{Page.Animate.changeOpacity(this.switchJuliaModeButtonElement,0,Site.opacityAnimationTime).then(()=>{this.switchJuliaModeButtonElement.textContent="Return to Mandelbrot"})}catch(i){}}else if(1===this.juliaMode){this.juliaMode=0,this.wilson.worldCenterX=-.75,this.wilson.worldCenterY=0,this.wilson.worldWidth=4,this.wilson.worldHeight=4,this.pan.minX=-2.75,this.pan.maxX=1.25,this.pan.minY=-2,this.pan.maxY=2,this.zoom.init(),this.pastBrightnessScales=[];try{Page.Animate.changeOpacity(this.switchJuliaModeButtonElement,0,Site.opacityAnimationTime).then(()=>{this.switchJuliaModeButtonElement.textContent="Pick Julia Set",Page.Animate.changeOpacity(this.switchJuliaModeButtonElement,1,Site.opacityAnimationTime)})}catch(e){}}}onGrabCanvas(i,e,t){if(this.pan.onGrabCanvas(),this.zoom.onGrabCanvas(),2===this.juliaMode&&"mousedown"===t.type){this.juliaMode=1,this.wilson.worldCenterX=0,this.wilson.worldCenterY=0,this.wilson.worldWidth=4,this.wilson.worldHeight=4,this.pan.minX=-2,this.pan.maxX=2,this.pan.minY=-2,this.pan.maxY=2,this.zoom.init(),this.pastBrightnessScales=[];try{Page.Animate.changeOpacity(this.switchJuliaModeButtonElement,1,Site.opacityAnimationTime)}catch(o){}}}onDragCanvas(i,e,t,o,n){2===this.juliaMode&&"touchmove"===n.type?(this.a=i,this.b=e):this.pan.onDragCanvas(i,e,t,o)}onHoverCanvas(i,e,t,o,n){2===this.juliaMode&&"mousemove"===n.type&&(this.a=i,this.b=e)}onReleaseCanvas(i,e,t){if(2===this.juliaMode&&"touchend"===t.type){this.juliaMode=1,this.wilson.worldCenterX=0,this.wilson.worldCenterY=0,this.wilson.worldWidth=4,this.wilson.worldHeight=4,this.pan.minX=-2,this.pan.maxX=2,this.pan.minY=-2,this.pan.maxY=2,this.zoom.init(),this.pastBrightnessScales=[];try{Page.Animate.changeOpacity(this.switchJuliaModeButtonElement,1,Site.opacityAnimationTime)}catch(o){}}else this.pan.onReleaseCanvas(),this.zoom.onReleaseCanvas()}onWheelCanvas(i,e,t,o){2!==this.juliaMode&&this.zoom.onWheelCanvas(i,e,t)}onPinchCanvas(i,e,t,o){2!==this.juliaMode&&this.zoom.onPinchCanvas(i,e,t)}drawFrame(i){let e=i-this.lastTimestamp;if(this.lastTimestamp=i,0===e)return;this.pan.update(),this.zoom.update();let t=Applet.doubleToDf(this.wilson.worldCenterX),o=Applet.doubleToDf(this.wilson.worldCenterY),n=this.juliaMode+3*this.doublePrecision;this.numIterations=-(30*this.zoom.level)+200,this.wilsonHidden.gl.useProgram(this.wilsonHidden.render.shaderPrograms[n]),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.aspectRatio[n],1),this.wilsonHidden.gl.uniform2fv(this.wilsonHidden.uniforms.worldCenterX[n],t),this.wilsonHidden.gl.uniform2fv(this.wilsonHidden.uniforms.worldCenterY[n],o),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.worldSize[n],Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2),this.wilsonHidden.gl.uniform1i(this.wilsonHidden.uniforms.numIterations[n],this.numIterations),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.a[n],this.a),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.b[n],this.b),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.brightnessScale[n],20*(Math.abs(this.zoom.level)+1)),this.wilsonHidden.render.drawFrame();let s=this.wilsonHidden.render.getPixelData(),r=Array(this.resolutionHidden*this.resolutionHidden);for(let a=0;a<this.resolutionHidden*this.resolutionHidden;a++)r[a]=s[4*a]+s[4*a+1]+s[4*a+2];r.sort((i,e)=>i-e);let l=(r[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+r[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)])/255*15*(Math.abs(this.zoom.level/2)+1);this.pastBrightnessScales.push(l);let h=this.pastBrightnessScales.length;h>10&&this.pastBrightnessScales.shift(),l=Math.max(this.pastBrightnessScales.reduce((i,e)=>i+e)/h,.5),this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[n]),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatio[n],this.aspectRatio),this.wilson.gl.uniform2fv(this.wilson.uniforms.worldCenterX[n],t),this.wilson.gl.uniform2fv(this.wilson.uniforms.worldCenterY[n],o),this.wilson.gl.uniform1f(this.wilson.uniforms.worldSize[n],Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2),this.wilson.gl.uniform1i(this.wilson.uniforms.numIterations[n],this.numIterations),this.wilson.gl.uniform1f(this.wilson.uniforms.a[n],this.a),this.wilson.gl.uniform1f(this.wilson.uniforms.b[n],this.b),this.wilson.gl.uniform1f(this.wilson.uniforms.brightnessScale[n],l),this.wilson.render.drawFrame(),this.animationPaused||window.requestAnimationFrame(this.drawFrame.bind(this))}changeAspectRatio(){this.wilson.fullscreen.currentlyFullscreen?(this.aspectRatio=window.innerWidth/window.innerHeight,this.aspectRatio>=1?(this.wilson.changeCanvasSize(this.resolution,Math.floor(this.resolution/this.aspectRatio)),this.wilson.worldWidth=4*Math.pow(2,this.zoom.level)*this.aspectRatio,this.wilson.worldHeight=4*Math.pow(2,this.zoom.level)):(this.wilson.changeCanvasSize(Math.floor(this.resolution*this.aspectRatio),this.resolution),this.wilson.worldWidth=4*Math.pow(2,this.zoom.level),this.wilson.worldHeight=4*Math.pow(2,this.zoom.level)/this.aspectRatio)):(this.aspectRatio=1,this.wilson.changeCanvasSize(this.resolution,this.resolution),this.wilson.worldWidth=4*Math.pow(2,this.zoom.level),this.wilson.worldHeight=4*Math.pow(2,this.zoom.level))}}
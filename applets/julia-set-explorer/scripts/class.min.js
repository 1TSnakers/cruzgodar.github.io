import{loadGlsl}from"../../../scripts/src/complexGlsl.min.js";import{Applet}from"/scripts/applets/applet.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";class JuliaSet extends Applet{wilsonHidden;juliaMode=0;aspectRatio=1;numIterations=100;switchJuliaModeButton;pastBrightnessScales=[];c=[0,1];resolution=1e3;resolutionHidden=100;constructor({canvas,switchJuliaModeButton}){super(canvas),this.switchJuliaModeButton=switchJuliaModeButton,loadGlsl().then(()=>this.run({canvas:canvas}))}run({canvas}){var i={shaders:{mandelbrot:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform int numIterations;
			uniform float brightnessScale;
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec2 c = z;
				
				vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				float brightness = exp(-length(z));
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
					
					brightness += exp(-length(z));
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`,julia:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 c;
			uniform int numIterations;
			uniform float brightnessScale;
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				float brightness = exp(-length(z));
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
					
					brightness += exp(-length(z));
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`,juliaPicker:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 c;
			uniform int numIterations;
			uniform float brightnessScale;
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec2 mandelbrotC = z;
				
				vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				float brightness = exp(-length(z));
				
				
				
				bool broken = false;
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						
						broken = true;
						
						break;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + mandelbrotC;
					
					brightness += exp(-length(z));
				}
				
				
				
				if (!broken)
				{
					gl_FragColor = vec4(.5 * brightness / brightnessScale * color, 1.0);
				}
				
				
				
				z = uv * 2.0;
				
				color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				brightness = exp(-length(z));
				
				broken = false;
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor.xyz /= 4.0;
						
						broken = true;
						
						break;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
					
					brightness += exp(-length(z));
				}
				
				if (!broken)
				{
					gl_FragColor += vec4(brightness / brightnessScale * color, 0.0);
				}
			}
		`},uniforms:{mandelbrot:{worldCenter:[-.75,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10},julia:{worldCenter:[-.75,0],worldSize:[4,4],c:this.c,numIterations:this.numIterations,brightnessScale:10},juliaPicker:{worldCenter:[-.75,0],worldSize:[4,4],c:this.c,numIterations:this.numIterations,brightnessScale:10}},canvasWidth:this.resolution,worldWidth:4,worldHeight:4,worldCenterX:-.75,worldCenterY:0,minWorldCenterX:-2,maxWorldCenterX:2,minWorldCenterY:-2,maxWorldCenterY:2,minWorldWidth:3e-6,maxWorldWidth:4,minWorldHeight:3e-6,maxWorldHeight:4,onResizeCanvas:this.drawFrame.bind(this),interactionOptions:{useForPanAndZoom:!0,onPanAndZoom:this.drawFrame.bind(this)},fullscreenOptions:{fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonGPU(canvas,i),this.wilson.useShader("mandelbrot"),this.drawFrame()}advanceJuliaMode(){0===this.juliaMode?(this.juliaMode=2,this.a=0,this.b=0,this.pastBrightnessScales=[],this.switchJuliaModeButton&&(this.switchJuliaModeButton.disabled=!0)):1===this.juliaMode&&(this.juliaMode=0,this.wilson.worldCenterX=-.75,this.wilson.worldCenterY=0,this.wilson.worldWidth=4,this.wilson.worldHeight=4,this.pan.setBounds({minX:-2.75,maxX:1.25,minY:-2,maxY:2}),this.zoom.init(),this.pastBrightnessScales=[]),this.needNewFrame=!0}onGrabCanvas(x,y,event){this.pan.onGrabCanvas(),this.zoom.onGrabCanvas(),2===this.juliaMode&&"mousedown"===event.type&&(this.juliaMode=1,this.wilson.worldCenterX=0,this.wilson.worldCenterY=0,this.wilson.worldWidth=4,this.wilson.worldHeight=4,this.pan.setBounds({minX:-2,maxX:2,minY:-2,maxY:2}),this.zoom.init(),this.pastBrightnessScales=[],this.switchJuliaModeButton)&&(this.switchJuliaModeButton.disabled=!1),this.needNewFrame=!0}onDragCanvas(x,y,xDelta,yDelta,event){2===this.juliaMode&&"touchmove"===event.type?(this.a=x,this.b=y):this.pan.onDragCanvas(x,y,xDelta,yDelta),this.needNewFrame=!0}onHoverCanvas(x,y,xDelta,yDelta,event){2===this.juliaMode&&"mousemove"===event.type&&(this.a=x,this.b=y,this.needNewFrame=!0)}onReleaseCanvas(x,y,event){2===this.juliaMode&&"touchend"===event.type?(this.juliaMode=1,this.wilson.worldCenterX=0,this.wilson.worldCenterY=0,this.wilson.worldWidth=4,this.wilson.worldHeight=4,this.pan.setBounds({minX:-2,maxX:2,minY:-2,maxY:2}),this.zoom.init(),this.pastBrightnessScales=[],this.switchJuliaModeButton&&(this.switchJuliaModeButton.disabled=!1)):(this.pan.onReleaseCanvas(),this.zoom.onReleaseCanvas()),this.needNewFrame=!0}drawFrame(){this.numIterations=200,this.wilson.setUniform({name:"worldSize",value:[this.wilson.worldWidth,this.wilson.worldHeight]}),this.wilson.setUniform({name:"worldCenter",value:[this.wilson.worldCenterX,this.wilson.worldCenterY]}),this.wilson.setUniform({name:"numIterations",value:this.numIterations}),this.wilson.setUniform({name:"brightnessScale",value:10}),this.wilson.drawFrame(),this.wilsonHidden.gl.useProgram(this.wilsonHidden.render.shaderPrograms[this.juliaMode]),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.aspectRatio[this.juliaMode],1),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.worldCenterX[this.juliaMode],this.wilson.worldCenterX),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.worldCenterY[this.juliaMode],this.wilson.worldCenterY),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.worldSize[this.juliaMode],Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2),this.wilsonHidden.gl.uniform1i(this.wilsonHidden.uniforms.numIterations[this.juliaMode],this.numIterations),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.a[this.juliaMode],this.a),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.b[this.juliaMode],this.b),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.brightnessScale[this.juliaMode],20*(Math.abs(this.zoom.level)+1)),this.wilsonHidden.render.drawFrame();var i=this.wilsonHidden.render.getPixelData(),e=new Array(this.resolutionHidden*this.resolutionHidden);for(let n=0;n<this.resolutionHidden*this.resolutionHidden;n++)e[n]=i[4*n]+i[4*n+1]+i[4*n+2];e.sort((a,b)=>a-b);var t=(e[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+e[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)])/255*15*(Math.abs(this.zoom.level/2)+1),s=(this.pastBrightnessScales.push(t),this.pastBrightnessScales.length);10<s&&this.pastBrightnessScales.shift(),t=Math.max(this.pastBrightnessScales.reduce((a,b)=>a+b)/s,.5),this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[this.juliaMode]),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatio[this.juliaMode],this.aspectRatio),this.wilson.gl.uniform1f(this.wilson.uniforms.worldCenterX[this.juliaMode],this.wilson.worldCenterX),this.wilson.gl.uniform1f(this.wilson.uniforms.worldCenterY[this.juliaMode],this.wilson.worldCenterY),this.wilson.gl.uniform1f(this.wilson.uniforms.worldSize[this.juliaMode],Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2),this.wilson.gl.uniform1i(this.wilson.uniforms.numIterations[this.juliaMode],this.numIterations),this.wilson.gl.uniform1f(this.wilson.uniforms.a[this.juliaMode],this.a),this.wilson.gl.uniform1f(this.wilson.uniforms.b[this.juliaMode],this.b),this.wilson.gl.uniform1f(this.wilson.uniforms.brightnessScale[this.juliaMode],t),this.wilson.render.drawFrame()}}export{JuliaSet};
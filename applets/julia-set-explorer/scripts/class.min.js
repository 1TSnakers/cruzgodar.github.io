import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{currentlyTouchDevice}from"/scripts/src/interaction.min.js";import{animate,sleep}from"/scripts/src/utils.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";const touchBubbleRadius=.5,mouseBubbleRadius=1;class JuliaSetExplorer extends AnimationFrameApplet{wilsonHidden;juliaMode="mandelbrot";numIterations=100;switchJuliaModeButton;ignoreBrightnessCalculation=!1;pastBrightnessScales=[];c=[0,0];resolution=500;resolutionHidden=50;constructor({canvas,switchJuliaModeButton}){super(canvas),this.switchJuliaModeButton=switchJuliaModeButton;var e={shaders:{mandelbrot:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform int numIterations;
			uniform float brightnessScale;
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter - vec2(0.75, 0.0);
				
				vec2 c = z;
				
				vec3 color = normalize(
					vec3(
						abs(z.x + z.y) / 2.0,
						abs(z.x) / 2.0,
						abs(z.y) / 2.0
					)
					+ .1 / length(z) * vec3(1.0)
				);
				
				float brightness = exp(-length(z));
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
					
					brightness += exp(-length(z));
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`,juliaPicker:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 c;
			uniform int numIterations;
			uniform float brightnessScale;
			uniform float juliaRadius;
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter - vec2(0.75, 0.0);

				float distanceFromMouse = clamp(
					length(z - c + vec2(0.75, 0.0))
						/ max(worldSize.x, worldSize.y)
						* juliaRadius * 10.0,
					0.0,
					1.0
				);

				float t = distanceFromMouse < 0.5
					? 2.0 * distanceFromMouse * distanceFromMouse 
					: 1.0 - (-2.0 * distanceFromMouse + 2.0) * (-2.0 * distanceFromMouse + 2.0) / 2.0;
				
				// Remove the bias as the bubble expands.
				vec2 usableC = mix(c - vec2(0.75, 0.0), z, t);
				
				vec3 color = normalize(
					vec3(
						abs(z.x + z.y) / 2.0,
						abs(z.x) / 2.0,
						abs(z.y) / 2.0
					)
					+ .1 / length(z) * vec3(1.0)
				);
				
				float brightness = exp(-length(z));
				
				
				
				bool broken = false;
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						
						return;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + usableC;
					
					brightness += exp(-length(z));
				}
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`,julia:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 c;
			uniform int numIterations;
			uniform float brightnessScale;
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter - vec2(0.75, 0.0);
				
				vec3 color = normalize(
					vec3(
						abs(z.x + z.y) / 2.0,
						abs(z.x) / 2.0,
						abs(z.y) / 2.0
					)
					+ .1 / length(z) * vec3(1.0)
				);
				
				float brightness = exp(-length(z));
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
					
					brightness += exp(-length(z));
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`,juliaToMandelbrot:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 c;
			uniform int numIterations;
			uniform float brightnessScale;
			uniform float juliaProportion;
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter - vec2(0.75, 0.0);
				
				vec3 color = normalize(
					vec3(
						abs(z.x + z.y) / 2.0,
						abs(z.x) / 2.0,
						abs(z.y) / 2.0
					)
					+ .1 / length(z) * vec3(1.0)
				);
				
				float brightness = exp(-length(z));

				vec2 usableC = mix(z, c, juliaProportion);
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + usableC;
					
					brightness += exp(-length(z));
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`},uniforms:{mandelbrot:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10},juliaPicker:{worldCenter:[0,0],worldSize:[4,4],c:this.c,numIterations:this.numIterations,brightnessScale:10,juliaRadius:1},julia:{worldCenter:[0,0],worldSize:[4,4],c:this.c,numIterations:this.numIterations,brightnessScale:10},juliaToMandelbrot:{worldCenter:[0,0],worldSize:[4,4],c:this.c,numIterations:this.numIterations,brightnessScale:10,juliaProportion:1}},canvasWidth:this.resolution,worldWidth:4,worldCenterX:0,worldCenterY:0,minWorldX:-2,maxWorldX:2,minWorldY:-2,maxWorldY:2,minWorldWidth:1e-5,minWorldHeight:1e-5,useResetButton:!0,resetButtonIconPath:"/graphics/general-icons/reset.png",onResizeCanvas:()=>this.needNewFrame=!0,interactionOptions:{useForPanAndZoom:!0,onPanAndZoom:()=>this.needNewFrame=!0,callbacks:{mousemove:this.onMousemove.bind(this),mousedown:this.onMousedown.bind(this),touchmove:this.onTouchmove.bind(this),touchend:this.onTouchend.bind(this)}},fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"},verbose:window.DEBUG},i=(this.wilson=new WilsonGPU(canvas,e),this.wilson.useShader("mandelbrot"),this.createHiddenCanvas());this.wilsonHidden=new WilsonGPU(i,{...e,canvasWidth:this.resolutionHidden}),this.wilsonHidden.useShader("mandelbrot"),this.needNewFrame=!0,this.resume()}async advanceJuliaMode(){if("mandelbrot"===this.juliaMode)this.juliaMode="juliaPicker",this.wilson.setUniforms({juliaRadius:currentlyTouchDevice?touchBubbleRadius:mouseBubbleRadius},"juliaPicker"),this.wilsonHidden.setUniforms({juliaRadius:currentlyTouchDevice?touchBubbleRadius:mouseBubbleRadius},"juliaPicker"),this.c=[1e3,1e3];else if("julia"===this.juliaMode){this.juliaMode="juliaToMandelbrot",this.wilson.useShader(this.juliaMode),this.wilsonHidden.useShader(this.juliaMode),this.wilson.setUniforms({juliaProportion:1,c:this.c}),this.wilsonHidden.setUniforms({juliaProportion:1,c:this.c});const i=this.wilson.worldWidth,s=this.wilson.worldHeight;var e=-Math.min(Math.log2(i/4),Math.log2(s/4));await animate(t=>{this.wilson.resizeWorld({width:i*(1-t)+4*t,height:s*(1-t)+4*t}),this.needNewFrame=!0},1<e?500:0<e?200:0,"easeInOutQuad"),0<e&&await sleep(100),await animate(t=>{this.wilson.setUniforms({juliaProportion:1-t}),this.wilsonHidden.setUniforms({juliaProportion:1-t}),this.wilson.resizeWorld({minX:.75*(1-t)-2,maxX:2+.75*(1-t)}),this.needNewFrame=!0},600,"easeInOutQuad"),this.juliaMode="mandelbrot"}else this.juliaMode="julia",this.ignoreBrightnessCalculation=!0,await animate(t=>{this.wilson.setUniforms({juliaRadius:(1-t)*(currentlyTouchDevice?touchBubbleRadius:mouseBubbleRadius)}),this.wilsonHidden.setUniforms({juliaRadius:(1-t)*(currentlyTouchDevice?touchBubbleRadius:mouseBubbleRadius)}),this.needNewFrame=!0},600,"easeOutQuint"),this.ignoreBrightnessCalculation=!1,await animate(t=>{this.wilson.resizeWorld({minX:.75*t-2,maxX:2+.75*t}),this.needNewFrame=!0},300,"easeInOutQuad"),this.c[0]-=.75;this.wilson.useShader(this.juliaMode),this.wilsonHidden.useShader(this.juliaMode),"juliaPicker"===this.juliaMode&&currentlyTouchDevice?this.wilson.useInteractionForPanAndZoom=!1:this.wilson.useInteractionForPanAndZoom=!0,this.switchJuliaModeButton&&(this.switchJuliaModeButton.disabled="juliaPicker"===this.juliaMode),this.needNewFrame=!0}onMousemove({x,y}){"juliaPicker"===this.juliaMode&&(this.c=[x,y],this.needNewFrame=!0)}onMousedown(){"juliaPicker"===this.juliaMode&&this.advanceJuliaMode()}onTouchmove({x,y,event}){event.preventDefault(),"juliaPicker"===this.juliaMode&&(this.c=[x,y],this.needNewFrame=!0)}onTouchend(){"juliaPicker"===this.juliaMode&&this.advanceJuliaMode()}updateBrightnessScale(zoomLevel){this.wilsonHidden.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:20+zoomLevel}),"mandelbrot"!==this.juliaMode&&this.wilsonHidden.setUniforms({c:this.c}),this.wilsonHidden.drawFrame();var e=this.wilsonHidden.readPixels(),i=new Array(this.resolutionHidden*this.resolutionHidden);for(let s=0;s<this.resolutionHidden*this.resolutionHidden;s++)i[s]=e[4*s]+e[4*s+1]+e[4*s+2];i.sort((a,b)=>a-b);var t=Math.max((i[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+i[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)])/25,4);this.pastBrightnessScales.push(t)}drawFrame(){var e=3-Math.log2(this.wilson.worldWidth);this.numIterations=Math.ceil(200+40*e),this.ignoreBrightnessCalculation||this.updateBrightnessScale(e),10<this.pastBrightnessScales.length&&this.pastBrightnessScales.shift();let i=0;for(let t=0;t<this.pastBrightnessScales.length;t++)i+=this.pastBrightnessScales[t];i=Math.max(i/this.pastBrightnessScales.length,.5),this.wilson.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:i}),"mandelbrot"!==this.juliaMode&&this.wilson.setUniforms({c:this.c}),this.wilson.drawFrame()}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.animationPaused=!0,await sleep(33)}}export{JuliaSetExplorer};
import{Applet}from"/scripts/applets/applet.min.js";import{siteSettings}from"/scripts/src/settings.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";class JuliaSet extends Applet{wilsonHidden;juliaMode="mandelbrot";numIterations=100;switchJuliaModeButton;pastBrightnessScales=[];c=[0,0];resolution=1e3;resolutionHidden=50;constructor({canvas,switchJuliaModeButton}){super(canvas),this.switchJuliaModeButton=switchJuliaModeButton;var e={shaders:{mandelbrot:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform int numIterations;
			uniform float brightnessScale;
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec2 c = z;
				
				vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				float brightness = exp(-length(z));
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
					
					brightness += exp(-length(z));
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`,julia:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 c;
			uniform int numIterations;
			uniform float brightnessScale;
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				float brightness = exp(-length(z));
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
					
					brightness += exp(-length(z));
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`,juliaPicker:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 c;
			uniform int numIterations;
			uniform float brightnessScale;
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec2 mandelbrotC = z;
				
				vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				float brightness = exp(-length(z));
				
				
				
				bool broken = false;
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						
						broken = true;
						
						break;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + mandelbrotC;
					
					brightness += exp(-length(z));
				}
				
				
				
				if (!broken)
				{
					gl_FragColor = vec4(.5 * brightness / brightnessScale * color, 1.0);
				}
				
				
				
				z = uv * 2.0;
				
				color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				brightness = exp(-length(z));
				
				broken = false;
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor.xyz /= 4.0;
						
						broken = true;
						
						break;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
					
					brightness += exp(-length(z));
				}
				
				if (!broken)
				{
					gl_FragColor += vec4(brightness / brightnessScale * color, 0.0);
				}
			}
		`},uniforms:{mandelbrot:{worldCenter:[-.75,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10},julia:{worldCenter:[-.75,0],worldSize:[4,4],c:this.c,numIterations:this.numIterations,brightnessScale:10},juliaPicker:{worldCenter:[-.75,0],worldSize:[4,4],c:this.c,numIterations:this.numIterations,brightnessScale:10}},canvasWidth:this.resolution,worldWidth:4,worldHeight:4,worldCenterX:-.75,worldCenterY:0,minWorldCenterX:-2,maxWorldCenterX:2,minWorldCenterY:-2,maxWorldCenterY:2,minWorldWidth:1e-5,maxWorldWidth:4,minWorldHeight:1e-5,maxWorldHeight:4,onResizeCanvas:this.drawFrame.bind(this),reduceMotion:siteSettings.reduceMotion,interactionOptions:{useForPanAndZoom:!0,onPanAndZoom:this.drawFrame.bind(this),callbacks:{mousemove:this.onMousemove.bind(this),mousedown:this.onMousedown.bind(this),touchmove:this.onTouchmove.bind(this),touchend:this.onTouchend.bind(this)}},fullscreenOptions:{fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}},i=(this.wilson=new WilsonGPU(canvas,e),this.wilson.useShader("mandelbrot"),this.createHiddenCanvas());this.wilsonHidden=new WilsonGPU(i,{...e,canvasWidth:this.resolutionHidden}),this.wilsonHidden.useShader("mandelbrot"),this.drawFrame()}advanceJuliaMode(){"mandelbrot"===this.juliaMode?(this.juliaMode="juliaPicker",this.c=[0,0]):"julia"===this.juliaMode?(this.juliaMode="mandelbrot",this.wilson.resizeWorld({width:4,height:4,centerX:-.75,centerY:0})):(this.juliaMode="julia",this.wilson.resizeWorld({width:4,height:4,centerX:0,centerY:0})),this.pastBrightnessScales=[],this.wilson.useShader(this.juliaMode),this.wilsonHidden.useShader(this.juliaMode),this.wilson.useInteractionForPanAndZoom="juliaPicker"!==this.juliaMode,this.switchJuliaModeButton&&(this.switchJuliaModeButton.disabled="juliaPicker"===this.juliaMode),this.drawFrame()}onMousemove({x,y}){"juliaPicker"===this.juliaMode&&(this.c=[x,y],requestAnimationFrame(()=>this.drawFrame()))}onMousedown(){"juliaPicker"===this.juliaMode&&this.advanceJuliaMode()}onTouchmove({x,y}){"juliaPicker"===this.juliaMode&&(this.c=[x,y],requestAnimationFrame(()=>this.drawFrame()))}onTouchend(){"juliaPicker"===this.juliaMode&&this.advanceJuliaMode()}drawFrame(){var e=3-Math.log2(this.wilson.worldWidth),i=(this.numIterations=Math.ceil(200+40*e),this.wilsonHidden.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:20+e}),"mandelbrot"!==this.juliaMode&&this.wilsonHidden.setUniforms({c:this.c}),this.wilsonHidden.drawFrame(),this.wilsonHidden.readPixels()),t=new Array(this.resolutionHidden*this.resolutionHidden);for(let o=0;o<this.resolutionHidden*this.resolutionHidden;o++)t[o]=i[4*o]+i[4*o+1]+i[4*o+2];t.sort((a,b)=>a-b);e=(t[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+t[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)])/25+2*e;this.pastBrightnessScales.push(e),10<this.pastBrightnessScales.length&&this.pastBrightnessScales.shift();let n=0;for(let s=0;s<this.pastBrightnessScales.length;s++)n+=this.pastBrightnessScales[s];n=Math.max(n/this.pastBrightnessScales.length,.5),this.wilson.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:n}),"mandelbrot"!==this.juliaMode&&this.wilson.setUniforms({c:this.c}),this.wilson.drawFrame()}}export{JuliaSet};
"use strict";class NewtonsMethodExtended extends Applet{loadPromise=null;wilsonHidden=null;a=[1,0];c=[0,0];aspectRatio=1;numIterations=100;pastBrightnessScales=[];resolution=500;resolutionHidden=100;derivativePrecision=20;lastTimestamp=-1;colors=null;constructor(i){super(i);let e="precision highp float; varying vec2 uv; void main(void) { gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0); }",s={renderer:"gpu",shader:e,canvasWidth:500,canvasHeight:500,worldWidth:12,worldHeight:12,worldCenterX:0,worldCenterY:0,useDraggables:!0,draggablesMousemoveCallback:this.onDragDraggable.bind(this),draggablesTouchmoveCallback:this.onDragDraggable.bind(this),useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:()=>this.changeAspectRatio(!0),mousedownCallback:this.onGrabCanvas.bind(this),touchstartCallback:this.onGrabCanvas.bind(this),mousedragCallback:this.onDragCanvas.bind(this),touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),touchendCallback:this.onReleaseCanvas.bind(this),wheelCallback:this.onWheelCanvas.bind(this),pinchCallback:this.onPinchCanvas.bind(this)},t={renderer:"gpu",shader:e,canvasWidth:this.resolutionHidden,canvasHeight:this.resolutionHidden};this.wilson=new Wilson(i,s),this.wilson.render.initUniforms(["aspectRatio","derivativePrecision","worldCenterX","worldCenterY","worldSize","colors","a","c","brightnessScale"]);let o=this.createHiddenCanvas();o.classList.remove("hidden-canvas"),o.classList.add("output-canvas"),this.wilsonHidden=new Wilson(o,t),this.wilsonHidden.render.initUniforms(["aspectRatio","derivativePrecision","worldCenterX","worldCenterY","worldSize","colors","a","c","brightnessScale"]);let n=this.wilson.draggables.add(1,0);n.classList.add("a-marker"),(n=this.wilson.draggables.add(0,0)).classList.add("c-marker");let r=()=>this.changeAspectRatio(!0);window.addEventListener("resize",r),this.handlers.push(window,"resize",r),this.loadPromise=new Promise(async(i,e)=>{await Site.loadGLSL(),i()})}run(i){let e=`
   precision highp float;
   
   varying vec2 uv;
   
   uniform float aspectRatio;
   
   uniform float worldCenterX;
   uniform float worldCenterY;
   uniform float worldSize;
   
   uniform float derivativePrecision;
   
   
   uniform vec3 colors[4];
   
   uniform vec2 a;
   uniform vec2 c;
   
   uniform float brightnessScale;
   
   const float threshhold = .01;
   
   
   
   ${Site.getGLSLBundle(i)}
   
   
   
   //Returns f(z) for a polynomial f with given roots.
   vec2 f(vec2 z)
   {
    return ${i};
   }
   
   
   
   //Approximates f'(z) for a polynomial f with given roots.
   vec2 cderiv(vec2 z)
   {
    return derivativePrecision * (f(z + vec2(1.0 / (2.0*derivativePrecision), 0.0)) - f(z - vec2(1.0 / (2.0*derivativePrecision), 0.0)));
   }
   
   
   
   void main(void)
   {
    vec2 z;
    vec2 lastZ = vec2(0.0, 0.0);
    vec2 oldZ = vec2(0.0, 0.0);
    
    if (aspectRatio >= 1.0)
    {
     z = vec2(uv.x * aspectRatio * worldSize + worldCenterX, uv.y * worldSize + worldCenterY);
    }
    
    else
    {
     z = vec2(uv.x * worldSize + worldCenterX, uv.y / aspectRatio * worldSize + worldCenterY);
    }
    
    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    
    
    
    for (int iteration = 0; iteration < 200; iteration++)
    {
     vec2 temp = cmul(cmul(f(z), cinv(cderiv(z))), a) + c;
     
     oldZ = lastZ;
     
     lastZ = z;
     
     z -= temp;
     
     
     
     //If we're slowing down, it's reasonably safe to assume that we're near a root.
     
     float d0 = length(lastZ - z);
     
     if (d0 < threshhold)
     {
      float d1 = length(oldZ - lastZ);
      
      float brightnessAdjust = (log(threshhold) - log(d0)) / (log(d1) - log(d0));
      
      float brightness = 1.0 - (float(iteration) - brightnessAdjust) / brightnessScale;
      
      //Round to a square grid so that basin colors are consistent.
      vec2 theoreticalRoot = floor(z / (threshhold / 3.0)) * threshhold / 3.0;
      
      float c0 = sin(theoreticalRoot.x * 7.239846) + cos(theoreticalRoot.x * 2.945387) + 2.0;
      
      float c1 = sin(theoreticalRoot.y * 5.918445) + cos(theoreticalRoot.y * .987235) + 2.0;
      
      float c2 = sin((theoreticalRoot.x + theoreticalRoot.y) * 1.023974) + cos((theoreticalRoot.x + theoreticalRoot.y) * 9.130874) + 2.0;
      
      float c3 = sin((theoreticalRoot.x - theoreticalRoot.y) * 3.258342) + cos((theoreticalRoot.x - theoreticalRoot.y) * 4.20957) + 2.0;
      
      //Pick an interpolated color between the 4 that we chose earlier.
      gl_FragColor = vec4((c0 * colors[0] + c1 * colors[1] + c2 * colors[2] + c3 * colors[3]) / (c0 + c1 + c2 + c3) * brightness, 1.0);
      
      return;
     }
    }
   }
  `;this.wilson.render.shaderPrograms=[],this.wilson.render.loadNewShader(e),this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[0]),this.wilson.render.initUniforms(["aspectRatio","derivativePrecision","worldCenterX","worldCenterY","worldSize","colors","a","c","brightnessScale"]),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatio,1),this.wilson.gl.uniform1f(this.wilson.uniforms.derivativePrecision,this.derivativePrecision),this.wilsonHidden.render.shaderPrograms=[],this.wilsonHidden.render.loadNewShader(e),this.wilsonHidden.gl.useProgram(this.wilsonHidden.render.shaderPrograms[0]),this.wilsonHidden.render.initUniforms(["aspectRatio","derivativePrecision","worldCenterX","worldCenterY","worldSize","colors","a","c","brightnessScale"]),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.aspectRatio,1),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.derivativePrecision,this.derivativePrecision),this.wilson.worldCenterX=0,this.wilson.worldCenterY=0,this.wilson.worldWidth=10,this.wilson.worldHeight=10,this.zoom.init(),this.pastBrightnessScales=[],this.a=[1,0],this.c=[0,0],this.colors=this.generateNewPalette(),this.wilson.gl.uniform3fv(this.wilson.uniforms.colors,this.colors),this.wilsonHidden.gl.uniform3fv(this.wilsonHidden.uniforms.colors,this.colors),window.requestAnimationFrame(this.drawFrame.bind(this))}generateNewPalette(){let i=Array(12),e=0,s=[];for(let t=0;t<4;t++){e=Math.random()*(1-2*t*.1);for(let o=0;o<t;o++)e>s[o]&&(e+=.2);s[t]=e-.1,s.sort();let n=this.wilson.utils.hsvToRgb(e,.25*Math.random()+.75,.25*Math.random()+.75);i[3*t]=n[0]/255,i[3*t+1]=n[1]/255,i[3*t+2]=n[2]/255}return i}animatePaletteChange(){let i={t:0},e=[...this.colors],s=this.generateNewPalette();anime({targets:i,t:1,duration:1e3,easing:"easeOutQuad",update:()=>{for(let t=0;t<12;t++)this.colors[t]=(1-i.t)*e[t]+i.t*s[t],this.wilson.gl.uniform3fv(this.wilson.uniforms.colors,this.colors),this.wilsonHidden.gl.uniform3fv(this.wilsonHidden.uniforms.colors,this.colors)}})}onDragDraggable(i,e,s,t){0===i?this.a=[e,s]:this.c=[e,s]}drawFrame(i){let e=i-this.lastTimestamp;if(this.lastTimestamp=i,0===e)return;this.pan.update(),this.zoom.update(),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.aspectRatio,this.aspectRatio),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.worldCenterX,this.wilson.worldCenterX),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.worldCenterY,this.wilson.worldCenterY),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.worldSize,Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2),this.wilsonHidden.gl.uniform2fv(this.wilsonHidden.uniforms.a,this.a),this.wilsonHidden.gl.uniform2f(this.wilsonHidden.uniforms.c,this.c[0]/10,this.c[1]/10),this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.brightnessScale,30),this.wilsonHidden.render.drawFrame();let s=this.wilsonHidden.render.getPixelData(),t=Array(this.resolutionHidden*this.resolutionHidden);for(let o=0;o<this.resolutionHidden*this.resolutionHidden;o++)t[o]=Math.max(Math.max(s[4*o],s[4*o+1]),s[4*o+2]);t.sort((i,e)=>i-e);let n=Math.min(1e4/(t[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+t[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)]),200);this.pastBrightnessScales.push(n);let r=this.pastBrightnessScales.length;r>10&&this.pastBrightnessScales.shift(),n=Math.max(this.pastBrightnessScales.reduce((i,e)=>i+e)/r,.5),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatio,this.aspectRatio),this.wilson.gl.uniform1f(this.wilson.uniforms.worldCenterX,this.wilson.worldCenterX),this.wilson.gl.uniform1f(this.wilson.uniforms.worldCenterY,this.wilson.worldCenterY),this.wilson.gl.uniform1f(this.wilson.uniforms.worldSize,Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2),this.wilson.gl.uniform2fv(this.wilson.uniforms.a,this.a),this.wilson.gl.uniform2f(this.wilson.uniforms.c,this.c[0]/10,this.c[1]/10),this.wilson.gl.uniform1f(this.wilson.uniforms.brightnessScale,n),this.wilson.render.drawFrame(),this.animationPaused||window.requestAnimationFrame(this.drawFrame.bind(this))}}
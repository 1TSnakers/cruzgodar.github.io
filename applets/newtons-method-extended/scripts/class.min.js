class NewtonsMethodExtended extends Applet{loadPromise=null;wilsonHidden=null;a=[1,0];c=[0,0];aspectRatio=1;numIterations=100;pastBrightnessScales=[];resolution=500;resolutionHidden=100;derivativePrecision=6;lastTimestamp=-1;colors=null;constructor(a){super(a);const d={renderer:"gpu",shader:"precision highp float; varying vec2 uv; void main(void) { gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0); }",canvasWidth:500,canvasHeight:500,worldWidth:32,worldHeight:32,worldCenterX:0,worldCenterY:0,useDraggables:!0,
draggablesMousemoveCallback:this.onDragDraggable.bind(this),draggablesTouchmoveCallback:this.onDragDraggable.bind(this),useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:()=>this.changeAspectRatio(!0),mousedownCallback:this.onGrabCanvas.bind(this),touchstartCallback:this.onGrabCanvas.bind(this),mousedragCallback:this.onDragCanvas.bind(this),
touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),touchendCallback:this.onReleaseCanvas.bind(this),wheelCallback:this.onWheelCanvas.bind(this),pinchCallback:this.onPinchCanvas.bind(this)};var b={renderer:"gpu",shader:"precision highp float; varying vec2 uv; void main(void) { gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0); }",canvasWidth:this.resolutionHidden,canvasHeight:this.resolutionHidden};this.wilson=new Wilson(a,d);this.wilson.render.initUniforms("aspectRatio derivativePrecision worldCenterX worldCenterY worldSize colors a c brightnessScale".split(" "));
a=this.createHiddenCanvas();a.classList.remove("hidden-canvas");a.classList.add("output-canvas");this.wilsonHidden=new Wilson(a,b);this.wilsonHidden.render.initUniforms("aspectRatio derivativePrecision worldCenterX worldCenterY worldSize colors a c brightnessScale".split(" "));b=this.wilson.draggables.add(1,0);b.classList.add("a-marker");b=this.wilson.draggables.add(0,0);b.classList.add("c-marker");b=()=>this.changeAspectRatio(!0);window.addEventListener("resize",b);this.handlers.push(window,"resize",
b);this.loadPromise=new Promise(async(c,e)=>{await Site.loadGLSL();c()})}run(a){a=`
			precision highp float;
			
			varying vec2 uv;
			
			uniform float aspectRatio;
			
			uniform float worldCenterX;
			uniform float worldCenterY;
			uniform float worldSize;
			
			uniform float derivativePrecision;
			
			
			uniform vec3 colors[4];
			
			uniform vec2 a;
			uniform vec2 c;
			
			uniform float brightnessScale;
			
			const float threshhold = .01;
			
			
			
			${Site.getGLSLBundle(a)}
			
			
			
			//Returns f(z) for a polynomial f with given roots.
			vec2 f(vec2 z)
			{
				return ${a};
			}
			
			
			
			//Approximates f'(z) for a polynomial f with given roots.
			vec2 cderiv(vec2 z)
			{
				return derivativePrecision * (f(z + vec2(1.0 / (2.0*derivativePrecision), 0.0)) - f(z - vec2(1.0 / (2.0*derivativePrecision), 0.0)));
			}
			
			
			
			void main(void)
			{
				vec2 z;
				vec2 lastZ = vec2(0.0, 0.0);
				vec2 oldZ = vec2(0.0, 0.0);
				
				if (aspectRatio >= 1.0)
				{
					z = vec2(uv.x * aspectRatio * worldSize + worldCenterX, uv.y * worldSize + worldCenterY);
				}
				
				else
				{
					z = vec2(uv.x * worldSize + worldCenterX, uv.y / aspectRatio * worldSize + worldCenterY);
				}
				
				gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
				
				
				
				for (int iteration = 0; iteration < 200; iteration++)
				{
					vec2 temp = cmul(cmul(f(z), cinv(cderiv(z))), a) + c;
					
					oldZ = lastZ;
					
					lastZ = z;
					
					z -= temp;
					
					
					
					//If we're slowing down, it's reasonably safe to assume that we're near a root.
					
					float d0 = length(lastZ - z);
					
					if (d0 < threshhold)
					{
						float d1 = length(oldZ - lastZ);
						
						float brightnessAdjust = (log(threshhold) - log(d0)) / (log(d1) - log(d0));
						
						float brightness = 1.0 - (float(iteration) - brightnessAdjust) / brightnessScale;
						
						//Round to a square grid so that basin colors are consistent.
						vec2 theoreticalRoot = floor(z / (threshhold / 3.0)) * threshhold / 3.0;
						
						float c0 = sin(theoreticalRoot.x * 7.239846) + cos(theoreticalRoot.x * 2.945387) + 2.0;
						
						float c1 = sin(theoreticalRoot.y * 5.918445) + cos(theoreticalRoot.y * .987235) + 2.0;
						
						float c2 = sin((theoreticalRoot.x + theoreticalRoot.y) * 1.023974) + cos((theoreticalRoot.x + theoreticalRoot.y) * 9.130874) + 2.0;
						
						float c3 = sin((theoreticalRoot.x - theoreticalRoot.y) * 3.258342) + cos((theoreticalRoot.x - theoreticalRoot.y) * 4.20957) + 2.0;
						
						//Pick an interpolated color between the 4 that we chose earlier.
						gl_FragColor = vec4((c0 * colors[0] + c1 * colors[1] + c2 * colors[2] + c3 * colors[3]) / (c0 + c1 + c2 + c3) * brightness, 1.0);
						
						return;
					}
				}
			}
		`;this.wilson.render.shaderPrograms=[];this.wilson.render.loadNewShader(a);this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[0]);this.wilson.render.initUniforms("aspectRatio derivativePrecision worldCenterX worldCenterY worldSize colors a c brightnessScale".split(" "));this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatio,1);this.wilson.gl.uniform1f(this.wilson.uniforms.derivativePrecision,this.derivativePrecision);this.wilsonHidden.render.shaderPrograms=[];this.wilsonHidden.render.loadNewShader(a);
this.wilsonHidden.gl.useProgram(this.wilsonHidden.render.shaderPrograms[0]);this.wilsonHidden.render.initUniforms("aspectRatio derivativePrecision worldCenterX worldCenterY worldSize colors a c brightnessScale".split(" "));this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.aspectRatio,1);this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.derivativePrecision,this.derivativePrecision);this.wilson.worldCenterX=0;this.wilson.worldCenterY=0;this.wilson.worldWidth=32;this.wilson.worldHeight=
32;this.zoom.init();this.pastBrightnessScales=[];this.a=[1,0];this.c=[0,0];this.colors=this.generateNewPalette();this.wilson.gl.uniform3fv(this.wilson.uniforms.colors,this.colors);this.wilsonHidden.gl.uniform3fv(this.wilsonHidden.uniforms.colors,this.colors);window.requestAnimationFrame(this.drawFrame.bind(this))}generateNewPalette(){let a=Array(12);let d=[];for(let c=0;4>c;c++){var b=Math.random()*(1-.2*c);for(let e=0;e<c;e++)b>d[e]&&(b+=.2);d[c]=b-.1;d.sort();b=this.wilson.utils.hsvToRgb(b,.25*
Math.random()+.75,.25*Math.random()+.75);a[3*c]=b[0]/255;a[3*c+1]=b[1]/255;a[3*c+2]=b[2]/255}return a}animatePaletteChange(){let a={t:0};const d=[...this.colors],b=this.generateNewPalette();anime({targets:a,t:1,duration:1E3,easing:"easeOutQuad",update:()=>{for(let c=0;12>c;c++)this.colors[c]=(1-a.t)*d[c]+a.t*b[c],this.wilson.gl.uniform3fv(this.wilson.uniforms.colors,this.colors),this.wilsonHidden.gl.uniform3fv(this.wilsonHidden.uniforms.colors,this.colors)}})}onDragDraggable(a,d,b,c){0===a?this.a=
[d,b]:this.c=[d,b]}drawFrame(a){var d=a-this.lastTimestamp;this.lastTimestamp=a;if(0!==d){this.pan.update();this.zoom.update();this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.aspectRatio,this.aspectRatio);this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.worldCenterX,this.wilson.worldCenterX);this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.worldCenterY,this.wilson.worldCenterY);this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.worldSize,Math.min(this.wilson.worldHeight,
this.wilson.worldWidth)/2);this.wilsonHidden.gl.uniform2fv(this.wilsonHidden.uniforms.a,this.a);this.wilsonHidden.gl.uniform2f(this.wilsonHidden.uniforms.c,this.c[0]/10,this.c[1]/10);this.wilsonHidden.gl.uniform1f(this.wilsonHidden.uniforms.brightnessScale,30);this.wilsonHidden.render.drawFrame();a=this.wilsonHidden.render.getPixelData();d=Array(this.resolutionHidden*this.resolutionHidden);for(let b=0;b<this.resolutionHidden*this.resolutionHidden;b++)d[b]=Math.max(Math.max(a[4*b],a[4*b+1]),a[4*b+
2]);d.sort((b,c)=>b-c);a=Math.min(1E4/(d[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+d[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)]),200);this.pastBrightnessScales.push(a);a=this.pastBrightnessScales.length;10<a&&this.pastBrightnessScales.shift();a=Math.max(this.pastBrightnessScales.reduce((b,c)=>b+c)/a,.5);this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatio,this.aspectRatio);this.wilson.gl.uniform1f(this.wilson.uniforms.worldCenterX,this.wilson.worldCenterX);
this.wilson.gl.uniform1f(this.wilson.uniforms.worldCenterY,this.wilson.worldCenterY);this.wilson.gl.uniform1f(this.wilson.uniforms.worldSize,Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2);this.wilson.gl.uniform2fv(this.wilson.uniforms.a,this.a);this.wilson.gl.uniform2f(this.wilson.uniforms.c,this.c[0]/10,this.c[1]/10);this.wilson.gl.uniform1f(this.wilson.uniforms.brightnessScale,a);this.wilson.render.drawFrame();this.animationPaused||window.requestAnimationFrame(this.drawFrame.bind(this))}}}
;

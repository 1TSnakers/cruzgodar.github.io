!async function(){"use strict";await Site.load_glsl();let e=null,r=null,o=[1,0],t=[0,0],n=1,i=1,l=[],a=500,c=20,s=0,d=0,u=0,$=0,f=0,m=0,h=0,w=0,g=-1,v=!1,_=0,p=null,z=Array(12),b=Array(12),y=Page.element.querySelector("#code-textarea");y.value="cmul(csin(z), csin(cmul(z, i)))",y.addEventListener("keydown",e=>{13===e.keyCode&&(e.preventDefault(),L())});Page.element.querySelector("#randomize-palette-button").addEventListener("click",function e(){if(!v){v=!0,_=0;let r=S();b=[...p];for(let o=0;o<12;o++)z[o]=r[o]-p[o];window.requestAnimationFrame(R)}});Page.element.querySelector("#generate-button").addEventListener("click",L);let x=Page.element.querySelector("#resolution-input");x.addEventListener("input",()=>{a=parseInt(x.value||500),e.change_canvas_size(a,a),window.requestAnimationFrame(R)});let q=Page.element.querySelector("#derivative-precision-input");q.addEventListener("input",()=>{c=parseFloat(q.value||20),e.gl.uniform1f(e.uniforms.derivative_precision,c),r.gl.uniform1f(r.uniforms.derivative_precision,c),window.requestAnimationFrame(R)});Page.element.querySelector("#download-button").addEventListener("click",()=>{e.download_frame("newtons-method.png")});let k=Page.element.querySelector("#canvas-location"),A={none:"",polynomial:"csub(cpow(z, 6.0), 1.0)",trig:"csin(z)",crosshatch:"cmul(csin(z), csin(cmul(z, i)))",palette:"cmul(sin(z), csin(cmul(z, i)))",butterflies:"cmul(sin(z), tan(z))"},F=Page.element.querySelector("#example-selector-dropdown");function L(){let n=y.value||"cmul(csin(z), csin(cmul(z, i)))",a=`
   precision highp float;
   
   varying vec2 uv;
   
   uniform float aspect_ratio;
   
   uniform float world_center_x;
   uniform float world_center_y;
   uniform float world_size;
   
   uniform float derivative_precision;
   
   
   uniform vec3 colors[4];
   
   uniform vec2 a;
   uniform vec2 c;
   
   uniform float brightness_scale;
   
   const float threshhold = .01;
   
   
   
   ${Site.get_glsl_bundle(n)}
   
   
   
   //Returns f(z) for a polynomial f with given roots.
   vec2 f(vec2 z)
   {
    return ${n};
   }
   
   
   
   //Approximates f'(z) for a polynomial f with given roots.
   vec2 cderiv(vec2 z)
   {
    return derivative_precision * (f(z + vec2(1.0 / (2.0*derivative_precision), 0.0)) - f(z - vec2(1.0 / (2.0*derivative_precision), 0.0)));
   }
   
   
   
   void main(void)
   {
    vec2 z;
    vec2 last_z = vec2(0.0, 0.0);
    vec2 old_z = vec2(0.0, 0.0);
    
    if (aspect_ratio >= 1.0)
    {
     z = vec2(uv.x * aspect_ratio * world_size + world_center_x, uv.y * world_size + world_center_y);
    }
    
    else
    {
     z = vec2(uv.x * world_size + world_center_x, uv.y / aspect_ratio * world_size + world_center_y);
    }
    
    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    
    
    
    for (int iteration = 0; iteration < 200; iteration++)
    {
     vec2 temp = cmul(cmul(f(z), cinv(cderiv(z))), a) + c;
     
     old_z = last_z;
     
     last_z = z;
     
     z -= temp;
     
     
     
     //If we're slowing down, it's reasonably safe to assume that we're near a root.
     
     float d_0 = length(last_z - z);
     
     if (d_0 < threshhold)
     {
      float d_1 = length(old_z - last_z);
      
      float brightness_adjust = (log(threshhold) - log(d_0)) / (log(d_1) - log(d_0));
      
      float brightness = 1.0 - (float(iteration) - brightness_adjust) / brightness_scale;
      
      //Round to a square grid so that basin colors are consistent.
      vec2 theoretical_root = floor(z / (threshhold / 3.0)) * threshhold / 3.0;
      
      float c0 = sin(theoretical_root.x * 7.239846) + cos(theoretical_root.x * 2.945387) + 2.0;
      
      float c1 = sin(theoretical_root.y * 5.918445) + cos(theoretical_root.y * .987235) + 2.0;
      
      float c2 = sin((theoretical_root.x + theoretical_root.y) * 1.023974) + cos((theoretical_root.x + theoretical_root.y) * 9.130874) + 2.0;
      
      float c3 = sin((theoretical_root.x - theoretical_root.y) * 3.258342) + cos((theoretical_root.x - theoretical_root.y) * 4.20957) + 2.0;
      
      //Pick an interpolated color between the 4 that we chose earlier.
      gl_FragColor = vec4((c0 * colors[0] + c1 * colors[1] + c2 * colors[2] + c3 * colors[3]) / (c0 + c1 + c2 + c3) * brightness, 1.0);
      
      return;
     }
    }
   }
  `;try{e.output_canvas_container.parentNode.remove(),r.output_canvas_container.parentNode.remove(),k.insertAdjacentHTML("beforebegin",`
    <div>
     <canvas id="output-canvas" class="output-canvas"></canvas>
     <canvas id="hidden-canvas" class="hidden-canvas"></canvas>
    </div>
   `)}catch(s){}(e=new Wilson(Page.element.querySelector("#output-canvas"),{renderer:"gpu",shader:a,canvas_width:500,canvas_height:500,world_width:12,world_height:12,world_center_x:0,world_center_y:0,use_draggables:!0,draggables_mousemove_callback:N,draggables_touchmove_callback:N,use_fullscreen:!0,true_fullscreen:!0,use_fullscreen_button:!0,enter_fullscreen_button_icon_path:"/graphics/general-icons/enter-fullscreen.png",exit_fullscreen_button_icon_path:"/graphics/general-icons/exit-fullscreen.png",switch_fullscreen_callback:D,mousedown_callback:E,touchstart_callback:E,mousedrag_callback:j,touchmove_callback:j,mouseup_callback:C,touchend_callback:C,wheel_callback:I,pinch_callback:P})).render.init_uniforms(["aspect_ratio","derivative_precision","world_center_x","world_center_y","world_size","colors","a","c","brightness_scale"]),(r=new Wilson(Page.element.querySelector("#hidden-canvas"),{renderer:"gpu",shader:a,canvas_width:100,canvas_height:100})).render.init_uniforms(["aspect_ratio","derivative_precision","world_center_x","world_center_y","world_size","colors","a","c","brightness_scale"]),l=[],i=2,u=0,$=0,f=0,m=0,h=0,w=0;let d=e.draggables.add(1,0);d.classList.add("a-marker"),(d=e.draggables.add(0,0)).classList.add("c-marker"),o=[1,0],t=[0,0],p=S(),e.gl.uniform1f(e.uniforms.aspect_ratio,1),r.gl.uniform1f(r.uniforms.aspect_ratio,1),e.gl.uniform1f(e.uniforms.derivative_precision,c),r.gl.uniform1f(r.uniforms.derivative_precision,c),e.gl.uniform3fv(e.uniforms.colors,p),r.gl.uniform3fv(r.uniforms.colors,p),window.requestAnimationFrame(R)}function S(){let r=Array(12),o=0,t=[];for(let n=0;n<4;n++){o=Math.random()*(1-2*n*.1);for(let i=0;i<n;i++)o>t[i]&&(o+=.2);t[n]=o-.1,t.sort();let l=e.utils.hsv_to_rgb(o,.25*Math.random()+.75,.25*Math.random()+.75);r[3*n]=l[0]/255,r[3*n+1]=l[1]/255,r[3*n+2]=l[2]/255}return r}function E(e,r,o){m=0,h=0,w=0,u=0,$=0,f=0}function j(r,o,t,n,i){e.world_center_x-=t,e.world_center_y-=n,u=-t/e.world_width,$=-n/e.world_height,window.requestAnimationFrame(R),e.draggables.recalculate_locations()}function C(e,r,o){Math.sqrt(u*u+$*$)>=.0025&&(m=u,h=$),Math.abs(f)>=.01&&(w=f),window.requestAnimationFrame(R)}function I(e,r,o,t){s=e,d=r,.3>Math.abs(o/100)?i+=o/100:w+=.05*Math.sign(o),H()}function P(r,o,t,l){n>=1?(i-=t/e.world_width*10,f=-t/e.world_width*10):(i-=t/e.world_height*10,f=-t/e.world_height*10),s=r,d=o,H()}function H(){if(n>=1){let r=e.input.get_zoomed_world_center(s,d,3*Math.pow(2,i)*n,3*Math.pow(2,i));e.world_width=3*Math.pow(2,i)*n,e.world_height=3*Math.pow(2,i),e.world_center_x=r[0],e.world_center_y=r[1]}else{let o=e.input.get_zoomed_world_center(s,d,3*Math.pow(2,i),3*Math.pow(2,i)/n);e.world_width=3*Math.pow(2,i),e.world_height=3*Math.pow(2,i)/n,e.world_center_x=o[0],e.world_center_y=o[1]}window.requestAnimationFrame(R),e.draggables.recalculate_locations()}function N(e,r,n,i){0===e?o=[r,n]:t=[r,n],window.requestAnimationFrame(R)}function R(a){let c=a-g;if(g=a,0===c)return;r.gl.uniform1f(r.uniforms.aspect_ratio,n),r.gl.uniform1f(r.uniforms.world_center_x,e.world_center_x),r.gl.uniform1f(r.uniforms.world_center_y,e.world_center_y),r.gl.uniform1f(r.uniforms.world_size,Math.min(e.world_height,e.world_width)/2),r.gl.uniform2fv(r.uniforms.a,o),r.gl.uniform2f(r.uniforms.c,t[0]/10,t[1]/10),r.gl.uniform1f(r.uniforms.brightness_scale,30),r.render.draw_frame();let y=r.render.get_pixel_data(),x=Array(1e4);for(let q=0;q<1e4;q++)x[q]=Math.max(Math.max(y[4*q],y[4*q+1]),y[4*q+2]);x.sort((e,r)=>e-r);let k=Math.min(1e4/(x[Math.floor(9600)]+x[Math.floor(9800)]),200);l.push(k);let A=l.length;A>10&&l.shift(),k=Math.max(l.reduce((e,r)=>e+r)/A,.5),e.gl.uniform1f(e.uniforms.aspect_ratio,n),e.gl.uniform1f(e.uniforms.world_center_x,e.world_center_x),e.gl.uniform1f(e.uniforms.world_center_y,e.world_center_y),e.gl.uniform1f(e.uniforms.world_size,Math.min(e.world_height,e.world_width)/2),e.gl.uniform2fv(e.uniforms.a,o),e.gl.uniform2f(e.uniforms.c,t[0]/10,t[1]/10),e.gl.uniform1f(e.uniforms.brightness_scale,k),e.render.draw_frame();let F=!1;v&&(function o(){let t=.5*Math.sin(Math.PI*_/30-Math.PI/2)+.5;for(let n=0;n<12;n++)p[n]=b[n]+z[n]*t;e.gl.uniform3fv(e.uniforms.colors,p),r.gl.uniform3fv(r.uniforms.colors,p),31==++_&&(v=!1)}(),F=!0),c>=50&&(m=0,h=0,w=0,u=0,$=0,f=0),(0!==m||0!==h||0!==w)&&(e.world_center_x+=m*e.world_width,e.world_center_y+=h*e.world_height,25e-5>Math.sqrt((m*=.96)*m+(h*=.96)*h)&&(m=0,h=0),i+=w,H(s,d),.001>Math.abs(w*=.93)&&(w=0),F=!0,e.draggables.recalculate_locations()),F&&window.requestAnimationFrame(R)}function D(){e.fullscreen.currently_fullscreen?(n=window.innerWidth/window.innerHeight)>=1?(e.change_canvas_size(a,Math.floor(a/n)),e.world_width=3*Math.pow(2,i)*n,e.world_height=3*Math.pow(2,i)):(e.change_canvas_size(Math.floor(a*n),a),e.world_width=3*Math.pow(2,i),e.world_height=3*Math.pow(2,i)/n):(n=1,e.change_canvas_size(a,a),e.world_width=3*Math.pow(2,i),e.world_height=3*Math.pow(2,i)),window.requestAnimationFrame(R)}F.addEventListener("input",()=>{"none"!==F.value&&(y.value=A[F.value],L())}),L(),Page.show(),window.addEventListener("resize",D),Page.temporary_handlers.resize.push(D)}();
import {
	LambdaCalculus
} from "./class.min.js";
import {
	Button,
	DownloadButton,
	ToggleButton
} from "/scripts/components/buttons.min.js";
import {
	Checkbox
} from "/scripts/components/checkboxes.min.js";
import {
	Dropdown
} from "/scripts/components/dropdowns.min.js";
import {
	Slider
} from "/scripts/components/sliders.min.js";
import {
	Textarea
} from "/scripts/components/textareas.min.js";
import {
	$
} from "/scripts/src/main.min.js";
import {
	setOnThemeChange
} from "/scripts/src/settings.min.js";
const examples = {
	identity: "λx.x",
	returnLambda: "λx.λy.x",
	evaluation: "λx.xx",
	betaReduction: "(λz.zz)(λx.λy.x)",
	booleans: "&T (| (!F) F)",
	successor: ">3",
	addition: "+34",
	multiplication: "*34",
	exponentiation: "^34",
	division: "(λn.((λf.(λx.xx)(λx.f(xx)))(λc.λn.λm.λf.λx.(λd._d(Ffx)(f(cdmfx)))(-nm)))(>n))34",
	omega: "Yλx.x",
	recursiveTriangleNumbers: "(Y λf. λn. _(<n) 1 (+ n (f(<n)))) 4",
	recursiveFactorial: "(Y λf. λn. _(<n) 1 (* n (f(<n)))) 4",
	recursiveFibonacci: "(Y λf. λn. _(<n) 1 (+ (f(<(<n))) (f(<n)) )) 4",
	iterativeTriangleNumbers: "(λn.n( λg.λa.λb.g (>a) (+ab) ) (λa.λb.b) 1 0) 4",
	iterativeFactorial: "(λn.n( λg.λa.λb.g (>a) (*ab) ) (λa.λb.b) 1 1) 4",
	iterativeFibonacci: "(λn.n( λg.λa.λb.g (+ab) a ) (λa.λb.b) 1 0) 4",
	knuthUpArrows: "(Yλf.λn.λa.λb.(_(<n)(ba)(((<b)(λg.λc.λd.gc(f(<n)cd)))(λc.λd.d)aa)))223"
};
export default function() {
	const s = new LambdaCalculus({
			canvas: $("#output-canvas")
		}),
		e = new Dropdown({
			element: $("#examples-dropdown"),
			name: "Examples",
			options: {
				identity: "Identity",
				returnLambda: "Returning a Lambda",
				evaluation: "Evaluation",
				betaReduction: "Beta Reduction",
				booleans: "Booleans",
				successor: "Successor",
				addition: "Addition",
				multiplication: "Multiplication",
				exponentiation: "Exponentiation",
				omega: "Omega",
				recursiveTriangleNumbers: "Recursive Triangle Numbers",
				recursiveFactorial: "Recursive Factorial",
				iterativeTriangleNumbers: "Iterative Triangle Numbers",
				iterativeFactorial: "Iterative Factorial",
				iterativeFibonacci: "Iterative Fibonacci",
				knuthUpArrows: "Knuth's Up Arrows"
			},
			onInput: function() {
				e.value && (r.setValue(examples[e.value]), n())
			}
		}),
		r = new Textarea({
			element: $("#expression-textarea"),
			name: "Expression",
			value: "*23",
			onInput: () => {
				e.value && e.setValue({
					newValue: "default"
				}), n()
			},
			onEnter: () => n(!0)
		}),
		l = new Checkbox({
			element: $("#expand-shorthands-checkbox"),
			name: "Expand shorthands",
			checked: !1,
			onInput: () => {
				e.value && r.setValue(examples[e.value]), n(), setTimeout(() => n(), 50)
			}
		}),
		c = (new Button({
			element: $("#reduce-button"),
			name: "Reduce",
			onClick: () => n(!0)
		}), new ToggleButton({
			element: $("#play-pause-button"),
			name0: "Pause",
			name1: "Play",
			persistState: !1,
			onClick0: () => s.animationPaused = !0,
			onClick1: () => s.animationPaused = !1
		})),
		u = new Slider({
			element: $("#animation-time-slider"),
			name: "Animation Speed",
			value: 1,
			min: .25,
			max: 20,
			logarithmic: !0,
			snapPoints: [.5, 1, 2, 5, 10],
			onInput: function() {
				s.animationTime = 500 / u.value
			}
		});
	async function n(betaReduce = !1) {
		await Promise.all([r.loaded, c.loaded, u.loaded]), c.state && (c.setState({
			newState: !1
		}), s.animationPaused = !1);
		var e = r.value.length,
			{
				selectionStart: n,
				selectionEnd: t
			} = r.element;
		let a = 0;
		r.setValue(r.value.replaceAll(/l/g, "λ")), r.setValue(r.value.replaceAll(/[^a-km-zA-Zλ().0-9+*^_\-!,<>'"&=|]/g, "").replaceAll(/\.+/g, match => (a += match.length - 1, "."))), document.activeElement === r.element && r.element.setSelectionRange(n + r.value.length - e + a, t + r.value.length - e + a);
		n = function(expressionString) {
			let e = 0,
				n = expressionString.search(/\(/g);
			for (let a = 0; a < expressionString.length; a++) {
				if ("(" === expressionString[a] ? e++ : ")" === expressionString[a] && e--, e < 0) return [a, a + 1];
				0 === e && (n = a + 1)
			}
			if (0 !== e) return [n, n + 1];
			var t = expressionString.search(/λ([a-km-zA-Z0-9])[^.]/g);
			return -1 === t ? -1 === (t = expressionString.search(/λ([a-km-zA-Z0-9])$/g)) ? -1 === (t = expressionString.search(/λ\./g)) ? -1 === (t = expressionString.search(/λ[a-km-zA-Z0-9]\.$/g)) ? -1 : [t, t + expressionString.match(/λ[a-km-zA-Z0-9]\.$/g)[0].length] : [t, t + expressionString.match(/λ\./g)[0].length] : [t, t + expressionString.match(/λ([a-km-zA-Z0-9])$/g)[0].length] : [t, t + expressionString.match(/λ([a-km-zA-Z0-9])[^.]/g)[0].length]
		}(r.value);
		if (-1 !== n) {
			t = r.value.replaceAll(/</g, ";");
			const i = t.slice(0, n[0]) + `<span class="invalid">${t.slice(n[0],n[1])}</span>` + t.slice(n[1]);
			void(r.overlayElement.innerHTML = i.replaceAll(/;/g, "&lt;"))
		} else {
			const [i, o] = await s.run({
				expression: r.value,
				expandShorthands: l.checked,
				betaReduce: betaReduce
			});
			r.setValue(o), r.overlayElement.innerHTML = i, setTimeout(() => {
				r.setValue(o), r.overlayElement.innerHTML = i
			})
		}
	}
	new DownloadButton({
		element: $("#download-button"),
		applet: s,
		filename: () => "a-lambda-diagram.png"
	}), setTimeout(() => n(), 10), setOnThemeChange(() => n())
}

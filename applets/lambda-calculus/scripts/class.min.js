import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";const LITERAL=0,LAMBDA=1,APPLICATION=2;class LambdaCalculus extends AnimationFrameApplet{resolution=2e3;constructor({canvas}){super(canvas);var e={canvasWidth:this.resolution,fullscreenOptions:{useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonCPU(this.canvas,e)}run({expression:expressionString}){if(0===(expressionString=expressionString.replaceAll(/[\n\t.]/g,"").replaceAll(/\s+/g," ")).length||"λ"!==expressionString[0]&&"("!==expressionString[0])throw new Error("Lambda expressions must start with λ.");var e=this.parseExpression(expressionString);console.log(e),this.validateExpression(e)}parseExpression(expressionString){if(console.log(expressionString),0===expressionString.length)throw new Error("Empty expression.");for(var r=[];0<expressionString.length;)if("λ"===expressionString[0]){if(expressionString.length<3)throw new Error("Expression too short.");var e=expressionString[1],s=expressionString.slice(2);r.push({type:LAMBDA,argument:e,body:this.parseExpression(s)}),expressionString=""}else if("("===expressionString[0]){let e=1,s=1;for(;0<s;)"("===expressionString[e]?s++:")"===expressionString[e]&&s--,e++;r.push(this.parseExpression(expressionString.slice(1,e-1))),expressionString=expressionString.slice(e)}else r.push({type:LITERAL,value:expressionString[0]}),expressionString=expressionString.slice(1);if(1===r.length)return r[0];let n=r[0];for(let i=1;i<r.length;i++)n={type:APPLICATION,function:n,input:r[i]};return n}validateExpression(expression,scopedVariables=[]){if(expression.type===LITERAL){if(scopedVariables.includes(expression.value))return!0;throw new Error(`Undefined variable ${expression.value}.`)}if(expression.type!==LAMBDA)return this.validateExpression(expression.function,scopedVariables)&&this.validateExpression(expression.input,scopedVariables);if(scopedVariables.includes(expression.argument))throw new Error(`Variable ${expression.argument} is already in scope.`);return this.validateExpression(expression.body,[...scopedVariables,expression.argument])}}export{LambdaCalculus};
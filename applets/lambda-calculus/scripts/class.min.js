import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{hsvToRgb}from"/scripts/applets/applet.min.js";import{siteSettings}from"/scripts/src/settings.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";const LITERAL=0,LAMBDA=1,APPLICATION=2;class LambdaCalculus extends AnimationFrameApplet{resolution=2e3;lambdaIndex=0;numLambdas=0;constructor({canvas}){super(canvas);var e={canvasWidth:this.resolution,fullscreenOptions:{useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.canvas.style.imageRendering="pixelated",this.wilson=new WilsonCPU(this.canvas,e)}run({expression:expressionString}){expressionString=expressionString.replaceAll(/[\n\t\s.]/g,""),this.numLambdas=expressionString.split("λ").length-1,this.lambdaIndex=0;var e=this.parseExpression(expressionString),e=(this.validateExpression(e),this.setupExpression(e),this.drawExpression(e),this.expressionToString(e));return e}parseExpression(expressionString){if(0===expressionString.length)throw new Error("Empty expression.");for(var i=[];0<expressionString.length;)if("λ"===expressionString[0]){if(expressionString.length<3)throw new Error("Expression too short.");var n=expressionString[1],e=expressionString.slice(2);i.push({type:LAMBDA,argument:n,body:this.parseExpression(e),literalColor:{h:this.lambdaIndex/this.numLambdas,s:.8,v:1}}),this.lambdaIndex++,expressionString=""}else if("("===expressionString[0]){let e=1,s=1;for(;0<s;)"("===expressionString[e]?s++:")"===expressionString[e]&&s--,e++;n=this.parseExpression(expressionString.slice(1,e-1));n.startText="("+(n.startText??""),n.endText=(n.endText??"")+")",i.push(n),expressionString=expressionString.slice(e)}else i.push({type:LITERAL,value:expressionString[0]}),expressionString=expressionString.slice(1);if(1===i.length)return i[0];let s=i[0];for(let o=1;o<i.length;o++)s={type:APPLICATION,function:s,input:i[o]};return s}validateExpression(expression,scopedVariables=[]){if(expression.type!==LITERAL)return expression.type===LAMBDA?this.validateExpression(expression.body,[...scopedVariables,expression.argument]):this.validateExpression(expression.function,scopedVariables)&&this.validateExpression(expression.input,scopedVariables);if(scopedVariables.includes(expression.value))return!0;throw new Error(`Undefined variable ${expression.value}.`)}setupExpression(expression){this.addExpressionSize(expression);var e=Math.max(expression.width,expression.height);expression.row=Math.max(Math.round((e-expression.height)/2),0),expression.col=Math.max(Math.round((e-expression.width)/2),0),this.addExpressionLocation(expression),this.addExpressionBindings(expression),this.addExpressionColors(expression),this.addExpressionRects(expression)}addExpressionSize(expression){expression.type===LAMBDA?(this.addExpressionSize(expression.body),expression.width=expression.body.width,expression.height=expression.body.height+2):expression.type===APPLICATION?(this.addExpressionSize(expression.function),this.addExpressionSize(expression.input),expression.width=expression.function.width+expression.input.width+1,expression.height=Math.max(expression.function.height,expression.input.height)+2):(expression.width=3,expression.height=0)}addExpressionLocation(expression){expression.type===LAMBDA?(expression.body.row=expression.row+2,expression.body.col=expression.col,this.addExpressionLocation(expression.body)):expression.type===APPLICATION&&(expression.function.row=expression.row,expression.function.col=expression.col,expression.input.row=expression.row,expression.input.col=expression.col+expression.function.width+1,this.addExpressionLocation(expression.function),this.addExpressionLocation(expression.input))}addExpressionBindings(expression,bindings={}){expression.type===LITERAL?expression.bindingLambda=bindings[expression.value]:expression.type===LAMBDA?this.addExpressionBindings(expression.body,{...bindings,[expression.argument]:expression}):(this.addExpressionBindings(expression.function,bindings),this.addExpressionBindings(expression.input,bindings))}addExpressionColors(expression){var e,s,i,n;expression.type===LITERAL?expression.color=expression.bindingLambda.literalColor:expression.type===LAMBDA?(this.addExpressionColors(expression.body),expression.color=expression.body.color):(this.addExpressionColors(expression.function),this.addExpressionColors(expression.input),e=expression.function.color.h,s=expression.input.color.h,i=expression.function.color.s,n=expression.input.color.s,expression.color={h:Math.abs(e-s)<=.5?(e+s)/2:(e+s+1)/2%1,s:Math.max((i+n)/2-.1,.1),v:1})}addExpressionRects(expression){var e,s,i;expression.type===LAMBDA?(e=hsvToRgb(expression.literalColor.h,expression.literalColor.s,expression.literalColor.v),expression.rects=[{color:`rgb(${e[0]}, ${e[1]}, ${e[2]})`,row:expression.row,col:expression.col,width:expression.width,height:1}],this.addExpressionRects(expression.body)):expression.type===APPLICATION?(e={color:`rgb(${(e=hsvToRgb(expression.function.color.h,expression.function.color.s,expression.function.color.v))[0]}, ${e[1]}, ${e[2]})`,col:expression.col+1,width:1},expression.function.type!==LAMBDA&&expression.function.type===LITERAL?e.row=expression.function.bindingLambda.row+1:e.row=expression.function.row+expression.function.height-1,e.height=expression.row+expression.height-3-e.row+1,s={color:`rgb(${(s=hsvToRgb(expression.input.color.h,expression.input.color.s,expression.input.color.v))[0]}, ${s[1]}, ${s[2]})`,col:expression.col+expression.function.width+2,width:1},expression.input.type!==LAMBDA&&expression.input.type===LITERAL?s.row=expression.input.bindingLambda.row+1:s.row=expression.input.row+expression.input.height-1,s.height=expression.row+expression.height-3-s.row+1,i=hsvToRgb(expression.color.h,expression.color.s,expression.color.v),expression.rects=[{color:`rgb(${i[0]}, ${i[1]}, ${i[2]})`,row:expression.row+expression.height-2,col:expression.col+1,width:expression.function.width+2,height:1},e,s],this.addExpressionRects(expression.function),this.addExpressionRects(expression.input)):(i=hsvToRgb(expression.color.h,expression.color.s,expression.color.v),expression.rects=[{color:`rgb(${i[0]}, ${i[1]}, ${i[2]})`,row:expression.bindingLambda.row+1,col:expression.col+1,width:1,height:expression.row-1-(expression.bindingLambda.row+1)+1}])}drawExpression(expression){var e=Math.max(expression.width,expression.height);this.wilson.resizeCanvas({width:e+2}),this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,e+2,e+2),this.drawExpressionStep(expression)}drawExpressionStep(expression){for(const e of expression.rects)this.wilson.ctx.fillStyle=e.color,this.wilson.ctx.fillRect(e.col+1,e.row+1,e.width,e.height);expression.type===LAMBDA?this.drawExpressionStep(expression.body):expression.type===APPLICATION&&(this.drawExpressionStep(expression.function),this.drawExpressionStep(expression.input))}expressionToString(expression){var e=expression.startText??"",s=expression.endText??"",i=siteSettings.darkTheme?1:.7;if(expression.type===LITERAL){const r=expression.bindingLambda.literalColor,t=hsvToRgb(r.h,r.s,r.v*i),p=`rgb(${t[0]}, ${t[1]}, ${t[2]})`;return`<span style="color: ${p}">${e}${expression.value}${s}</span>`}if(expression.type===LAMBDA){var n=expression.literalColor,n=hsvToRgb(n.h,n.s,n.v*i),n=`rgb(${n[0]}, ${n[1]}, ${n[2]})`;const r=expression.color,t=hsvToRgb(r.h,r.s,r.v*i),p=`rgb(${t[0]}, ${t[1]}, ${t[2]})`;return`<span style="color: ${p}">${e}</span><span style="color: ${n}">λ${expression.argument}.</span>${this.expressionToString(expression.body)}<span style="color: ${p}">${s}</span>`}var n=this.expressionToString(expression.function),o=this.expressionToString(expression.input);const r=expression.color,t=hsvToRgb(r.h,r.s,r.v*i),p=`rgb(${t[0]}, ${t[1]}, ${t[2]})`;return`<span style="color: ${p}">${e}</span>${n}${o}<span style="color: ${p}">${s}</span>`}listAllBetaReductions(expression){var e,s,i,n,o;return expression.type===APPLICATION?(e=this.listAllBetaReductions(expression.function).map(reduction=>{var e=structuredClone(expression);return e.function=reduction,e}),s=this.listAllBetaReductions(expression.input).map(reduction=>{var e=structuredClone(expression);return e.input=reduction,e}),expression.function.type===LAMBDA?(o=(n=structuredClone(expression)).function.body,i=n.function,n=n.input,o=this.computeBetaReduction(o,i,n),[...e,...s,o]):[...e,...s]):expression.type===LAMBDA?this.listAllBetaReductions(expression.body).map(reduction=>{var e=structuredClone(expression);return e.body=reduction,e}):[]}computeBetaReduction(expression,bindingLambdaToReplace,replacementValue){if(expression.type===LITERAL){if(expression.bindingLambda===bindingLambdaToReplace)return structuredClone(replacementValue)}else expression.type===LAMBDA?expression.body=this.computeBetaReduction(expression.body,bindingLambdaToReplace,replacementValue):(expression.function=this.computeBetaReduction(expression.function,bindingLambdaToReplace,replacementValue),expression.input=this.computeBetaReduction(expression.input,bindingLambdaToReplace,replacementValue));return expression}}export{LambdaCalculus};
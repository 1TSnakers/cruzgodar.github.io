import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";const LITERAL=0,LAMBDA=1,APPLICATION=2;class LambdaCalculus extends AnimationFrameApplet{resolution=2e3;constructor({canvas}){super(canvas);var e={canvasWidth:this.resolution,fullscreenOptions:{useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonCPU(this.canvas,e)}run({expression:expressionString}){if(0===(expressionString=expressionString.replaceAll(/[\n\t.]/g,"").replaceAll(/\s+/g," ")).length||"λ"!==expressionString[0]&&"("!==expressionString[0])throw new Error("Lambda expressions must start with λ.");console.log(this.parseExpression(expressionString))}parseExpression(expressionString){if(0===expressionString.length)throw new Error("Empty expression.");if(1===expressionString.length)return{type:LITERAL,value:expressionString[0]};if("λ"===expressionString[0]){if(expressionString.length<3)throw new Error("Expression too short.");var e=expressionString[1],s=expressionString.slice(2);return{type:LAMBDA,argument:e,body:this.parseExpression(s)}}if("("===expressionString[0]){if(")"!==expressionString[expressionString.length-1])throw new Error("Mismatched parentheses.");if("("===expressionString[1]){let e=1,s=1;for(;0<s;)"("===expressionString[e]?s++:")"===expressionString[e]&&s--,e++;return{type:APPLICATION,function:this.parseExpression(expressionString.slice(2,e-1)),input:this.parseExpression(expressionString.slice(e+1,expressionString.length-1))}}let e=1,s=1;for(;e<expressionString.length&&(1!==s||" "!==expressionString[e]);)"("===expressionString[e]?s++:")"===expressionString[e]&&s--,e++;return e===expressionString.length?{type:APPLICATION,function:this.parseExpression(expressionString.slice(1,expressionString.length-2)),input:{type:LITERAL,value:expressionString[expressionString.length-2]}}:{type:APPLICATION,function:this.parseExpression(expressionString.slice(1,e)),input:this.parseExpression(expressionString.slice(e+1,expressionString.length-1))}}}}export{LambdaCalculus};
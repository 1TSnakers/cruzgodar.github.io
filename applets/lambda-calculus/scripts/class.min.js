import anime from"/scripts/anime.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{hsvToRgb}from"/scripts/applets/applet.min.js";import{addTemporaryInterval}from"/scripts/src/main.min.js";import{siteSettings}from"/scripts/src/settings.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";const LITERAL=0,LAMBDA=1,APPLICATION=2,CONNECTOR=3,shorthands={0:"(λfλxx)",F:"(λfλxx)",1:"(λfλxf(x))",2:"(λfλxf(f(x)))",3:"(λfλxf(f(f(x))))",4:"(λfλxf(f(f(f(x)))))",5:"(λfλxf(f(f(f(f(x))))))",6:"(λfλxf(f(f(f(f(f(x)))))))",7:"(λfλxf(f(f(f(f(f(f(x))))))))",8:"(λfλxf(f(f(f(f(f(f(f(x)))))))))",9:"(λfλxf(f(f(f(f(f(f(f(f(x))))))))))",">":"(λnλfλxf(nf(x)))","<":"(λnλfλxn(λgλhh(gf))(λux)(λuu))",I:"(λxx)",K:"(λxλyx)",T:"(λxλyx)",S:"(λxλyλz(xz)(yz))",Y:"(λf(λxf(xx))(λxf(xx)))",_:"(λnn(λxF)T)","!":"(λxxFT)","&":"(λxλyxyF)","|":"(λxλyxTy)",",":"(λxλyλzzxy)","'":"(λpp(λxλyx))",'"':"(λpp(λxλyy))","+":"(λaλbλfλx(af)(bfx))","-":"(λmλnn<m)","*":"(λaλbλfb(af))","^":"(λaλbba)","=":"(λaλb(a(λnλfλxn(λgλhh(gf))(λux)(λuu))b(λxF)T)(b(λnλfλxn(λgλhh(gf))(λux)(λuu))a(λxF)T)(F))"};class LambdaCalculus extends AnimationFrameApplet{outerExpressionSize;resolution=2e3;lambdaIndex=0;numLambdas=0;animationTime=500;animationPaused=!1;animationRunning=!1;needReload=!1;reloaded=Promise.resolve();reloadedResolve;nextId=0;nextUniqueArgument=0;constructor({canvas}){super(canvas);var e={canvasWidth:this.resolution,fullscreenOptions:{useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonCPU(this.canvas,e)}async run({expression:expressionString,expandShorthands=!1,betaReduce=!1}){if(!this.needReload){this.animationRunning&&(this.reloaded=new Promise(resolve=>this.reloadedResolve=resolve),this.needReload=!0,await this.reloaded,this.needReload=!1,this.animationRunning=!1),expressionString=expressionString.replaceAll(/[\n\t\s.]/g,""),this.numLambdas=this.computeNumLambdasFromString(expressionString),this.lambdaIndex=0;const i=this.parseExpression(expressionString,expandShorthands);this.setupExpression(i),this.drawExpression(i);var e=this.expressionToString({expression:i}).replaceAll(/\[LEFTCARET\]/g,"&lt;"),s=this.expressionToString({expression:i,addHtml:!1}).replaceAll(/\[LEFTCARET\]/g,"<");if(betaReduce)if(expandShorthands)this.animateIteratedBetaReduction(i);else{const i=this.parseExpression(expressionString,!0);this.setupExpression(i),this.animateIteratedBetaReduction(i)}return[e,s]}}computeNumLambdasFromString(expressionString){for(;;){let e=!1;for(const i in shorthands)expressionString.includes(i)&&(expressionString=expressionString.replaceAll(i,shorthands[i]),e=!0);if(!e)break}let e=0;var s=expressionString.split("");for(let t=0;t<s.length;t++)"λ"===s[t]?e++:s[t]in shorthands&&(e+=shorthands[s[t]].split("λ").length-1);return e}parseExpression(expressionString,expandShorthands){if(0===expressionString.length)throw new Error("Empty expression.");for(var i=[];0<expressionString.length;)if("λ"===expressionString[0]){if(expressionString.length<3)throw new Error("Expression too short.");var t=expressionString[1],e=expressionString.slice(2);i.push({type:LAMBDA,argument:t,argumentText:t,body:this.parseExpression(e,expandShorthands),literalColor:{h:this.lambdaIndex/this.numLambdas,s:.8,v:1}}),this.lambdaIndex++,expressionString=""}else if("("===expressionString[0]){let e=1,s=1;for(;0<s;)"("===expressionString[e]?s++:")"===expressionString[e]&&s--,e++;t=this.parseExpression(expressionString.slice(1,e-1),expandShorthands);t.startText="("+(t.startText??""),t.endText=(t.endText??"")+")",i.push(t),expressionString=expressionString.slice(e)}else expressionString[0]in shorthands?(i.push(this.parseExpression(shorthands[expressionString[0]],expandShorthands)),expandShorthands||(i[i.length-1].shorthandText="<"===expressionString[0]?"[LEFTCARET]":expressionString[0])):i.push({type:LITERAL,value:expressionString[0],valueText:expressionString[0]}),expressionString=expressionString.slice(1);if(1===i.length)return i[0];let s=i[0];for(let n=1;n<i.length;n++)s={type:APPLICATION,function:s,input:i[n]};return s}validateExpression(expression,scopedVariables=[]){if(expression.type!==LITERAL)return expression.type===LAMBDA?this.validateExpression(expression.body,[...scopedVariables,expression.argument]):this.validateExpression(expression.function,scopedVariables)&&this.validateExpression(expression.input,scopedVariables);if(scopedVariables.includes(expression.value))return!0;throw new Error(`Undefined variable ${expression.value}.`)}checkIfExpressionContainsApplication(expression){return expression.type!==LITERAL&&(expression.type!==LAMBDA||this.checkIfExpressionContainsApplication(expression.body))}setupExpression(expression,isBetaReduction=!1){this.addExpressionSize(expression),this.checkIfExpressionContainsApplication(expression)&&expression.height--,this.outerExpressionSize=Math.max(expression.width,expression.height),expression.row=Math.max((this.outerExpressionSize-expression.height)/2,0),expression.col=Math.max((this.outerExpressionSize-expression.width)/2,0),this.addExpressionLocation(expression),this.addExpressionBindings(expression),this.addExpressionColors(expression),this.addExpressionRects(expression,isBetaReduction),expression.type===APPLICATION&&(expression.rects[0].row++,expression.rects[1].height++,expression.rects[2].height++),expression.rectIndex={},this.addExpressionRectIndices(expression,expression.rectIndex)}addExpressionSize(expression){expression.type===LAMBDA?(this.addExpressionSize(expression.body),expression.width=expression.body.width,expression.height=expression.body.height+2):expression.type===APPLICATION?(this.addExpressionSize(expression.function),this.addExpressionSize(expression.input),expression.width=expression.function.width+expression.input.width+1,expression.height=Math.max(expression.function.height,expression.input.height)+2):(expression.width=3,expression.height=0)}addExpressionLocation(expression){expression.type===LAMBDA?(expression.body.row=expression.row+2,expression.body.col=expression.col,this.addExpressionLocation(expression.body)):expression.type===APPLICATION&&(expression.function.row=expression.row,expression.function.col=expression.col,expression.input.row=expression.row,expression.input.col=expression.col+expression.function.width+1,this.addExpressionLocation(expression.function),this.addExpressionLocation(expression.input))}addExpressionBindings(expression,bindings={},argumentRewriteMap={},argumentsSeen=[]){var e;expression.type===LITERAL?(expression.value in argumentRewriteMap&&(expression.value=argumentRewriteMap[expression.value]),expression.bindingLambda=bindings[expression.value]):expression.type===LAMBDA?argumentsSeen.includes(expression.argument)?(this.nextUniqueArgument++,e=expression.argument,expression.argument=this.nextUniqueArgument,this.addExpressionBindings(expression.body,{...bindings,[expression.argument]:expression},{...argumentRewriteMap,[e]:this.nextUniqueArgument},argumentsSeen)):(argumentsSeen.push(expression.argument),this.addExpressionBindings(expression.body,{...bindings,[expression.argument]:expression},argumentRewriteMap,argumentsSeen)):expression.type===APPLICATION&&(this.addExpressionBindings(expression.function,bindings,argumentRewriteMap,argumentsSeen),this.addExpressionBindings(expression.input,bindings,argumentRewriteMap,argumentsSeen))}addExpressionColors(expression){var e,s,i,t;expression.type===LITERAL?expression.color=expression.bindingLambda.literalColor:expression.type===LAMBDA?(this.addExpressionColors(expression.body),expression.color=expression.body.color):(this.addExpressionColors(expression.function),this.addExpressionColors(expression.input),e=expression.function.color.h,s=expression.input.color.h,i=expression.function.color.s,t=expression.input.color.s,expression.color={h:Math.abs(e-s)<=.5?(e+s)/2:(e+s+1)/2%1,s:Math.max((i+t)/2-.1,.1),v:1})}addExpressionRects(expression,isBetaReduction){if(expression.type===LAMBDA){var e=hsvToRgb(expression.literalColor.h,expression.literalColor.s,expression.literalColor.v),e=[{type:LAMBDA,color:`rgb(${e[0]}, ${e[1]}, ${e[2]})`,row:expression.row,col:expression.col,width:expression.width,height:1}];isBetaReduction?(expression.rects[0].row=e[0].row,expression.rects[0].col=e[0].col,expression.rects[0].width=e[0].width,expression.rects[0].height=e[0].height,expression.rects[0].color=e[0].color):expression.rects=e,this.addExpressionRects(expression.body,isBetaReduction)}else if(expression.type===APPLICATION){var e=hsvToRgb(expression.function.color.h,expression.function.color.s,expression.function.color.v),e={type:CONNECTOR,color:`rgb(${e[0]}, ${e[1]}, ${e[2]})`,col:expression.col+1,width:1},s=(expression.function.type!==LAMBDA&&expression.function.type===LITERAL?e.row=expression.function.bindingLambda.row+1:e.row=expression.function.row+expression.function.height-1,e.height=expression.row+expression.height-3-e.row+1,hsvToRgb(expression.input.color.h,expression.input.color.s,expression.input.color.v)),s={type:CONNECTOR,color:`rgb(${s[0]}, ${s[1]}, ${s[2]})`,col:expression.col+expression.function.width+2,width:1},i=(expression.input.type!==LAMBDA&&expression.input.type===LITERAL?s.row=expression.input.bindingLambda.row+1:s.row=expression.input.row+expression.input.height-1,s.height=expression.row+expression.height-3-s.row+1,hsvToRgb(expression.color.h,expression.color.s,expression.color.v)),t=[{type:APPLICATION,color:`rgb(${i[0]}, ${i[1]}, ${i[2]})`,row:expression.row+expression.height-2,col:expression.col+1,width:expression.function.width+2,height:1},e,s];if(isBetaReduction)for(let e=0;e<3;e++)expression.rects[e].row=t[e].row,expression.rects[e].col=t[e].col,expression.rects[e].width=t[e].width,expression.rects[e].height=t[e].height,expression.rects[e].color=t[e].color;else expression.rects=t;this.addExpressionRects(expression.function,isBetaReduction),this.addExpressionRects(expression.input,isBetaReduction)}else{i=hsvToRgb(expression.color.h,expression.color.s,expression.color.v),e=[{type:LITERAL,color:`rgb(${i[0]}, ${i[1]}, ${i[2]})`,row:expression.bindingLambda.row+1,col:expression.col+1,width:1,height:expression.row-1-(expression.bindingLambda.row+1)}];isBetaReduction?(expression.rects[0].row=e[0].row,expression.rects[0].col=e[0].col,expression.rects[0].width=e[0].width,expression.rects[0].height=e[0].height):expression.rects=e}}addExpressionRectIndices(expression,rectIndex){if(expression.type===LAMBDA)void 0===expression.rects[0].id&&(expression.rects[0].id=this.nextId,this.nextId++),rectIndex[expression.rects[0].id]=expression.rects[0],this.addExpressionRectIndices(expression.body,rectIndex);else if(expression.type===APPLICATION){for(let e=0;e<3;e++)void 0===expression.rects[e].id&&(expression.rects[e].id=this.nextId,this.nextId++),rectIndex[expression.rects[e].id]=expression.rects[e];this.addExpressionRectIndices(expression.function,rectIndex),this.addExpressionRectIndices(expression.input,rectIndex)}else void 0===expression.rects[0].id&&(expression.rects[0].id=this.nextId,this.nextId++),rectIndex[expression.rects[0].id]=expression.rects[0]}removeExpressionRectIndices(expression){if(expression.type===LAMBDA)expression.rects[0].id=void 0,this.removeExpressionRectIndices(expression.body);else if(expression.type===APPLICATION){for(let e=0;e<3;e++)expression.rects[e].id=void 0;this.removeExpressionRectIndices(expression.function),this.removeExpressionRectIndices(expression.input)}else expression.rects[0].id=void 0}drawExpression(expression){this.outerExpressionSize=Math.max(expression.width,expression.height),this.resolution=Math.round(Math.min(Math.max(this.resolution,2e3),5e3)/(this.outerExpressionSize+2))*(this.outerExpressionSize+2),this.wilson.resizeCanvas({width:this.resolution}),this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(expression)}drawExpressionStep(expression){for(const s of expression.rects){this.wilson.ctx.fillStyle=s.color;var e=this.resolution/(this.outerExpressionSize+2);this.wilson.ctx.fillRect(e*(s.col+1),e*(s.row+1),e*s.width,e*s.height)}expression.type===LAMBDA?this.drawExpressionStep(expression.body):expression.type===APPLICATION&&(this.drawExpressionStep(expression.function),this.drawExpressionStep(expression.input))}expressionToString({expression,addHtml=!0,useForSelfInterpreter=!1}){var e=expression.startText??"",s=expression.endText??"",i=siteSettings.darkTheme?1:.7;if(expression.type===LITERAL){const o=expression.bindingLambda.literalColor,p=hsvToRgb(o.h,o.s,o.v*i),x=`rgb(${p[0]}, ${p[1]}, ${p[2]})`;var t=useForSelfInterpreter?"λa.λb.λc."+expression.valueText:expression.valueText;return expression.shorthandText?addHtml?`<span style="color: ${x}">${e.slice(1)}${expression.shorthandText}${s.slice(1)}</span>`:""+e.slice(1)+expression.shorthandText+s.slice(1):addHtml?`<span style="color: ${x}">${e}${t}${s}</span>`:""+e+t+s}if(expression.type===LAMBDA){t=expression.literalColor,t=hsvToRgb(t.h,t.s,t.v*i),t=`rgb(${t[0]}, ${t[1]}, ${t[2]})`;const o=expression.color,p=hsvToRgb(o.h,o.s,o.v*i),x=`rgb(${p[0]}, ${p[1]}, ${p[2]})`;var n=useForSelfInterpreter?`λa.λb.λc.c(λ${expression.argumentText}.`:`λ${expression.argumentText}.`,r=this.expressionToString({expression:expression.body,addHtml:addHtml,useForSelfInterpreter:useForSelfInterpreter}),r=useForSelfInterpreter?r+")":r;return expression.shorthandText?addHtml?`<span style="color: ${x}">${e.slice(1)}${expression.shorthandText}${s.slice(1)}</span>`:""+e.slice(1)+expression.shorthandText+s.slice(1):addHtml?`<span style="color: ${x}">${e}</span><span style="color: ${t}">${n}</span>${r}<span style="color: ${x}">${s}</span>`:e+n+r+s}t=this.expressionToString({expression:expression.function,addHtml:addHtml,useForSelfInterpreter:useForSelfInterpreter}),n=this.expressionToString({expression:expression.input,addHtml:addHtml,useForSelfInterpreter:useForSelfInterpreter});const o=expression.color,p=hsvToRgb(o.h,o.s,o.v*i),x=`rgb(${p[0]}, ${p[1]}, ${p[2]})`;r=useForSelfInterpreter?`λa.λb.λc.b(${t}${n})`:""+t+n;return expression.shorthandText?addHtml?`<span style="color: ${x}">${e.slice(1)}${expression.shorthandText}${s.slice(1)}</span>`:""+e.slice(1)+expression.shorthandText+s.slice(1):addHtml?`<span style="color: ${x}">${e}</span>${r}<span style="color: ${x}">${s}</span>`:e+r+s}isSubexpressionOf(subexpressionString,expressionString){let e=0;for(const s of expressionString)if(s===subexpressionString[e]&&e++,e===subexpressionString.length)return!0;return!1}listAllBetaReductions(expression){var e,s,i,t,n;return expression.type===APPLICATION?(e=this.listAllBetaReductions(expression.function).map(reduction=>{var e=structuredClone(expression);return e.function=reduction,e}),s=this.listAllBetaReductions(expression.input).map(reduction=>{var e=structuredClone(expression);return e.input=reduction,e}),expression.function.type===LAMBDA?(n=(t=structuredClone(expression)).function.body,i=t.function,t=t.input,this.removeExpressionRectIndices(t),n=this.computeBetaReduction(n,i,t),[...e,...s,n]):[...e,...s]):expression.type===LAMBDA?this.listAllBetaReductions(expression.body).map(reduction=>{var e=structuredClone(expression);return e.body=reduction,e}):[]}computeBetaReduction(expression,bindingLambdaToReplace,replacementValue){if(expression.type===LITERAL){if(expression.bindingLambda===bindingLambdaToReplace)return structuredClone(replacementValue)}else expression.type===LAMBDA?expression.body=this.computeBetaReduction(expression.body,bindingLambdaToReplace,replacementValue):(expression.function=this.computeBetaReduction(expression.function,bindingLambdaToReplace,replacementValue),expression.input=this.computeBetaReduction(expression.input,bindingLambdaToReplace,replacementValue));return expression}async*animateBetaReduction(expression,betaReducedExpression){const r=structuredClone(expression.rectIndex),t=structuredClone(betaReducedExpression.rectIndex),o=Object.keys(expression.rectIndex).filter(rectId=>rectId in betaReducedExpression.rectIndex);var e=Object.keys(expression.rectIndex).filter(rectId=>!(rectId in betaReducedExpression.rectIndex)).sort((a,b)=>r[a].row+r[a].height!==r[b].row+r[b].height?r[a].row+r[a].height-(r[b].row+r[b].height):r[a].col-r[b].col),s=Object.keys(betaReducedExpression.rectIndex).filter(rectId=>!(rectId in expression.rectIndex)).sort((a,b)=>parseInt(a)-parseInt(b));const n=[];let i=e.length-1;for(;n.length<3;)r[e[i]].type!==APPLICATION&&r[e[i]].type!==CONNECTOR||n.push(e[i]),i--;const p=e.find(key=>r[key].type===LAMBDA),x=[p].concat(e.filter(key=>r[key].type===LITERAL&&r[key].row===r[p].row+1&&r[key].col>=r[p].col&&r[key].col<r[p].col+r[p].width)),d=e.filter(key=>!(n.includes(key)||x.includes(key)));var c=[];for(let O=0;O<s.length;O+=d.length)c.push(s.slice(O,O+d.length).sort((a,b)=>t[a].row+t[a].height!==t[b].row+t[b].height?t[a].row+t[a].height-(t[b].row+t[b].height):t[a].col-t[b].col));const l=c.flat(),h=d.every(key=>r[key].type===LITERAL||r[key].type===CONNECTOR);let u=1/0,g=1/0,f=0,m=0;for(const P of d){var w=r[P];u=Math.min(u,w.row),g=Math.min(g,w.col),f=Math.max(f,w.row+w.height),m=Math.max(m,w.col+w.width)}var E=m-g,I=f-u;const R=Math.max(expression.width,expression.height),y=Math.max(betaReducedExpression.width,betaReducedExpression.height),S=0===l.length||h?y:Math.max(Math.max(betaReducedExpression.width,E),betaReducedExpression.height+2*(6+I));I=betaReducedExpression.row-3-I,E=(y-E)/2;const A=I-u,F=E-g,v=h?0:(S-betaReducedExpression.height)/2-betaReducedExpression.row,T=h?0:(S-betaReducedExpression.width)/2-betaReducedExpression.col;for(const P of o)betaReducedExpression.rectIndex[P].row+=v,betaReducedExpression.rectIndex[P].col+=T;const L=Object.fromEntries(Object.entries(expression.rectIndex).map(([key,value])=>[key,value.color.slice(4,-1).split(",").map(Number)])),$=Object.fromEntries(Object.entries(betaReducedExpression.rectIndex).map(([key,value])=>[key,value.color.slice(4,-1).split(",").map(Number)]));var B=l.length/d.length;if(l.length%d.length!=0&&!h)throw new Error("Chunking failed.");const C={t:0};if(await anime({targets:C,t:1,duration:.5*this.animationTime,easing:"easeInOutQuad",update:()=>{this.outerExpressionSize=R;for(const e of n)expression.rectIndex[e].row=r[e].row+C.t,expression.rectIndex[e].color=`rgba(${r[e].color.slice(4,-1)}, ${1-C.t})`;for(const s of x)expression.rectIndex[s].row=r[s].row-C.t,expression.rectIndex[s].color=`rgba(${r[s].color.slice(4,-1)}, ${1-C.t})`;if(0===l.length||h)for(const i of d)expression.rectIndex[i].color=`rgba(${r[i].color.slice(4,-1)}, ${1-C.t})`;this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(expression)}}).finished,yield await new Promise(resolve=>setTimeout(resolve,this.animationTime/3)),C.t=0,await anime({targets:C,t:1,duration:this.animationTime,easing:"easeInOutQuad",update:()=>{this.outerExpressionSize=(1-C.t)*R+C.t*S;for(const t of o){expression.rectIndex[t].row=(1-C.t)*r[t].row+C.t*betaReducedExpression.rectIndex[t].row,expression.rectIndex[t].col=(1-C.t)*r[t].col+C.t*betaReducedExpression.rectIndex[t].col,expression.rectIndex[t].width=(1-C.t)*r[t].width+C.t*betaReducedExpression.rectIndex[t].width,expression.rectIndex[t].height=(1-C.t)*r[t].height+C.t*betaReducedExpression.rectIndex[t].height;var e=(1-C.t)*L[t][0]+C.t*$[t][0],s=(1-C.t)*L[t][1]+C.t*$[t][1],i=(1-C.t)*L[t][2]+C.t*$[t][2];expression.rectIndex[t].color=`rgb(${e}, ${s}, ${i})`}for(const n of d)expression.rectIndex[n].row=r[n].row+C.t*(A+v),expression.rectIndex[n].col=r[n].col+C.t*(F+T);this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(expression)}}).finished,yield await new Promise(resolve=>setTimeout(resolve,this.animationTime/6)),h)this.drawExpression(betaReducedExpression),yield await new Promise(resolve=>setTimeout(resolve,this.animationTime/6));else{for(let s=0;s<B;s++)for(let e=d.length*s;e<d.length*(s+1);e++){var M=d[e%d.length],P=l[e];betaReducedExpression.rectIndex[P].row=expression.rectIndex[M].row,betaReducedExpression.rectIndex[P].col=expression.rectIndex[M].col,betaReducedExpression.rectIndex[P].width=expression.rectIndex[M].width,betaReducedExpression.rectIndex[P].height=expression.rectIndex[M].height}const N=structuredClone(betaReducedExpression.rectIndex);for(let i=0;i<B-1;i++)C.t=0,await anime({targets:C,t:1,duration:1.5*this.animationTime/B,easing:"easeInOutQuad",update:()=>{this.outerExpressionSize=S;for(let s=d.length*i;s<d.length*(i+1);s++){var e=l[s];betaReducedExpression.rectIndex[e].row=(1-C.t)*N[e].row+C.t*(t[e].row+v),betaReducedExpression.rectIndex[e].col=(1-C.t)*N[e].col+C.t*(t[e].col+T),betaReducedExpression.rectIndex[e].width=(1-C.t)*N[e].width+C.t*t[e].width,betaReducedExpression.rectIndex[e].height=(1-C.t)*N[e].height+C.t*t[e].height}this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(betaReducedExpression)}}).finished;for(let e=C.t=0;e<d.length*(B-1);e++){const P=l[e];N[P].row=betaReducedExpression.rectIndex[P].row,N[P].col=betaReducedExpression.rectIndex[P].col,N[P].width=betaReducedExpression.rectIndex[P].width,N[P].height=betaReducedExpression.rectIndex[P].height}0!==l.length&&await anime({targets:C,t:1,duration:1.5*this.animationTime/B,easing:"easeInOutQuad",update:()=>{this.outerExpressionSize=(1-C.t)*S+C.t*y;for(const e in t)betaReducedExpression.rectIndex[e].row=(1-C.t)*N[e].row+C.t*t[e].row,betaReducedExpression.rectIndex[e].col=(1-C.t)*N[e].col+C.t*t[e].col,betaReducedExpression.rectIndex[e].width=(1-C.t)*N[e].width+C.t*t[e].width,betaReducedExpression.rectIndex[e].height=(1-C.t)*N[e].height+C.t*t[e].height;this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(betaReducedExpression)}}).finished,this.drawExpression(betaReducedExpression),yield await new Promise(resolve=>setTimeout(resolve,this.animationTime/3))}}async animateIteratedBetaReduction(expression){this.animationRunning=!0;let i=this.expressionToString({expression:expression,addHtml:!1}),t=i.replaceAll(/a-zA-Z/g,"x").replaceAll(/\(\)/g,"");e:for(;;){var e=this.listAllBetaReductions(expression).map(reduction=>{var e=this.expressionToString({expression:reduction,addHtml:!1}),s=e.replaceAll(/a-zA-Z/g,"x").replaceAll(/\(\)/g,"");return{expression:reduction,expressionString:e,collapsedExpressionString:s,isNestedBadly:this.isSubexpressionOf(t,s),isNestedVeryBadly:this.isSubexpressionOf(i,e)}});if(0===e.length)break;var e=e.sort((a,b)=>!a.isNestedVeryBadly&&b.isNestedVeryBadly?-1:a.isNestedVeryBadly&&!b.isNestedVeryBadly?1:!a.isNestedBadly&&b.isNestedBadly?-1:a.isNestedBadly&&!b.isNestedBadly?1:a.expressionString.length-b.expressionString.length),s=(this.setupExpression(e[0].expression,!0),this.animateBetaReduction(expression,e[0].expression));for await(const n of s){if(this.needReload)break e;this.animationPaused&&await new Promise(resolve=>{addTemporaryInterval(setInterval(()=>{this.animationPaused||resolve()}),100)})}expression=e[0].expression,i=e[0].expressionString,t=e[0].collapsedExpressionString}this.needReload&&(this.needReload=!1,this.reloadedResolve()),this.animationRunning=!1}}export{LambdaCalculus};
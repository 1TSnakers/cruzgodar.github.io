import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";const LITERAL=0,LAMBDA=1,APPLICATION=2;class LambdaCalculus extends AnimationFrameApplet{resolution=2e3;constructor({canvas}){super(canvas);var e={canvasWidth:this.resolution,fullscreenOptions:{useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.canvas.style.imageRendering="pixelated",this.wilson=new WilsonCPU(this.canvas,e)}run({expression:expressionString}){expressionString=expressionString.replaceAll(/[\n\t\s.]/g,"");var e=this.parseExpression(expressionString),s=(this.validateExpression(e),this.addExpressionSize(e),e.row=0,e.col=0,this.addExpressionLocation(e),this.addExpressionBindings(e),this.addExpressionRects(e),Math.max(e.width,e.height));this.wilson.resizeCanvas({width:s+2}),this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,s+2,s+2),this.drawExpression(e),console.log(e)}parseExpression(expressionString){if(0===expressionString.length)throw new Error("Empty expression.");for(var i=[];0<expressionString.length;)if("Î»"===expressionString[0]){if(expressionString.length<3)throw new Error("Expression too short.");var e=expressionString[1],s=expressionString.slice(2);i.push({type:LAMBDA,argument:e,body:this.parseExpression(s)}),expressionString=""}else if("("===expressionString[0]){let e=1,s=1;for(;0<s;)"("===expressionString[e]?s++:")"===expressionString[e]&&s--,e++;i.push(this.parseExpression(expressionString.slice(1,e-1))),expressionString=expressionString.slice(e)}else i.push({type:LITERAL,value:expressionString[0]}),expressionString=expressionString.slice(1);if(1===i.length)return i[0];let n=i[0];for(let o=1;o<i.length;o++)n={type:APPLICATION,function:n,input:i[o]};return n}validateExpression(expression,scopedVariables=[]){if(expression.type===LITERAL){if(scopedVariables.includes(expression.value))return!0;throw new Error(`Undefined variable ${expression.value}.`)}if(expression.type!==LAMBDA)return this.validateExpression(expression.function,scopedVariables)&&this.validateExpression(expression.input,scopedVariables);if(scopedVariables.includes(expression.argument))throw new Error(`Variable ${expression.argument} is already in scope.`);return this.validateExpression(expression.body,[...scopedVariables,expression.argument])}addExpressionSize(expression){expression.type===LAMBDA?(this.addExpressionSize(expression.body),expression.width=expression.body.width,expression.height=expression.body.height+2):expression.type===APPLICATION?(this.addExpressionSize(expression.function),this.addExpressionSize(expression.input),expression.width=expression.function.width+expression.input.width+1,expression.height=Math.max(expression.function.height,expression.input.height)+2):(expression.width=3,expression.height=0)}addExpressionLocation(expression){expression.type===LAMBDA?(expression.body.row=expression.row+2,expression.body.col=expression.col,this.addExpressionLocation(expression.body)):expression.type===APPLICATION&&(expression.function.row=expression.row,expression.function.col=expression.col,expression.input.row=expression.row,expression.input.col=expression.col+expression.function.width+1,this.addExpressionLocation(expression.function),this.addExpressionLocation(expression.input))}addExpressionBindings(expression,bindings={}){expression.type===LITERAL?expression.bindingLambda=bindings[expression.value]:expression.type===LAMBDA?(bindings[expression.argument]=expression,this.addExpressionBindings(expression.body,{...bindings,[expression.argument]:expression})):(this.addExpressionBindings(expression.function,bindings),this.addExpressionBindings(expression.input,bindings))}addExpressionRects(expression){var e,s;expression.type===LAMBDA?(expression.rects=[{color:"rgb(255, 255, 255)",row:expression.row,col:expression.col,width:expression.width,height:1}],this.addExpressionRects(expression.body)):expression.type===APPLICATION?(e={col:expression.col+1,width:1},expression.function.type===LAMBDA?(e.color="rgb(255, 255, 0)",e.row=expression.function.row+expression.function.height-1):expression.function.type===LITERAL?(e.color="rgb(0, 255, 255)",e.row=expression.function.bindingLambda.row+1):(e.color="rgb(255, 0, 255)",e.row=expression.function.row+expression.function.height-1),e.height=expression.row+expression.height-3-e.row+1,s={col:expression.col+expression.function.width+2,width:1},expression.input.type===LAMBDA?(s.color="rgb(255, 255, 0)",s.row=expression.input.row+expression.input.height-1):expression.input.type===LITERAL?(s.color="rgb(0, 255, 255)",s.row=expression.input.bindingLambda.row+1):(s.color="rgb(255, 0, 255)",s.row=expression.input.row+expression.input.height-1),s.height=expression.row+expression.height-3-s.row+1,expression.rects=[{color:"rgb(255, 255, 255)",row:expression.row+expression.height-2,col:expression.col+1,width:expression.function.width+2,height:1},e,s],this.addExpressionRects(expression.function),this.addExpressionRects(expression.input)):expression.rects=[{color:"rgb(0, 255, 255)",row:expression.bindingLambda.row+1,col:expression.col+1,width:1,height:expression.row-1-(expression.bindingLambda.row+1)+1}]}drawExpression(expression){for(const e of expression.rects)this.wilson.ctx.fillStyle=e.color,this.wilson.ctx.fillRect(e.col+1,e.row+1,e.width,e.height);expression.type===LAMBDA?this.drawExpression(expression.body):expression.type===APPLICATION&&(this.drawExpression(expression.function),this.drawExpression(expression.input))}}export{LambdaCalculus};
import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{hsvToRgb}from"/scripts/applets/applet.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";const LITERAL=0,LAMBDA=1,APPLICATION=2;class LambdaCalculus extends AnimationFrameApplet{resolution=2e3;lambdaIndex=0;numLambdas=0;constructor({canvas}){super(canvas);var s={canvasWidth:this.resolution,fullscreenOptions:{useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.canvas.style.imageRendering="pixelated",this.wilson=new WilsonCPU(this.canvas,s)}run({expression:expressionString}){expressionString=expressionString.replaceAll(/[\n\t\s.]/g,""),this.numLambdas=expressionString.split("λ").length-1,this.lambdaIndex=0;var s=this.parseExpression(expressionString),e=(this.validateExpression(s),this.addExpressionSize(s),Math.max(s.width,s.height));s.row=Math.max(Math.round((e-s.height)/2),0),s.col=Math.max(Math.round((e-s.width)/2),0),this.addExpressionLocation(s),this.addExpressionBindings(s),this.addExpressionColors(s),this.addExpressionRects(s),this.wilson.resizeCanvas({width:e+2}),this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,e+2,e+2),this.drawExpression(s)}parseExpression(expressionString){if(0===expressionString.length)throw new Error("Empty expression.");for(var i=[];0<expressionString.length;)if("λ"===expressionString[0]){if(expressionString.length<3)throw new Error("Expression too short.");var s=expressionString[1],e=expressionString.slice(2);i.push({type:LAMBDA,argument:s,body:this.parseExpression(e),literalColor:{h:this.lambdaIndex/this.numLambdas,s:.8,v:1}}),this.lambdaIndex++,expressionString=""}else if("("===expressionString[0]){let s=1,e=1;for(;0<e;)"("===expressionString[s]?e++:")"===expressionString[s]&&e--,s++;i.push(this.parseExpression(expressionString.slice(1,s-1))),expressionString=expressionString.slice(s)}else i.push({type:LITERAL,value:expressionString[0]}),expressionString=expressionString.slice(1);if(1===i.length)return i[0];let o=i[0];for(let n=1;n<i.length;n++)o={type:APPLICATION,function:o,input:i[n]};return o}validateExpression(expression,scopedVariables=[]){if(expression.type!==LITERAL)return expression.type===LAMBDA?this.validateExpression(expression.body,[...scopedVariables,expression.argument]):this.validateExpression(expression.function,scopedVariables)&&this.validateExpression(expression.input,scopedVariables);if(scopedVariables.includes(expression.value))return!0;throw new Error(`Undefined variable ${expression.value}.`)}addExpressionSize(expression){expression.type===LAMBDA?(this.addExpressionSize(expression.body),expression.width=expression.body.width,expression.height=expression.body.height+2):expression.type===APPLICATION?(this.addExpressionSize(expression.function),this.addExpressionSize(expression.input),expression.width=expression.function.width+expression.input.width+1,expression.height=Math.max(expression.function.height,expression.input.height)+2):(expression.width=3,expression.height=0)}addExpressionLocation(expression){expression.type===LAMBDA?(expression.body.row=expression.row+2,expression.body.col=expression.col,this.addExpressionLocation(expression.body)):expression.type===APPLICATION&&(expression.function.row=expression.row,expression.function.col=expression.col,expression.input.row=expression.row,expression.input.col=expression.col+expression.function.width+1,this.addExpressionLocation(expression.function),this.addExpressionLocation(expression.input))}addExpressionBindings(expression,bindings={}){expression.type===LITERAL?expression.bindingLambda=bindings[expression.value]:expression.type===LAMBDA?this.addExpressionBindings(expression.body,{...bindings,[expression.argument]:expression}):(this.addExpressionBindings(expression.function,bindings),this.addExpressionBindings(expression.input,bindings))}addExpressionColors(expression){var s,e,i,o;expression.type===LITERAL?expression.color=expression.bindingLambda.literalColor:expression.type===LAMBDA?(this.addExpressionColors(expression.body),expression.color=expression.body.color):(this.addExpressionColors(expression.function),this.addExpressionColors(expression.input),s=expression.function.color.h,e=expression.input.color.h,i=expression.function.color.s,o=expression.input.color.s,expression.color={h:Math.abs(s-e)<=.5?(s+e)/2:(s+e+1)/2%1,s:Math.max(Math.min(i,o)-.1,.1),v:1})}addExpressionRects(expression){var s,e,i;expression.type===LAMBDA?(s=hsvToRgb(expression.literalColor.h,expression.literalColor.s,expression.literalColor.v),expression.rects=[{color:`rgb(${s[0]}, ${s[1]}, ${s[2]})`,row:expression.row,col:expression.col,width:expression.width,height:1}],this.addExpressionRects(expression.body)):expression.type===APPLICATION?(s={color:`rgb(${(s=hsvToRgb(expression.function.color.h,expression.function.color.s,expression.function.color.v))[0]}, ${s[1]}, ${s[2]})`,col:expression.col+1,width:1},expression.function.type!==LAMBDA&&expression.function.type===LITERAL?s.row=expression.function.bindingLambda.row+1:s.row=expression.function.row+expression.function.height-1,s.height=expression.row+expression.height-3-s.row+1,e={color:`rgb(${(e=hsvToRgb(expression.input.color.h,expression.input.color.s,expression.input.color.v))[0]}, ${e[1]}, ${e[2]})`,col:expression.col+expression.function.width+2,width:1},expression.input.type!==LAMBDA&&expression.input.type===LITERAL?e.row=expression.input.bindingLambda.row+1:e.row=expression.input.row+expression.input.height-1,e.height=expression.row+expression.height-3-e.row+1,i=hsvToRgb(expression.color.h,expression.color.s,expression.color.v),expression.rects=[{color:`rgb(${i[0]}, ${i[1]}, ${i[2]})`,row:expression.row+expression.height-2,col:expression.col+1,width:expression.function.width+2,height:1},s,e],this.addExpressionRects(expression.function),this.addExpressionRects(expression.input)):(i=hsvToRgb(expression.color.h,expression.color.s,expression.color.v),expression.rects=[{color:`rgb(${i[0]}, ${i[1]}, ${i[2]})`,row:expression.bindingLambda.row+1,col:expression.col+1,width:1,height:expression.row-1-(expression.bindingLambda.row+1)+1}])}drawExpression(expression){for(const s of expression.rects)this.wilson.ctx.fillStyle=s.color,this.wilson.ctx.fillRect(s.col+1,s.row+1,s.width,s.height);expression.type===LAMBDA?this.drawExpression(expression.body):expression.type===APPLICATION&&(this.drawExpression(expression.function),this.drawExpression(expression.input))}}export{LambdaCalculus};
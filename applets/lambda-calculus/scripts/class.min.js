import anime from"/scripts/anime.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{hsvToRgb}from"/scripts/applets/applet.min.js";import{siteSettings}from"/scripts/src/settings.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";const LITERAL=0,LAMBDA=1,APPLICATION=2,CONNECTOR=3;class LambdaCalculus extends AnimationFrameApplet{outerExpressionSize;resolution=2e3;lambdaIndex=0;numLambdas=0;animationTime=600;nextId=0;constructor({canvas}){super(canvas);var e={canvasWidth:this.resolution,fullscreenOptions:{useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonCPU(this.canvas,e)}run({resolution=2e3,expression:expressionString,betaReduce=!1}){this.resolution=resolution,expressionString=expressionString.replaceAll(/[\n\t\s.]/g,""),this.numLambdas=expressionString.split("λ").length-1,this.lambdaIndex=0;var e=this.parseExpression(expressionString),s=(this.validateExpression(e),this.setupExpression(e),this.drawExpression(e),this.expressionToString(e));return betaReduce&&this.animateIteratedBetaReduction(e),s}parseExpression(expressionString){if(0===expressionString.length)throw new Error("Empty expression.");for(var i=[];0<expressionString.length;)if("λ"===expressionString[0]){if(expressionString.length<3)throw new Error("Expression too short.");var t=expressionString[1],e=expressionString.slice(2);i.push({type:LAMBDA,argument:t,body:this.parseExpression(e),literalColor:{h:this.lambdaIndex/this.numLambdas,s:.8,v:1}}),this.lambdaIndex++,expressionString=""}else if("("===expressionString[0]){let e=1,s=1;for(;0<s;)"("===expressionString[e]?s++:")"===expressionString[e]&&s--,e++;t=this.parseExpression(expressionString.slice(1,e-1));t.startText="("+(t.startText??""),t.endText=(t.endText??"")+")",i.push(t),expressionString=expressionString.slice(e)}else i.push({type:LITERAL,value:expressionString[0]}),expressionString=expressionString.slice(1);if(1===i.length)return i[0];let s=i[0];for(let o=1;o<i.length;o++)s={type:APPLICATION,function:s,input:i[o]};return s}validateExpression(expression,scopedVariables=[]){if(expression.type!==LITERAL)return expression.type===LAMBDA?this.validateExpression(expression.body,[...scopedVariables,expression.argument]):this.validateExpression(expression.function,scopedVariables)&&this.validateExpression(expression.input,scopedVariables);if(scopedVariables.includes(expression.value))return!0;throw new Error(`Undefined variable ${expression.value}.`)}checkIfExpressionContainsApplication(expression){return expression.type!==LITERAL&&(expression.type!==LAMBDA||this.checkIfExpressionContainsApplication(expression.body))}setupExpression(expression,isBetaReduction=!1){this.addExpressionSize(expression),this.checkIfExpressionContainsApplication(expression)&&expression.height--,this.outerExpressionSize=Math.max(expression.width,expression.height),expression.row=Math.max((this.outerExpressionSize-expression.height)/2,0),expression.col=Math.max((this.outerExpressionSize-expression.width)/2,0),this.addExpressionLocation(expression),this.addExpressionBindings(expression),this.addExpressionColors(expression),this.addExpressionRects(expression,isBetaReduction),expression.type===APPLICATION&&(expression.rects[0].row++,expression.rects[1].height++,expression.rects[2].height++),expression.rectIndex={},this.addExpressionRectIndices(expression,expression.rectIndex)}addExpressionSize(expression){expression.type===LAMBDA?(this.addExpressionSize(expression.body),expression.width=expression.body.width,expression.height=expression.body.height+2):expression.type===APPLICATION?(this.addExpressionSize(expression.function),this.addExpressionSize(expression.input),expression.width=expression.function.width+expression.input.width+1,expression.height=Math.max(expression.function.height,expression.input.height)+2):(expression.width=3,expression.height=0)}addExpressionLocation(expression){expression.type===LAMBDA?(expression.body.row=expression.row+2,expression.body.col=expression.col,this.addExpressionLocation(expression.body)):expression.type===APPLICATION&&(expression.function.row=expression.row,expression.function.col=expression.col,expression.input.row=expression.row,expression.input.col=expression.col+expression.function.width+1,this.addExpressionLocation(expression.function),this.addExpressionLocation(expression.input))}addExpressionBindings(expression,bindings={}){expression.type===LITERAL?expression.bindingLambda=bindings[expression.value]:expression.type===LAMBDA?this.addExpressionBindings(expression.body,{...bindings,[expression.argument]:expression}):(this.addExpressionBindings(expression.function,bindings),this.addExpressionBindings(expression.input,bindings))}addExpressionColors(expression){var e,s,i,t;expression.type===LITERAL?expression.color=expression.bindingLambda.literalColor:expression.type===LAMBDA?(this.addExpressionColors(expression.body),expression.color=expression.body.color):(this.addExpressionColors(expression.function),this.addExpressionColors(expression.input),e=expression.function.color.h,s=expression.input.color.h,i=expression.function.color.s,t=expression.input.color.s,expression.color={h:Math.abs(e-s)<=.5?(e+s)/2:(e+s+1)/2%1,s:Math.max((i+t)/2-.1,.1),v:1})}addExpressionRects(expression,isBetaReduction){if(expression.type===LAMBDA){var e=hsvToRgb(expression.literalColor.h,expression.literalColor.s,expression.literalColor.v),e=[{type:LAMBDA,color:`rgb(${e[0]}, ${e[1]}, ${e[2]})`,row:expression.row,col:expression.col,width:expression.width,height:1}];isBetaReduction?(expression.rects[0].row=e[0].row,expression.rects[0].col=e[0].col,expression.rects[0].width=e[0].width,expression.rects[0].height=e[0].height,expression.rects[0].color=e[0].color):expression.rects=e,this.addExpressionRects(expression.body,isBetaReduction)}else if(expression.type===APPLICATION){var e=hsvToRgb(expression.function.color.h,expression.function.color.s,expression.function.color.v),e={type:CONNECTOR,color:`rgb(${e[0]}, ${e[1]}, ${e[2]})`,col:expression.col+1,width:1},s=(expression.function.type!==LAMBDA&&expression.function.type===LITERAL?e.row=expression.function.bindingLambda.row+1:e.row=expression.function.row+expression.function.height-1,e.height=expression.row+expression.height-3-e.row+1,hsvToRgb(expression.input.color.h,expression.input.color.s,expression.input.color.v)),s={type:CONNECTOR,color:`rgb(${s[0]}, ${s[1]}, ${s[2]})`,col:expression.col+expression.function.width+2,width:1},i=(expression.input.type!==LAMBDA&&expression.input.type===LITERAL?s.row=expression.input.bindingLambda.row+1:s.row=expression.input.row+expression.input.height-1,s.height=expression.row+expression.height-3-s.row+1,hsvToRgb(expression.color.h,expression.color.s,expression.color.v)),t=[{type:APPLICATION,color:`rgb(${i[0]}, ${i[1]}, ${i[2]})`,row:expression.row+expression.height-2,col:expression.col+1,width:expression.function.width+2,height:1},e,s];if(isBetaReduction)for(let e=0;e<3;e++)expression.rects[e].row=t[e].row,expression.rects[e].col=t[e].col,expression.rects[e].width=t[e].width,expression.rects[e].height=t[e].height,expression.rects[e].color=t[e].color;else expression.rects=t;this.addExpressionRects(expression.function,isBetaReduction),this.addExpressionRects(expression.input,isBetaReduction)}else{i=hsvToRgb(expression.color.h,expression.color.s,expression.color.v),e=[{type:LITERAL,color:`rgb(${i[0]}, ${i[1]}, ${i[2]})`,row:expression.bindingLambda.row+1,col:expression.col+1,width:1,height:expression.row-1-(expression.bindingLambda.row+1)+1}];isBetaReduction?(expression.rects[0].row=e[0].row,expression.rects[0].col=e[0].col,expression.rects[0].width=e[0].width,expression.rects[0].height=e[0].height):expression.rects=e}}addExpressionRectIndices(expression,rectIndex){if(expression.type===LAMBDA)void 0===expression.rects[0].id&&(expression.rects[0].id=this.nextId,this.nextId++),rectIndex[expression.rects[0].id]=expression.rects[0],this.addExpressionRectIndices(expression.body,rectIndex);else if(expression.type===APPLICATION){for(let e=0;e<3;e++)void 0===expression.rects[e].id&&(expression.rects[e].id=this.nextId,this.nextId++),rectIndex[expression.rects[e].id]=expression.rects[e];this.addExpressionRectIndices(expression.function,rectIndex),this.addExpressionRectIndices(expression.input,rectIndex)}else void 0===expression.rects[0].id&&(expression.rects[0].id=this.nextId,this.nextId++),rectIndex[expression.rects[0].id]=expression.rects[0]}removeExpressionRectIndices(expression){if(expression.type===LAMBDA)expression.rects[0].id=void 0,this.removeExpressionRectIndices(expression.body);else if(expression.type===APPLICATION){for(let e=0;e<3;e++)expression.rects[e].id=void 0;this.removeExpressionRectIndices(expression.function),this.removeExpressionRectIndices(expression.input)}else expression.rects[0].id=void 0}drawExpression(expression){this.outerExpressionSize=Math.max(expression.width,expression.height),this.resolution=Math.round(this.resolution/(this.outerExpressionSize+2))*(this.outerExpressionSize+2),this.wilson.resizeCanvas({width:this.resolution}),this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(expression)}drawExpressionStep(expression){for(const s of expression.rects){this.wilson.ctx.fillStyle=s.color;var e=this.resolution/(this.outerExpressionSize+2);this.wilson.ctx.fillRect(e*(s.col+1),e*(s.row+1),e*s.width,e*s.height)}expression.type===LAMBDA?this.drawExpressionStep(expression.body):expression.type===APPLICATION&&(this.drawExpressionStep(expression.function),this.drawExpressionStep(expression.input))}expressionToString(expression){var e=expression.startText??"",s=expression.endText??"",i=siteSettings.darkTheme?1:.7;if(expression.type===LITERAL){const r=expression.bindingLambda.literalColor,n=hsvToRgb(r.h,r.s,r.v*i),p=`rgb(${n[0]}, ${n[1]}, ${n[2]})`;return`<span style="color: ${p}">${e}${expression.value}${s}</span>`}if(expression.type===LAMBDA){var t=expression.literalColor,t=hsvToRgb(t.h,t.s,t.v*i),t=`rgb(${t[0]}, ${t[1]}, ${t[2]})`;const r=expression.color,n=hsvToRgb(r.h,r.s,r.v*i),p=`rgb(${n[0]}, ${n[1]}, ${n[2]})`;return`<span style="color: ${p}">${e}</span><span style="color: ${t}">λ${expression.argument}.</span>${this.expressionToString(expression.body)}<span style="color: ${p}">${s}</span>`}var t=this.expressionToString(expression.function),o=this.expressionToString(expression.input);const r=expression.color,n=hsvToRgb(r.h,r.s,r.v*i),p=`rgb(${n[0]}, ${n[1]}, ${n[2]})`;return`<span style="color: ${p}">${e}</span>${t}${o}<span style="color: ${p}">${s}</span>`}listAllBetaReductions(expression){var e,s,i,t,o;return expression.type===APPLICATION?(e=this.listAllBetaReductions(expression.function).map(reduction=>{var e=structuredClone(expression);return e.function=reduction,e}),s=this.listAllBetaReductions(expression.input).map(reduction=>{var e=structuredClone(expression);return e.input=reduction,e}),expression.function.type===LAMBDA?(o=(t=structuredClone(expression)).function.body,i=t.function,t=t.input,this.removeExpressionRectIndices(t),o=this.computeBetaReduction(o,i,t),[...e,...s,o]):[...e,...s]):expression.type===LAMBDA?this.listAllBetaReductions(expression.body).map(reduction=>{var e=structuredClone(expression);return e.body=reduction,e}):[]}computeBetaReduction(expression,bindingLambdaToReplace,replacementValue){if(expression.type===LITERAL){if(expression.bindingLambda===bindingLambdaToReplace)return structuredClone(replacementValue)}else expression.type===LAMBDA?expression.body=this.computeBetaReduction(expression.body,bindingLambdaToReplace,replacementValue):(expression.function=this.computeBetaReduction(expression.function,bindingLambdaToReplace,replacementValue),expression.input=this.computeBetaReduction(expression.input,bindingLambdaToReplace,replacementValue));return expression}async animateBetaReduction(expression,betaReducedExpression){const r=Object.keys(expression.rectIndex).filter(rectId=>rectId in betaReducedExpression.rectIndex);var e=Object.keys(expression.rectIndex).filter(rectId=>!(rectId in betaReducedExpression.rectIndex)).sort((a,b)=>parseInt(a)-parseInt(b));const t=Object.keys(betaReducedExpression.rectIndex).filter(rectId=>!(rectId in expression.rectIndex)).sort((a,b)=>parseInt(a)-parseInt(b)),n=structuredClone(expression.rectIndex),o=structuredClone(betaReducedExpression.rectIndex),p=[e[0],e[1],e[2]],x=[e[3]];let s=4;for(;s<e.length&&n[e[s]].type===LITERAL&&n[e[s]].color===n[e[3]].color;)x.push(e[s]),s++;const c=e.slice(s),d=c.every(key=>n[key].type===LITERAL);let i=1/0,a=1/0,l=0,h=0;for(const $ of c){var u=n[$];i=Math.min(i,u.row),a=Math.min(a,u.col),l=Math.max(l,u.row+u.height),h=Math.max(h,u.col+u.width)}var g=h-a,b=l-i;const w=Math.max(expression.width,expression.height),E=Math.max(betaReducedExpression.width,betaReducedExpression.height),I=0===t.length||d?E:Math.max(Math.max(betaReducedExpression.width,g),betaReducedExpression.height+2*(6+b));b=betaReducedExpression.row-3-b,g=(E-g)/2;const m=b-i,f=g-a,R=d?0:(I-betaReducedExpression.height)/2-betaReducedExpression.row,y=d?0:(I-betaReducedExpression.width)/2-betaReducedExpression.col;for(const $ of r)betaReducedExpression.rectIndex[$].row+=R,betaReducedExpression.rectIndex[$].col+=y;const A=Object.fromEntries(Object.entries(expression.rectIndex).map(([key,value])=>[key,value.color.slice(4,-1).split(",").map(Number)])),v=Object.fromEntries(Object.entries(betaReducedExpression.rectIndex).map(([key,value])=>[key,value.color.slice(4,-1).split(",").map(Number)]));var L=t.length/c.length;const T={t:0};if(await anime({targets:T,t:1,duration:.5*this.animationTime,easing:"easeInOutQuad",update:()=>{this.outerExpressionSize=w;for(const e of p)expression.rectIndex[e].row=n[e].row+T.t,expression.rectIndex[e].color=`rgba(${n[e].color.slice(4,-1)}, ${1-T.t})`;for(const s of x)expression.rectIndex[s].row=n[s].row-T.t,expression.rectIndex[s].color=`rgba(${n[s].color.slice(4,-1)}, ${1-T.t})`;if(0===t.length||d)for(const i of c)expression.rectIndex[i].color=`rgba(${n[i].color.slice(4,-1)}, ${1-T.t})`;this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(expression)}}).finished,await new Promise(resolve=>setTimeout(resolve,this.animationTime/3)),T.t=0,await anime({targets:T,t:1,duration:this.animationTime,easing:"easeInOutQuad",update:()=>{this.outerExpressionSize=(1-T.t)*w+T.t*I;for(const t of r){expression.rectIndex[t].row=(1-T.t)*n[t].row+T.t*betaReducedExpression.rectIndex[t].row,expression.rectIndex[t].col=(1-T.t)*n[t].col+T.t*betaReducedExpression.rectIndex[t].col,expression.rectIndex[t].width=(1-T.t)*n[t].width+T.t*betaReducedExpression.rectIndex[t].width,expression.rectIndex[t].height=(1-T.t)*n[t].height+T.t*betaReducedExpression.rectIndex[t].height;var e=(1-T.t)*A[t][0]+T.t*v[t][0],s=(1-T.t)*A[t][1]+T.t*v[t][1],i=(1-T.t)*A[t][2]+T.t*v[t][2];expression.rectIndex[t].color=`rgb(${e}, ${s}, ${i})`}for(const o of c)expression.rectIndex[o].row=n[o].row+T.t*(m+R),expression.rectIndex[o].col=n[o].col+T.t*(f+y);this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(expression)}}).finished,await new Promise(resolve=>setTimeout(resolve,this.animationTime/3)),d)this.drawExpression(betaReducedExpression),await new Promise(resolve=>setTimeout(resolve,this.animationTime/3));else{for(let s=0;s<L;s++)for(let e=c.length*s;e<c.length*(s+1);e++){var S=c[e%c.length],$=t[e];betaReducedExpression.rectIndex[$].row=expression.rectIndex[S].row,betaReducedExpression.rectIndex[$].col=expression.rectIndex[S].col,betaReducedExpression.rectIndex[$].width=expression.rectIndex[S].width,betaReducedExpression.rectIndex[$].height=expression.rectIndex[S].height}const B=structuredClone(betaReducedExpression.rectIndex);for(let i=0;i<L-1;i++)T.t=0,await anime({targets:T,t:1,duration:1.5*this.animationTime/L,easing:"easeInOutQuad",update:()=>{this.outerExpressionSize=I;for(let s=c.length*i;s<c.length*(i+1);s++){var e=t[s];betaReducedExpression.rectIndex[e].row=(1-T.t)*B[e].row+T.t*(o[e].row+R),betaReducedExpression.rectIndex[e].col=(1-T.t)*B[e].col+T.t*(o[e].col+y),betaReducedExpression.rectIndex[e].width=(1-T.t)*B[e].width+T.t*o[e].width,betaReducedExpression.rectIndex[e].height=(1-T.t)*B[e].height+T.t*o[e].height}this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(betaReducedExpression)}}).finished;for(let e=T.t=0;e<c.length*(L-1);e++){const $=t[e];B[$].row=betaReducedExpression.rectIndex[$].row,B[$].col=betaReducedExpression.rectIndex[$].col,B[$].width=betaReducedExpression.rectIndex[$].width,B[$].height=betaReducedExpression.rectIndex[$].height}0!==t.length&&await anime({targets:T,t:1,duration:1.5*this.animationTime/L,easing:"easeInOutQuad",update:()=>{this.outerExpressionSize=(1-T.t)*I+T.t*E;for(const e in o)betaReducedExpression.rectIndex[e].row=(1-T.t)*B[e].row+T.t*o[e].row,betaReducedExpression.rectIndex[e].col=(1-T.t)*B[e].col+T.t*o[e].col,betaReducedExpression.rectIndex[e].width=(1-T.t)*B[e].width+T.t*o[e].width,betaReducedExpression.rectIndex[e].height=(1-T.t)*B[e].height+T.t*o[e].height;this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(betaReducedExpression)}}).finished,this.drawExpression(betaReducedExpression),await new Promise(resolve=>setTimeout(resolve,this.animationTime/3))}}async animateIteratedBetaReduction(expression){for(;;){var t=this.listAllBetaReductions(expression);if(0===t.length)break;let e=1/0,s=0;for(let i=0;i<t.length;i++){this.setupExpression(t[i],!0);var o=t[i].width*t[i].height;o<e&&(e=o,s=i)}this.setupExpression(t[s],!0),await this.animateBetaReduction(expression,t[s]),expression=t[s]}}}export{LambdaCalculus};
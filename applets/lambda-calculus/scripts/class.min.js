import anime from"/scripts/anime.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{hsvToRgb}from"/scripts/applets/applet.min.js";import{siteSettings}from"/scripts/src/settings.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";const LITERAL=0,LAMBDA=1,APPLICATION=2,CONNECTOR=3;class LambdaCalculus extends AnimationFrameApplet{outerExpressionSize;expressionContainsAnApplication=!1;resolution=2e3;lambdaIndex=0;numLambdas=0;nextId=0;constructor({canvas}){super(canvas);var e={canvasWidth:this.resolution,fullscreenOptions:{useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonCPU(this.canvas,e)}run({resolution=2e3,expression:expressionString}){this.resolution=resolution,expressionString=expressionString.replaceAll(/[\n\t\s.]/g,""),this.numLambdas=expressionString.split("λ").length-1,this.lambdaIndex=0,this.expressionContainsAnApplication=!1;const s=this.parseExpression(expressionString);this.validateExpression(s),this.setupExpression(s),this.drawExpression(s);var e=this.expressionToString(s);return setTimeout(()=>{var e=this.listAllBetaReductions(s)[0];this.setupExpression(e,!0),this.animateBetaReduction(s,e)},1e3),e}parseExpression(expressionString){if(0===expressionString.length)throw new Error("Empty expression.");for(var i=[];0<expressionString.length;)if("λ"===expressionString[0]){if(expressionString.length<3)throw new Error("Expression too short.");var o=expressionString[1],e=expressionString.slice(2);i.push({type:LAMBDA,argument:o,body:this.parseExpression(e),literalColor:{h:this.lambdaIndex/this.numLambdas,s:.8,v:1}}),this.lambdaIndex++,expressionString=""}else if("("===expressionString[0]){let e=1,s=1;for(;0<s;)"("===expressionString[e]?s++:")"===expressionString[e]&&s--,e++;o=this.parseExpression(expressionString.slice(1,e-1));o.startText="("+(o.startText??""),o.endText=(o.endText??"")+")",i.push(o),expressionString=expressionString.slice(e)}else i.push({type:LITERAL,value:expressionString[0]}),expressionString=expressionString.slice(1);if(1===i.length)return i[0];let s=i[0];for(let n=1;n<i.length;n++)s={type:APPLICATION,function:s,input:i[n]},this.expressionContainsAnApplication=!0;return s}validateExpression(expression,scopedVariables=[]){if(expression.type!==LITERAL)return expression.type===LAMBDA?this.validateExpression(expression.body,[...scopedVariables,expression.argument]):this.validateExpression(expression.function,scopedVariables)&&this.validateExpression(expression.input,scopedVariables);if(scopedVariables.includes(expression.value))return!0;throw new Error(`Undefined variable ${expression.value}.`)}setupExpression(expression,isBetaReduction=!1){this.addExpressionSize(expression),this.expressionContainsAnApplication&&expression.height--,this.outerExpressionSize=Math.max(expression.width,expression.height),expression.row=Math.max((this.outerExpressionSize-expression.height)/2,0),expression.col=Math.max((this.outerExpressionSize-expression.width)/2,0),this.addExpressionLocation(expression),this.addExpressionBindings(expression),this.addExpressionColors(expression),this.addExpressionRects(expression,isBetaReduction),expression.rectIndex={},this.addExpressionRectIndices(expression,expression.rectIndex)}addExpressionSize(expression){expression.type===LAMBDA?(this.addExpressionSize(expression.body),expression.width=expression.body.width,expression.height=expression.body.height+2):expression.type===APPLICATION?(this.addExpressionSize(expression.function),this.addExpressionSize(expression.input),expression.width=expression.function.width+expression.input.width+1,expression.height=Math.max(expression.function.height,expression.input.height)+2):(expression.width=3,expression.height=0)}addExpressionLocation(expression){expression.type===LAMBDA?(expression.body.row=expression.row+2,expression.body.col=expression.col,this.addExpressionLocation(expression.body)):expression.type===APPLICATION&&(expression.function.row=expression.row,expression.function.col=expression.col,expression.input.row=expression.row,expression.input.col=expression.col+expression.function.width+1,this.addExpressionLocation(expression.function),this.addExpressionLocation(expression.input))}addExpressionBindings(expression,bindings={}){expression.type===LITERAL?expression.bindingLambda=bindings[expression.value]:expression.type===LAMBDA?this.addExpressionBindings(expression.body,{...bindings,[expression.argument]:expression}):(this.addExpressionBindings(expression.function,bindings),this.addExpressionBindings(expression.input,bindings))}addExpressionColors(expression){var e,s,i,o;expression.type===LITERAL?expression.color=expression.bindingLambda.literalColor:expression.type===LAMBDA?(this.addExpressionColors(expression.body),expression.color=expression.body.color):(this.addExpressionColors(expression.function),this.addExpressionColors(expression.input),e=expression.function.color.h,s=expression.input.color.h,i=expression.function.color.s,o=expression.input.color.s,expression.color={h:Math.abs(e-s)<=.5?(e+s)/2:(e+s+1)/2%1,s:Math.max((i+o)/2-.1,.1),v:1})}addExpressionRects(expression,isBetaReduction){if(expression.type===LAMBDA){var e=hsvToRgb(expression.literalColor.h,expression.literalColor.s,expression.literalColor.v),e=[{type:LAMBDA,color:`rgb(${e[0]}, ${e[1]}, ${e[2]})`,row:expression.row,col:expression.col,width:expression.width,height:1}];isBetaReduction?(expression.rects[0].row=e[0].row,expression.rects[0].col=e[0].col,expression.rects[0].width=e[0].width,expression.rects[0].height=e[0].height,expression.rects[0].color=e[0].color):expression.rects=e,this.addExpressionRects(expression.body,isBetaReduction)}else if(expression.type===APPLICATION){var e=hsvToRgb(expression.function.color.h,expression.function.color.s,expression.function.color.v),e={type:CONNECTOR,color:`rgb(${e[0]}, ${e[1]}, ${e[2]})`,col:expression.col+1,width:1},s=(expression.function.type!==LAMBDA&&expression.function.type===LITERAL?e.row=expression.function.bindingLambda.row+1:e.row=expression.function.row+expression.function.height-1,e.height=expression.row+expression.height-3-e.row+1,hsvToRgb(expression.input.color.h,expression.input.color.s,expression.input.color.v)),s={type:CONNECTOR,color:`rgb(${s[0]}, ${s[1]}, ${s[2]})`,col:expression.col+expression.function.width+2,width:1},i=(expression.input.type!==LAMBDA&&expression.input.type===LITERAL?s.row=expression.input.bindingLambda.row+1:s.row=expression.input.row+expression.input.height-1,s.height=expression.row+expression.height-3-s.row+1,hsvToRgb(expression.color.h,expression.color.s,expression.color.v)),o=[{type:APPLICATION,color:`rgb(${i[0]}, ${i[1]}, ${i[2]})`,row:expression.row+expression.height-2,col:expression.col+1,width:expression.function.width+2,height:1},e,s];if(isBetaReduction)for(let e=0;e<3;e++)expression.rects[e].row=o[e].row,expression.rects[e].col=o[e].col,expression.rects[e].width=o[e].width,expression.rects[e].height=o[e].height,expression.rects[e].color=o[e].color;else expression.rects=o;this.addExpressionRects(expression.function,isBetaReduction),this.addExpressionRects(expression.input,isBetaReduction)}else{i=hsvToRgb(expression.color.h,expression.color.s,expression.color.v),e=[{type:LITERAL,color:`rgb(${i[0]}, ${i[1]}, ${i[2]})`,row:expression.bindingLambda.row+1,col:expression.col+1,width:1,height:expression.row-1-(expression.bindingLambda.row+1)+1}];isBetaReduction?(expression.rects[0].row=e[0].row,expression.rects[0].col=e[0].col,expression.rects[0].width=e[0].width,expression.rects[0].height=e[0].height):expression.rects=e}}addExpressionRectIndices(expression,rectIndex){if(expression.type===LAMBDA)void 0===expression.rects[0].id&&(expression.rects[0].id=this.nextId,this.nextId++),rectIndex[expression.rects[0].id]=expression.rects[0],this.addExpressionRectIndices(expression.body,rectIndex);else if(expression.type===APPLICATION){for(let e=0;e<3;e++)void 0===expression.rects[e].id&&(expression.rects[e].id=this.nextId,this.nextId++),rectIndex[expression.rects[e].id]=expression.rects[e];this.addExpressionRectIndices(expression.function,rectIndex),this.addExpressionRectIndices(expression.input,rectIndex)}else void 0===expression.rects[0].id&&(expression.rects[0].id=this.nextId,this.nextId++),rectIndex[expression.rects[0].id]=expression.rects[0]}removeExpressionRectIndices(expression){if(expression.type===LAMBDA)expression.rects[0].id=void 0,this.removeExpressionRectIndices(expression.body);else if(expression.type===APPLICATION){for(let e=0;e<3;e++)expression.rects[e].id=void 0;this.removeExpressionRectIndices(expression.function),this.removeExpressionRectIndices(expression.input)}else expression.rects[0].id=void 0}drawExpression(expression){this.outerExpressionSize=Math.max(expression.width,expression.height),this.resolution=Math.round(this.resolution/(this.outerExpressionSize+2))*(this.outerExpressionSize+2),this.wilson.resizeCanvas({width:this.resolution}),this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(expression)}drawExpressionStep(expression){for(const s of expression.rects){this.wilson.ctx.fillStyle=s.color;var e=this.resolution/(this.outerExpressionSize+2);this.wilson.ctx.fillRect(e*(s.col+1),e*(s.row+1),e*s.width,e*s.height)}expression.type===LAMBDA?this.drawExpressionStep(expression.body):expression.type===APPLICATION&&(this.drawExpressionStep(expression.function),this.drawExpressionStep(expression.input))}expressionToString(expression){var e=expression.startText??"",s=expression.endText??"",i=siteSettings.darkTheme?1:.7;if(expression.type===LITERAL){const r=expression.bindingLambda.literalColor,t=hsvToRgb(r.h,r.s,r.v*i),p=`rgb(${t[0]}, ${t[1]}, ${t[2]})`;return`<span style="color: ${p}">${e}${expression.value}${s}</span>`}if(expression.type===LAMBDA){var o=expression.literalColor,o=hsvToRgb(o.h,o.s,o.v*i),o=`rgb(${o[0]}, ${o[1]}, ${o[2]})`;const r=expression.color,t=hsvToRgb(r.h,r.s,r.v*i),p=`rgb(${t[0]}, ${t[1]}, ${t[2]})`;return`<span style="color: ${p}">${e}</span><span style="color: ${o}">λ${expression.argument}.</span>${this.expressionToString(expression.body)}<span style="color: ${p}">${s}</span>`}var o=this.expressionToString(expression.function),n=this.expressionToString(expression.input);const r=expression.color,t=hsvToRgb(r.h,r.s,r.v*i),p=`rgb(${t[0]}, ${t[1]}, ${t[2]})`;return`<span style="color: ${p}">${e}</span>${o}${n}<span style="color: ${p}">${s}</span>`}listAllBetaReductions(expression){var e,s,i,o,n;return expression.type===APPLICATION?(e=this.listAllBetaReductions(expression.function).map(reduction=>{var e=structuredClone(expression);return e.function=reduction,e}),s=this.listAllBetaReductions(expression.input).map(reduction=>{var e=structuredClone(expression);return e.input=reduction,e}),expression.function.type===LAMBDA?(n=(o=structuredClone(expression)).function.body,i=o.function,o=o.input,this.removeExpressionRectIndices(o),n=this.computeBetaReduction(n,i,o),[...e,...s,n]):[...e,...s]):expression.type===LAMBDA?this.listAllBetaReductions(expression.body).map(reduction=>{var e=structuredClone(expression);return e.body=reduction,e}):[]}computeBetaReduction(expression,bindingLambdaToReplace,replacementValue){if(expression.type===LITERAL){if(expression.bindingLambda===bindingLambdaToReplace)return structuredClone(replacementValue)}else expression.type===LAMBDA?expression.body=this.computeBetaReduction(expression.body,bindingLambdaToReplace,replacementValue):(expression.function=this.computeBetaReduction(expression.function,bindingLambdaToReplace,replacementValue),expression.input=this.computeBetaReduction(expression.input,bindingLambdaToReplace,replacementValue));return expression}async animateBetaReduction(expression,betaReducedExpression){const r=Object.keys(expression.rectIndex).filter(rectId=>rectId in betaReducedExpression.rectIndex);var e=Object.keys(expression.rectIndex).filter(rectId=>!(rectId in betaReducedExpression.rectIndex)).sort((a,b)=>parseInt(a)-parseInt(b));Object.keys(betaReducedExpression.rectIndex).filter(rectId=>!(rectId in expression.rectIndex)).sort((a,b)=>parseInt(a)-parseInt(b));const t=structuredClone(expression.rectIndex),i=[e[0],e[1],e[2]],o=[e[3]];let s=4;for(;s<e.length&&t[e[s]].type===LITERAL&&t[e[s]].color===t[e[3]].color;)o.push(e[s]),s++;const p=e.slice(s);let n=1/0,x=1/0,c=0,d=0;for(const A of p){var a=t[A];n=Math.min(n,a.row),x=Math.min(x,a.col),c=Math.max(c,a.row+a.height),d=Math.max(d,a.col+a.width)}var l=d-x,h=c-n;const u=Math.max(expression.width,expression.height),g=Math.max(Math.max(betaReducedExpression.width,l),betaReducedExpression.height+h+3);var b=Math.max(betaReducedExpression.width,betaReducedExpression.height);const w=betaReducedExpression.row-3-h-n,E=(b-l)/2-x,I=Object.fromEntries(Object.entries(expression.rectIndex).map(([key,value])=>[key,value.color.slice(4,-1).split(",").map(Number)])),m=Object.fromEntries(Object.entries(betaReducedExpression.rectIndex).map(([key,value])=>[key,value.color.slice(4,-1).split(",").map(Number)])),f={t:0};await anime({targets:f,t:1,duration:500,easing:"easeInOutQuad",update:()=>{this.outerExpressionSize=u;for(const e of i)expression.rectIndex[e].row=t[e].row+f.t,expression.rectIndex[e].color=`rgba(${t[e].color.slice(4,-1)}, ${1-f.t})`;for(const s of o)expression.rectIndex[s].row=t[s].row-f.t,expression.rectIndex[s].color=`rgba(${t[s].color.slice(4,-1)}, ${1-f.t})`;this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(expression)}}).finished,await new Promise(resolve=>setTimeout(resolve,500)),f.t=0,await anime({targets:f,t:1,duration:1e3,easing:"easeInOutQuad",update:()=>{this.outerExpressionSize=(1-f.t)*u+f.t*g;for(const o of r){expression.rectIndex[o].row=(1-f.t)*t[o].row+f.t*betaReducedExpression.rectIndex[o].row,expression.rectIndex[o].col=(1-f.t)*t[o].col+f.t*betaReducedExpression.rectIndex[o].col,expression.rectIndex[o].width=(1-f.t)*t[o].width+f.t*betaReducedExpression.rectIndex[o].width,expression.rectIndex[o].height=(1-f.t)*t[o].height+f.t*betaReducedExpression.rectIndex[o].height;var e=(1-f.t)*I[o][0]+f.t*m[o][0],s=(1-f.t)*I[o][1]+f.t*m[o][1],i=(1-f.t)*I[o][2]+f.t*m[o][2];expression.rectIndex[o].color=`rgb(${e}, ${s}, ${i})`}for(const n of p)expression.rectIndex[n].row=t[n].row+f.t*w,expression.rectIndex[n].col=t[n].col+f.t*E;this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.drawExpressionStep(expression)}}).finished,setTimeout(()=>{this.drawExpression(betaReducedExpression)},1e3)}}export{LambdaCalculus};
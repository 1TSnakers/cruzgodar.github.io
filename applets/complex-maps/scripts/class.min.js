"use strict";class ComplexMap extends Applet{loadPromise=null;generatingCode="";uniformCode="";aspectRatio=1;zoomLevel=-.585;pastBrightnessScales=[];resolution=500;blackPoint=1;whitePoint=1;fixedPointX=0;fixedPointY=0;draggableCallback=null;nextPanVelocityX=0;nextPanVelocityY=0;nextZoomVelocity=0;panVelocityX=0;panVelocityY=0;zoomVelocity=0;panFriction=.96;panVelocityStartThreshhold=.0025;panVelocityStopThreshhold=25e-5;zoomFriction=.93;zoomVelocityStartThreshhold=.01;zoomVelocityStopThreshhold=.001;lastTimestamp=-1;addIndicatorDraggable=!1;useSelectorMode=!1;totalBenchmarkTime=0;benchmarksLeft=0;benchmarkCycles=10;benchmarkResolution=4e3;constructor(i,t,o="",e=0,s=0,l=-.585,n=!1,a=null,h=!1){super(i);let r={renderer:"gpu",shader:"precision highp float; varying vec2 uv; void main(void) { gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0); }",canvasWidth:this.resolution,canvasHeight:this.resolution,useDraggables:!0,draggablesMousemoveCallback:this.onDragDraggable.bind(this),draggablesTouchmoveCallback:this.onDragDraggable.bind(this),useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:this.changeAspectRatio.bind(this),mousedownCallback:this.onGrabCanvas.bind(this),touchstartCallback:this.onGrabCanvas.bind(this),mousedragCallback:this.onDragCanvas.bind(this),touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),touchendCallback:this.onReleaseCanvas.bind(this),wheelCallback:this.onWheelCanvas.bind(this),pinchCallback:this.onPinchCanvas.bind(this)};this.wilson=new Wilson(i,r);let c=this.changeAspectRatio.bind(this);window.addEventListener("resize",c),this.handlers.push([window,"resize",c]),this.loadPromise=new Promise(async(i,r)=>{await Site.loadGlsl(),this.run(t,o,e,s,l,n,a,h),i()})}run(i,t="",o=0,e=0,s=-.585,l=!1,n=null,a=!1){this.generatingCode=i,this.uniformCode=t,this.zoomLevel=s,this.wilson.worldWidth=3*Math.pow(2,this.zoomLevel),this.wilson.worldHeight=this.wilson.worldWidth,this.wilson.worldCenterX=o,this.wilson.worldCenterY=e,this.addIndicatorDraggable=l,this.draggableCallback=n;let h="";a&&(h=`
    imageZ.x += 127.0;
    imageZ.y += 127.0;
    
    float whole1 = floor(imageZ.x);
    float whole2 = floor(imageZ.y);
    
    float fract1 = (imageZ.x - whole1);
    float fract2 = (imageZ.y - whole2);
    
    gl_FragColor = vec4(whole1 / 256.0, fract1, whole2 / 256.0, fract2);
    
    return;
   `);let r=`
   precision highp float;
   
   varying vec2 uv;
   
   uniform float aspectRatio;
   
   uniform float worldCenterX;
   uniform float worldCenterY;
   uniform float worldSize;
   
   uniform float blackPoint;
   uniform float whitePoint;
   
   uniform vec2 draggableArg;
   
   ${t}
   
   
   
   ${Site.getGlslBundle(i)}
   
   
   
   vec3 hsv2rgb(vec3 c)
   {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
   }
   
   
   
   //Returns f(z) for a polynomial f with given roots.
   vec2 f(vec2 z)
   {
    return ${i};
   }
   
   
   
   void main(void)
   {
    vec2 z;
    
    if (aspectRatio >= 1.0)
    {
     z = vec2(uv.x * aspectRatio * worldSize + worldCenterX, uv.y * worldSize + worldCenterY);
    }
    
    else
    {
     z = vec2(uv.x * worldSize + worldCenterX, uv.y / aspectRatio * worldSize + worldCenterY);
    }
    
    
    
    vec2 imageZ = f(z);
    
    
    
    ${h}
    
    
    
    float modulus = length(imageZ);
    
    float h = atan(imageZ.y, imageZ.x) / 6.283;
    float s = clamp(1.0 / (1.0 + .01 * (modulus / whitePoint / whitePoint)), 0.0, 1.0);
    float v = clamp(1.0 / (1.0 + .01 / (modulus * blackPoint * blackPoint)), 0.0, 1.0);
    
    gl_FragColor = vec4(hsv2rgb(vec3(h, s, v)), 1.0);
   }
  `;this.wilson.render.shaderPrograms=[],this.wilson.render.loadNewShader(r),this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[0]),this.wilson.render.initUniforms(["aspectRatio","worldCenterX","worldCenterY","worldSize","blackPoint","whitePoint","draggableArg"]),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatio,1),this.nextPanVelocityX=0,this.nextPanVelocityY=0,this.nextZoomVelocity=0,this.panVelocityX=0,this.panVelocityY=0,this.zoomVelocity=0;let c=l||-1!==i.indexOf("draggableArg");c&&0===this.wilson.draggables.numDraggables?(this.wilson.draggables.add(.5,.5,!l),this.wilson.gl.uniform2f(this.wilson.uniforms.draggableArg,.5,.5)):c||0===this.wilson.draggables.numDraggables||(this.wilson.draggables.numDraggables--,this.wilson.draggables.draggables[0].remove(),this.wilson.draggables=[]),window.requestAnimationFrame(this.drawFrame.bind(this))}onGrabCanvas(i,t,o){if(this.panVelocityX=0,this.panVelocityY=0,this.zoomVelocity=0,this.nextPanVelocityX=0,this.nextPanVelocityY=0,this.nextZoomVelocity=0,this.useSelectorMode){this.run(this.generatingCode,this.uniformCode,this.wilson.worldCenterX,this.wilson.worldCenterY,this.zoomLevel,this.forceAddDraggable,!0);let e=setTimeout(()=>{this.wilson.render.drawFrame();let o=this.wilson.utils.interpolate.worldToCanvas(i,t),e=new Uint8Array(4);this.wilson.gl.readPixels(o[1],this.wilson.canvasHeight-o[0],1,1,this.wilson.gl.RGBA,this.wilson.gl.UNSIGNEDBYTE,e);let s=e[0]-127+e[1]/256,l=e[2]-127+e[3]/256,n="+";t<0&&(n="-");let a="+";l<0&&(a="-"),console.log(`${i} ${n} ${Math.abs(t)}i |---> ${s} ${a} ${Math.abs(l)}i`),this.run(this.generatingCode,this.uniformCode,this.wilson.worldCenterX,this.wilson.worldCenterY,this.zoomLevel,this.forceAddDraggable,!1),this.useSelectorMode=!1},20);this.timeoutIds.push(e)}}onDragCanvas(i,t,o,e,s){this.wilson.worldCenterX-=o,this.wilson.worldCenterY-=e,this.nextPanVelocityX=-o/this.wilson.worldWidth,this.nextPanVelocityY=-e/this.wilson.worldHeight;try{this.wilson.draggables.recalculateLocations()}catch(l){}window.requestAnimationFrame(this.drawFrame.bind(this))}onReleaseCanvas(i,t,o){Math.sqrt(this.nextPanVelocityX*this.nextPanVelocityX+this.nextPanVelocityY*this.nextPanVelocityY)>=this.panVelocityStartThreshhold&&(this.panVelocityX=this.nextPanVelocityX,this.panVelocityY=this.nextPanVelocityY),Math.abs(this.nextZoomVelocity)>=this.zoomVelocityStartThreshhold&&(this.zoomVelocity=this.nextZoomVelocity),window.requestAnimationFrame(this.drawFrame.bind(this))}onWheelCanvas(i,t,o,e){this.fixedPointX=i,this.fixedPointY=t,.3>Math.abs(o/100)?this.zoomLevel+=o/100:this.zoomVelocity+=.05*Math.sign(o),this.zoomCanvas()}onPinchCanvas(i,t,o,e){this.aspectRatio>=1?(this.zoomLevel-=o/this.wilson.worldWidth*10,this.nextZoomVelocity=-o/this.wilson.worldWidth*10):(this.zoomLevel-=o/this.wilson.worldHeight*10,this.nextZoomVelocity=-o/this.wilson.worldHeight*10),this.fixedPointX=i,this.fixedPointY=t,this.zoomCanvas()}zoomCanvas(){if(this.aspectRatio>=1){let i=this.wilson.input.getZoomedWorldCenter(this.fixedPointX,this.fixedPointY,3*Math.pow(2,this.zoomLevel)*this.aspectRatio,3*Math.pow(2,this.zoomLevel));this.wilson.worldWidth=3*Math.pow(2,this.zoomLevel)*this.aspectRatio,this.wilson.worldHeight=3*Math.pow(2,this.zoomLevel),this.wilson.worldCenterX=i[0],this.wilson.worldCenterY=i[1]}else{let t=this.wilson.input.getZoomedWorldCenter(this.fixedPointX,this.fixedPointY,3*Math.pow(2,this.zoomLevel),3*Math.pow(2,this.zoomLevel)/this.aspectRatio);this.wilson.worldWidth=3*Math.pow(2,this.zoomLevel),this.wilson.worldHeight=3*Math.pow(2,this.zoomLevel)/this.aspectRatio,this.wilson.worldCenterX=t[0],this.wilson.worldCenterY=t[1]}try{this.wilson.draggables.recalculateLocations()}catch(o){}window.requestAnimationFrame(this.drawFrame.bind(this))}onDragDraggable(i,t,o,e){try{this.draggableCallback(i,t,o,e)}catch(s){}this.wilson.gl.uniform2f(this.wilson.uniforms.draggableArg,t,o),window.requestAnimationFrame(this.drawFrame.bind(this))}drawFrame(i){let t=i-this.lastTimestamp;this.lastTimestamp=i,0!==t&&(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatio,this.aspectRatio),this.wilson.gl.uniform1f(this.wilson.uniforms.worldCenterX,this.wilson.worldCenterX),this.wilson.gl.uniform1f(this.wilson.uniforms.worldCenterY,this.wilson.worldCenterY),this.wilson.gl.uniform1f(this.wilson.uniforms.worldSize,Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2),this.wilson.gl.uniform1f(this.wilson.uniforms.blackPoint,this.blackPoint),this.wilson.gl.uniform1f(this.wilson.uniforms.whitePoint,this.whitePoint),this.wilson.render.drawFrame(),t>=50&&(this.panVelocityX=0,this.panVelocityY=0,this.zoomVelocity=0,this.nextPanVelocityX=0,this.nextPanVelocityY=0,this.nextZoomVelocity=0),(0!==this.panVelocityX||0!==this.panVelocityY||0!==this.zoomVelocity)&&(this.wilson.worldCenterX+=this.panVelocityX*this.wilson.worldWidth,this.wilson.worldCenterY+=this.panVelocityY*this.wilson.worldHeight,this.panVelocityX*=this.panFriction,this.panVelocityY*=this.panFriction,Math.sqrt(this.panVelocityX*this.panVelocityX+this.panVelocityY*this.panVelocityY)<this.panVelocityStopThreshhold&&(this.panVelocityX=0,this.panVelocityY=0),this.zoomLevel+=this.zoomVelocity,this.zoomCanvas(this.fixedPointX,this.fixedPointY),this.zoomVelocity*=this.zoomFriction,Math.abs(this.zoomVelocity)<this.zoomVelocityStopThreshhold&&(this.zoomVelocity=0),window.requestAnimationFrame(this.drawFrame.bind(this))))}changeAspectRatio(){this.wilson.fullscreen.currentlyFullscreen?(this.aspectRatio=window.innerWidth/window.innerHeight,this.aspectRatio>=1?(this.wilson.changeCanvasSize(this.resolution,Math.floor(this.resolution/this.aspectRatio)),this.wilson.worldWidth=3*Math.pow(2,this.zoomLevel)*this.aspectRatio,this.wilson.worldHeight=3*Math.pow(2,this.zoomLevel)):(this.wilson.changeCanvasSize(Math.floor(this.resolution*this.aspectRatio),this.resolution),this.wilson.worldWidth=3*Math.pow(2,this.zoomLevel),this.wilson.worldHeight=3*Math.pow(2,this.zoomLevel)/this.aspectRatio)):(this.aspectRatio=1,this.wilson.changeCanvasSize(this.resolution,this.resolution),this.wilson.worldWidth=3*Math.pow(2,this.zoomLevel),this.wilson.worldHeight=3*Math.pow(2,this.zoomLevel)),window.requestAnimationFrame(this.drawFrame.bind(this))}runBenchmark(){this.wilson.changeCanvasSize(this.benchmarkResolution,this.benchmarkResolution);let i=Date.now(),t=new Uint8Array(4);for(let o=0;o<this.benchmarkCycles;o++)this.wilson.render.drawFrame(),this.wilson.gl.readPixels(0,0,1,1,this.wilson.gl.RGBA,this.wilson.gl.UNSIGNEDBYTE,t);let e=(Date.now()-i)/this.benchmarkCycles;console.log(`Finished benchmark --- average time to draw a ${this.benchmarkResolution}x${this.benchmarkResolution} frame is ${e}ms`),this.wilson.changeCanvasSize(this.resolution,this.resolution),this.wilson.render.drawFrame()}}
class ComplexMap extends Applet{loadPromise=null;generatingCode="";uniformCode="";aspectRatio=1;pastBrightnessScales=[];resolution=500;blackPoint=1;whitePoint=1;draggableCallback=null;lastTimestamp=-1;addIndicatorDraggable=!1;useSelectorMode=!1;totalBenchmarkTime=0;benchmarksLeft=0;benchmarkCycles=10;benchmarkResolution=4E3;constructor(a,b,c="",e=0,d=0,f=-.585,g=!1,h=null,k=!1){super(a);const l={renderer:"gpu",shader:"precision highp float; varying vec2 uv; void main(void) { gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0); }",
canvasWidth:this.resolution,canvasHeight:this.resolution,useDraggables:!0,draggablesMousemoveCallback:this.onDragDraggable.bind(this),draggablesTouchmoveCallback:this.onDragDraggable.bind(this),useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:()=>this.changeAspectRatio(!0),mousedownCallback:this.onGrabCanvas.bind(this),
touchstartCallback:this.onGrabCanvas.bind(this),mousedragCallback:this.onDragCanvas.bind(this),touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),touchendCallback:this.onReleaseCanvas.bind(this),wheelCallback:this.onWheelCanvas.bind(this),pinchCallback:this.onPinchCanvas.bind(this)};this.wilson=new Wilson(a,l);a=()=>this.changeAspectRatio(!0);window.addEventListener("resize",a);this.handlers.push([window,"resize",a]);this.loadPromise=new Promise(async(m,
n)=>{await Site.loadGLSL();this.run(b,c,e,d,f,g,h,k);m()})}run(a,b="",c=0,e=0,d=-.585,f=!1,g=null,h=!1){this.generatingCode=a;this.uniformCode=b;this.zoom.level=d;this.wilson.worldWidth=3*Math.pow(2,this.zoom.level);this.wilson.worldHeight=this.wilson.worldWidth;this.wilson.worldCenterX=c;this.wilson.worldCenterY=e;this.addIndicatorDraggable=f;this.draggableCallback=g;c="";h&&(c="\n\t\t\t\timageZ.x += 127.0;\n\t\t\t\timageZ.y += 127.0;\n\t\t\t\t\n\t\t\t\tfloat whole1 = floor(imageZ.x);\n\t\t\t\tfloat whole2 = floor(imageZ.y);\n\t\t\t\t\n\t\t\t\tfloat fract1 = (imageZ.x - whole1);\n\t\t\t\tfloat fract2 = (imageZ.y - whole2);\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4(whole1 / 256.0, fract1, whole2 / 256.0, fract2);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t");
b=`
			precision highp float;
			
			varying vec2 uv;
			
			uniform float aspectRatio;
			
			uniform float worldCenterX;
			uniform float worldCenterY;
			uniform float worldSize;
			
			uniform float blackPoint;
			uniform float whitePoint;
			
			uniform vec2 draggableArg;
			
			${b}
			
			
			
			${Site.getGLSLBundle(a)}
			
			
			
			vec3 hsv2rgb(vec3 c)
			{
				vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
				vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
				return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
			}
			
			
			
			//Returns f(z) for a polynomial f with given roots.
			vec2 f(vec2 z)
			{
				return ${a};
			}
			
			
			
			void main(void)
			{
				vec2 z;
				
				if (aspectRatio >= 1.0)
				{
					z = vec2(uv.x * aspectRatio * worldSize + worldCenterX, uv.y * worldSize + worldCenterY);
				}
				
				else
				{
					z = vec2(uv.x * worldSize + worldCenterX, uv.y / aspectRatio * worldSize + worldCenterY);
				}
				
				
				
				vec2 imageZ = f(z);
				
				
				
				${c}
				
				
				
				float modulus = length(imageZ);
				
				float h = atan(imageZ.y, imageZ.x) / 6.283;
				float s = clamp(1.0 / (1.0 + .01 * (modulus / whitePoint / whitePoint)), 0.0, 1.0);
				float v = clamp(1.0 / (1.0 + .01 / (modulus * blackPoint * blackPoint)), 0.0, 1.0);
				
				gl_FragColor = vec4(hsv2rgb(vec3(h, s, v)), 1.0);
			}
		`;this.wilson.render.shaderPrograms=[];this.wilson.render.loadNewShader(b);this.wilson.gl.useProgram(this.wilson.render.shaderPrograms[0]);this.wilson.render.initUniforms("aspectRatio worldCenterX worldCenterY worldSize blackPoint whitePoint draggableArg".split(" "));this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatio,1);(a=f||-1!==a.indexOf("draggableArg"))&&0===this.wilson.draggables.numDraggables?(this.wilson.draggables.add(.5,.5,!f),this.wilson.gl.uniform2f(this.wilson.uniforms.draggableArg,
.5,.5)):a||0===this.wilson.draggables.numDraggables||(this.wilson.draggables.numDraggables--,this.wilson.draggables.draggables[0].remove(),this.wilson.draggables=[]);this.animationPaused||window.requestAnimationFrame(this.drawFrame.bind(this))}onGrabCanvas(a,b,c){this.pan.onGrabCanvas();this.zoom.onGrabCanvas();this.useSelectorMode&&(this.run(this.generatingCode,this.uniformCode,this.wilson.worldCenterX,this.wilson.worldCenterY,this.zoom.level,this.forceAddDraggable,!0),c=setTimeout(()=>{this.wilson.render.drawFrame();
var e=this.wilson.utils.interpolate.worldToCanvas(a,b),d=new Uint8Array(4);this.wilson.gl.readPixels(e[1],this.wilson.canvasHeight-e[0],1,1,this.wilson.gl.RGBA,this.wilson.gl.UNSIGNEDBYTE,d);e=d[0]-127+d[1]/256;d=d[2]-127+d[3]/256;let f="+";0>b&&(f="-");let g="+";0>d&&(g="-");console.log(`${a} ${f} ${Math.abs(b)}i |---> ${e} ${g} ${Math.abs(d)}i`);this.run(this.generatingCode,this.uniformCode,this.wilson.worldCenterX,this.wilson.worldCenterY,this.zoom.level,this.forceAddDraggable,!1);this.useSelectorMode=
!1},20),this.timeoutIds.push(c))}onDragDraggable(a,b,c,e){try{this.draggableCallback(a,b,c,e)}catch(d){}this.wilson.gl.uniform2f(this.wilson.uniforms.draggableArg,b,c)}drawFrame(a){const b=a-this.lastTimestamp;this.lastTimestamp=a;0!==b&&(this.pan.update(),this.zoom.update(),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatio,this.aspectRatio),this.wilson.gl.uniform1f(this.wilson.uniforms.worldCenterX,this.wilson.worldCenterX),this.wilson.gl.uniform1f(this.wilson.uniforms.worldCenterY,this.wilson.worldCenterY),
this.wilson.gl.uniform1f(this.wilson.uniforms.worldSize,Math.min(this.wilson.worldHeight,this.wilson.worldWidth)/2),this.wilson.gl.uniform1f(this.wilson.uniforms.blackPoint,this.blackPoint),this.wilson.gl.uniform1f(this.wilson.uniforms.whitePoint,this.whitePoint),this.wilson.render.drawFrame(),this.animationPaused||window.requestAnimationFrame(this.drawFrame.bind(this)))}runBenchmark(){this.wilson.changeCanvasSize(this.benchmarkResolution,this.benchmarkResolution);var a=Date.now();let b=new Uint8Array(4);
for(let c=0;c<this.benchmarkCycles;c++)this.wilson.render.drawFrame(),this.wilson.gl.readPixels(0,0,1,1,this.wilson.gl.RGBA,this.wilson.gl.UNSIGNEDBYTE,b);a=(Date.now()-a)/this.benchmarkCycles;console.log(`Finished benchmark --- average time to draw a ${this.benchmarkResolution}x${this.benchmarkResolution} frame is ${a}ms`);this.wilson.changeCanvasSize(this.resolution,this.resolution);this.wilson.render.drawFrame()}};

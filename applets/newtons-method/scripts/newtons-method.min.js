!function(){"use strict";let t=1e3,n=[],e=document.querySelector("#newtons-method-plot").getContext("webgl"),o=!1,r=!0,l=[],s=-1,i=-1,u=document.querySelector("#root-selector").offsetWidth,a=document.querySelector("#root-selector").offsetHeight,c=17.5,d=20,_=!1;!function(){1===url_vars.contrast&&(1===url_vars.theme?document.querySelector("#newtons-method-plot").style.borderColor="rgb(192, 192, 192)":document.querySelector("#newtons-method-plot").style.borderColor="rgb(64, 64, 64)");add_style("\n\t\t\t.root-marker.hover\n\t\t\t{\n\t\t\t\tbackground-color: rgb(127, 127, 127);\t\n\t\t\t}\n\t\t\t\n\t\t\t.root-marker:not(:hover):focus\n\t\t\t{\n\t\t\t\tbackground-color: rgb(127, 127, 127);\n\t\t\t\toutline: none;\n\t\t\t}\n\t\t",!0)}(),document.documentElement.addEventListener("touchstart",y,!1),document.documentElement.addEventListener("touchmove",z,!1),document.documentElement.addEventListener("touchend",b,!1),document.documentElement.addEventListener("mousedown",y,!1),document.documentElement.addEventListener("mousemove",z,!1),document.documentElement.addEventListener("mouseup",b,!1),temporary_handlers.touchstart.push(y),temporary_handlers.touchmove.push(z),temporary_handlers.touchend.push(b),temporary_handlers.mousedown.push(y),temporary_handlers.mousemove.push(z),temporary_handlers.mouseup.push(b),document.querySelector("#root-a-input").addEventListener("input",S),document.querySelector("#root-b-input").addEventListener("input",S),document.querySelector("#root-a-input").addEventListener("keydown",function(t){13===t.keyCode&&window.requestAnimationFrame(v)}),document.querySelector("#root-b-input").addEventListener("keydown",function(t){13===t.keyCode&&window.requestAnimationFrame(v)}),document.querySelector("#add-marker-button").addEventListener("click",function(){if(8===n.length)return;let t=document.createElement("div");t.classList.add("root-marker"),t.id=`root-marker-${l.length}`,t.style.transform=`translate3d(${u/2-c}px, ${a/2-c}px, 0)`,document.querySelector("#root-selector").appendChild(t),l.push(t),n.push([0,0]),d=20,_=!0,window.requestAnimationFrame(v)}),document.querySelector("#spread-markers-button").addEventListener("click",function(t=!0){document.querySelector("#polynomial-label-1").textContent="",document.querySelector("#polynomial-label-2").textContent="",document.querySelector("#polynomial-label-3").textContent="";for(let t=0;t<n.length;t++){t<n.length/2||n.length%2==1?(n[t][0]=Math.cos(2*Math.PI*2*t/n.length),n[t][1]=Math.sin(2*Math.PI*2*t/n.length)):(n[t][0]=Math.cos(2*Math.PI*(2*t+1)/n.length),n[t][1]=Math.sin(2*Math.PI*(2*t+1)/n.length));let e=Math.floor(a*(1-(n[t][1]/4+.5))),o=Math.floor(u*(n[t][0]/4+.5));l[t].style.transform=`translate3d(${o-c}px, ${e-c}px, 0)`}_=!0,window.requestAnimationFrame(v)}),document.querySelector("#generate-high-res-plot-button").addEventListener("click",function(){t=parseInt(document.querySelector("#dim-input").value||2e3),document.querySelector("#newtons-method-plot").setAttribute("width",t),document.querySelector("#newtons-method-plot").setAttribute("height",t),e.viewport(0,0,t,t),v();let n=document.createElement("a");n.download="newtons-method.png",n.href=document.querySelector("#newtons-method-plot").toDataURL(),n.click(),n.remove(),t=1e3,document.querySelector("#newtons-method-plot").setAttribute("width",t),document.querySelector("#newtons-method-plot").setAttribute("height",t),e.viewport(0,0,t,t),v()}),document.querySelector("#dim-input").addEventListener("keydown",function(t){13===t.keyCode&&draw_high_res_plot()}),window.addEventListener("resize",q),temporary_handlers.resize.push(q),applet_canvases_to_resize=[document.querySelector("#newtons-method-plot"),document.querySelector("#root-selector")],applet_canvas_resize_callback=function(){u=document.querySelector("#root-selector").offsetWidth,a=document.querySelector("#root-selector").offsetHeight,q()},set_up_canvas_resizer();const m="\n\t\tattribute vec3 position;\n\t\tvarying vec2 uv;\n\n\t\tvoid main(void)\n\t\t{\n\t\t\tgl_Position = vec4(position, 1.0);\n\n\t\t\t//Interpolate quad coordinates in the fragment shader.\n\t\t\tuv = position.xy;\n\t\t}\n\t",h="\n\t\tprecision highp float;\n\t\t\n\t\tvarying vec2 uv;\n\t\t\n\t\tuniform int num_roots;\n\t\t\n\t\tuniform vec2 root_1;\n\t\tuniform vec2 root_2;\n\t\tuniform vec2 root_3;\n\t\tuniform vec2 root_4;\n\t\tuniform vec2 root_5;\n\t\tuniform vec2 root_6;\n\t\tuniform vec2 root_7;\n\t\tuniform vec2 root_8;\n\t\t\n\t\tconst vec3 color_1 = vec3(1.0, 0.0, 0.0);\n\t\tconst vec3 color_2 = vec3(0.0, 1.0, 0.0);\n\t\tconst vec3 color_3 = vec3(0.0, 0.0, 1.0);\n\t\tconst vec3 color_4 = vec3(0.0, 1.0, 1.0);\n\t\tconst vec3 color_5 = vec3(1.0, 0.0, 1.0);\n\t\tconst vec3 color_6 = vec3(1.0, 1.0, 0.0);\n\t\tconst vec3 color_7 = vec3(0.5, 0.0, 1.0);\n\t\tconst vec3 color_8 = vec3(1.0, 0.5, 0.0);\n\t\t\n\t\tuniform float brightness_scale;\n\t\t\n\t\tconst float threshhold = .05;\n\t\t\n\t\t\n\t\t\n\t\t//Returns z_1 * z_2.\n\t\tvec2 complex_multiply(vec2 z_1, vec2 z_2)\n\t\t{\n\t\t\treturn vec2(z_1.x * z_2.x - z_1.y * z_2.y, z_1.x * z_2.y + z_1.y * z_2.x);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t//Returns 1/z.\n\t\tvec2 complex_invert(vec2 z)\n\t\t{\n\t\t\tfloat magnitude = length(z) * length(z);\n\t\t\t\n\t\t\treturn vec2(z.x / magnitude, -z.y / magnitude);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t//Returns f(z) for a polynomial f with given roots.\n\t\tvec2 complex_polynomial(vec2 z)\n\t\t{\n\t\t\tvec2 result = vec2(1.0, 0.0);\n\t\t\t\n\t\t\tif (num_roots == 0)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tresult = complex_multiply(result, z - root_1);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (num_roots == 1)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tresult = complex_multiply(result, z - root_2);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (num_roots == 2)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tresult = complex_multiply(result, z - root_3);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (num_roots == 3)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tresult = complex_multiply(result, z - root_4);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (num_roots == 4)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tresult = complex_multiply(result, z - root_5);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (num_roots == 5)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tresult = complex_multiply(result, z - root_6);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (num_roots == 6)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tresult = complex_multiply(result, z - root_7);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (num_roots == 7)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tresult = complex_multiply(result, z - root_8);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t//Approximates f'(z) for a polynomial f with given roots.\n\t\tvec2 complex_derivative(vec2 z)\n\t\t{\n\t\t\treturn 1000.0 * (complex_polynomial(z) - complex_polynomial(z - vec2(.001, 0.0)));\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\tvec2 z = vec2(uv.x * 2.0, uv.y * 2.0);\n\t\t\tvec2 last_z = vec2(0.0, 0.0);\n\t\t\t\n\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\n\t\t\tfor (int iteration = 0; iteration < 100; iteration++)\n\t\t\t{\n\t\t\t\tvec2 temp = complex_multiply(complex_polynomial(z), complex_invert(complex_derivative(z)));\n\t\t\t\t\n\t\t\t\tlast_z = z;\n\t\t\t\t\n\t\t\t\tz -= temp;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (num_roots >= 1)\n\t\t\t\t{\n\t\t\t\t\tfloat d_0 = length(z - root_1);\n\t\t\t\t\t\n\t\t\t\t\tif (d_0 < threshhold)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat d_1 = length(last_z - root_1);\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness_adjust = (log(threshhold) - log(d_0)) / (log(d_1) - log(d_0));\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness = 1.0 - (float(iteration) - brightness_adjust) / brightness_scale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tgl_FragColor = vec4(color_1 * brightness, 1.0);\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (num_roots >= 2)\n\t\t\t\t{\n\t\t\t\t\tfloat d_0 = length(z - root_2);\n\t\t\t\t\t\n\t\t\t\t\tif (d_0 < threshhold)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat d_1 = length(last_z - root_2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness_adjust = (log(threshhold) - log(d_0)) / (log(d_1) - log(d_0));\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness = 1.0 - (float(iteration) - brightness_adjust) / brightness_scale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tgl_FragColor = vec4(color_2 * brightness, 1.0);\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (num_roots >= 3)\n\t\t\t\t{\n\t\t\t\t\tfloat d_0 = length(z - root_3);\n\t\t\t\t\t\n\t\t\t\t\tif (d_0 < threshhold)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat d_1 = length(last_z - root_3);\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness_adjust = (log(threshhold) - log(d_0)) / (log(d_1) - log(d_0));\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness = 1.0 - (float(iteration) - brightness_adjust) / brightness_scale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tgl_FragColor = vec4(color_3 * brightness, 1.0);\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (num_roots >= 4)\n\t\t\t\t{\n\t\t\t\t\tfloat d_0 = length(z - root_4);\n\t\t\t\t\t\n\t\t\t\t\tif (d_0 < threshhold)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat d_1 = length(last_z - root_4);\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness_adjust = (log(threshhold) - log(d_0)) / (log(d_1) - log(d_0));\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness = 1.0 - (float(iteration) - brightness_adjust) / brightness_scale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tgl_FragColor = vec4(color_4 * brightness, 1.0);\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (num_roots >= 5)\n\t\t\t\t{\n\t\t\t\t\tfloat d_0 = length(z - root_5);\n\t\t\t\t\t\n\t\t\t\t\tif (d_0 < threshhold)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat d_1 = length(last_z - root_5);\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness_adjust = (log(threshhold) - log(d_0)) / (log(d_1) - log(d_0));\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness = 1.0 - (float(iteration) - brightness_adjust) / brightness_scale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tgl_FragColor = vec4(color_5 * brightness, 1.0);\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (num_roots >= 6)\n\t\t\t\t{\n\t\t\t\t\tfloat d_0 = length(z - root_6);\n\t\t\t\t\t\n\t\t\t\t\tif (d_0 < threshhold)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat d_1 = length(last_z - root_6);\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness_adjust = (log(threshhold) - log(d_0)) / (log(d_1) - log(d_0));\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness = 1.0 - (float(iteration) - brightness_adjust) / brightness_scale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tgl_FragColor = vec4(color_6 * brightness, 1.0);\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (num_roots >= 7)\n\t\t\t\t{\n\t\t\t\t\tfloat d_0 = length(z - root_7);\n\t\t\t\t\t\n\t\t\t\t\tif (d_0 < threshhold)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat d_1 = length(last_z - root_7);\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness_adjust = (log(threshhold) - log(d_0)) / (log(d_1) - log(d_0));\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness = 1.0 - (float(iteration) - brightness_adjust) / brightness_scale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tgl_FragColor = vec4(color_7 * brightness, 1.0);\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (num_roots >= 8)\n\t\t\t\t{\n\t\t\t\t\tfloat d_0 = length(z - root_8);\n\t\t\t\t\t\n\t\t\t\t\tif (d_0 < threshhold)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat d_1 = length(last_z - root_8);\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness_adjust = (log(threshhold) - log(d_0)) / (log(d_1) - log(d_0));\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat brightness = 1.0 - (float(iteration) - brightness_adjust) / brightness_scale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tgl_FragColor = vec4(color_8 * brightness, 1.0);\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t";let f=null;function g(){let n=p(e,e.VERTEX_SHADER,m),o=p(e,e.FRAGMENT_SHADER,h);f=e.createProgram(),e.attachShader(f,n),e.attachShader(f,o),e.linkProgram(f),e.getProgramParameter(f,e.LINK_STATUS)||(console.log(`Couldn't link shader program: ${e.getShaderInfoLog(shader)}`),e.deleteProgram(f)),e.useProgram(f);let r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,0,-1,1,0,1,-1,0,1,1,0]),e.STATIC_DRAW),f.position_attribute=e.getAttribLocation(f,"position"),e.enableVertexAttribArray(f.position_attribute),e.vertexAttribPointer(f.position_attribute,3,e.FLOAT,!1,0,0),f.num_roots_uniform=e.getUniformLocation(f,"num_roots"),f.root_1_uniform=e.getUniformLocation(f,"root_1"),f.root_2_uniform=e.getUniformLocation(f,"root_2"),f.root_3_uniform=e.getUniformLocation(f,"root_3"),f.root_4_uniform=e.getUniformLocation(f,"root_4"),f.root_5_uniform=e.getUniformLocation(f,"root_5"),f.root_6_uniform=e.getUniformLocation(f,"root_6"),f.root_7_uniform=e.getUniformLocation(f,"root_7"),f.root_8_uniform=e.getUniformLocation(f,"root_8"),f.brightness_scale_uniform=e.getUniformLocation(f,"brightness_scale"),document.querySelector("#newtons-method-plot").setAttribute("width",t),document.querySelector("#newtons-method-plot").setAttribute("height",t),e.viewport(0,0,t,t)}function p(t,n,e){let o=t.createShader(n);return t.shaderSource(o,e),t.compileShader(o),t.getShaderParameter(o,t.COMPILE_STATUS)||(console.log(`Couldn't load shader: ${t.getProgramInfoLog(shaderProgram)}`),t.deleteShader(o)),o}function v(){e.uniform1i(f.num_roots_uniform,n.length),n.length>=1&&e.uniform2fv(f.root_1_uniform,n[0]),n.length>=2&&e.uniform2fv(f.root_2_uniform,n[1]),n.length>=3&&e.uniform2fv(f.root_3_uniform,n[2]),n.length>=4&&e.uniform2fv(f.root_4_uniform,n[3]),n.length>=5&&e.uniform2fv(f.root_5_uniform,n[4]),n.length>=6&&e.uniform2fv(f.root_6_uniform,n[5]),n.length>=7&&e.uniform2fv(f.root_7_uniform,n[6]),n.length>=8&&e.uniform2fv(f.root_8_uniform,n[7]),e.uniform1f(f.brightness_scale_uniform,d),e.drawArrays(e.TRIANGLE_STRIP,0,4);let l=new Uint8Array(t*t*4);e.readPixels(0,0,t,t,e.RGBA,e.UNSIGNED_BYTE,l);let s=0;for(let n=0;n<t*t;n++)1!==l[4*n]&&1!==l[4*n+1]&&1!==l[4*n+2]||s++;let i=!1;s<.025*t*n.length?(d-=.25,i=!0):s>.05*t*n.length&&(d+=.25,i=!0),_?i?window.requestAnimationFrame(v):(_=!1,r=!0):o?(o=!1,window.requestAnimationFrame(v)):r=!0}function y(t){s=-1;for(let n=0;n<l.length;n++)if(t.target.id===`root-marker-${n}`){t.preventDefault(),s=n;break}}function b(t){-1!==s&&(document.body.style.WebkitUserSelect="",_=!0,o=!0,r&&(r=!1,window.requestAnimationFrame(v)),document.querySelector("#polynomial-label-1").textContent="",document.querySelector("#polynomial-label-2").textContent="",document.querySelector("#polynomial-label-3").textContent="",i=s,document.querySelector("#root-a-input").value=Math.round(1e3*n[i][0])/1e3,document.querySelector("#root-b-input").value=Math.round(1e3*n[i][1])/1e3,document.querySelector("#root-setter").style.pointerEvents="auto",document.querySelector("#root-setter").style.opacity=1),s=-1}function z(t){if(-1===s)return;let e=null,i=null,d=document.querySelector("#root-selector").getBoundingClientRect();"touchmove"===t.type?(e=t.touches[0].clientY-d.top,i=t.touches[0].clientX-d.left):(e=t.clientY-d.top,i=t.clientX-d.left),e<c&&(e=c),e>a-c&&(e=a-c),i<c&&(i=c),i>u-c&&(i=u-c),l[s].style.transform=`translate3d(${i-c}px, ${e-c}px, 0)`;let m=(i-u/2)/u*4,h=-(e-a/2)/a*4;n[s][0]=m,n[s][1]=h,o=!0,(_||r)&&(_=!1,r=!1,window.requestAnimationFrame(v))}function S(){n[i][0]=parseFloat(document.querySelector("#root-a-input").value)||0,n[i][1]=parseFloat(document.querySelector("#root-b-input").value)||0;let t=Math.floor(a*(1-(n[i][1]/4+.5))),e=Math.floor(u*(n[i][0]/4+.5));l[i].style.transform=`translate3d(${e-c}px, ${t-c}px, 0)`,window.requestAnimationFrame(v)}function q(){u=document.querySelector("#root-selector").offsetWidth,a=document.querySelector("#root-selector").offsetHeight;document.querySelector("#root-selector").getBoundingClientRect();for(let t=0;t<n.length;t++){let e=Math.floor(a*(1-(n[t][1]/4+.5))),o=Math.floor(u*(n[t][0]/4+.5));l[t].style.transform=`translate3d(${o-c}px, ${e-c}px, 0)`}}load_script("/scripts/gl-matrix.min.js").then(function(){setTimeout(g,500)})}();
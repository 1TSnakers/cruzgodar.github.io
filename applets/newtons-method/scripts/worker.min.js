"use strict";onmessage=async function(s){canvas_size=s.data[0],current_roots=s.data[1],await draw_newtons_method_plot(current_roots)};let current_roots=[],canvas_size=null;const num_iterations=100,threshold=.05;let brightness_map=[],closest_roots=[];const colors=[[255,0,0],[0,255,0],[0,0,255],[0,255,255],[255,0,255],[255,255,0],[127,0,255],[255,127,0]];function draw_newtons_method_plot(s){let e=5,t=0;for(let s=0;s<canvas_size;s++){closest_roots[s]=[],brightness_map[s]=[];for(let e=0;e<canvas_size;e++)brightness_map[s][e]=0,closest_roots[s][e]=-1}for(let a=0;a<canvas_size;a++)for(let o=0;o<canvas_size;o++){if(0!==brightness_map[a][o])continue;let n=[(o-canvas_size/2)/canvas_size*4,-(a-canvas_size/2)/canvas_size*4],r=[0,0],l=[];for(let i=0;i<num_iterations;i++){let _=complex_multiply(complex_polynomial(s,n),complex_invert(complex_derivative(s,n)));r[0]=n[0],r[1]=n[1],n[0]=n[0]-_[0],n[1]=n[1]-_[1];let c=Math.floor(n[0]/4*canvas_size+canvas_size/2),p=Math.floor(-(n[1]/4*canvas_size-canvas_size/2));p>=0&&p<canvas_size&&c>=0&&c<canvas_size&&l.push([[p,c],i+1]);let m=!1;for(let _=0;_<s.length;_++){let c=complex_magnitude([n[0]-s[_][0],n[1]-s[_][1]]);if(c<=threshold*threshold){let n=complex_magnitude([r[0]-s[_][0],r[1]-s[_][1]]),p=(Math.log(threshold)-.5*Math.log(c))/(.5*Math.log(n)-.5*Math.log(c));closest_roots[a][o]=_,brightness_map[a][o]=i-p;for(let s=0;s<l.length;s++)brightness_map[l[s][0][0]][l[s][0][1]]=i-p-l[s][1],closest_roots[l[s][0][0]][l[s][0][1]]=_;(t+=l.length+1)>e*canvas_size*canvas_size/100&&(postMessage(["progress",e]),e+=5),m=!0;break}}if(m)break}}draw_canvas()}function draw_canvas(){let s=0,e=1/0;for(let t=0;t<canvas_size;t++)for(let a=0;a<canvas_size;a++)brightness_map[t][a]>s&&(s=brightness_map[t][a]),brightness_map[t][a]<e&&(e=brightness_map[t][a]);let t=[];for(let a=0;a<canvas_size;a++)for(let o=0;o<canvas_size;o++){brightness_map[a][o]-=e,brightness_map[a][o]/=s-e,brightness_map[a][o]=1-brightness_map[a][o],brightness_map[a][o]=Math.pow(brightness_map[a][o],1+current_roots.length/4),brightness_map[a][o]>=0||brightness_map[a][o]<=1||(brightness_map[a][o]=1);let n=closest_roots[a][o];-1!==n?(t.push(colors[n][0]*brightness_map[a][o]),t.push(colors[n][1]*brightness_map[a][o]),t.push(colors[n][2]*brightness_map[a][o]),t.push(255)):(t.push(0),t.push(0),t.push(0),t.push(255))}postMessage(["img_data",t])}function complex_magnitude(s){return s[0]*s[0]+s[1]*s[1]}function complex_multiply(s,e){return[s[0]*e[0]-s[1]*e[1],s[0]*e[1]+s[1]*e[0]]}function complex_invert(s){let e=complex_magnitude(s);return[1/e*s[0],-1/e*s[1]]}function complex_polynomial(s,e){let t=[1,0];for(let a=0;a<s.length;a++)t=complex_multiply(t,[e[0]-s[a][0],e[1]-s[a][1]]);return t}function complex_derivative(s,e){let t=complex_polynomial(s,e),a=complex_polynomial(s,[e[0]-.001,e[1]]);return t[0]-=a[0],t[1]-=a[1],t[0]/=.001,t[1]/=.001,t}
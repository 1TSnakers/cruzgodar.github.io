import{hsvToRgb,rgbToHex}from"../../../scripts/applets/applet.min.js";import anime from"/scripts/anime.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{changeOpacity}from"/scripts/src/animation.min.js";import{animate,sleep}from"/scripts/src/utils.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";class NewtonsMethod extends AnimationFrameApplet{wilsonHidden;rootSetterElement;rootAInput;rootBInput;colorSetterElement;colors={root0:[216/255,1/255,42/255],root1:[1,139/255,56/255],root2:[249/255,239/255,20/255],root3:[27/255,181/255,61/255],root4:[0,86/255,195/255],root5:[154/255,82/255,164/255],root6:[32/255,32/255,32/255],root7:[155/255,92/255,15/255]};lastActiveRoot="root0";numRoots=3;numIterations=100;secantProportion=0;pastBrightnessScales=[];resolution=500;resolutionHidden=50;constructor({canvas,rootSetterElement,rootAInput,rootBInput,colorSetterElement}){super(canvas),this.rootSetterElement=rootSetterElement,this.rootAInput=rootAInput,this.rootBInput=rootBInput,this.colorSetterElement=colorSetterElement;var o=this.createHiddenCanvas(),t=(this.randomizeColors(!1),{shader:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform int numRoots;
			
			uniform vec2 root0;
			uniform vec2 root1;
			uniform vec2 root2;
			uniform vec2 root3;
			uniform vec2 root4;
			uniform vec2 root5;
			uniform vec2 root6;
			uniform vec2 root7;
			
			uniform vec3 color0;
			uniform vec3 color1;
			uniform vec3 color2;
			uniform vec3 color3;
			uniform vec3 color4;
			uniform vec3 color5;
			uniform vec3 color6;
			uniform vec3 color7;
			
			uniform vec2 a;
			uniform vec2 c;
			
			uniform float brightnessScale;

			uniform float secantProportion;
			
			const float derivativePrecision = 6.0;
			
			const float threshhold = .05;
			
			
			
			//Returns z1 * z2.
			vec2 cmul(vec2 z1, vec2 z2)
			{
				return vec2(z1.x * z2.x - z1.y * z2.y, z1.x * z2.y + z1.y * z2.x);
			}
			
			
			
			//Returns 1/z.
			vec2 cinv(vec2 z)
			{
				float magnitude = z.x*z.x + z.y*z.y;
				
				return vec2(z.x / magnitude, -z.y / magnitude);
			}
			
			
			
			//Returns f(z) for a polynomial f with given roots.
			vec2 cpoly(vec2 z)
			{
				vec2 result = vec2(1.0, 0.0);

				if (numRoots >= 1)
				{
					result = cmul(result, z - root0);
				}

				if (numRoots >= 2)
				{
					result = cmul(result, z - root1);
				}

				if (numRoots >= 3)
				{
					result = cmul(result, z - root2);
				}

				if (numRoots >= 4)
				{
					result = cmul(result, z - root3);
				}

				if (numRoots >= 5)
				{
					result = cmul(result, z - root4);
				}

				if (numRoots >= 6)
				{
					result = cmul(result, z - root5);
				}

				if (numRoots >= 7)
				{
					result = cmul(result, z - root6);
				}

				if (numRoots >= 8)
				{
					result = cmul(result, z - root7);
				}

				return result;
			}
			
			
			
			//Approximates f'(z) for a polynomial f with given roots.
			vec2 cderiv(vec2 z)
			{
				return derivativePrecision * (cpoly(z + vec2(1.0 / (2.0*derivativePrecision), 0.0)) - cpoly(z - vec2(1.0 / (2.0*derivativePrecision), 0.0)));
			}



			void computeColor(
				vec2 lastZ,
				vec2 root,
				vec3 color,
				float d0,
				int iteration
			) {
				float d1 = length(lastZ - root);
				
				float brightnessAdjust = (log(threshhold) - log(d0)) / (log(d1) - log(d0));
				
				float brightness = 1.0 - (float(iteration) - brightnessAdjust) / brightnessScale;
				
				gl_FragColor = vec4(color * brightness, 1.0);
			}
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				vec2 lastZ = vec2(0.0, 0.0);
				
				gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
				
				
				
				for (int iteration = 0; iteration < 100; iteration++)
				{
					vec2 temp = mix(
						cmul(cmul(cpoly(z), cinv(cderiv(z))), a) + c * 0.1,
						cmul(cmul(cpoly(z), cmul(z - lastZ, cinv(cpoly(z) - cpoly(lastZ)))), a) + c * 0.1,
						secantProportion
					);
					
					lastZ = z;
					
					z -= temp;

					if (numRoots >= 1)
					{
						float d0 = length(z - root0);

						if (d0 < threshhold)
						{
							computeColor(lastZ, root0, color0, d0, iteration);
							return;
						}
					}

					if (numRoots >= 2)
					{
						float d0 = length(z - root1);

						if (d0 < threshhold)
						{
							computeColor(lastZ, root1, color1, d0, iteration);
							return;
						}
					}

					if (numRoots >= 3)
					{
						float d0 = length(z - root2);

						if (d0 < threshhold)
						{
							computeColor(lastZ, root2, color2, d0, iteration);
							return;
						}
					}

					if (numRoots >= 4)
					{
						float d0 = length(z - root3);

						if (d0 < threshhold)
						{
							computeColor(lastZ, root3, color3, d0, iteration);
							return;
						}
					}

					if (numRoots >= 5)
					{
						float d0 = length(z - root4);

						if (d0 < threshhold)
						{
							computeColor(lastZ, root4, color4, d0, iteration);
							return;
						}
					}

					if (numRoots >= 6)
					{
						float d0 = length(z - root5);

						if (d0 < threshhold)
						{
							computeColor(lastZ, root5, color5, d0, iteration);
							return;
						}
					}

					if (numRoots >= 7)
					{
						float d0 = length(z - root6);

						if (d0 < threshhold)
						{
							computeColor(lastZ, root6, color6, d0, iteration);
							return;
						}
					}

					if (numRoots >= 8)
					{
						float d0 = length(z - root7);

						if (d0 < threshhold)
						{
							computeColor(lastZ, root7, color7, d0, iteration);
							return;
						}
					}
				}
			}
		`,uniforms:{worldCenter:[0,0],worldSize:[2,2],numRoots:this.numRoots,root0:[0,0],root1:[0,0],root2:[0,0],root3:[0,0],root4:[0,0],root5:[0,0],root6:[0,0],root7:[0,0],color0:this.colors.root0,color1:this.colors.root1,color2:this.colors.root2,color3:this.colors.root3,color4:this.colors.root4,color5:this.colors.root5,color6:this.colors.root6,color7:this.colors.root7,a:[1,0],c:[0,0],brightnessScale:12.75,secantProportion:this.secantProportion},canvasWidth:this.resolution,worldWidth:4,minWorldWidth:1e-5,maxWorldWidth:100,minWorldHeight:1e-5,maxWorldHeight:100,onResizeCanvas:()=>this.needNewFrame=!0,interactionOptions:{useForPanAndZoom:!0,onPanAndZoom:()=>this.needNewFrame=!0},draggableOptions:{draggables:{a:[1,0],c:[0,0],root0:[0,0],root1:[0,0],root2:[0,0],root3:[0,0],root4:[0,0],root5:[0,0],root6:[0,0],root7:[0,0]},callbacks:{drag:this.onDragDraggable.bind(this),release:this.onReleaseDraggable.bind(this)}},fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}});this.wilson=new WilsonGPU(canvas,t),this.wilsonHidden=new WilsonGPU(o,{...t,canvasWidth:this.resolutionHidden});for(let s=3;s<8;s++)this.wilson.draggables["root"+s].element.style.display="none";this.spreadRoots({doAnimation:!1}),this.resume()}switchMethod(instant){const o=this.secantProportion,s=0===this.secantProportion?1:0;animate(t=>{this.secantProportion=t*s+(1-t)*o,this.wilson.setUniforms({secantProportion:this.secantProportion}),this.wilsonHidden.setUniforms({secantProportion:this.secantProportion}),this.needNewFrame=!0},instant?0:1e3,"easeInOutQuad")}async addRoot(){var o,t,s;8!==this.numRoots&&(o=3*Math.random()-1.5,t=3*Math.random()-1.5,s=Math.sqrt(o*o+t*t),this.wilson.setDraggables({["root"+this.numRoots]:[o/s*150,t/s*150]}),this.wilson.draggables["root"+this.numRoots].element.style.opacity=0,this.wilson.draggables["root"+this.numRoots].element.style.display="block",this.wilson.setUniforms({["root"+this.numRoots]:this.wilson.draggables["root"+this.numRoots].location}),this.wilsonHidden.setUniforms({["root"+this.numRoots]:this.wilson.draggables["root"+this.numRoots].location}),this.numRoots++,this.wilson.setUniforms({numRoots:this.numRoots}),this.wilsonHidden.setUniforms({numRoots:this.numRoots}),this.moveRoots({newRoots:{["root"+(this.numRoots-1)]:[o,t]},easing:"cubicBezier(0, 1, 0.5, 1)",duration:1e3}),changeOpacity({element:this.wilson.draggables["root"+(this.numRoots-1)].element,opacity:1,duration:1e3}),this.needNewFrame=!0)}async removeRoot(){var o,t;1!==this.numRoots&&(this.numRoots--,[o,t]=this.wilson.draggables["root"+this.numRoots].location,t=[o/(o=Math.sqrt(o*o+t*t))*1e3,t/o*1e3],changeOpacity({element:this.wilson.draggables["root"+this.numRoots].element,opacity:0,duration:1e3}),await this.moveRoots({newRoots:{["root"+this.numRoots]:t},easing:"cubicBezier(1, 0, 1, 0.5)",duration:1e3}),this.wilson.draggables["root"+this.numRoots].element.style.display="none",this.wilson.setUniforms({numRoots:this.numRoots}),this.wilsonHidden.setUniforms({numRoots:this.numRoots}),this.needNewFrame=!0)}spreadRoots({doAnimation=!0,randomize=!1}){var o={};for(let s=0;s<8;s++){var t=1+.75*randomize*Math.random();o["root"+s]=[t*Math.cos(2*Math.PI*s/this.numRoots),t*Math.sin(2*Math.PI*s/this.numRoots)]}this.moveRoots({newRoots:o,doAnimation:doAnimation})}async moveRoots({newRoots,doAnimation=!0,easing="easeInOutQuad",duration=1e3}){const i=Object.fromEntries(Object.entries(this.wilson.draggables).map(([id,draggable])=>[id,draggable.location]));await animate(t=>{for(const e of Object.keys(newRoots)){var o=i[e],s=newRoots[e],o=[(1-t)*o[0]+t*s[0],(1-t)*o[1]+t*s[1]];this.wilson.setDraggables({[e]:o}),this.wilson.setUniforms({[e]:o}),this.wilsonHidden.setUniforms({[e]:o})}this.needNewFrame=!0},doAnimation?duration:0,easing)}setRoot(x,y){this.wilson.setDraggables({[this.lastActiveRoot]:[x,y]}),this.wilson.setUniforms({[this.lastActiveRoot]:[x,y]}),this.wilsonHidden.setUniforms({[this.lastActiveRoot]:[x,y]}),this.needNewFrame=!0}setColor({rgb,root=this.lastActiveRoot,animate=!0}){if(root in this.colors){const o=rgb[0]/255,t=rgb[1]/255,s=rgb[2]/255,e={r:this.colors[root][0],g:this.colors[root][1],b:this.colors[root][2]};const i="color"+root.slice(4);anime({targets:e,r:o,g:t,b:s,easing:"easeInOutQuad",duration:animate?250:0,update:()=>{this.colors[root][0]=e.r,this.colors[root][1]=e.g,this.colors[root][2]=e.b,this.wilson.setUniforms({[i]:this.colors[root]}),this.wilsonHidden.setUniforms({[i]:this.colors[root]}),this.needNewFrame=!0},complete:()=>{this.colors[root][0]=o,this.colors[root][1]=t,this.colors[root][2]=s,this.wilson.setUniforms({[i]:this.colors[root]}),this.wilsonHidden.setUniforms({[i]:this.colors[root]}),this.needNewFrame=!0}})}}randomizeColors(animate=!0){for(const t in this.colors){var o=hsvToRgb((.55*Math.random()+.525)%1,.2*Math.random()+.3,.2*Math.random()+.8);this.setColor({rgb:o,root:t,animate:animate})}}onDragDraggable({id,x,y}){this.wilson.setUniforms({[id]:[x,y]}),this.wilsonHidden.setUniforms({[id]:[x,y]}),this.needNewFrame=!0}onReleaseDraggable({id}){var o;this.lastActiveRoot=id,this.rootSetterElement&&this.colorSetterElement&&(this.rootAInput.setValue(Math.round(1e3*this.wilson.draggables[this.lastActiveRoot].location[0])/1e3,!1),this.rootBInput.setValue(Math.round(1e3*this.wilson.draggables[this.lastActiveRoot].location[1])/1e3,!1),this.lastActiveRoot in this.colors)&&(o=this.colors[this.lastActiveRoot],this.colorSetterElement.firstElementChild.value=rgbToHex(255*o[0],255*o[1],255*o[2]))}drawFrame(){this.wilsonHidden.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY]}),this.wilsonHidden.drawFrame();var o=this.wilsonHidden.readPixels(),t=new Array(this.resolutionHidden*this.resolutionHidden);for(let i=0;i<this.resolutionHidden*this.resolutionHidden;i++)t[i]=Math.max(Math.max(o[4*i],o[4*i+1]),o[4*i+2]);t.sort((a,b)=>a-b);let s=Math.min(7e3/(t[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+t[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)]),30);this.pastBrightnessScales.push(s);var e=this.pastBrightnessScales.length;10<e&&this.pastBrightnessScales.shift();for(let r=s=0;r<this.pastBrightnessScales.length;r++)s+=this.pastBrightnessScales[r];s=Math.max(s/e,.5),this.wilson.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],brightnessScale:s}),this.wilson.drawFrame()}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.animationPaused=!0,await sleep(33)}}export{NewtonsMethod};
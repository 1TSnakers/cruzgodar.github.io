function isValidABConfig({lambda,mu,nu,A,B}){for(;lambda.length<nu[0];)lambda.push(0);for(;mu.length<nu.length;)mu.push(0);var e=[];let t=0,a=0;for(;A[t][0]===1/0;)t++;for(;A[0][a]===1/0;)a++;if(A[t-1][a-1]!==1/0)throw new Error("Infinite part of A is not rectangular!");for(let b=0;b<A.length;b++)for(let n=0;n<A[b].length;n++){const s=b-t,c=n-a;if(!(s<0&&c<0)){const v=0<=s&&s<nu.length&&0<=c&&c<nu[s];var[r,i]=s<0?[lambda[c],0]:c<0?[mu[s],0]:v?[Math.min(lambda[c],mu[s]),Math.max(lambda[c],mu[s])]:[0,Math.min(lambda[c],mu[s])];for(let t=v?-5:0;t<Math.max(r,i);t++){var[l,u]=(()=>{if(s<0)return[1,1];if(c<0)return[1,2];if(t<0)return[1,3];if(v&&t<Math.min(lambda[c],mu[s]))return[3,0];if(!v)return[2,3];if(t>=lambda[c])return[2,1];if(t>=mu[s])return[2,2];throw new Error("Region/label code is broken")})(),o=A[b][n]<=t&&t<r,h=0<=s&&0<=c&&B[s][c]<=t&&t<i,m=0<=s&&0<=c&&t<i&&0<=t;(1===l&&o||2===l&&!h&&m||3===l&&(o&&!h||!o&&h))&&e.push([s,c,t,u])}}}var f=[];const g=structuredClone(e),d=[[-1,0,0],[1,0,0],[0,-1,0],[0,1,0],[0,0,-1],[0,0,1]];for(;0!==g.length;){let t=[],n=[g[0]];for(g.splice(0,1);0!==n.length;){const x=[];n.forEach(activeBox=>{d.forEach(direction=>{var t=boxIsInArray([activeBox[0]+direction[0],activeBox[1]+direction[1],activeBox[2]+direction[2]],g);-1!==t&&(x.push(g[t]),g.splice(t,1))})}),t=t.concat(n),n=x}f.push(t)}for(let p=0;p<f.length;p++){var n=new Set(f[p].map(box=>box[3]));if(n.delete(0),1<n.size)return!1}return!0}function boxIsInArray(box,array){for(let n=0;n<array.length;n++){var t=array[n];if(t[0]===box[0]&&t[1]===box[1]&&t[2]===box[2])return n}return-1}function getMinimalABConfig({lambda,mu,nu,negativeWidth=2}){for(;lambda.length<nu[0];)lambda.push(0);for(;mu.length<nu.length;)mu.push(0);var n=new Array(negativeWidth+mu.length),e=new Array(mu.length);for(let i=0;i<n.length;i++){n[i]=new Array(negativeWidth+lambda.length),i>=negativeWidth&&(e[i-negativeWidth]=new Array(lambda.length));for(let t=0;t<n[i].length;t++){const l=i-negativeWidth,u=t-negativeWidth;if(l<0&&u<0)n[i][t]=1/0;else{const o=0<=l&&l<nu.length&&0<=u&&u<nu[l];var[a,r]=l<0?[lambda[u],0]:u<0?[mu[l],0]:o?[Math.min(lambda[u],mu[l]),Math.max(lambda[u],mu[l])]:[-1/0,Math.min(lambda[u],mu[l])];n[i][t]=a,0<=l&&0<=u&&(e[l][u]=r)}}}return[n,e]}function iterateThroughEntries({lambda,mu,nu,A,B,i,j}){for(;lambda.length<nu[0];)lambda.push(0);for(;mu.length<nu.length;)mu.push(0);let t=0,n=0;for(;A[t][0]===1/0;)t++;for(;A[0][n]===1/0;)n++;var a=i-t,r=j-n;if(!(a<0&&r<0)){var l=0<=a&&a<nu.length&&0<=r&&r<nu[a],u=A[i][j],o=Math.max(Math.max(i===A.length-1?-1/0:A[i+1][j],j===A[0].length-1?-1/0:A[i][j+1]),l?-5:0),h=B[a][r],m=Math.max(a==B.length-1?0:B[1+a][r],r==B[0].length-1?0:B[r][1+r]),f=structuredClone(A),g=structuredClone(B);let n="";for(let e=u;e>=o;e--){for(let t=h;t>=m;t--)f[i][j]=e,g[a][r]=t,isValidABConfig({lambda:lambda,mu:mu,nu:nu,A:f,B:g})?n+=" *":n+="  ";n+="\n"}console.log(n)}}export{isValidABConfig,getMinimalABConfig,iterateThroughEntries};
import{hsvToRgb}from"/scripts/applets/applet.min.js";import{changeOpacity}from"/scripts/src/animation.min.js";import{convertColor}from"/scripts/src/browser.min.js";import{animate}from"/scripts/src/utils.min.js";async function drawBoundary(index,n){this.in2dView||await this.show2dView(),"0"!==this.wilsonNumbers.canvas.style.opacity&&await changeOpacity({element:this.wilsonNumbers.canvas,opacity:0,duration:this.animationTime/3}),this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight);const t=this.arrays[index];var r,i=t.numbers,e=[];let s=0,a=0;for(let h=t.footprint-1;0<=h;h--){for(;a<t.footprint&&i[h][a]===1/0;)h!==t.footprint-1&&i[h+1][a]===1/0||(r=s%n/n,r=hsvToRgb(r,1,1),e.push([h,a,!0,r]),s++),a++;var o=s%n/n,o=hsvToRgb(o,1,1);e.push([h,a,!1,o]),s++}for(var c;a<t.footprint;)-1!=t.footprint-1&&i[0][a]===1/0||(c=s%n/n,c=hsvToRgb(c,1,1),e.push([-1,a,!0,c]),s++),a++;return e.forEach(rect=>{this.drawBoundaryRect(t,rect[0],rect[1],rect[2],rect[3])}),await changeOpacity({element:this.wilsonNumbers.canvas,opacity:1,duration:this.animationTime/3}),this.wilsonNumbers.ctx.fillStyle=convertColor(255,255,255),e}async function drawNQuotient(index,n,m,rects){const i=this.arrays[index];await animate(t=>{this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),rects.forEach((rect,index)=>{var r=index%n===m?1:1-t;this.drawBoundaryRect(i,rect[0],rect[1],rect[2],[...rect[3],r])})},this.animationTime),this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),rects.forEach((rect,index)=>{var t=index%n===m?1:0;this.drawBoundaryRect(i,rect[0],rect[1],rect[2],[...rect[3],t])});var r=(rects=rects.filter((rect,index)=>index%n===m)).filter(rect=>!rect[2]).length;const e=new Array(rects.length);let s=r-1,a=0;rects.forEach((rect,index)=>{e[index]=[s,a],rect[2]?a++:s--}),await animate(t=>{this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),rects.forEach((rect,index)=>{this.drawBoundaryRect(i,(1-t)*rect[0]+t*e[index][0],(1-t)*rect[1]+t*e[index][1],rect[2],rect[3])})},this.animationTime,"easeInOutQuad"),this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),rects.forEach((rect,index)=>{this.drawBoundaryRect(i,e[index][0],e[index][1],rect[2],rect[3])});const o=[],c=(e.forEach((rect,index)=>{if(!rects[index][2])for(let r=rect[1];r<i.footprint;r++)if(i.numbers[rect[0]][r]===1/0)for(let t=0;t<this.infiniteHeight;t++)o.push([rect[0],r,t])}),this.deleteCubes(i,o,!0),[]);for(let h=i.footprint-1;h>e[0][0];h--)c.push([h,0,!1]);for(let l=e[e.length-1][1];l<i.footprint;l++)c.push([-1,l,!0]);await animate(t=>{this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),rects.forEach((rect,index)=>{this.drawBoundaryRect(i,e[index][0],e[index][1],rect[2],rect[3])}),c.forEach(rect=>{this.drawBoundaryRect(i,rect[0],rect[1],rect[2],[...rects[0][3],t])})},this.animationTime/2,"easeInQuad"),this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),rects.forEach((rect,index)=>{this.drawBoundaryRect(i,e[index][0],e[index][1],rect[2],rect[3])}),c.forEach(rect=>{this.drawBoundaryRect(i,rect[0],rect[1],rect[2],rect[3])}),this.wilsonNumbers.ctx.fillStyle=convertColor(255,255,255)}function drawBoundaryRect(array,i,j,horizontal,rgba){var t=(this.totalArrayFootprint-array.footprint-1)/2,r=array.partialFootprintSum-array.footprint;this.wilsonNumbers.ctx.fillStyle=convertColor(...rgba),horizontal?this.wilsonNumbers.ctx.fillRect(this.wilsonNumbers.canvasWidth*(j+r+1)/(this.totalArrayFootprint+1),this.wilsonNumbers.canvasHeight*(i+t+1+.9375)/(this.totalArrayFootprint+1)+1,this.wilsonNumbers.canvasWidth/(this.totalArrayFootprint+1),this.wilsonNumbers.canvasHeight*(1/16)/(this.totalArrayFootprint+1)):this.wilsonNumbers.ctx.fillRect(this.wilsonNumbers.canvasWidth*(j+r+.9375)/(this.totalArrayFootprint+1),this.wilsonNumbers.canvasHeight*(i+t+1)/(this.totalArrayFootprint+1)+1,this.wilsonNumbers.canvasWidth*(1/16)/(this.totalArrayFootprint+1),this.wilsonNumbers.canvasHeight/(this.totalArrayFootprint+1))}export{drawBoundary,drawNQuotient,drawBoundaryRect};
import{PlanePartitions}from"./class.min.js";async function runExample(index){if(1===index||2===index){for(;1<this.arrays.length;)await this.removeArray(1),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2));var i;0===this.arrays.length?(i=PlanePartitions.parseArray(PlanePartitions.generateRandomPlanePartition()),await this.addNewArray(this.arrays.length,i)):PlanePartitions.verifyPp(this.arrays[0].numbers)||(await this.removeArray(0),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2)),i=PlanePartitions.parseArray(PlanePartitions.generateRandomPlanePartition()),await this.addNewArray(this.arrays.length,i)),1===index?(await this.runAlgorithm("hillmanGrassl",0),await new Promise(resolve=>setTimeout(resolve,3*this.animationTime)),await this.runAlgorithm("hillmanGrasslInverse",0)):(await this.runAlgorithm("pak",0),await new Promise(resolve=>setTimeout(resolve,3*this.animationTime)),await this.showHexView(),await new Promise(resolve=>setTimeout(resolve,this.animationTime)),await this.runAlgorithm("sulzgruberInverse",0))}else if(3===index){for(;0<this.arrays.length;)await this.removeArray(0),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2));await this.addNewArray(this.arrays.length,PlanePartitions.generateRandomTableau()),await this.show2dView(),await new Promise(resolve=>setTimeout(resolve,this.animationTime)),await this.runAlgorithm("rskInverse",0),await new Promise(resolve=>setTimeout(resolve,3*this.animationTime)),await this.runAlgorithm("rsk",0)}}async function runAlgorithm(name,index,subAlgorithm=!1){if(subAlgorithm||!this.currentlyRunningAlgorithm){this.currentlyRunningAlgorithm=!0;var r=this.algorithmData[name],a=r.inputType.length;if(index>this.arrays.length-1||index<0)console.log(`No array at index ${index}!`),this.currentlyRunningAlgorithm=!1;else if(1<a&&index>this.arrays.length-a)console.log(`No array at index ${index+a-1}! (This algorithm needs ${a} arrays)`),this.currentlyRunningAlgorithm=!1;else{for(let i=0;i<a;i++){var t=r.inputType[i];if("pp"===t&&!PlanePartitions.verifyPp(this.arrays[index+i].numbers))return console.log(`Array at index ${index+i} is not a plane partition!`),void(this.currentlyRunningAlgorithm=!1);if("ssyt"===t&&!PlanePartitions.verifySsyt(this.arrays[index+i].numbers))return console.log(`Array at index ${index+i} is not an SSYT!`),void(this.currentlyRunningAlgorithm=!1)}if(1<a&&void 0!==r.sameShape&&r.sameShape){var n=new Array(a);let r=0;for(let i=0;i<a;i++)r=Math.max(r,this.arrays[index+i].numbers.length);for(let t=0;t<a;t++){n[t]=new Array(r);for(let i=0;i<r;i++)n[t][i]=0;for(let e=0;e<this.arrays[index+t].numbers.length;e++){let i=0;for(;i<this.arrays[index+t].numbers[e].length&&0!==this.arrays[index+t].numbers[e][i];)i++;n[t][e]=i}}for(let e=1;e<a;e++)for(let i=0;i<r;i++)if(n[e][i]!==n[0][i])return this.displayError("Arrays are not the same shape!"),void(this.currentlyRunningAlgorithm=!1)}for(let e=0;e<a;e++){var s=[],o=this.arrays[index+e].numbers;for(let r=0;r<o.length;r++)for(let e=0;e<o.length;e++)if(o[r][e]!==1/0)for(let i=0;i<o[r][e];i++)s.push([r,e,i]);this.uncolorCubes(this.arrays[index+e],s)}await r.method.bind(this)(index),this.subAlgorithm||(this.currentlyRunningAlgorithm=!1)}}}export{runExample,runAlgorithm};
import{sleep}from"/scripts/src/utils.min.js";async function sulzgruber(index){const a=this.arrays[index],n=structuredClone(a.numbers);var h=new Array(n.length);for(let i=0;i<n.length;i++){let e=0;for(;e<n.length&&n[e][i]===1/0;)e++;h[i]=e}var s=new Array(n.length);for(let x=0;x<n.length;x++){let e=0;for(;e<n.length&&n[x][e]===1/0;)e++;s[x]=e}var r,l,o={},g={};for(let e=0;e<n.length;e++)g[-e]=[e,0];for(let C=1;C<n.length;C++)g[C]=[0,C];for(let p=1-n.length;p<n.length;p++){let e=g[p][0],t=g[p][1];for(;e<n.length&&t<n.length&&n[e][t]===1/0;)e++,t++;g[p]=[e,t],e===n.length||t===n.length?o[p]=-1:(r=0===t||n[e][t-1]===1/0,l=0===e||n[e-1][t]===1/0,o[p]=r&&l?0:r?3:l?2:1)}var u=[];for(let y=1-n.length;y<n.length;y++)if(1!==o[y]&&3!==o[y]){let l=g[y][0],i=g[y][1];if(0!==n[l][i])for(;;){let e=!1;for(;l<n.length&&i<n.length&&0!==n[l][i];){if((i<n.length-1&&n[l][i]>n[l][i+1]||i===n.length-1&&0<n[l][i])&&(0===o[y]||2===o[y]&&(l<n.length-1&&n[l][i]>n[l+1][i]||l===n.length-1&&0<n[l][i]))){e=!0;break}l++,i++}if(!e)break;let t=l,r=i;for(var f=[[t,r,n[t][r]-1]];;){var b=r-t;if(t<n.length-1&&n[t][r]===n[t+1][r]&&(0===o[b]||3===o[b]))t++;else{if(!(r>s[t]&&(t===n.length-1||t<n.length-1&&n[t][r]>n[t+1][r])))break;r--}f.push([t,r,n[t][r]-1])}f.forEach(box=>n[box[0]][box[1]]--),u.push(f)}}var t=new Array(n.length);for(let A=0;A<n.length;A++){t[A]=new Array(n.length);for(let e=0;e<n.length;e++)t[A][e]=n[A][e]===1/0?1/0:0}var c=await this.addNewArray({index:index+1,numbers:t});await sleep(this.animationTime);for(let T=0;T<u.length;T++){var w=T/u.length*6/7,d=(await this.colorCubes(a,u[T],w),await this.raiseCubes(a,u[T],a.height+1),u[T].forEach(box=>{a.numbers[box[0]][box[1]]--,this.in2dView&&this.drawSingleCell2dViewText(a,box[0],box[1])}),this.recalculateHeights(a),await sleep(this.animationTime/5),u[T][u[T].length-1][0]),m=g[u[T][u[T].length-1][1]-d+u[T].length-1][1];let e=[];var v=Math.max(a.height+1,c.height+1);for(let t=h[m];t<=d;t++)e.push([t,m,v]);for(let r=m-1;r>=s[d];r--)e.push([d,r,v]);await this.moveCubes(a,u[T],c,e),e=[];for(let l=d-1;l>=h[m];l--)e.push([l,m,v]);this.deleteCubes(c,e),e=[];for(let i=m-1;i>=s[d];i--)e.push([d,i,v]);this.deleteCubes(c,e),await this.lowerCubes(c,[[d,m,v]]),c.numbers[d][m]++,this.in2dView&&this.drawSingleCell2dViewText(c,d,m),this.recalculateHeights(c),await sleep(this.animationTime)}this.currentlyAnimatingCamera=!1,await this.removeArray(index)}async function sulzgruberInverse(index){var u=this.arrays[index],f=u.numbers,b=new Array(f.length);for(let r=0;r<f.length;r++){let e=0;for(;e<f.length&&f[e][r]===1/0;)e++;b[r]=e}var c=new Array(f.length);for(let l=0;l<f.length;l++){let e=0;for(;e<f.length&&f[l][e]===1/0;)e++;c[l]=e}var w={};for(let e=0;e<f.length;e++)w[-e]=[e,0];for(let i=1;i<f.length;i++)w[i]=[0,i];for(let a=1-f.length;a<f.length;a++){let e=w[a][0],t=w[a][1];for(;e<f.length&&t<f.length&&f[e][t]===1/0;)e++,t++;w[a]=[e,t]}let d=0;var t=new Array(f.length);for(let n=0;n<f.length;n++){t[n]=new Array(f.length);for(let e=0;e<f.length;e++)f[n][e]===1/0?t[n][e]=1/0:(t[n][e]=0,d+=f[n][e])}const m=await this.addNewArray({index:index+1,numbers:t});let v=0;for(let H=f.length-1;0<=H;H--)for(let g=f.length-1;0<=g;g--)if(f[g][H]!==1/0)for(;0!==f[g][H];){const S=v/d*6/7;var x=Math.max(u.size+1,m.size+1),C=(await this.colorCubes(u,[[g,H,f[g][H]-1]],S),await this.raiseCubes(u,[[g,H,f[g][H]-1]],x),g),p=H;for(let e=b[p];e<C;e++)u.cubes[e][p][x]=this.addCube(u,p,x,e),u.cubes[e][p][x].material.forEach(material=>material.color.setHSL(S,1,this.cubeLightness));for(let t=c[C];t<p;t++)u.cubes[C][t][x]=this.addCube(u,t,x,C),u.cubes[C][t][x].material.forEach(material=>material.color.setHSL(S,1,this.cubeLightness));let l=[];for(let r=C-1;r>=b[p];r--)l.push([r,p,x]);var y=this.revealCubes(u,l);l=[];for(let n=p-1;n>=c[C];n--)l.push([C,n,x]);var A=this.revealCubes(u,l);await Promise.all([y,A]),l=[];for(let h=c[C];h<p;h++)l.push([C,h,x]);l.push([C,p,u.numbers[C][p]-1]);for(let s=C-1;s>=b[p];s--)l.push([s,p,x]);var y=c[C]-C,T=y+l.length-1,V=[];for(let o=y;o<=T;o++)V.push(structuredClone(w[o]));f[C][p]--,this.recalculateHeights(u),this.in2dView&&this.drawSingleCell2dViewText(u,C,p),await this.moveCubes(u,l,m,V);let i=0,a=m.numbers[V[0][0]][V[0][1]];for(;;){let e=i;for(;e<V.length&&V[e][0]===V[i][0];)e++;l=V.slice(i,e);let t=!0;for(let r=0;r<l.length;r++)if(m.numbers[l[r][0]][l[r][1]]!==a){t=!1;break}if(t)await this.lowerCubes(m,l),l.forEach(coordinate=>{m.numbers[coordinate[0]][coordinate[1]]++}),this.recalculateHeights(m),this.in2dView&&l.forEach(entry=>{this.drawSingleCell2dViewText(m,entry[0],entry[1])}),i=e;else{var z=structuredClone(V.slice(i));for(let e=i;e<V.length;e++)if(V[e][0]++,V[e][1]++,V[e][0]>m.footprint||V[e][1]>m.footprint)return void console.error("Insertion failed!");var E=V.slice(i);await this.moveCubes(m,z,m,E),a=m.numbers[V[i][0]][V[i][1]]}if(i===V.length)break}v++,await sleep(this.animationTime/2)}this.currentlyAnimatingCamera=!1,await this.removeArray(index)}export{sulzgruber,sulzgruberInverse};
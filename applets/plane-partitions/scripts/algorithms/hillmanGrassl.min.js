async function hillmanGrassl(index){var s=this.arrays[index],l=structuredClone(s.numbers),h=new Array(l.length);for(let r=0;r<l.length;r++){let e=0;for(;e<l.length&&l[e][r]===1/0;)e++;h[r]=e}var n=new Array(l.length);for(let i=0;i<l.length;i++){let e=0;for(;e<l.length&&l[i][e]===1/0;)e++;n[i]=e}for(var o=[];;){let e=l[0].length-1;for(;0<=e&&h[e]<l.length&&0===l[h[e]][e];)e--;if(e<0||h[e]===l.length)break;let t=h[e],r=e;for(var a=[[t,r,l[t][r]-1]];;){if(t<l.length-1&&l[t+1][r]===l[t][r])t++;else{if(!(0<r&&l[t][r-1]!==1/0))break;r--}a.push([t,r,l[t][r]-1])}for(let i=0;i<a.length;i++)l[a[i][0]][a[i][1]]--;o.push(a)}var t=new Array(l.length);for(let m=0;m<l.length;m++){t[m]=new Array(l.length);for(let e=0;e<l.length;e++)t[m][e]=l[m][e]===1/0?1/0:0}var u=await this.addNewArray(index+1,t);await new Promise(resolve=>setTimeout(resolve,this.animationTime));for(let v=0;v<o.length;v++){var g=v/o.length*6/7;await this.colorCubes(s,o[v],g),await this.raiseCubes(s,o[v],s.height);for(let t=0;t<o[v].length;t++)s.numbers[o[v][t][0]][o[v][t][1]]--,this.in2dView&&this.drawSingleCell2dViewText(s,o[v][t][0],o[v][t][1]);this.recalculateHeights(s),await new Promise(resolve=>setTimeout(resolve,this.animationTime/5));var f=[o[v][o[v].length-1][0],o[v][0][1]];let e=[];var w=u.height+1;for(let r=h[f[1]];r<=f[0];r++)e.push([r,f[1],w]);g=e[e.length-1];for(let i=f[1]-1;i>=n[f[0]];i--)e.push([f[0],i,w]);await this.moveCubes(s,o[v],u,e),e=[];for(let l=f[0]-1;l>=h[f[1]];l--)e.push([l,f[1],w]);this.deleteCubes(u,e),e=[];for(let a=f[1]-1;a>=n[f[0]];a--)e.push([f[0],a,w]);this.deleteCubes(u,e),await this.lowerCubes(u,[g]),u.numbers[g[0]][g[1]]++,this.recalculateHeights(u),this.in2dView&&this.drawSingleCell2dViewText(u,g[0],g[1]),u.height=Math.max(u.height,u.numbers[g[0]][g[1]]),u.size=Math.max(u.size,u.height),await new Promise(resolve=>setTimeout(resolve,this.animationTime))}await this.removeArray(index)}async function hillmanGrasslInverse(index){var h=this.arrays[index],l=structuredClone(h.numbers),n=[],o=new Array(l.length);for(let r=0;r<l.length;r++){let e=0;for(;e<l.length&&l[e][r]===1/0;)e++;o[r]=e}var u=new Array(l.length);for(let i=0;i<l.length;i++){let e=0;for(;e<l.length&&l[i][e]===1/0;)e++;u[i]=e}var t=new Array(l.length);for(let d=0;d<l.length;d++){t[d]=new Array(l.length);for(let e=0;e<l.length;e++)t[d][e]=l[d][e]===1/0?1/0:0}var a=structuredClone(t);const g=await this.addNewArray(index+1,t);for(let b=0;b<l.length;b++)for(let t=l.length-1;t>=o[b];t--)for(;0!==l[t][b];){var s=[];let r=t,i=u[t];for(;0<=r;){let e=i;if(0!==r)for(;a[r][e]!==a[r-1][e]&&e<b;)e++;else e=b;for(let t=i;t<=e;t++)s.push([r,t,a[r][t]]);if(!(r-1>=o[e]))break;r--,i=e}for(let e=0;e<s.length;e++)a[s[e][0]][s[e][1]]++;n.push([s,[t,b,l[t][b]-1]]),l[t][b]--}await new Promise(resolve=>setTimeout(resolve,this.animationTime/2));for(let y=0;y<n.length;y++){const C=y/n.length*6/7;await this.colorCubes(h,[n[y][1]],C);var f=n[y][1][0],w=n[y][1][1],m=h.size;for(let t=o[w];t<f;t++)h.cubes[t][w][m]=this.addCube(h,w,m,t),h.cubes[t][w][m].material.forEach(material=>material.color.setHSL(C,1,this.cubeLightness));for(let r=u[f];r<w;r++)h.cubes[f][r][m]=this.addCube(h,r,m,f),h.cubes[f][r][m].material.forEach(material=>material.color.setHSL(C,1,this.cubeLightness));await this.raiseCubes(h,[n[y][1]],m);let e=[];for(let i=f-1;i>=o[w];i--)e.push([i,w,m]);var v=this.revealCubes(h,e);e=[];for(let l=w-1;l>=u[f];l--)e.push([f,l,m]);var c=this.revealCubes(h,e);await Promise.all([v,c]),e=[];for(let a=u[f];a<w;a++)e.push([f,a,m]);e.push([f,w,h.numbers[f][w]-1]);for(let s=f-1;s>=o[w];s--)e.push([s,w,m]);v=n[y][0];const x=g.height+1;v.forEach(entry=>entry[2]=x),h.numbers[f][w]--,this.recalculateHeights(h),this.in2dView&&this.drawSingleCell2dViewText(h,f,w),await this.moveCubes(h,e,g,v),await this.lowerCubes(g,v),v.forEach(entry=>{g.numbers[entry[0]][entry[1]]++}),this.recalculateHeights(g),this.in2dView&&v.forEach(entry=>this.drawSingleCell2dViewText(g,entry[0],entry[1])),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2))}await this.removeArray(index)}export{hillmanGrassl,hillmanGrasslInverse};
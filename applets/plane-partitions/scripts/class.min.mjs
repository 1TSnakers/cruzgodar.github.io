import anime from"/scripts/anime.min.js";import{changeOpacity}from"/scripts/src/animation.min.mjs";import{Applet}from"/scripts/src/applets.min.mjs";import{$$}from"/scripts/src/main.min.mjs";import*as THREE from"/scripts/three.min.js";import{Wilson}from"/scripts/wilson.min.mjs";class PlanePartitions extends Applet{wilsonNumbers=null;wilsonHidden=null;wilsonHidden2=null;wilsonHidden3=null;wilsonHidden4=null;useFullscreenButton=!1;resolution=2e3;animationTime=600;asymptoteLightness=.6;cubeLightness=.4;floorLightness=.4;infiniteHeight=100;addWalls=!1;wallSize=30;scene=null;orthographicCamera=null;renderer=null;loader=null;cubeTexture=null;cubeTexture2=null;floorTexture=null;floorTexture2=null;cubeGeometry=null;floorGeometry=null;wallLeftGeometry=null;wallRightGeometry=null;ambientLight=null;dimersShown=!1;pointLight=null;rotationY=0;rotationYVelocity=0;nextRotationYVelocity=0;lastRotationYVelocities=[];rotationYVelocityFriction=.94;rotationYVelocityStartThreshhold=.005;rotationYVelocityStopThreshhold=5e-4;in2dView=!1;inExactHexView=!0;currentlyAnimatingCamera=!1;currentlyRunningAlgorithm=!1;needDownload=!1;fontSize=10;arrays=[];totalArrayFootprint=0;totalArrayHeight=0;totalArraySize=0;hexViewCameraPos=[15,15,15];_2dViewCameraPos=[0,20,0];algorithmData={hillmanGrassl:{method:this.hillmanGrassl,inputType:["pp"]},hillmanGrasslInverse:{method:this.hillmanGrasslInverse,inputType:["tableau"]},pak:{method:this.pak,inputType:["pp"]},pakInverse:{method:this.pakInverse,inputType:["tableau"]},sulzgruber:{method:this.sulzgruber,inputType:["pp"]},sulzgruberInverse:{method:this.sulzgruberInverse,inputType:["tableau"]},rsk:{method:this.rsk,inputType:["ssyt","ssyt"],sameShape:!0},rskInverse:{method:this.rskInverse,inputType:["tableau"]},godar1:{method:this.godar1,inputType:["pp"]},godar1Inverse:{method:this.godar1Inverse,inputType:["pp","pp"]}};constructor(canvas,numbersCanvas,useFullscreenButton=!0){super(canvas),this.useFullscreenButton=useFullscreenButton;var useFullscreenButton=this.createHiddenCanvas(),hiddenCanvas2=this.createHiddenCanvas(),hiddenCanvas3=this.createHiddenCanvas(),hiddenCanvas4=this.createHiddenCanvas(),optionsNumbers={renderer:"cpu",canvasWidth:this.resolution,canvasHeight:this.resolution,useFullscreen:!0,useFullscreenButton:!1,mousedownCallback:this.onGrabCanvas.bind(this),touchstartCallback:this.onGrabCanvas.bind(this),mousedragCallback:this.onDragCanvas.bind(this),touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),touchendCallback:this.onReleaseCanvas.bind(this)},numbersCanvas=(this.wilsonNumbers=new Wilson(numbersCanvas,optionsNumbers),this.wilsonNumbers.ctx.fillStyle="rgb(255, 255, 255)",document.body.querySelector(".wilson-fullscreen-components-container").style.setProperty("z-index",200,"important"),$$(".wilson-applet-canvas-container").forEach(element=>element.style.setProperty("background-color","rgba(0, 0, 0, 0)","important")),{canvasWidth:this.resolution,canvasHeight:this.resolution,useFullscreen:!0,useFullscreenButton:this.useFullscreenButton,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:this.switchFullscreen.bind(this)}),optionsNumbers=(this.wilson=new Wilson(canvas,numbersCanvas),{renderer:"cpu",canvasWidth:64,canvasHeight:64});this.wilsonHidden=new Wilson(useFullscreenButton,optionsNumbers),this.wilsonHidden2=new Wilson(hiddenCanvas2,optionsNumbers),this.wilsonHidden3=new Wilson(hiddenCanvas3,optionsNumbers),this.wilsonHidden4=new Wilson(hiddenCanvas4,optionsNumbers),this.wilsonHidden.ctx.strokeStyle="rgb(255, 255, 255)",this.wilsonHidden.ctx._alpha=1,this.wilsonHidden.ctx.fillStyle="rgba(64, 64, 64, 1)",this.wilsonHidden.ctx.fillRect(0,0,64,64),this.wilsonHidden.ctx.fillStyle="rgba(128, 128, 128, 1)",this.wilsonHidden.ctx.fillRect(4,4,56,56),this.wilsonHidden.ctx.lineWidth=6,this.wilsonHidden2.ctx.strokeStyle="rgb(255, 255, 255)",this.wilsonHidden2.ctx._alpha=1,this.wilsonHidden2.ctx.fillStyle="rgba(64, 64, 64, 1)",this.wilsonHidden2.ctx.fillRect(0,0,64,64),this.wilsonHidden2.ctx.fillStyle="rgba(128, 128, 128, 1)",this.wilsonHidden2.ctx.fillRect(4,4,56,56),this.wilsonHidden2.ctx.lineWidth=6,this.wilsonHidden3.ctx.strokeStyle="rgb(255, 255, 255)",this.wilsonHidden3.ctx._alpha=1,this.wilsonHidden3.ctx.fillStyle=`rgba(32, 32, 32, ${this.addWalls?0:1})`,this.wilsonHidden3.ctx.fillRect(0,0,64,64),this.wilsonHidden3.ctx.fillStyle=`rgba(64, 64, 64, ${this.addWalls?0:1})`,this.wilsonHidden3.ctx.fillRect(4,4,56,56),this.wilsonHidden3.ctx.lineWidth=6,this.wilsonHidden4.ctx.strokeStyle="rgb(255, 255, 255)",this.wilsonHidden4.ctx._alpha=1,this.wilsonHidden4.ctx.fillStyle=`rgba(32, 32, 32, ${this.addWalls?0:1})`,this.wilsonHidden4.ctx.fillRect(0,0,64,64),this.wilsonHidden4.ctx.fillStyle=`rgba(64, 64, 64, ${this.addWalls?0:1})`,this.wilsonHidden4.ctx.fillRect(4,4,56,56),this.wilsonHidden4.ctx.lineWidth=6,this.scene=new THREE.Scene,this.scene.background=new THREE.Color(0),this.orthographicCamera=new THREE.OrthographicCamera(-5,5,5,-5,.1,1e3),this.renderer=new THREE.WebGLRenderer({canvas:this.wilson.canvas,antialias:!0}),this.renderer.setSize(this.resolution,this.resolution,!1),this.renderer.useLegacyLights=!0,this.loader=new THREE.TextureLoader,this.cubeTexture=new THREE.CanvasTexture(this.wilsonHidden.canvas),this.cubeTexture.minFilter=THREE.LinearFilter,this.cubeTexture.magFilter=THREE.NearestFilter,this.cubeTexture2=new THREE.CanvasTexture(this.wilsonHidden2.canvas),this.cubeTexture2.minFilter=THREE.LinearFilter,this.cubeTexture2.magFilter=THREE.NearestFilter,this.floorTexture=new THREE.CanvasTexture(this.wilsonHidden3.canvas),this.floorTexture.minFilter=THREE.LinearFilter,this.floorTexture.magFilter=THREE.NearestFilter,this.floorTexture2=new THREE.CanvasTexture(this.wilsonHidden4.canvas),this.floorTexture2.minFilter=THREE.LinearFilter,this.floorTexture2.magFilter=THREE.NearestFilter,this.cubeGeometry=new THREE.BoxGeometry,this.dimersShown=!1,this.floorGeometry=new THREE.BoxGeometry(1,.001,1),this.wallLeftGeometry=new THREE.BoxGeometry(.001,1,1),this.wallRightGeometry=new THREE.BoxGeometry(1,1,.001),this.ambientLight=new THREE.AmbientLight(16777215,.2),this.scene.add(this.ambientLight),this.pointLight=new THREE.PointLight(16777215,3,1e4),this.pointLight.position.set(750,1e3,500),this.scene.add(this.pointLight),this.drawFrame()}onGrabCanvas(){this.inExactHexView=!1,this.rotationYVelocity=0,this.lastRotationYVelocities=[0,0,0,0]}onDragCanvas(x,y,xDelta){this.in2dView||(this.rotationY+=xDelta,this.rotationY>Math.PI?this.rotationY-=2*Math.PI:this.rotationY<-Math.PI&&(this.rotationY+=2*Math.PI),this.scene.children.forEach(object=>object.rotation.y=this.rotationY),this.nextRotationYVelocity=xDelta)}onReleaseCanvas(){if(!this.in2dView){let maxIndex=0;if(this.lastRotationYVelocities.forEach((velocity,index)=>{Math.abs(velocity)>this.rotationYVelocity&&(this.rotationYVelocity=Math.abs(velocity),maxIndex=index)}),this.rotationYVelocity<this.rotationYVelocityStartThreshhold)return void(this.rotationYVelocity=0);this.rotationYVelocity=this.lastRotationYVelocities[maxIndex]}this.lastRotationYVelocities=[0,0,0,0]}drawFrame(){this.renderer.render(this.scene,this.orthographicCamera),this.lastRotationYVelocities.push(this.nextRotationYVelocity),this.lastRotationYVelocities.shift(),(this.nextRotationYVelocity=0)!==this.rotationYVelocity&&(this.rotationY+=this.rotationYVelocity,this.scene.children.forEach(object=>object.rotation.y=this.rotationY),this.rotationYVelocity*=this.rotationYVelocityFriction,Math.abs(this.rotationYVelocity)<this.rotationYVelocityStopThreshhold)&&(this.rotationYVelocity=0),this.rotationY>Math.PI?this.rotationY-=2*Math.PI:this.rotationY<-Math.PI&&(this.rotationY+=2*Math.PI),this.needDownload&&(this.needDownload=!1,this.wilson.canvas.toBlob(blob=>{var link=document.createElement("a");link.download="a-plane-partition.png",link.href=window.URL.createObjectURL(blob),link.click(),link.remove()})),window.requestAnimationFrame(this.drawFrame.bind(this))}switchFullscreen(){var exitFullscreenButtonElement;this.useFullscreenButton&&(exitFullscreenButtonElement=document.body.querySelector(".wilson-exit-fullscreen-button"))&&exitFullscreenButtonElement.style.setProperty("z-index","300","important"),this.in2dView||this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),this.wilsonNumbers.fullscreen.switchFullscreen()}generateRandomPlanePartition(){var sideLength=Math.floor(3*Math.random())+5,maxEntry=Math.floor(5*Math.random())+10,planePartition=new Array(sideLength);for(let i=0;i<sideLength;i++)planePartition[i]=new Array(sideLength);planePartition[0][0]=maxEntry;for(let j=1;j<sideLength;j++)planePartition[0][j]=Math.max(planePartition[0][j-1]-Math.floor(4*Math.random()),0);for(let i=1;i<sideLength;i++){planePartition[i][0]=Math.max(planePartition[i-1][0]-Math.floor(4*Math.random()),0);for(let j=1;j<sideLength;j++)planePartition[i][j]=Math.max(Math.min(planePartition[i][j-1],planePartition[i-1][j])-Math.floor(4*Math.random()),0)}for(let i=0;i<sideLength;i++)planePartition[sideLength-1][i]=0,planePartition[i][sideLength-1]=0;return planePartition}generateRandomTableau(){var sideLength=Math.floor(3*Math.random())+5,tableau=new Array(sideLength);for(let i=0;i<sideLength;i++){tableau[i]=new Array(sideLength);for(let j=0;j<sideLength;j++)Math.random()<.75/sideLength?tableau[i][j]=Math.floor(3*Math.random())+1:tableau[i][j]=0}for(let i=0;i<sideLength;i++)tableau[i][sideLength-1]=0,tableau[sideLength-1][i]=0;return tableau}generateRandomSsyt(){var sideLength=Math.floor(3*Math.random())+2,ssyt=new Array(sideLength);for(let i=0;i<sideLength;i++)ssyt[i]=new Array(sideLength);ssyt[0][0]=Math.floor(2*Math.random());for(let j=1;j<sideLength;j++)ssyt[0][j]=ssyt[0][j-1]+Math.floor(2*Math.random());for(let i=1;i<sideLength;i++){ssyt[i][0]=ssyt[i-1][0]+1+Math.floor(2*Math.random());for(let j=1;j<sideLength;j++)ssyt[i][j]=Math.max(ssyt[i][j-1],ssyt[i-1][j]+1)+Math.floor(2*Math.random())}return ssyt}parseArray(data){var splitData=data.split("\n");let numRows=splitData.length;var splitRows=new Array(splitData.length);for(let i=0;i<splitRows.length;i++){splitRows[i]=splitData[i].split(" ");for(let j=0;j<splitRows[i].length;j++)""===splitRows[i][j]&&(splitRows[i].splice(j,1),j--)}let numCols=splitRows[0].length;if(-1===data.indexOf(">")){for(let i=0;i<splitRows.length;i++)splitRows[i].push("0");numCols++}-1===data.indexOf("v")&&(splitRows.push(["0"]),numRows++);var size=Math.max(numRows,numCols),array=new Array(size);for(let i=0;i<numRows;i++){array[i]=new Array(size);for(let j=0;j<splitRows[i].length;j++)"^"===splitRows[i][j]?array[i][j]=1/0:">"===splitRows[i][j]?array[i][j]=array[i][j-1]:"v"===splitRows[i][j]?array[i][j]=array[i-1][j]:array[i][j]=parseInt(splitRows[i][j]);for(let j=splitRows[i].length;j<size;j++)array[i][j]=0}for(let i=numRows;i<size;i++){array[i]=new Array(size);for(let j=0;j<size;j++)array[i][j]=0}return array}arrayToAscii(numbers){let numCharacters=1;for(let i=0;i<numbers.length;i++)for(let j=0;j<numbers.length;j++)numbers[i][j]!==1/0&&(numCharacters=Math.max(numCharacters,(""+numbers[i][j]).length));numCharacters++;let text="";for(let i=0;i<numbers.length-1;i++){for(let j=0;j<numbers.length-1;j++)if(numbers[i][j]===1/0){for(let k=0;k<numCharacters-1-(0===j);k++)text+=" ";text+="^"}else{var len=(""+numbers[i][j]).length;for(let k=0;k<numCharacters-len-(0===j);k++)text+=" ";text+=numbers[i][j]}if(0!==numbers[i][numbers.length-1]){for(let k=0;k<numCharacters-1;k++)text+=" ";text+=">"}i!==numbers.length-2&&(text+="\n")}if(0!==numbers[numbers.length-1][0]){text+="\n";for(let j=0;j<numbers.length-1;j++)if(0!==numbers[numbers.length-1][j]){for(let k=0;k<numCharacters-1-(0===j);k++)text+=" ";text+="v"}}return text}verifyPp(planePartition){for(let i=0;i<planePartition.length-1;i++)for(let j=0;j<planePartition[i].length-1;j++)if(planePartition[i][j]<planePartition[i+1][j]||planePartition[i][j]<planePartition[i][j+1])return!1;return!0}verifySsyt(ssyt){for(let i=0;i<ssyt.length-1;i++)for(let j=0;j<ssyt[i].length-1;j++)if(0!==ssyt[i+1][j]&&ssyt[i][j]>=ssyt[i+1][j]||0!==ssyt[i][j+1]&&ssyt[i][j]>ssyt[i][j+1])return!1;return!0}async addNewArray(index,numbers,keepNumbersCanvasVisible=!1,horizontalLegs=!0){if(!this.currentlyAnimating){var array={numbers:numbers,cubes:[],floor:[],leftWall:[],rightWall:[],cubeGroup:null,centerOffset:0,partialFootprintSum:0,footprint:0,height:0,size:0};this.in2dView&&!keepNumbersCanvasVisible&&await changeOpacity(this.wilsonNumbers.canvas,0,this.animationTime/5),this.arrays.splice(index,0,array),array.footprint=array.numbers.length;for(let i=index;i<this.arrays.length;i++)this.arrays[i].partialFootprintSum=this.arrays[i].footprint,0!==i?(this.arrays[i].centerOffset=this.arrays[i-1].centerOffset+this.arrays[i-1].footprint/2+this.arrays[i].footprint/2+1,this.arrays[i].partialFootprintSum+=this.arrays[i-1].partialFootprintSum+1):this.arrays[i].centerOffset=0,i!==index&&(this.in2dView?anime({targets:this.arrays[i].cubeGroup.position,x:this.arrays[i].centerOffset,y:0,z:0,duration:this.animationTime,easing:"easeInOutQuad"}):anime({targets:this.arrays[i].cubeGroup.position,x:this.arrays[i].centerOffset,y:0,z:-this.arrays[i].centerOffset,duration:this.animationTime,easing:"easeInOutQuad"}));array.cubeGroup=new THREE.Object3D,this.scene.add(array.cubeGroup),this.addWalls||(this.in2dView?array.cubeGroup.position.set(array.centerOffset,0,0):array.cubeGroup.position.set(array.centerOffset,0,-array.centerOffset)),array.cubeGroup.rotation.y=this.rotationY,array.cubes=new Array(array.footprint),array.floor=new Array(array.footprint);for(let i=0;i<array.footprint;i++){array.cubes[i]=new Array(array.footprint),array.floor[i]=new Array(array.footprint);for(let j=0;j<array.footprint;j++)if(array.numbers[i][j]!==1/0)if(array.cubes[i][j]=new Array(array.numbers[i][j]),array.numbers[i][j]>array.height&&(array.height=array.numbers[i][j]),array.floor[i][j]=this.addFloor(array,j,i),horizontalLegs){var legHeight=Math.max(array.numbers[i][array.footprint-1],array.numbers[array.footprint-1][j]);for(let k=0;k<legHeight;k++)array.cubes[i][j][k]=this.addCube(array,j,k,i,0,0,this.asymptoteLightness);for(let k=legHeight;k<array.numbers[i][j];k++)array.cubes[i][j][k]=this.addCube(array,j,k,i)}else for(let k=0;k<array.numbers[i][j];k++)array.cubes[i][j][k]=this.addCube(array,j,k,i);else{array.cubes[i][j]=new Array(this.infiniteHeight),array.floor[i][j]=this.addFloor(array,j,i);for(let k=0;k<this.infiniteHeight;k++)array.cubes[i][j][k]=this.addCube(array,j,k,i,0,0,this.asymptoteLightness)}}if(this.addWalls){array.leftWall=new Array(this.wallSize),array.rightWall=new Array(this.wallSize);for(let i=0;i<this.wallSize;i++)array.leftWall[i]=new Array(2*this.wallSize),array.rightWall[i]=new Array(2*this.wallSize);for(let i=0;i<this.wallSize;i++)for(let j=0;j<2*this.wallSize;j++)array.leftWall[i][j]=this.addLeftWall(array,j,i),array.rightWall[i][j]=this.addRightWall(array,i,j)}array.size=Math.max(array.footprint,array.height),this.totalArrayFootprint+=array.footprint+1,this.totalArrayHeight=Math.max(this.totalArrayHeight,array.height),this.totalArraySize=Math.max(this.totalArrayFootprint,this.totalArrayHeight),1!==this.arrays.length||keepNumbersCanvasVisible?this.addWalls||keepNumbersCanvasVisible||this.updateCameraHeight(!0):(this.hexViewCameraPos=[this.totalArraySize,this.totalArraySize+this.totalArrayHeight/3,this.totalArraySize],this._2dViewCameraPos=[0,this.totalArraySize+10,0],this.in2dView&&!keepNumbersCanvasVisible?this.updateCameraHeight(!0):(this.orthographicCamera.left=-this.totalArraySize,this.orthographicCamera.right=this.totalArraySize,this.orthographicCamera.top=this.totalArraySize,this.orthographicCamera.bottom=-this.totalArraySize,this.orthographicCamera.position.set(this.hexViewCameraPos[0],this.hexViewCameraPos[1],this.hexViewCameraPos[2]),this.orthographicCamera.rotation.set(-.785398163,.615479709,.523598775),this.orthographicCamera.updateProjectionMatrix())),index!==this.arrays.length-1&&await new Promise(resolve=>setTimeout(resolve,this.animationTime));const thingsToAnimate=[];return array.cubeGroup.traverse(node=>{node.material&&node.material.forEach(material=>thingsToAnimate.push(material))}),await anime({targets:thingsToAnimate,opacity:1,duration:this.animationTime/2,easing:"easeOutQuad"}).finished,this.in2dView&&!keepNumbersCanvasVisible&&this.drawAll2dViewText(),array}}async editArray(index,numbers){this.currentlyAnimating||(index>=this.arrays.length||index<0?this.displayError("No array at index "+index):(await this.removeArray(index),await this.addNewArray(index,numbers),this.in2dView||this.updateCameraHeight()))}async trimArray(index){if(!this.currentlyAnimating)if(index>=this.arrays.length||index<0)this.displayError("No array at index "+index);else{var numbers=this.arrays[index].numbers;let minSize=0;for(let i=0;i<numbers.length;i++)for(let j=0;j<numbers.length;j++)0!==numbers[i][j]&&(minSize=Math.max(minSize,Math.max(i+1,j+1)));var newNumbers=new Array(minSize);for(let i=0;i<minSize;i++){newNumbers[i]=new Array(minSize);for(let j=0;j<minSize;j++)newNumbers[i][j]=numbers[i][j]}await this.removeArray(index),await this.addNewArray(index,newNumbers),this.in2dView||this.updateCameraHeight()}}async removeArray(index,keepNumbersCanvasVisible=!1){if(!this.currentlyAnimating)if(index>=this.arrays.length||index<0)this.displayError("No array at index "+index);else{this.in2dView&&!keepNumbersCanvasVisible&&await changeOpacity(this.wilsonNumbers.canvas,0,this.animationTime/5);const thingsToAnimate=[];this.arrays[index].cubeGroup.traverse(node=>{node.material&&node.material.forEach(material=>thingsToAnimate.push(material))}),await anime({targets:thingsToAnimate,opacity:0,duration:this.animationTime/2,easing:"easeOutQuad"}).finished;for(let i=0;i<this.arrays[index].cubes.length;i++)for(let j=0;j<this.arrays[index].cubes[i].length;j++)if(this.arrays[index].cubes[i][j])for(let k=0;k<this.arrays[index].cubes[i][j].length;k++)this.arrays[index].cubes[i][j][k]&&this.arrays[index].cubes[i][j][k].material.forEach(material=>material.dispose());this.scene.remove(this.arrays[index].cubeGroup),this.totalArrayFootprint-=this.arrays[index].footprint+1,this.arrays.splice(index,1);for(let i=index;i<this.arrays.length;i++)this.arrays[i].partialFootprintSum=this.arrays[i].footprint,0!==i?(this.arrays[i].centerOffset=this.arrays[i-1].centerOffset+this.arrays[i-1].footprint/2+this.arrays[i].footprint/2+1,this.arrays[i].partialFootprintSum+=this.arrays[i-1].partialFootprintSum+1):this.arrays[i].centerOffset=0,this.in2dView?anime({targets:this.arrays[i].cubeGroup.position,x:this.arrays[i].centerOffset,y:0,z:0,duration:this.animationTime,easing:"easeInOutQuad"}):anime({targets:this.arrays[i].cubeGroup.position,x:this.arrays[i].centerOffset,y:0,z:-this.arrays[i].centerOffset,duration:this.animationTime,easing:"easeInOutQuad"});0===this.arrays.length||keepNumbersCanvasVisible||this.updateCameraHeight(!0)}}addCube(array,x,y,z,h=0,s=0,v=this.cubeLightness){var materials=[new THREE.MeshStandardMaterial({map:this.cubeTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.cubeTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.cubeTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.cubeTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.cubeTexture2,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.cubeTexture2,transparent:!0,opacity:0})],materials=(materials.forEach(material=>material.color.setHSL(h,s,v)),new THREE.Mesh(this.cubeGeometry,materials));return array.cubeGroup.add(materials),this.addWalls?materials.position.set(x,y,z):materials.position.set(x-(array.footprint-1)/2,y,z-(array.footprint-1)/2),materials}addFloor(array,x,z,h=0,s=0,v=this.floorLightness){var materials=[new THREE.MeshStandardMaterial({map:this.floorTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture2,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture2,transparent:!0,opacity:0})],materials=(materials.forEach(material=>material.color.setHSL(h,s,v)),new THREE.Mesh(this.floorGeometry,materials));return array.cubeGroup.add(materials),this.addWalls?materials.position.set(x,-.5005,z):materials.position.set(x-(array.footprint-1)/2,-.5005,z-(array.footprint-1)/2),materials}addLeftWall(array,y,z,h=0,s=0,v=this.floorLightness){var materials=[new THREE.MeshStandardMaterial({map:this.floorTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture2,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture2,transparent:!0,opacity:0})],materials=(materials.forEach(material=>material.color.setHSL(h,s,v)),new THREE.Mesh(this.wallLeftGeometry,materials));return array.cubeGroup.add(materials),this.addWalls?materials.position.set(-.5005,y-this.wallSize,z):materials.position.set(-.5005-(array.footprint-1)/2,y,z-(array.footprint-1)/2),materials}addRightWall(array,x,y,h=0,s=0,v=this.floorLightness){var materials=[new THREE.MeshStandardMaterial({map:this.floorTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture2,transparent:!0,opacity:0}),new THREE.MeshStandardMaterial({map:this.floorTexture2,transparent:!0,opacity:0})],materials=(materials.forEach(material=>material.color.setHSL(h,s,v)),new THREE.Mesh(this.wallRightGeometry,materials));return array.cubeGroup.add(materials),this.addWalls?materials.position.set(x,y-this.wallSize,-.5005):materials.position.set(x-(array.footprint-1)/2,y,-.5005-(array.footprint-1)/2),materials}async showHexView(){this.currentlyAnimatingCamera||(this.currentlyAnimatingCamera=!0,this.in2dView&&await changeOpacity(this.wilsonNumbers.canvas,0,this.animationTime/5),this.in2dView=!1,this.inExactHexView=!0,this.rotationYVelocity=0,this.lastRotationYVelocities=[0,0,0,0],this.updateCameraHeight(!0),await Promise.all([anime({targets:this.orthographicCamera.rotation,x:-.785398163,y:.615479709,z:.523598775,duration:this.animationTime,easing:"easeInOutQuad"}).finished].concat(this.arrays.map(array=>anime({targets:array.cubeGroup.rotation,y:0,duration:this.animationTime,easing:"easeInOutQuad"}).finished),this.arrays.map(array=>anime({targets:array.cubeGroup.position,x:array.centerOffset,y:0,z:-array.centerOffset,duration:this.animationTime,easing:"easeInOutQuad"}).finished))),this.currentlyAnimatingCamera=!1,this.rotationY=0)}async show2dView(){this.currentlyAnimatingCamera||this.in2dView||(this.dimersShown&&await this.hideDimers(),this.currentlyAnimatingCamera=!0,this.in2dView=!0,this.inExactHexView=!1,this.rotationYVelocity=0,this.lastRotationYVelocities=[0,0,0,0],this.updateCameraHeight(!0),await Promise.all([anime({targets:this.orthographicCamera.rotation,x:-1.570796327,y:0,z:0,duration:this.animationTime,easing:"easeInOutQuad"}).finished].concat(this.arrays.map(array=>anime({targets:array.cubeGroup.rotation,y:0,duration:this.animationTime,easing:"easeInOutQuad"}).finished),this.arrays.map(array=>anime({targets:array.cubeGroup.position,x:array.centerOffset,y:0,z:0,duration:this.animationTime,easing:"easeInOutQuad"}).finished))),this.drawAll2dViewText(),await changeOpacity(this.wilsonNumbers.canvas,1,this.animationTime/5),this.currentlyAnimatingCamera=!1,this.rotationY=0)}async updateCameraHeight(force=!1){if(!force){if(this.currentlyAnimatingCamera)return;this.currentlyAnimatingCamera=!0}for(let i=this.totalArrayHeight=0;i<this.arrays.length;i++)this.totalArrayHeight=Math.max(this.totalArrayHeight,this.arrays[i].height);this.totalArraySize=Math.max(this.totalArrayFootprint,this.totalArrayHeight);force=(-this.arrays[0].footprint/2+this.arrays[this.arrays.length-1].centerOffset+this.arrays[this.arrays.length-1].footprint/2)/2;this.hexViewCameraPos=[this.totalArraySize+force,this.totalArraySize+this.totalArrayHeight/3,this.totalArraySize-force],this.addWalls&&(this.hexViewCameraPos[0]+=10,this.hexViewCameraPos[1]+=10,this.hexViewCameraPos[2]+=10),this._2dViewCameraPos=[force,this.totalArraySize+10,0],this.in2dView?(await Promise.all([anime({targets:this.orthographicCamera.position,x:this._2dViewCameraPos[0],y:this._2dViewCameraPos[1],z:this._2dViewCameraPos[2],duration:this.animationTime,easing:"easeInOutQuad"}).finished,anime({targets:this.orthographicCamera,left:-(this.totalArrayFootprint/2+.5),right:this.totalArrayFootprint/2+.5,top:this.totalArrayFootprint/2+.5,bottom:-(this.totalArrayFootprint/2+.5),duration:this.animationTime,easing:"easeInOutQuad",update:()=>this.orthographicCamera.updateProjectionMatrix()}).finished]),this.orthographicCamera.updateProjectionMatrix(),this.currentlyAnimatingCamera=!1,this.drawAll2dViewText(),changeOpacity(this.wilsonNumbers.canvas,1,this.animationTime/5)):(await Promise.all([anime({targets:this.orthographicCamera.position,x:this.hexViewCameraPos[0],y:this.hexViewCameraPos[1],z:this.hexViewCameraPos[2],duration:this.animationTime,easing:"easeInOutQuad"}).finished,anime({targets:this.orthographicCamera,left:-this.totalArraySize,right:this.totalArraySize,top:this.totalArraySize,bottom:-this.totalArraySize,duration:this.animationTime,easing:"easeInOutQuad",update:()=>this.orthographicCamera.updateProjectionMatrix()}).finished]),this.orthographicCamera.updateProjectionMatrix(),this.currentlyAnimatingCamera=!1)}async showDimers(){if(!this.currentlyAnimatingCamera){this.dimersShown=!0,this.inExactHexView||await this.showHexView(),this.currentlyAnimatingCamera=!0;const targets=[];this.arrays.forEach(array=>{for(let i=0;i<array.footprint;i++)for(let j=0;j<array.footprint;j++){for(let k=0;k<array.cubes[i][j].length;k++)k<array.cubes[i][j].length-1&&targets.push(array.cubes[i][j][k].material[2]),i<array.footprint-1&&array.cubes[i+1][j].length>=k+1&&targets.push(array.cubes[i][j][k].material[4]),j<array.footprint-1&&array.cubes[i][j+1].length>=k+1&&targets.push(array.cubes[i][j][k].material[0]),targets.push(array.cubes[i][j][k].material[1]),targets.push(array.cubes[i][j][k].material[3]),targets.push(array.cubes[i][j][k].material[5]);0!==array.cubes[i][j].length&&targets.push(array.floor[i][j].material[2])}if(this.addWalls)for(let i=0;i<this.wallSize;i++)for(let j=0;j<2*this.wallSize;j++)targets.push(array.rightWall[i][j].material[0]),targets.push(array.leftWall[i][j].material[4])}),targets.forEach(material=>material.opacity=0),await anime({targets:[this.wilsonHidden.ctx,this.wilsonHidden2.ctx,this.wilsonHidden3.ctx,this.wilsonHidden4.ctx],strokeStyle:"rgba(255, 255, 255, 1)",_alpha:0,duration:this.animationTime/2,easing:"easeOutQuad",update:()=>{this.wilsonHidden.ctx.clearRect(0,0,64,64),this.wilsonHidden.ctx.fillStyle=`rgba(64, 64, 64, ${this.wilsonHidden.ctx._alpha})`,this.wilsonHidden.ctx.fillRect(0,0,64,64),this.wilsonHidden.ctx.fillStyle=`rgba(128, 128, 128, ${this.wilsonHidden.ctx._alpha})`,this.wilsonHidden.ctx.fillRect(4,4,56,56),this.wilsonHidden.ctx.moveTo(42.7,21.3),this.wilsonHidden.ctx.lineTo(21.3,42.7),this.wilsonHidden.ctx.stroke(),this.cubeTexture.needsUpdate=!0,this.wilsonHidden2.ctx.clearRect(0,0,64,64),this.wilsonHidden2.ctx.fillStyle=`rgba(64, 64, 64, ${this.wilsonHidden2.ctx._alpha})`,this.wilsonHidden2.ctx.fillRect(0,0,64,64),this.wilsonHidden2.ctx.fillStyle=`rgba(128, 128, 128, ${this.wilsonHidden2.ctx._alpha})`,this.wilsonHidden2.ctx.fillRect(4,4,56,56),this.wilsonHidden2.ctx.moveTo(21.3,21.3),this.wilsonHidden2.ctx.lineTo(42.7,42.7),this.wilsonHidden2.ctx.stroke(),this.cubeTexture2.needsUpdate=!0,this.wilsonHidden3.ctx.clearRect(0,0,64,64),this.wilsonHidden3.ctx.fillStyle=`rgba(32, 32, 32, ${this.addWalls?0:this.wilsonHidden3.ctx._alpha})`,this.wilsonHidden3.ctx.fillRect(0,0,64,64),this.wilsonHidden3.ctx.fillStyle=`rgba(64, 64, 64, ${this.addWalls?0:this.wilsonHidden3.ctx._alpha})`,this.wilsonHidden3.ctx.fillRect(4,4,56,56),this.wilsonHidden3.ctx.moveTo(42.7,21.3),this.wilsonHidden3.ctx.lineTo(21.3,42.7),this.wilsonHidden3.ctx.stroke(),this.floorTexture.needsUpdate=!0,this.wilsonHidden4.ctx.clearRect(0,0,64,64),this.wilsonHidden4.ctx.fillStyle=`rgba(32, 32, 32, ${this.addWalls?0:this.wilsonHidden4.ctx._alpha})`,this.wilsonHidden4.ctx.fillRect(0,0,64,64),this.wilsonHidden4.ctx.fillStyle=`rgba(64, 64, 64, ${this.addWalls?0:this.wilsonHidden4.ctx._alpha})`,this.wilsonHidden4.ctx.fillRect(4,4,56,56),this.wilsonHidden4.ctx.moveTo(21.3,21.3),this.wilsonHidden4.ctx.lineTo(42.7,42.7),this.wilsonHidden4.ctx.stroke(),this.floorTexture2.needsUpdate=!0}}).finished,this.currentlyAnimatingCamera=!1}}async hideDimers(){if(!this.currentlyAnimatingCamera){this.dimersShown=!1;const targets=[];this.arrays.forEach(array=>{for(let i=0;i<array.footprint;i++)for(let j=0;j<array.footprint;j++){for(let k=0;k<array.cubes[i][j].length;k++)k<array.cubes[i][j].length-1&&targets.push(array.cubes[i][j][k].material[2]),i<array.footprint-1&&array.cubes[i+1][j].length>=k+1&&targets.push(array.cubes[i][j][k].material[4]),j<array.footprint-1&&array.cubes[i][j+1].length>=k+1&&targets.push(array.cubes[i][j][k].material[0]),targets.push(array.cubes[i][j][k].material[1]),targets.push(array.cubes[i][j][k].material[3]),targets.push(array.cubes[i][j][k].material[5]);0!==array.cubes[i][j].length&&targets.push(array.floor[i][j].material[2])}if(this.addWalls)for(let i=0;i<this.wallSize;i++)for(let j=0;j<2*this.wallSize;j++)targets.push(array.leftWall[i][j].material[0]),targets.push(array.rightWall[i][j].material[4])}),await anime({targets:[this.wilsonHidden.ctx,this.wilsonHidden2.ctx,this.wilsonHidden3.ctx,this.wilsonHidden4.ctx],strokeStyle:"rgba(255, 255, 255, 0)",_alpha:1,duration:this.animationTime/2,easing:"easeOutQuad",update:()=>{this.wilsonHidden.ctx.clearRect(0,0,64,64),this.wilsonHidden.ctx.fillStyle=`rgba(64, 64, 64, ${this.wilsonHidden.ctx._alpha})`,this.wilsonHidden.ctx.fillRect(0,0,64,64),this.wilsonHidden.ctx.fillStyle=`rgba(128, 128, 128, ${this.wilsonHidden.ctx._alpha})`,this.wilsonHidden.ctx.fillRect(4,4,56,56),this.wilsonHidden.ctx.moveTo(42.7,21.3),this.wilsonHidden.ctx.lineTo(21.3,42.7),this.wilsonHidden.ctx.stroke(),this.cubeTexture.needsUpdate=!0,this.wilsonHidden2.ctx.clearRect(0,0,64,64),this.wilsonHidden2.ctx.fillStyle=`rgba(64, 64, 64, ${this.wilsonHidden2.ctx._alpha})`,this.wilsonHidden2.ctx.fillRect(0,0,64,64),this.wilsonHidden2.ctx.fillStyle=`rgba(128, 128, 128, ${this.wilsonHidden2.ctx._alpha})`,this.wilsonHidden2.ctx.fillRect(4,4,56,56),this.wilsonHidden2.ctx.moveTo(21.3,21.3),this.wilsonHidden2.ctx.lineTo(42.7,42.7),this.wilsonHidden2.ctx.stroke(),this.cubeTexture2.needsUpdate=!0,this.wilsonHidden3.ctx.clearRect(0,0,64,64),this.wilsonHidden3.ctx.fillStyle=`rgba(32, 32, 32, ${this.addWalls?0:this.wilsonHidden3.ctx._alpha})`,this.wilsonHidden3.ctx.fillRect(0,0,64,64),this.wilsonHidden3.ctx.fillStyle=`rgba(64, 64, 64, ${this.addWalls?0:this.wilsonHidden3.ctx._alpha})`,this.wilsonHidden3.ctx.fillRect(4,4,56,56),this.wilsonHidden3.ctx.moveTo(42.7,21.3),this.wilsonHidden3.ctx.lineTo(21.3,42.7),this.wilsonHidden3.ctx.stroke(),this.floorTexture.needsUpdate=!0,this.wilsonHidden4.ctx.clearRect(0,0,64,64),this.wilsonHidden4.ctx.fillStyle=`rgba(32, 32, 32, ${this.addWalls?0:this.wilsonHidden4.ctx._alpha})`,this.wilsonHidden4.ctx.fillRect(0,0,64,64),this.wilsonHidden4.ctx.fillStyle=`rgba(64, 64, 64, ${this.addWalls?0:this.wilsonHidden4.ctx._alpha})`,this.wilsonHidden4.ctx.fillRect(4,4,56,56),this.wilsonHidden4.ctx.moveTo(21.3,21.3),this.wilsonHidden4.ctx.lineTo(42.7,42.7),this.wilsonHidden4.ctx.stroke(),this.floorTexture2.needsUpdate=!0}}).finished,targets.forEach(material=>material.opacity=1),this.currentlyAnimatingCamera=!1}}async showFloor(opacity=1){const targets=[];return this.arrays.forEach(array=>{array.floor.forEach(row=>{row.forEach(floor=>{floor.material.forEach(material=>targets.push(material))})})}),anime({targets:targets,opacity:opacity,duration:this.animationTime/2,easing:"easeOutQuad"}).finished}hideFloor(){return this.showFloor(0)}removeOutsideFloor(array){const targets=[];var removals=[];for(let i=0;i<array.footprint;i++)for(let j=array.footprint-1;0<=j&&0===array.numbers[i][j];j--)array.floor[i][j].material.forEach(material=>targets.push(material)),removals.push([i,j]);removals.forEach(coordinates=>{array.floor[coordinates[0]][coordinates[1]].material.forEach(material=>material.dispose()),array.cubeGroup.remove(array.floor[coordinates[0]][coordinates[1]]),array.floor[coordinates[0]][coordinates[1]]=null}),this.in2dView&&this.drawAll2dViewText()}recalculateHeights(array){array.height=0,array.numbers.forEach(row=>{row.forEach(entry=>{entry!==1/0&&(array.height=Math.max(entry,array.height))})}),array.size=Math.max(array.footprint,array.height),this.totalArrayHeight=0,this.arrays.forEach(array=>this.totalArrayHeight=Math.max(array.height,this.totalArrayHeight)),this.totalArraySize=Math.max(this.totalArrayFootprint,this.totalArrayHeight),this.totalArrayHeight!==this.oldTotalArrayHeight&&this.updateCameraHeight()}drawAll2dViewText(){this.fontSize=this.wilsonNumbers.canvasWidth/(this.totalArrayFootprint+1);var numCharacters=Math.max((""+this.totalArrayHeight).length,2);this.wilsonNumbers.ctx.font=this.fontSize/numCharacters+"px monospace",this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),this.arrays.forEach(array=>{for(let i=0;i<array.footprint;i++)for(let j=0;j<array.footprint;j++)null!==array.floor[i][j]&&this.drawSingleCell2dViewText(array,i,j)})}drawSingleCell2dViewText(array,row,col){var textMetrics,top=(this.totalArrayFootprint-array.footprint-1)/2,left=array.partialFootprintSum-array.footprint;this.wilsonNumbers.ctx.clearRect(this.fontSize*(col+left+1),this.fontSize*(row+top+1),this.fontSize,this.fontSize),array.numbers[row][col]===1/0||0===array.numbers[row][col]&&0===this.floorLightness||(textMetrics=this.wilsonNumbers.ctx.measureText(array.numbers[row][col]),this.wilsonNumbers.ctx.fillText(array.numbers[row][col],this.fontSize*(col+left+1)+(this.fontSize-textMetrics.width)/2,this.fontSize*(row+top+1)+(this.fontSize+textMetrics.actualBoundingBoxAscent-textMetrics.actualBoundingBoxDescent)/2))}async colorCubes(array,coordinates,hue){if(0!==coordinates.length){const targets=[];coordinates.forEach(xyz=>{array.cubes[xyz[0]][xyz[1]][xyz[2]].material.forEach(material=>targets.push(material.color))}),targets.forEach(color=>color.getRGB(color));var coordinates=this.cubeLightness+ +Math.min(this.cubeLightness,1-this.cubeLightness),s=0===coordinates?0:2*(1-this.cubeLightness/coordinates),hue=this.wilson.utils.hsvToRgb(hue,s,coordinates);await anime({targets:targets,r:hue[0]/255,g:hue[1]/255,b:hue[2]/255,duration:this.animationTime,delay:(element,index)=>Math.floor(index/6)*this.animationTime/10,easing:"easeOutQuad",update:()=>targets.forEach(color=>color.setRGB(color.r,color.g,color.b))}).finished}}async uncolorCubes(array,coordinates){const targets=[];coordinates.forEach(xyz=>{array.cubes[xyz[0]][xyz[1]][xyz[2]].material.forEach(material=>targets.push(material.color))}),targets.forEach(color=>color.getHSL(color)),await anime({targets:targets,s:0,duration:this.animationTime,easing:"easeOutQuad",update:()=>targets.forEach(color=>color.setHSL(color.h,color.s,this.cubeLightness))}).finished}async raiseCubes(array,coordinates,height){var duration=this.in2dView?0:this.animationTime;const targets=[];coordinates.forEach(xyz=>{targets.push(array.cubes[xyz[0]][xyz[1]][xyz[2]].position),array.numbers[xyz[0]][xyz[1]]===1/0&&console.error("Cannot raise cubes from an infinite height")}),await anime({targets:targets,y:height,duration:duration,easing:"easeInOutQuad"}).finished}async lowerCubes(array,coordinates){var duration=this.in2dView?0:this.animationTime;const targets=[];coordinates.forEach(xyz=>{targets.push(array.cubes[xyz[0]][xyz[1]][xyz[2]].position),array.numbers[xyz[0]][xyz[1]]===1/0&&console.error("Cannot lower cubes onto an infinite height")}),await anime({targets:targets,y:(element,index)=>array.numbers[coordinates[index][0]][coordinates[index][1]],duration:duration,easing:"easeInOutQuad"}).finished,coordinates.forEach(xyz=>{array.cubes[xyz[0]][xyz[1]][array.numbers[xyz[0]][xyz[1]]]=array.cubes[xyz[0]][xyz[1]][xyz[2]],array.cubes[xyz[0]][xyz[1]][xyz[2]]=null})}async moveCubes(sourceArray,sourceCoordinates,targetArray,targetCoordinates,updateCubeArray=!0){const targets=[];if(sourceCoordinates.forEach(xyz=>{targets.push(sourceArray.cubes[xyz[0]][xyz[1]][xyz[2]].position),targetArray.cubeGroup.attach(sourceArray.cubes[xyz[0]][xyz[1]][xyz[2]]),sourceArray.numbers[xyz[0]][xyz[1]]===1/0&&console.error("Cannot move cubes from an infinite height")}),await anime({targets:targets,x:(element,index)=>targetCoordinates[index][1]-(targetArray.footprint-1)/2,y:(element,index)=>targetCoordinates[index][2],z:(element,index)=>targetCoordinates[index][0]-(targetArray.footprint-1)/2,duration:this.animationTime,easing:"easeInOutQuad"}).finished,updateCubeArray){const sourceCubes=sourceCoordinates.map(xyz=>sourceArray.cubes[xyz[0]][xyz[1]][xyz[2]]);sourceCoordinates.forEach(xyz=>sourceArray.cubes[xyz[0]][xyz[1]][xyz[2]]=null),targetCoordinates.forEach((xyz,index)=>{targetArray.numbers[xyz[0]][xyz[1]]===1/0&&console.error("Cannot move cubes to an infinite height"),targetArray.cubes[xyz[0]][xyz[1]][xyz[2]]&&!sourceCoordinates.some(e=>e[0]===xyz[0]&&e[1]===xyz[1]&&e[2]===xyz[2])&&console.warn(`Moving a cube to a location that's already occupied: ${xyz}. This is probably not what you want to do.`),targetArray.cubes[xyz[0]][xyz[1]][xyz[2]]=sourceCubes[index]})}}async revealCubes(array,coordinates){if(0!==coordinates.length){const targets=[];coordinates.forEach(xyz=>{array.cubes[xyz[0]][xyz[1]][xyz[2]].material.forEach(material=>targets.push(material)),array.numbers[xyz[0]][xyz[1]]===1/0&&console.error("Cannot reveal cubes at an infinite height")}),await anime({targets:targets,opacity:1,duration:this.animationTime/2,delay:(element,index)=>Math.floor(index/6)*this.animationTime/10,easing:"easeOutQuad"}).finished}}async deleteCubes(array,coordinates,instant=!1,noAnimation=!1){const targets=[];coordinates.forEach(xyz=>{array.cubes[xyz[0]][xyz[1]][xyz[2]].material.forEach(material=>targets.push(material))}),await anime({targets:targets,opacity:0,duration:this.animationTime/2*!noAnimation,delay:(element,index)=>!instant*Math.floor(index/6)*this.animationTime/10,easing:"easeOutQuad"}).finished,targets.forEach(material=>material.dispose()),coordinates.forEach(xyz=>{array.cubeGroup.remove(array.cubes[xyz[0]][xyz[1]][xyz[2]]),array.cubes[xyz[0]][xyz[1]][xyz[2]]=null})}async deleteFloor(array,coordinates){const targets=[];coordinates.forEach(xyz=>{array.floor[xyz[0]][xyz[1]].material.forEach(material=>targets.push(material))}),await anime({targets:targets,opacity:0,duration:this.animationTime/2,easing:"easeOutQuad"}).finished,targets.forEach(material=>material.dispose()),coordinates.forEach(xyz=>{array.cubeGroup.remove(array.floor[xyz[0]][xyz[1]]),array.cubes[xyz[0]][xyz[1]]=null})}async runExample(index){if(1===index||2===index){for(;1<this.arrays.length;)await this.removeArray(1),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2));if(0===this.arrays.length){var planePartition=this.parseArray(this.generateRandomPlanePartition());await this.addNewArray(this.arrays.length,planePartition)}else if(!this.verifyPp(this.arrays[0].numbers)){await this.removeArray(0),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2));const planePartition=this.parseArray(this.generateRandomPlanePartition());await this.addNewArray(this.arrays.length,planePartition)}1===index?(await this.runAlgorithm("hillmanGrassl",0),await new Promise(resolve=>setTimeout(resolve,3*this.animationTime)),await this.runAlgorithm("hillmanGrasslInverse",0)):(await this.runAlgorithm("pak",0),await new Promise(resolve=>setTimeout(resolve,3*this.animationTime)),await this.showHexView(),await new Promise(resolve=>setTimeout(resolve,this.animationTime)),await this.runAlgorithm("sulzgruberInverse",0))}else if(3===index){for(;0<this.arrays.length;)await this.removeArray(0),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2));await this.addNewArray(this.arrays.length,this.generateRandomTableau()),await this.show2dView(),await new Promise(resolve=>setTimeout(resolve,this.animationTime)),await this.runAlgorithm("rskInverse",0),await new Promise(resolve=>setTimeout(resolve,3*this.animationTime)),await this.runAlgorithm("rsk",0)}}async runAlgorithm(name,index,subAlgorithm=!1){if(subAlgorithm||!this.currentlyRunningAlgorithm){this.currentlyRunningAlgorithm=!0;var data=this.algorithmData[name],numArrays=data.inputType.length;if(index>this.arrays.length-1||index<0)console.log(`No array at index ${index}!`),this.currentlyRunningAlgorithm=!1;else if(1<numArrays&&index>this.arrays.length-numArrays)console.log(`No array at index ${index+numArrays-1}! (This algorithm needs ${numArrays} arrays)`),this.currentlyRunningAlgorithm=!1;else{for(let i=0;i<numArrays;i++){var type=data.inputType[i];if("pp"===type&&!this.verifyPp(this.arrays[index+i].numbers))return console.log(`Array at index ${index+i} is not a plane partition!`),void(this.currentlyRunningAlgorithm=!1);if("ssyt"===type&&!this.verifySsyt(this.arrays[index+i].numbers))return console.log(`Array at index ${index+i} is not an SSYT!`),void(this.currentlyRunningAlgorithm=!1)}if(1<numArrays&&void 0!==data.sameShape&&data.sameShape){var rowLengths=new Array(numArrays);let maxNumRows=0;for(let i=0;i<numArrays;i++)maxNumRows=Math.max(maxNumRows,this.arrays[index+i].numbers.length);for(let i=0;i<numArrays;i++){rowLengths[i]=new Array(maxNumRows);for(let j=0;j<maxNumRows;j++)rowLengths[i][j]=0;for(let j=0;j<this.arrays[index+i].numbers.length;j++){let k=0;for(;k<this.arrays[index+i].numbers[j].length&&0!==this.arrays[index+i].numbers[j][k];)k++;rowLengths[i][j]=k}}for(let i=1;i<numArrays;i++)for(let j=0;j<maxNumRows;j++)if(rowLengths[i][j]!==rowLengths[0][j])return this.displayError("Arrays are not the same shape!"),void(this.currentlyRunningAlgorithm=!1)}for(let i=0;i<numArrays;i++){var coordinates=[],numbers=this.arrays[index+i].numbers;for(let j=0;j<numbers.length;j++)for(let k=0;k<numbers.length;k++)if(numbers[j][k]!==1/0)for(let l=0;l<numbers[j][k];l++)coordinates.push([j,k,l]);this.uncolorCubes(this.arrays[index+i],coordinates)}await data.method.bind(this)(index),this.subAlgorithm||(this.currentlyRunningAlgorithm=!1)}}}async hillmanGrassl(index){var array=this.arrays[index],planePartition=structuredClone(array.numbers),columnStarts=new Array(planePartition.length);for(let i=0;i<planePartition.length;i++){let j=0;for(;j<planePartition.length&&planePartition[j][i]===1/0;)j++;columnStarts[i]=j}var rowStarts=new Array(planePartition.length);for(let i=0;i<planePartition.length;i++){let j=0;for(;j<planePartition.length&&planePartition[i][j]===1/0;)j++;rowStarts[i]=j}for(var zigzagPaths=[];;){let startingCol=planePartition[0].length-1;for(;0<=startingCol&&columnStarts[startingCol]<planePartition.length&&0===planePartition[columnStarts[startingCol]][startingCol];)startingCol--;if(startingCol<0||columnStarts[startingCol]===planePartition.length)break;let currentRow=columnStarts[startingCol],currentCol=startingCol;for(var path=[[currentRow,currentCol,planePartition[currentRow][currentCol]-1]];;){if(currentRow<planePartition.length-1&&planePartition[currentRow+1][currentCol]===planePartition[currentRow][currentCol])currentRow++;else{if(!(0<currentCol&&planePartition[currentRow][currentCol-1]!==1/0))break;currentCol--}path.push([currentRow,currentCol,planePartition[currentRow][currentCol]-1])}for(let i=0;i<path.length;i++)planePartition[path[i][0]][path[i][1]]--;zigzagPaths.push(path)}var emptyArray=new Array(planePartition.length);for(let i=0;i<planePartition.length;i++){emptyArray[i]=new Array(planePartition.length);for(let j=0;j<planePartition.length;j++)emptyArray[i][j]=planePartition[i][j]===1/0?1/0:0}var outputArray=await this.addNewArray(index+1,emptyArray);await new Promise(resolve=>setTimeout(resolve,this.animationTime));for(let i=0;i<zigzagPaths.length;i++){var hue=i/zigzagPaths.length*6/7;await this.colorCubes(array,zigzagPaths[i],hue),await this.raiseCubes(array,zigzagPaths[i],array.height);for(let j=0;j<zigzagPaths[i].length;j++)array.numbers[zigzagPaths[i][j][0]][zigzagPaths[i][j][1]]--,this.in2dView&&this.drawSingleCell2dViewText(array,zigzagPaths[i][j][0],zigzagPaths[i][j][1]);this.recalculateHeights(array),await new Promise(resolve=>setTimeout(resolve,this.animationTime/5));var pivot=[zigzagPaths[i][zigzagPaths[i].length-1][0],zigzagPaths[i][0][1]];let targetCoordinates=[];var targetHeight=outputArray.height+1;for(let j=columnStarts[pivot[1]];j<=pivot[0];j++)targetCoordinates.push([j,pivot[1],targetHeight]);hue=targetCoordinates[targetCoordinates.length-1];for(let j=pivot[1]-1;j>=rowStarts[pivot[0]];j--)targetCoordinates.push([pivot[0],j,targetHeight]);await this.moveCubes(array,zigzagPaths[i],outputArray,targetCoordinates),targetCoordinates=[];for(let j=pivot[0]-1;j>=columnStarts[pivot[1]];j--)targetCoordinates.push([j,pivot[1],targetHeight]);this.deleteCubes(outputArray,targetCoordinates),targetCoordinates=[];for(let j=pivot[1]-1;j>=rowStarts[pivot[0]];j--)targetCoordinates.push([pivot[0],j,targetHeight]);this.deleteCubes(outputArray,targetCoordinates),await this.lowerCubes(outputArray,[hue]),outputArray.numbers[hue[0]][hue[1]]++,this.recalculateHeights(outputArray),this.in2dView&&this.drawSingleCell2dViewText(outputArray,hue[0],hue[1]),outputArray.height=Math.max(outputArray.height,outputArray.numbers[hue[0]][hue[1]]),outputArray.size=Math.max(outputArray.size,outputArray.height),await new Promise(resolve=>setTimeout(resolve,this.animationTime))}await this.removeArray(index)}async hillmanGrasslInverse(index){var array=this.arrays[index],tableau=structuredClone(array.numbers),zigzagPaths=[],columnStarts=new Array(tableau.length);for(let i=0;i<tableau.length;i++){let j=0;for(;j<tableau.length&&tableau[j][i]===1/0;)j++;columnStarts[i]=j}var rowStarts=new Array(tableau.length);for(let i=0;i<tableau.length;i++){let j=0;for(;j<tableau.length&&tableau[i][j]===1/0;)j++;rowStarts[i]=j}var emptyArray=new Array(tableau.length);for(let i=0;i<tableau.length;i++){emptyArray[i]=new Array(tableau.length);for(let j=0;j<tableau.length;j++)emptyArray[i][j]=tableau[i][j]===1/0?1/0:0}var planePartition=structuredClone(emptyArray);const outputArray=await this.addNewArray(index+1,emptyArray);for(let j=0;j<tableau.length;j++)for(let i=tableau.length-1;i>=columnStarts[j];i--)for(;0!==tableau[i][j];){var path=[];let currentRow=i,currentCol=rowStarts[i];for(;0<=currentRow;){let k=currentCol;if(0!==currentRow)for(;planePartition[currentRow][k]!==planePartition[currentRow-1][k]&&k<j;)k++;else k=j;for(let l=currentCol;l<=k;l++)path.push([currentRow,l,planePartition[currentRow][l]]);if(!(currentRow-1>=columnStarts[k]))break;currentRow--,currentCol=k}for(let k=0;k<path.length;k++)planePartition[path[k][0]][path[k][1]]++;zigzagPaths.push([path,[i,j,tableau[i][j]-1]]),tableau[i][j]--}await new Promise(resolve=>setTimeout(resolve,this.animationTime/2));for(let i=0;i<zigzagPaths.length;i++){const hue=i/zigzagPaths.length*6/7;await this.colorCubes(array,[zigzagPaths[i][1]],hue);var row=zigzagPaths[i][1][0],col=zigzagPaths[i][1][1],height=array.size;for(let j=columnStarts[col];j<row;j++)array.cubes[j][col][height]=this.addCube(array,col,height,j),array.cubes[j][col][height].material.forEach(material=>material.color.setHSL(hue,1,this.cubeLightness));for(let j=rowStarts[row];j<col;j++)array.cubes[row][j][height]=this.addCube(array,j,height,row),array.cubes[row][j][height].material.forEach(material=>material.color.setHSL(hue,1,this.cubeLightness));await this.raiseCubes(array,[zigzagPaths[i][1]],height);let coordinates=[];for(let j=row-1;j>=columnStarts[col];j--)coordinates.push([j,col,height]);var promise1=this.revealCubes(array,coordinates);coordinates=[];for(let j=col-1;j>=rowStarts[row];j--)coordinates.push([row,j,height]);var promise2=this.revealCubes(array,coordinates);await Promise.all([promise1,promise2]),coordinates=[];for(let j=rowStarts[row];j<col;j++)coordinates.push([row,j,height]);coordinates.push([row,col,array.numbers[row][col]-1]);for(let j=row-1;j>=columnStarts[col];j--)coordinates.push([j,col,height]);promise1=zigzagPaths[i][0];const targetHeight=outputArray.height+1;promise1.forEach(entry=>entry[2]=targetHeight),array.numbers[row][col]--,this.recalculateHeights(array),this.in2dView&&this.drawSingleCell2dViewText(array,row,col),await this.moveCubes(array,coordinates,outputArray,promise1),await this.lowerCubes(outputArray,promise1),promise1.forEach(entry=>{outputArray.numbers[entry[0]][entry[1]]++}),this.recalculateHeights(outputArray),this.in2dView&&promise1.forEach(entry=>this.drawSingleCell2dViewText(outputArray,entry[0],entry[1])),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2))}await this.removeArray(index)}async pak(index){const array=this.arrays[index],planePartition=array.numbers;this.in2dView||await this.show2dView();let rightLegSize=0,bottomLegSize=0;for(;rightLegSize<array.footprint&&0!==array.numbers[rightLegSize][array.footprint-1];)rightLegSize++;for(;bottomLegSize<array.footprint&&0!==array.numbers[array.footprint-1][bottomLegSize];)bottomLegSize++;rightLegSize=0;let numCorners=bottomLegSize=0;for(let row=array.footprint-1-bottomLegSize;0<=row;row--)for(let col=array.footprint-1-rightLegSize;0<=col;col--)planePartition[row][col]!==1/0&&numCorners++;let hueIndex=0;for(let row=0;row<array.footprint-bottomLegSize;row++)for(let col=0;col<array.footprint-rightLegSize;col++)if(planePartition[row][col]!==1/0){var diagonalCoordinates=[];let i=0;for(;row+i<array.footprint&&col+i<array.footprint;)diagonalCoordinates.push([row+i,col+i,planePartition[row+i][col+i]-1]),i++;i=diagonalCoordinates[0][0];let j=diagonalCoordinates[0][1],coordinatesToColor=[];for(let k=planePartition[i][j]-2;0<=k;k--)coordinatesToColor.push([i,j,k]);this.colorCubes(array,coordinatesToColor,hueIndex/numCorners*6/7),coordinatesToColor=[],diagonalCoordinates.forEach(coordinate=>{0<=coordinate[2]&&coordinatesToColor.push(coordinate)}),await this.colorCubes(array,coordinatesToColor,hueIndex/numCorners*6/7);const newDiagonalHeight=new Array(diagonalCoordinates.length);diagonalCoordinates.forEach((coordinate,index)=>{var i=coordinate[0],coordinate=coordinate[1];let neighbor1=0,neighbor2=0;i<array.footprint-1&&(neighbor1=planePartition[i+1][coordinate]),coordinate<array.footprint-1&&(neighbor2=planePartition[i][coordinate+1]),newDiagonalHeight[index]=Math.max(neighbor1,neighbor2),0<index?(neighbor1=planePartition[i-1][coordinate],neighbor2=planePartition[i][coordinate-1],newDiagonalHeight[index]+=Math.min(neighbor1,neighbor2)-planePartition[i][coordinate]):newDiagonalHeight[index]=planePartition[i][coordinate]-newDiagonalHeight[index]});for(let index=0;index<diagonalCoordinates.length;index++){if(i=diagonalCoordinates[index][0],j=diagonalCoordinates[index][1],newDiagonalHeight[index]>planePartition[i][j]){var coordinatesToReveal=[];for(let k=planePartition[i][j];k<newDiagonalHeight[index];k++)array.cubes[i][j][k]=this.addCube(array,j,k,i),coordinatesToReveal.push([i,j,k]);this.in2dView?this.revealCubes(array,coordinatesToReveal):await this.revealCubes(array,coordinatesToReveal)}else if(newDiagonalHeight[index]<planePartition[i][j]){var coordinatesToDelete=[];for(let k=planePartition[i][j]-1;k>=newDiagonalHeight[index];k--)coordinatesToDelete.push([i,j,k]);this.in2dView?this.deleteCubes(array,coordinatesToDelete):await this.deleteCubes(array,coordinatesToDelete)}planePartition[i][j]=newDiagonalHeight[index],this.in2dView&&this.drawSingleCell2dViewText(array,i,j)}const coordinatesToUncolor=[];coordinatesToColor.forEach((coordinate,index)=>{0!==index&&coordinate[2]<planePartition[coordinate[0]][coordinate[1]]&&coordinatesToUncolor.push(coordinate)}),this.in2dView?this.uncolorCubes(array,coordinatesToUncolor):await this.uncolorCubes(array,coordinatesToUncolor),hueIndex++,this.recalculateHeights(array),0!==coordinatesToColor.length&&await new Promise(resolve=>setTimeout(resolve,this.animationTime))}this.updateCameraHeight(!0)}async pakInverse(index,rightLegSize=0,bottomLegSize=0){const array=this.arrays[index],tableau=array.numbers;this.in2dView||await this.show2dView();let numCorners=0;for(let row=array.footprint-1-bottomLegSize;0<=row;row--)for(let col=array.footprint-1-rightLegSize;0<=col;col--)tableau[row][col]!==1/0&&numCorners++;let hueIndex=0;for(let row=array.footprint-1-bottomLegSize;0<=row;row--)for(let col=array.footprint-1-rightLegSize;0<=col;col--)if(tableau[row][col]!==1/0){var diagonalCoordinates=[];let i=0;for(;row+i<array.footprint&&col+i<array.footprint;)diagonalCoordinates.push([row+i,col+i,tableau[row+i][col+i]-1]),i++;i=diagonalCoordinates[0][0];let j=diagonalCoordinates[0][1];const newDiagonalHeight=new Array(diagonalCoordinates.length);let anyChange=!1;if(diagonalCoordinates.forEach((coordinate,index)=>{var i=coordinate[0],coordinate=coordinate[1];let neighbor1=0,neighbor2=0;i<array.footprint-1&&(neighbor1=tableau[i+1][coordinate]),coordinate<array.footprint-1&&(neighbor2=tableau[i][coordinate+1]),newDiagonalHeight[index]=Math.max(neighbor1,neighbor2),0<index?(neighbor1=tableau[i-1][coordinate],neighbor2=tableau[i][coordinate-1],newDiagonalHeight[index]+=Math.min(neighbor1,neighbor2)-tableau[i][coordinate]):newDiagonalHeight[index]+=tableau[i][coordinate],anyChange||newDiagonalHeight[index]===tableau[i][coordinate]||(anyChange=!0)}),0!==tableau[i][j]){var coordinatesToColor=[];for(let k=tableau[i][j]-1;0<=k;k--)coordinatesToColor.push([i,j,k]);this.colorCubes(array,coordinatesToColor,hueIndex/numCorners*6/7)}else if(0!==newDiagonalHeight[0])array.cubes[i][j][0]=this.addCube(array,j,0,i,hueIndex/numCorners*6/7,1,this.cubeLightness),tableau[i][j]=1,this.revealCubes(array,[[i,j,0]]);else if(!anyChange){hueIndex++;continue}await new Promise(resolve=>setTimeout(resolve,this.animationTime));for(let index=0;index<diagonalCoordinates.length;index++){if(i=diagonalCoordinates[index][0],j=diagonalCoordinates[index][1],newDiagonalHeight[index]>tableau[i][j]){var coordinatesToReveal=[];for(let k=tableau[i][j];k<newDiagonalHeight[index];k++)array.cubes[i][j][k]=this.addCube(array,j,k,i,hueIndex/numCorners*6/7,1,this.cubeLightness),coordinatesToReveal.push([i,j,k]);this.in2dView?this.revealCubes(array,coordinatesToReveal):await this.revealCubes(array,coordinatesToReveal)}else if(newDiagonalHeight[index]<tableau[i][j]){var coordinatesToDelete=[];for(let k=tableau[i][j]-1;k>=newDiagonalHeight[index];k--)coordinatesToDelete.push([i,j,k]);this.in2dView?this.deleteCubes(array,coordinatesToDelete):await this.deleteCubes(array,coordinatesToDelete)}tableau[i][j]=newDiagonalHeight[index],this.in2dView&&this.drawSingleCell2dViewText(array,i,j)}hueIndex++,this.recalculateHeights(array),await new Promise(resolve=>setTimeout(resolve,this.animationTime))}this.updateCameraHeight(!0)}async sulzgruber(index){const array=this.arrays[index],planePartition=structuredClone(array.numbers);var columnStarts=new Array(planePartition.length);for(let i=0;i<planePartition.length;i++){let j=0;for(;j<planePartition.length&&planePartition[j][i]===1/0;)j++;columnStarts[i]=j}var rowStarts=new Array(planePartition.length);for(let i=0;i<planePartition.length;i++){let j=0;for(;j<planePartition.length&&planePartition[i][j]===1/0;)j++;rowStarts[i]=j}var boundaryLeft,boundaryUp,diagonals={},diagonalStarts={};for(let i=0;i<planePartition.length;i++)diagonalStarts[-i]=[i,0];for(let i=1;i<planePartition.length;i++)diagonalStarts[i]=[0,i];for(let i=1-planePartition.length;i<planePartition.length;i++){let row=diagonalStarts[i][0],col=diagonalStarts[i][1];for(;row<planePartition.length&&col<planePartition.length&&planePartition[row][col]===1/0;)row++,col++;diagonalStarts[i]=[row,col],row===planePartition.length||col===planePartition.length?diagonals[i]=-1:(boundaryLeft=0===col||planePartition[row][col-1]===1/0,boundaryUp=0===row||planePartition[row-1][col]===1/0,diagonals[i]=boundaryLeft&&boundaryUp?0:boundaryLeft?3:boundaryUp?2:1)}var qPaths=[];for(let i=1-planePartition.length;i<planePartition.length;i++)if(1!==diagonals[i]&&3!==diagonals[i]){let startRow=diagonalStarts[i][0],startCol=diagonalStarts[i][1];if(0!==planePartition[startRow][startCol])for(;;){let foundCandidate=!1;for(;startRow<planePartition.length&&startCol<planePartition.length&&0!==planePartition[startRow][startCol];){if((startCol<planePartition.length-1&&planePartition[startRow][startCol]>planePartition[startRow][startCol+1]||startCol===planePartition.length-1&&0<planePartition[startRow][startCol])&&(0===diagonals[i]||2===diagonals[i]&&(startRow<planePartition.length-1&&planePartition[startRow][startCol]>planePartition[startRow+1][startCol]||startRow===planePartition.length-1&&0<planePartition[startRow][startCol]))){foundCandidate=!0;break}startRow++,startCol++}if(!foundCandidate)break;let row=startRow,col=startCol;for(var path=[[row,col,planePartition[row][col]-1]];;){var currentContent=col-row;if(row<planePartition.length-1&&planePartition[row][col]===planePartition[row+1][col]&&(0===diagonals[currentContent]||3===diagonals[currentContent]))row++;else{if(!(col>rowStarts[row]&&(row===planePartition.length-1||row<planePartition.length-1&&planePartition[row][col]>planePartition[row+1][col])))break;col--}path.push([row,col,planePartition[row][col]-1])}path.forEach(box=>planePartition[box[0]][box[1]]--),qPaths.push(path)}}var emptyArray=new Array(planePartition.length);for(let i=0;i<planePartition.length;i++){emptyArray[i]=new Array(planePartition.length);for(let j=0;j<planePartition.length;j++)emptyArray[i][j]=planePartition[i][j]===1/0?1/0:0}var outputArray=await this.addNewArray(index+1,emptyArray);await new Promise(resolve=>setTimeout(resolve,this.animationTime));for(let i=0;i<qPaths.length;i++){var hue=i/qPaths.length*6/7,row=(await this.colorCubes(array,qPaths[i],hue),await this.raiseCubes(array,qPaths[i],array.height+1),qPaths[i].forEach(box=>{array.numbers[box[0]][box[1]]--,this.in2dView&&this.drawSingleCell2dViewText(array,box[0],box[1])}),this.recalculateHeights(array),await new Promise(resolve=>setTimeout(resolve,this.animationTime/5)),qPaths[i][qPaths[i].length-1][0]),col=diagonalStarts[qPaths[i][qPaths[i].length-1][1]-row+qPaths[i].length-1][1];let targetCoordinates=[];var targetHeight=Math.max(array.height+1,outputArray.height+1);for(let j=columnStarts[col];j<=row;j++)targetCoordinates.push([j,col,targetHeight]);for(let j=col-1;j>=rowStarts[row];j--)targetCoordinates.push([row,j,targetHeight]);await this.moveCubes(array,qPaths[i],outputArray,targetCoordinates),targetCoordinates=[];for(let j=row-1;j>=columnStarts[col];j--)targetCoordinates.push([j,col,targetHeight]);this.deleteCubes(outputArray,targetCoordinates),targetCoordinates=[];for(let j=col-1;j>=rowStarts[row];j--)targetCoordinates.push([row,j,targetHeight]);this.deleteCubes(outputArray,targetCoordinates),await this.lowerCubes(outputArray,[[row,col,targetHeight]]),outputArray.numbers[row][col]++,this.in2dView&&this.drawSingleCell2dViewText(outputArray,row,col),this.recalculateHeights(outputArray),await new Promise(resolve=>setTimeout(resolve,this.animationTime))}await this.removeArray(index)}async sulzgruberInverse(index){var array=this.arrays[index],tableau=array.numbers,columnStarts=new Array(tableau.length);for(let i=0;i<tableau.length;i++){let j=0;for(;j<tableau.length&&tableau[j][i]===1/0;)j++;columnStarts[i]=j}var rowStarts=new Array(tableau.length);for(let i=0;i<tableau.length;i++){let j=0;for(;j<tableau.length&&tableau[i][j]===1/0;)j++;rowStarts[i]=j}var diagonalStarts={};for(let i=0;i<tableau.length;i++)diagonalStarts[-i]=[i,0];for(let i=1;i<tableau.length;i++)diagonalStarts[i]=[0,i];for(let i=1-tableau.length;i<tableau.length;i++){let row=diagonalStarts[i][0],col=diagonalStarts[i][1];for(;row<tableau.length&&col<tableau.length&&tableau[row][col]===1/0;)row++,col++;diagonalStarts[i]=[row,col]}let numHues=0;var emptyArray=new Array(tableau.length);for(let i=0;i<tableau.length;i++){emptyArray[i]=new Array(tableau.length);for(let j=0;j<tableau.length;j++)tableau[i][j]===1/0?emptyArray[i][j]=1/0:(emptyArray[i][j]=0,numHues+=tableau[i][j])}const outputArray=await this.addNewArray(index+1,emptyArray);let currentHueIndex=0;for(let j=tableau.length-1;0<=j;j--)for(let i=tableau.length-1;0<=i;i--)if(tableau[i][j]!==1/0)for(;0!==tableau[i][j];){const hue=currentHueIndex/numHues*6/7;var height=Math.max(array.size+1,outputArray.size+1),row=(await this.colorCubes(array,[[i,j,tableau[i][j]-1]],hue),await this.raiseCubes(array,[[i,j,tableau[i][j]-1]],height),i),col=j;for(let k=columnStarts[col];k<row;k++)array.cubes[k][col][height]=this.addCube(array,col,height,k),array.cubes[k][col][height].material.forEach(material=>material.color.setHSL(hue,1,this.cubeLightness));for(let k=rowStarts[row];k<col;k++)array.cubes[row][k][height]=this.addCube(array,k,height,row),array.cubes[row][k][height].material.forEach(material=>material.color.setHSL(hue,1,this.cubeLightness));let coordinates=[];for(let k=row-1;k>=columnStarts[col];k--)coordinates.push([k,col,height]);var promise1=this.revealCubes(array,coordinates);coordinates=[];for(let k=col-1;k>=rowStarts[row];k--)coordinates.push([row,k,height]);var promise2=this.revealCubes(array,coordinates);await Promise.all([promise1,promise2]),coordinates=[];for(let k=rowStarts[row];k<col;k++)coordinates.push([row,k,height]);coordinates.push([row,col,array.numbers[row][col]-1]);for(let k=row-1;k>=columnStarts[col];k--)coordinates.push([k,col,height]);var promise1=rowStarts[row]-row,endContent=promise1+coordinates.length-1,targetCoordinates=[];for(let k=promise1;k<=endContent;k++)targetCoordinates.push(structuredClone(diagonalStarts[k]));tableau[row][col]--,this.recalculateHeights(array),this.in2dView&&this.drawSingleCell2dViewText(array,row,col),await this.moveCubes(array,coordinates,outputArray,targetCoordinates);let currentIndex=0,currentHeight=outputArray.numbers[targetCoordinates[0][0]][targetCoordinates[0][1]];for(;;){let nextIndex=currentIndex;for(;nextIndex<targetCoordinates.length&&targetCoordinates[nextIndex][0]===targetCoordinates[currentIndex][0];)nextIndex++;coordinates=targetCoordinates.slice(currentIndex,nextIndex);let insertionWorks=!0;for(let k=0;k<coordinates.length;k++)if(outputArray.numbers[coordinates[k][0]][coordinates[k][1]]!==currentHeight){insertionWorks=!1;break}if(insertionWorks)await this.lowerCubes(outputArray,coordinates),coordinates.forEach(coordinate=>outputArray.numbers[coordinate[0]][coordinate[1]]++),this.recalculateHeights(outputArray),this.in2dView&&coordinates.forEach(entry=>{this.drawSingleCell2dViewText(outputArray,entry[0],entry[1])}),currentIndex=nextIndex;else{var oldTargetCoordinates=structuredClone(targetCoordinates.slice(currentIndex));for(let k=currentIndex;k<targetCoordinates.length;k++)if(targetCoordinates[k][0]++,targetCoordinates[k][1]++,targetCoordinates[k][0]>outputArray.footprint||targetCoordinates[k][1]>outputArray.footprint)return void console.error("Insertion failed!");var newTargetCoordinates=targetCoordinates.slice(currentIndex);await this.moveCubes(outputArray,oldTargetCoordinates,outputArray,newTargetCoordinates),currentHeight=outputArray.numbers[targetCoordinates[currentIndex][0]][targetCoordinates[currentIndex][1]]}if(currentIndex===targetCoordinates.length)break}currentHueIndex++,await new Promise(resolve=>setTimeout(resolve,this.animationTime/2))}await this.removeArray(index)}async rsk(index){var pArray=this.arrays[index],qArray=this.arrays[index+1],pSsyt=pArray.numbers,qSsyt=qArray.numbers;let arraySize=0,numHues=0;for(let i=0;i<pSsyt.length;i++)for(let j=0;j<pSsyt.length;j++){if(pSsyt[i][j]===1/0||qSsyt[i][j]===1/0)return this.displayError("The SSYT contain infinite values, which is not allowed in RSK!"),void(this.currentlyRunningAlgorithm=!1);0!==pSsyt[i][j]&&numHues++,arraySize=Math.max(Math.max(arraySize,pSsyt[i][j]),qSsyt[i][j])}if(0===arraySize)this.displayError("The SSYT are empty!"),this.currentlyRunningAlgorithm=!1;else{var emptyArray=new Array(arraySize);for(let i=0;i<arraySize;i++){emptyArray[i]=new Array(arraySize);for(let j=0;j<arraySize;j++)emptyArray[i][j]=0}var outputArray=await this.addNewArray(index+2,emptyArray);let hueIndex=0;for(;0!==qSsyt[0][0];){var hue=hueIndex/numHues*6/7;let maxEntry=0,row=0,col=0;for(let i=0;i<qSsyt.length;i++){let j=qSsyt.length-1;for(;0<=j&&0===qSsyt[i][j];)j--;0<=j&&(maxEntry=Math.max(maxEntry,qSsyt[i][j]))}for(let i=0;i<qSsyt.length;i++){let j=qSsyt.length-1;for(;0<=j&&0===qSsyt[i][j];)j--;if(qSsyt[i][j]===maxEntry){row=i,col=j;break}}var pSourceCoordinatesLocal=[],pTargetCoordinatesLocal=[],pSourceCoordinatesExternal=[],pTargetCoordinatesExternal=[],qSourceCoordinatesExternal=[],qTargetCoordinatesExternal=[];let i=row,j=col,pEntry=pSsyt[i][j];for(var qEntry=qSsyt[i][j],pCoordinatePath=[[i,j]];0!==i;){let newJ=pSsyt.length-1;for(;0===pSsyt[i-1][newJ]||pEntry<=pSsyt[i-1][newJ];)newJ--;for(let k=0;k<pEntry;k++)pSourceCoordinatesLocal.push([i,j,k]),pTargetCoordinatesLocal.push([i-1,newJ,k]);i--,j=newJ,pEntry=pSsyt[i][j],pCoordinatePath.push([i,j])}var height=outputArray.height+1;for(let k=0;k<pEntry;k++)pSourceCoordinatesExternal.push([i,j,k]),pTargetCoordinatesExternal.push([qEntry-1,k,height]);for(let k=0;k<qEntry-1;k++)qSourceCoordinatesExternal.push([row,col,k]),qTargetCoordinatesExternal.push([k,pEntry-1,height]);this.colorCubes(qArray,qSourceCoordinatesExternal.concat([[row,col,qEntry-1]]),hue),this.colorCubes(pArray,pSourceCoordinatesLocal,hue),await this.colorCubes(pArray,pSourceCoordinatesExternal,hue),qSsyt[row][col]=0;for(let k=pCoordinatePath.length-1;0<k;k--)pSsyt[pCoordinatePath[k][0]][pCoordinatePath[k][1]]=pSsyt[pCoordinatePath[k-1][0]][pCoordinatePath[k-1][1]];if(pSsyt[row][col]=0,this.in2dView){this.drawSingleCell2dViewText(pArray,row,col);for(let k=pCoordinatePath.length-1;0<k;k--)this.drawSingleCell2dViewText(pArray,pCoordinatePath[k][0],pCoordinatePath[k][1]);this.drawSingleCell2dViewText(qArray,row,col)}this.moveCubes(qArray,qSourceCoordinatesExternal,outputArray,qTargetCoordinatesExternal),this.moveCubes(pArray,pSourceCoordinatesExternal,outputArray,pTargetCoordinatesExternal),this.moveCubes(pArray,pSourceCoordinatesLocal,pArray,pTargetCoordinatesLocal),await this.moveCubes(qArray,[[row,col,qEntry-1]],outputArray,[[qEntry-1,pEntry-1,height]],!1),this.uncolorCubes(pArray,pTargetCoordinatesLocal),outputArray.cubeGroup.remove(qArray.cubes[row][col][qEntry-1]),this.deleteCubes(qArray,[[row,col,qEntry-1]],!0,!0),pTargetCoordinatesExternal.reverse(),qTargetCoordinatesExternal.reverse(),this.deleteCubes(outputArray,pTargetCoordinatesExternal.slice(1)),this.deleteCubes(outputArray,qTargetCoordinatesExternal),await this.lowerCubes(outputArray,[[qEntry-1,pEntry-1,height]]),emptyArray[qEntry-1][pEntry-1]++,this.in2dView&&this.drawSingleCell2dViewText(outputArray,qEntry-1,pEntry-1),this.recalculateHeights(outputArray),hueIndex++,await new Promise(resolve=>setTimeout(resolve,this.animationTime/2))}await this.removeArray(index),await new Promise(resolve=>setTimeout(resolve,this.animationTime)),await this.removeArray(index)}}async rskInverse(index){var array=this.arrays[index],tableau=structuredClone(array.numbers);let numEntries=0,pSsyt=(tableau.forEach(row=>row.forEach(entry=>numEntries+=entry)),new Array(numEntries)),qSsyt=new Array(numEntries);for(let i=0;i<numEntries;i++){pSsyt[i]=new Array(numEntries),qSsyt[i]=new Array(numEntries);for(let j=0;j<numEntries;j++)pSsyt[i][j]=0,qSsyt[i][j]=0}var pRowLengths=new Array(tableau.length);for(let i=0;i<tableau.length;i++)pRowLengths[i]=0;let pNumRows=0;var pInsertionPaths=[],qInsertionLocations=[],tableauRemovalLocations=[];for(let row=0;row<tableau.length;row++)for(let col=0;col<tableau.length;col++)for(;0!==tableau[row][col];){tableau[row][col]--;let newNum=col+1,i=0,j=0;for(var path=[];;){for(j=pRowLengths[i];0!==j&&pSsyt[i][j-1]>newNum;)j--;if(j===pRowLengths[i]){pSsyt[i][j]=newNum,pRowLengths[i]++,0===j&&pNumRows++,path.push([i,j]);break}var temp=pSsyt[i][j];pSsyt[i][j]=newNum,newNum=temp,path.push([i,j]),i++}pInsertionPaths.push(path),qInsertionLocations.push([i,j]),tableauRemovalLocations.push([row,col]),qSsyt[i][j]=row+1}var ssytSize=Math.max(pRowLengths[0],pNumRows);pSsyt=new Array(ssytSize),qSsyt=new Array(ssytSize);for(let i=0;i<ssytSize;i++){pSsyt[i]=new Array(ssytSize),qSsyt[i]=new Array(ssytSize);for(let j=0;j<ssytSize;j++)pSsyt[i][j]=0,qSsyt[i][j]=0}var pArray=await this.addNewArray(index+1,pSsyt),qArray=(await new Promise(resolve=>setTimeout(resolve,this.animationTime/2)),await this.addNewArray(index+2,qSsyt));await new Promise(resolve=>setTimeout(resolve,this.animationTime/2));let hueIndex=0;for(let i=0;i<tableauRemovalLocations.length;i++){var row=tableauRemovalLocations[i][0],col=tableauRemovalLocations[i][1],height=array.height+1;const hue=hueIndex/numEntries*6/7;for(let j=col;0<=j;j--)array.cubes[row][j][height]=this.addCube(array,j,height,row),array.cubes[row][j][height].material.forEach(material=>material.color.setHSL(hue,1,this.cubeLightness));for(let j=row-1;0<=j;j--)array.cubes[j][col][height]=this.addCube(array,col,height,j),array.cubes[j][col][height].material.forEach(material=>material.color.setHSL(hue,1,this.cubeLightness));array.cubes[row][col][height+1]=this.addCube(array,col,height,row),array.cubes[row][col][height+1].material.forEach(material=>material.color.setHSL(hue,1,this.cubeLightness)),await this.colorCubes(array,[[row,col,array.numbers[row][col]-1]],hue),await this.raiseCubes(array,[[row,col,array.numbers[row][col]-1]],height);var promise1=this.revealCubes(array,[[row,col,height+1]]);let coordinates=[];for(let j=col-1;0<=j;j--)coordinates.push([row,j,height]);var promise2=this.revealCubes(array,coordinates);coordinates=[];for(let j=row-1;0<=j;j--)coordinates.push([j,col,height]);var promise3=this.revealCubes(array,coordinates);await Promise.all([promise1,promise2,promise3]);const path=pInsertionPaths[hueIndex];var pSourceCoordinatesLocal=[],pTargetCoordinatesLocal=[],pSourceCoordinatesExternal=[[row,col,array.numbers[row][col]-1]],pTargetCoordinatesExternal=[[path[0][0],path[0][1],col]],qSourceCoordinatesExternal=[[row,col,height+1]],qTargetCoordinatesExternal=[[qInsertionLocations[hueIndex][0],qInsertionLocations[hueIndex][1],row]];for(let j=col-1;0<=j;j--)pSourceCoordinatesExternal.push([row,j,height]),pTargetCoordinatesExternal.push([path[0][0],path[0][1],j]);for(let j=0;j<path.length-1;j++)for(let k=0;k<pSsyt[path[j][0]][path[j][1]];k++)pSourceCoordinatesLocal.push([path[j][0],path[j][1],k]),pTargetCoordinatesLocal.push([path[j+1][0],path[j+1][1],k]);for(let j=row-1;0<=j;j--)qSourceCoordinatesExternal.push([j,col,height]),qTargetCoordinatesExternal.push([qInsertionLocations[hueIndex][0],qInsertionLocations[hueIndex][1],j]);await this.colorCubes(pArray,pSourceCoordinatesLocal,hue);for(let j=path.length-1;0<j;j--)pSsyt[path[j][0]][path[j][1]]=pSsyt[path[j-1][0]][path[j-1][1]];0!==path.length&&(pSsyt[path[0][0]][path[0][1]]=0),this.in2dView&&this.drawAll2dViewText(),0!==pSourceCoordinatesLocal.length&&await this.moveCubes(pArray,pSourceCoordinatesLocal,pArray,pTargetCoordinatesLocal),array.numbers[row][col]--,this.in2dView&&this.drawAll2dViewText(),this.moveCubes(array,pSourceCoordinatesExternal,pArray,pTargetCoordinatesExternal),await this.moveCubes(array,qSourceCoordinatesExternal,qArray,qTargetCoordinatesExternal),pSsyt[path[0][0]][path[0][1]]=col+1,qSsyt[qInsertionLocations[hueIndex][0]][qInsertionLocations[hueIndex][1]]=row+1,this.in2dView&&this.drawAll2dViewText(),this.recalculateHeights(array),this.recalculateHeights(pArray),this.recalculateHeights(qArray),hueIndex++,await new Promise(resolve=>setTimeout(resolve,this.animationTime/2))}await this.removeArray(index)}async godar1(index){var array;let planePartition=this.arrays[index].numbers;var nuRowLengths=new Array(2*planePartition.length),nuColLengths=new Array(2*planePartition.length);for(let i=0;i<planePartition.length;i++){let j=0;for(;j<planePartition.length&&planePartition[i][j]===1/0;)j++;for(nuRowLengths[i]=j,j=0;j<planePartition.length&&planePartition[j][i]===1/0;)j++;nuColLengths[i]=j}for(let i=planePartition.length;i<2*planePartition.length;i++)nuRowLengths[i]=0,nuColLengths[i]=0;var rppSize=Math.max(nuRowLengths[0],nuColLengths[0]),newArray=new Array(planePartition.length);for(let i=0;i<planePartition.length;i++){newArray[i]=new Array(planePartition.length);for(let j=0;j<planePartition.length;j++)planePartition[i][j]===1/0?newArray[i][j]=this.infiniteHeight:newArray[i][j]=planePartition[i][j]}await this.addNewArray(index+1,newArray),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2)),await this.removeArray(index),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2)),array=this.arrays[index],planePartition=array.numbers;let rightLegSize=0,bottomLegSize=0;for(;rightLegSize<planePartition.length&&0!==planePartition[rightLegSize][planePartition.length-1];)rightLegSize++;for(;bottomLegSize<planePartition.length&&0!==planePartition[planePartition.length-1][bottomLegSize];)bottomLegSize++;await this.runAlgorithm("pak",index,!0),await new Promise(resolve=>setTimeout(resolve,2*this.animationTime)),array=this.arrays[index],planePartition=array.numbers;var legSize=Math.max(rightLegSize,bottomLegSize),finiteArray=new Array(planePartition.length-legSize+1),cubesToDelete=[];for(let i=0;i<finiteArray.length-1;i++){finiteArray[i]=new Array(finiteArray.length);for(let j=0;j<finiteArray.length-1;j++){finiteArray[i][j]=planePartition[i][j];for(let k=0;k<planePartition[i][j];k++)cubesToDelete.push([i,j,k]);planePartition[i][j]=0}finiteArray[i][finiteArray.length-1]=0}finiteArray[finiteArray.length-1]=new Array(finiteArray.length);for(let j=0;j<finiteArray.length;j++)finiteArray[finiteArray.length-1][j]=0;this.deleteCubes(array,cubesToDelete,!0,!0),await this.addNewArray(index,finiteArray),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2)),await this.runAlgorithm("pakInverse",index,!0),await new Promise(resolve=>setTimeout(resolve,2*this.animationTime));var maxAppHookLength=2*planePartition.length-nuRowLengths[planePartition.length-1]-nuColLengths[planePartition.length-1],maxRppHookLength=nuRowLengths[0]+nuColLengths[0],appPivotsByHookLength=new Array(4*planePartition.length),rppPivotsByHookLength=new Array(maxRppHookLength),ppPivotsByHookLength=new Array(4*planePartition.length);for(let i=0;i<4*planePartition.length;i++)appPivotsByHookLength[i]=new Array;for(let i=0;i<maxRppHookLength;i++)rppPivotsByHookLength[i]=new Array;for(let i=0;i<4*planePartition.length;i++)ppPivotsByHookLength[i]=new Array;let ppSize=1;for(let i=0;i<2*planePartition.length;i++)for(let j=0;j<2*planePartition.length;j++)j>=nuRowLengths[i]?appPivotsByHookLength[i+j+1-nuRowLengths[i]-nuColLengths[j]].push([i,j]):rppPivotsByHookLength[nuRowLengths[i]+nuColLengths[j]-i-j-1].unshift([rppSize-i-1,rppSize-j-1]),ppPivotsByHookLength[i+j+1].push([i,j]);var hookMap=new Array(2*planePartition.length);for(let i=0;i<2*planePartition.length;i++)hookMap[i]=new Array(2*planePartition.length);for(let i=1;i<maxAppHookLength;i++){var coordinates=[];for(let j=0;j<appPivotsByHookLength[i].length;j++){var row=appPivotsByHookLength[i][j][0],col=appPivotsByHookLength[i][j][1];if(row<planePartition.length-bottomLegSize&&col<planePartition.length-rightLegSize)for(let k=0;k<this.arrays[index].numbers[row][col];k++)coordinates.push([row,col,k]);j<ppPivotsByHookLength[i].length?(hookMap[row][col]=[1,ppPivotsByHookLength[i][j]],row<planePartition.length&&col<planePartition.length&&0<this.arrays[index].numbers[row][col]&&(ppSize=Math.max(Math.max(ppSize,ppPivotsByHookLength[i][j][0]+1),ppPivotsByHookLength[i][j][1]+1))):hookMap[row][col]=[0,rppPivotsByHookLength[i][j-ppPivotsByHookLength[i].length]]}0!==coordinates.length&&this.colorCubes(this.arrays[index],coordinates,(i-1)/(maxAppHookLength-1)*6/7)}await new Promise(resolve=>setTimeout(resolve,3*this.animationTime));var rpp=new Array(rppSize);for(let i=0;i<rppSize;i++){rpp[i]=new Array(rppSize);for(let j=0;j<rppSize;j++)j<rppSize-nuRowLengths[rppSize-i-1]?rpp[i][j]=1/0:rpp[i][j]=0}let rppArray=null;0<rppSize&&(rppArray=await this.addNewArray(index+1,rpp),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2)));var pp=new Array(ppSize);for(let i=0;i<ppSize;i++){pp[i]=new Array(ppSize);for(let j=0;j<ppSize;j++)pp[i][j]=0}var ppArray=await this.addNewArray(index+2,pp);for(let i=0;i<planePartition.length-bottomLegSize;i++)for(let j=nuRowLengths[i];j<planePartition.length-rightLegSize;j++)if(0<this.arrays[index].numbers[i][j]){var sourceCoordinates=[],targetCoordinates=[],targetRow=hookMap[i][j][1][0],targetCol=hookMap[i][j][1][1];for(let k=0;k<this.arrays[index].numbers[i][j];k++)sourceCoordinates.push([i,j,k]),targetCoordinates.push([targetRow,targetCol,k]);0===hookMap[i][j][0]?(await this.moveCubes(this.arrays[index],sourceCoordinates,rppArray,targetCoordinates),rpp[targetRow][targetCol]=this.arrays[index].numbers[i][j]):(await this.moveCubes(this.arrays[index],sourceCoordinates,ppArray,targetCoordinates),pp[targetRow][targetCol]=this.arrays[index].numbers[i][j]),this.arrays[index].numbers[i][j]=0,this.in2dView&&this.drawAll2dViewText()}await new Promise(resolve=>setTimeout(resolve,3*this.animationTime)),await this.runAlgorithm("pakInverse",index,!0),0<rppSize&&await this.runAlgorithm("hillmanGrasslInverse",index+1,!0)}async godar1Inverse(index){var pp=this.arrays[index+1].numbers,rpp=this.arrays[index].numbers,nuRowLengths=new Array(pp.length+2*rpp.length),nuColLengths=new Array(pp.length+2*rpp.length);for(let i=0;i<pp.length+2*rpp.length;i++)nuRowLengths[i]=0,nuColLengths[i]=0;for(let i=0;i<rpp.length;i++){let j=rpp.length-1;for(;0<=j&&rpp[i][j]!==1/0;)j--;for(nuRowLengths[rpp.length-i-1]=rpp.length-j-1,j=rpp.length-1;0<=j&&rpp[j][i]!==1/0;)j--;nuColLengths[rpp.length-i-1]=rpp.length-j-1}await this.runAlgorithm("pak",index,!0),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2)),await this.runAlgorithm("pak",index+1,!0),await new Promise(resolve=>setTimeout(resolve,3*this.animationTime));let coordinates=[],numbers=this.arrays[index].numbers;for(let i=0;i<numbers.length;i++)for(let j=0;j<numbers.length;j++)if(numbers[i][j]!==1/0)for(let k=0;k<numbers[i][j];k++)coordinates.push([i,j,k]);this.uncolorCubes(this.arrays[index],coordinates),coordinates=[],numbers=this.arrays[index+1].numbers;for(let i=0;i<numbers.length;i++)for(let j=0;j<numbers.length;j++)if(numbers[i][j]!==1/0)for(let k=0;k<numbers[i][j];k++)coordinates.push([i,j,k]);await this.uncolorCubes(this.arrays[index+1],coordinates);let appSize=Math.max(nuRowLengths[0],nuColLengths[0])+2*pp.length-1;var maxAppHookLength=2*appSize,maxRppHookLength=nuRowLengths[0]+nuColLengths[0],maxPpHookLength=2*pp.length,appPivotsByHookLength=new Array(maxAppHookLength),rppPivotsByHookLength=new Array(maxRppHookLength),ppPivotsByHookLength=new Array(maxPpHookLength);for(let i=0;i<maxAppHookLength;i++)appPivotsByHookLength[i]=new Array;for(let i=0;i<maxRppHookLength;i++)rppPivotsByHookLength[i]=new Array;for(let i=0;i<maxPpHookLength;i++){ppPivotsByHookLength[i]=new Array(i);for(let j=0;j<i;j++)ppPivotsByHookLength[i][j]=-1}for(;nuRowLengths.length<appSize;)nuRowLengths.push(0);for(;nuColLengths.length<appSize;)nuColLengths.push(0);for(let i=0;i<appSize;i++)for(let j=0;j<appSize;j++)j>=nuRowLengths[i]?appPivotsByHookLength[i+j+1-nuRowLengths[i]-nuColLengths[j]].push([i,j]):rppPivotsByHookLength[nuRowLengths[i]+nuColLengths[j]-i-j-1].unshift([rpp.length-i-1,rpp.length-j-1]),i<pp.length&&j<pp.length&&(ppPivotsByHookLength[i+j+1][i]=[i,j]);var ppHookMap=new Array(pp.length);for(let i=0;i<pp.length;i++)ppHookMap[i]=new Array(pp.length);var rppHookMap=new Array(rpp.length);for(let i=0;i<rpp.length;i++)rppHookMap[i]=new Array(rpp.length);for(let i=appSize=1;i<maxRppHookLength;i++){const coordinates=[];for(let j=0;j<rppPivotsByHookLength[i].length;j++){var row=rppPivotsByHookLength[i][j][0],col=rppPivotsByHookLength[i][j][1];for(let k=0;k<this.arrays[index].numbers[row][col];k++)coordinates.push([row,col,k]);rppHookMap[row][col]=appPivotsByHookLength[i][j+ppPivotsByHookLength[i].length],0!==this.arrays[index].numbers[row][col]&&(appSize=Math.max(Math.max(appSize,rppHookMap[row][col][0]+1),rppHookMap[row][col][1]+1))}0!==coordinates.length&&this.colorCubes(this.arrays[index],coordinates,(i-1)/(maxRppHookLength-1)*6/7)}for(let i=1;i<maxPpHookLength;i++){const coordinates=[];for(let j=0;j<ppPivotsByHookLength[i].length;j++)if(-1!==ppPivotsByHookLength[i][j]){const row=ppPivotsByHookLength[i][j][0],col=ppPivotsByHookLength[i][j][1];for(let k=0;k<this.arrays[index+1].numbers[row][col];k++)coordinates.push([row,col,k]);ppHookMap[row][col]=appPivotsByHookLength[i][j],0!==this.arrays[index+1].numbers[row][col]&&(appSize=Math.max(Math.max(appSize,ppHookMap[row][col][0]+1),ppHookMap[row][col][1]+1))}0!==coordinates.length&&this.colorCubes(this.arrays[index+1],coordinates,(i-1)/(maxPpHookLength-1)*6/7)}await new Promise(resolve=>setTimeout(resolve,3*this.animationTime));var app=new Array(appSize);for(let i=0;i<appSize;i++){app[i]=new Array(appSize);for(let j=0;j<appSize;j++)j<nuRowLengths[i]?app[i][j]=1/0:app[i][j]=0}var appArray=await this.addNewArray(index+2,app);await new Promise(resolve=>setTimeout(resolve,this.animationTime/2));for(let i=0;i<rpp.length;i++)for(let j=0;j<rpp.length;j++)if(0<this.arrays[index].numbers[i][j]&&this.arrays[index].numbers[i][j]!==1/0){var sourceCoordinates=[],targetCoordinates=[],targetRow=rppHookMap[i][j][0],targetCol=rppHookMap[i][j][1];for(let k=0;k<this.arrays[index].numbers[i][j];k++)sourceCoordinates.push([i,j,k]),targetCoordinates.push([targetRow,targetCol,k]);await this.moveCubes(this.arrays[index],sourceCoordinates,appArray,targetCoordinates),app[targetRow][targetCol]=this.arrays[index].numbers[i][j],this.arrays[index].numbers[i][j]=0,this.in2dView&&this.drawAll2dViewText()}for(let i=0;i<pp.length;i++)for(let j=0;j<pp.length;j++)if(0<this.arrays[index+1].numbers[i][j]&&this.arrays[index+1].numbers[i][j]!==1/0){const sourceCoordinates=[],targetCoordinates=[],targetRow=ppHookMap[i][j][0],targetCol=ppHookMap[i][j][1];for(let k=0;k<this.arrays[index+1].numbers[i][j];k++)sourceCoordinates.push([i,j,k]),targetCoordinates.push([targetRow,targetCol,k]);await this.moveCubes(this.arrays[index+1],sourceCoordinates,appArray,targetCoordinates),app[targetRow][targetCol]=this.arrays[index+1].numbers[i][j],this.arrays[index+1].numbers[i][j]=0,this.in2dView&&this.drawAll2dViewText()}await this.removeArray(index),await new Promise(resolve=>setTimeout(resolve,this.animationTime/2)),await this.removeArray(index),await new Promise(resolve=>setTimeout(resolve,3*this.animationTime)),await this.runAlgorithm("pakInverse",index,!0),await new Promise(resolve=>setTimeout(resolve,this.animationTime))}async drawBoundary(index,n){this.in2dView||await this.show2dView(),"0"!==this.wilsonNumbers.canvas.style.opacity&&await changeOpacity(this.wilsonNumbers.canvas,0,this.animationTime/3),this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight);const array=this.arrays[index];var planePartition=array.numbers,rects=[];let hueIndex=0,j=0;for(let i=array.footprint-1;0<=i;i--){for(;j<array.footprint&&planePartition[i][j]===1/0;){if(i===array.footprint-1||planePartition[i+1][j]!==1/0){const h=hueIndex%n/n,rgb=this.wilson.utils.hsvToRgb(h,1,1);rects.push([i,j,!0,`rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, `]),hueIndex++}j++}var h=hueIndex%n/n,h=this.wilson.utils.hsvToRgb(h,1,1);rects.push([i,j,!1,`rgba(${h[0]}, ${h[1]}, ${h[2]}, `]),hueIndex++}for(;j<array.footprint;){if(-1==array.footprint-1||planePartition[0][j]!==1/0){const h=hueIndex%n/n,rgb=this.wilson.utils.hsvToRgb(h,1,1);rects.push([-1,j,!0,`rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, `]),hueIndex++}j++}return rects.forEach(rect=>{this.drawBoundaryRect(array,rect[0],rect[1],rect[2],rect[3]+" 1)")}),await changeOpacity(this.wilsonNumbers.canvas,1,this.animationTime/3),this.wilsonNumbers.ctx.fillStyle="rgb(255, 255, 255)",rects}async drawNQuotient(index,n,m,rects){const array=this.arrays[index],dummy={t:1};await anime({targets:dummy,t:0,duration:this.animationTime,easing:"easeOutQuad",update:()=>{this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),rects.forEach((rect,index)=>{index=index%n===m?1:dummy.t;this.drawBoundaryRect(array,rect[0],rect[1],rect[2],rect[3]+` ${index})`)})}}).finished,this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),rects.forEach((rect,index)=>{index=index%n===m?1:0;this.drawBoundaryRect(array,rect[0],rect[1],rect[2],rect[3]+` ${index})`)});index=(rects=rects.filter((rect,index)=>index%n===m)).filter(rect=>!rect[2]).length;const targetRects=new Array(rects.length);let row=index-1,col=0;rects.forEach((rect,index)=>{targetRects[index]=[row,col],rect[2]?col++:row--}),dummy.t=0,await anime({targets:dummy,t:1,duration:this.animationTime,easing:"easeInOutQuad",update:()=>{this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),rects.forEach((rect,index)=>{this.drawBoundaryRect(array,(1-dummy.t)*rect[0]+dummy.t*targetRects[index][0],(1-dummy.t)*rect[1]+dummy.t*targetRects[index][1],rect[2],rect[3]+" 1)")})}}).finished,this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),rects.forEach((rect,index)=>{this.drawBoundaryRect(array,targetRects[index][0],targetRects[index][1],rect[2],rect[3]+" 1)")});const cubesToDelete=[],bonusRects=(targetRects.forEach((rect,index)=>{if(!rects[index][2])for(let j=rect[1];j<array.footprint;j++)if(array.numbers[rect[0]][j]===1/0)for(let k=0;k<this.infiniteHeight;k++)cubesToDelete.push([rect[0],j,k])}),this.deleteCubes(array,cubesToDelete,!0),[]);for(let i=array.footprint-1;i>targetRects[0][0];i--)bonusRects.push([i,0,!1]);for(let j=targetRects[targetRects.length-1][1];j<array.footprint;j++)bonusRects.push([-1,j,!0]);dummy.t=0,await anime({targets:dummy,t:1,duration:this.animationTime/2,easing:"easeInQuad",update:()=>{this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),rects.forEach((rect,index)=>{this.drawBoundaryRect(array,targetRects[index][0],targetRects[index][1],rect[2],rect[3]+" 1)")}),bonusRects.forEach(rect=>{this.drawBoundaryRect(array,rect[0],rect[1],rect[2],`${rects[0][3]} ${dummy.t})`)})}}).finished,this.wilsonNumbers.ctx.clearRect(0,0,this.wilsonNumbers.canvasWidth,this.wilsonNumbers.canvasHeight),rects.forEach((rect,index)=>{this.drawBoundaryRect(array,targetRects[index][0],targetRects[index][1],rect[2],rect[3]+" 1)")}),bonusRects.forEach(rect=>{this.drawBoundaryRect(array,rect[0],rect[1],rect[2],rects[0][3]+" 1)")}),this.wilsonNumbers.ctx.fillStyle="rgb(255, 255, 255)"}drawBoundaryRect(array,i,j,horizontal,rgba){var top=(this.totalArrayFootprint-array.footprint-1)/2,array=array.partialFootprintSum-array.footprint;this.wilsonNumbers.ctx.fillStyle=rgba,horizontal?this.wilsonNumbers.ctx.fillRect(this.wilsonNumbers.canvasWidth*(j+array+1)/(this.totalArrayFootprint+1),this.wilsonNumbers.canvasHeight*(i+top+1+.9375)/(this.totalArrayFootprint+1)+1,this.wilsonNumbers.canvasWidth/(this.totalArrayFootprint+1),this.wilsonNumbers.canvasHeight*(1/16)/(this.totalArrayFootprint+1)):this.wilsonNumbers.ctx.fillRect(this.wilsonNumbers.canvasWidth*(j+array+.9375)/(this.totalArrayFootprint+1),this.wilsonNumbers.canvasHeight*(i+top+1)/(this.totalArrayFootprint+1)+1,this.wilsonNumbers.canvasWidth*(1/16)/(this.totalArrayFootprint+1),this.wilsonNumbers.canvasHeight/(this.totalArrayFootprint+1))}}export{PlanePartitions};
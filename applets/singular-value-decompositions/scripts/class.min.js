import{Applet}from"/scripts/applets/applet.min.js";import{loadScript}from"/scripts/src/main.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";class SingularValueDecompositions extends Applet{numImages;imageData=[];dataLength;U;S;V;uMagnitudes;loadPromise;constructor({canvas}){super(canvas);this.wilson=new WilsonCPU(canvas,{renderer:"cpu",canvasWidth:500}),this.loadPromise=loadScript("/scripts/numeric.min.js")}async run({files}){await this.loadPromise;var a=document.createElement("canvas");const s=a.getContext("2d");this.imageData=[];let i=0,r=0;console.log(files);for(const o of files)await new Promise(resolve=>{var a=new FileReader;a.onload=e=>{const a=new Image;a.onload=()=>{i=Math.max(i,a.width),r=Math.max(r,a.height),resolve()},a.src=e.target.result},a.readAsDataURL(o)});a.width=i,a.height=r;for(const l of files)await new Promise(resolve=>{var a=new FileReader;a.onload=e=>{const t=new Image;t.onload=()=>{s.clearRect(0,0,i,r),s.drawImage(t,(i-t.width)/2,(r-t.height)/2);var a=s.getImageData(0,0,i,r);this.imageData.push(a.data),resolve()},t.src=e.target.result},a.readAsDataURL(l)});this.dataLength=i*r*4,this.numImages=files.length;var{U:a,S:t,V:n}=numeric.svd(numeric.transpose(this.imageData));this.U=numeric.transpose(a),this.S=t,this.V=n,this.wilson.canvas.style.aspectRatio=i+" / "+r,this.wilson.resizeCanvas({width:i}),this.drawNormalizedImage(this.U[0])}drawNormalizedImage(uVec){var a=[...uVec];let e=0,t=0;for(let i=0;i<a.length;i+=4)e=Math.max(e,a[i],a[i+1],a[i+2]),t=Math.min(t,a[i],a[i+1],a[i+2]);for(let r=0;r<a.length;r+=4)a[r]=(a[r]-t)/(e-t)*255,a[r+1]=(a[r+1]-t)/(e-t)*255,a[r+2]=(a[r+2]-t)/(e-t)*255,a[r+3]=255;var s=new ImageData(new Uint8ClampedArray(a),this.wilson.canvasWidth,this.wilson.canvasHeight);this.wilson.ctx.putImageData(s,0,0)}drawTruncatedEigenface(index,depth=this.numImages){this.drawNormalizedImage(this.U[0])}}export{SingularValueDecompositions};
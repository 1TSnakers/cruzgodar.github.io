import{Applet}from"/scripts/applets/applet.min.js";import{loadScript}from"/scripts/src/main.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";class SingularValueDecompositions extends Applet{numImages;imageData=[];dataLength;U;S;V;uMagnitudes;loadPromise;constructor({canvas}){super(canvas);this.wilson=new WilsonCPU(canvas,{canvasWidth:500}),this.loadPromise=loadScript("/scripts/numeric.min.js")}async run({files}){await this.loadPromise;var t=document.createElement("canvas");const i=t.getContext("2d",{willReadFrequently:!0});this.imageData=[];let s=0,r=0;for(const o of files)await new Promise(resolve=>{var t=new FileReader;t.onload=e=>{const t=new Image;t.onload=()=>{s=Math.max(s,t.width),r=Math.max(r,t.height),resolve()},t.src=e.target.result},t.readAsDataURL(o)});t.width=s,t.height=r;for(const h of files)await new Promise(resolve=>{var t=new FileReader;t.onload=e=>{const a=new Image;a.onload=()=>{i.clearRect(0,0,s,r),i.drawImage(a,(s-a.width)/2,(r-a.height)/2);var t=i.getImageData(0,0,s,r);this.imageData.push(t.data),resolve()},a.src=e.target.result},t.readAsDataURL(h)});this.dataLength=s*r*4,this.numImages=files.length;var{U:t,S:a,V:n}=numeric.svd(numeric.transpose(this.imageData));this.U=numeric.transpose(t),this.S=a,this.V=n,this.wilson.canvas.style.aspectRatio=s+" / "+r,this.wilson.resizeCanvas({width:s}),this.drawTruncatedEigenimage(0,1)}drawNormalizedImage(uVec){var t=[...uVec];let e=0,a=0;for(let s=0;s<t.length;s+=4)e=Math.max(e,t[s],t[s+1],t[s+2]),a=Math.min(a,t[s],t[s+1],t[s+2]);for(let r=0;r<t.length;r+=4)t[r]=(t[r]-a)/(e-a)*255,t[r+1]=(t[r+1]-a)/(e-a)*255,t[r+2]=(t[r+2]-a)/(e-a)*255,t[r+3]=255;var i=new ImageData(new Uint8ClampedArray(t),this.wilson.canvasWidth,this.wilson.canvasHeight);this.wilson.ctx.putImageData(i,0,0)}drawTruncatedEigenimage(index,depth=this.numImages){var e=Math.floor(index),a=Math.ceil(index),i=new Array(this.dataLength).fill(0),s=Math.floor(depth);for(let m=0;m<s;m++){var r=this.S[m];for(let t=0;t<this.dataLength;t++)i[t]+=r*this.U[m][t]*this.V[e][m]*(1-(index-e))}if(s<depth){var n=s,o=this.S[n];for(let t=0;t<this.dataLength;t++)i[t]+=o*this.U[n][t]*this.V[e][n]*(depth-s)*(1-(index-e))}if(e!==a){for(let e=0;e<s;e++){var h=this.S[e];for(let t=0;t<this.dataLength;t++)i[t]+=h*this.U[e][t]*this.V[a][e]*(1-(a-index))}if(s<depth){var l=s,d=this.S[l];for(let t=0;t<this.dataLength;t++)i[t]+=d*this.U[l][t]*this.V[a][l]*(depth-s)*(1-(a-index))}}this.drawNormalizedImage(i)}}export{SingularValueDecompositions};
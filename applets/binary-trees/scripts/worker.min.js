"use strict";onmessage=async function(t){root=t.data[0],branchPoints=t.data[1],await drawAnimatedBinaryTree(),postMessage(["done"])};let root=[],branchPoints=[];const numAnimatedIterations=10;function drawAnimatedBinaryTree(){return new Promise(async function(t,o){let n=[Math.atan2(branchPoints[0][0]-root[0],branchPoints[0][1]-root[1]),Math.atan2(branchPoints[1][0]-root[0],branchPoints[1][1]-root[1])];var a=(n[0]-n[1])/2,r=[Math.sqrt((branchPoints[0][0]-root[0])*(branchPoints[0][0]-root[0])+(branchPoints[0][1]-root[1])*(branchPoints[0][1]-root[1])),Math.sqrt((branchPoints[1][0]-root[0])*(branchPoints[1][0]-root[0])+(branchPoints[1][1]-root[1])*(branchPoints[1][1]-root[1]))];let s=[root],e=1;for(let t=0;t<numAnimatedIterations;t++){var h=[],i=[],c=20*e+1,M=`rgb(${139*Math.sqrt(e)}, ${69*Math.sqrt(e)+128*(1-Math.sqrt(e))}, ${19*Math.sqrt(e)})`;for(let o=0;o<=100;o++){for(let t=0;t<s.length;t++){var u=s[t][1],P=s[t][0],b=(1-o/100)*u+o/100*(s[t][1]+r[0]*e*Math.cos(n[2*t])),l=(1-o/100)*P+o/100*(s[t][0]+r[0]*e*Math.sin(n[2*t]));postMessage([u,P,b,l,M,c]),u=s[t][1],P=s[t][0],b=(1-o/100)*u+o/100*(s[t][1]+r[1]*e*Math.cos(n[2*t+1])),l=(1-o/100)*P+o/100*(s[t][0]+r[1]*e*Math.sin(n[2*t+1])),postMessage([u,P,b,l,M,c])}await sleep(8)}for(let t=0;t<s.length;t++){s[t][1],s[t][0];var p=s[t][1]+r[0]*e*Math.cos(n[2*t]),m=s[t][0]+r[0]*e*Math.sin(n[2*t]);h.push([m,p]),i.push(n[2*t]-a),i.push(n[2*t]+a),s[t][1],s[t][0],p=s[t][1]+r[1]*e*Math.cos(n[2*t+1]),m=s[t][0]+r[1]*e*Math.sin(n[2*t+1]),h.push([m,p]),i.push(n[2*t+1]-a),i.push(n[2*t+1]+a)}s=h,n=i,e*=.675}t()})}function sleep(n){return new Promise(function(t,o){setTimeout(t,n)})}
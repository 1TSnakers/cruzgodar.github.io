"use strict";onmessage=async function(t){root=t.data[0],branch_points=t.data[1],await draw_animated_binary_tree(),postMessage(["done"])};let root=[],branch_points=[],num_animated_iterations=10;function draw_animated_binary_tree(){return new Promise(async function(t,o){let n=[Math.atan2(branch_points[0][0]-root[0],branch_points[0][1]-root[1]),Math.atan2(branch_points[1][0]-root[0],branch_points[1][1]-root[1])],a=(n[0]-n[1])/2,s=[Math.sqrt((branch_points[0][0]-root[0])*(branch_points[0][0]-root[0])+(branch_points[0][1]-root[1])*(branch_points[0][1]-root[1])),Math.sqrt((branch_points[1][0]-root[0])*(branch_points[1][0]-root[0])+(branch_points[1][1]-root[1])*(branch_points[1][1]-root[1]))],r=[root],e=1;for(let t=0;t<num_animated_iterations;t++){let t=[],o=[],i=20*e+1,h=`rgb(${139*Math.sqrt(e)}, ${69*Math.sqrt(e)+128*(1-Math.sqrt(e))}, ${19*Math.sqrt(e)})`;for(let t=0;t<=100;t++){for(let o=0;o<r.length;o++){let a=r[o][1],c=r[o][0],p=(1-t/100)*a+t/100*(r[o][1]+s[0]*e*Math.cos(n[2*o])),_=(1-t/100)*c+t/100*(r[o][0]+s[0]*e*Math.sin(n[2*o]));postMessage([a,c,p,_,h,i]),a=r[o][1],c=r[o][0],p=(1-t/100)*a+t/100*(r[o][1]+s[1]*e*Math.cos(n[2*o+1])),_=(1-t/100)*c+t/100*(r[o][0]+s[1]*e*Math.sin(n[2*o+1])),postMessage([a,c,p,_,h,i])}await sleep(8)}for(let i=0;i<r.length;i++){let h=r[i][1],c=r[i][0],p=r[i][1]+s[0]*e*Math.cos(n[2*i]),_=r[i][0]+s[0]*e*Math.sin(n[2*i]);t.push([_,p]),o.push(n[2*i]-a),o.push(n[2*i]+a),h=r[i][1],c=r[i][0],p=r[i][1]+s[1]*e*Math.cos(n[2*i+1]),_=r[i][0]+s[1]*e*Math.sin(n[2*i+1]),t.push([_,p]),o.push(n[2*i+1]-a),o.push(n[2*i+1]+a)}r=t,n=o,e*=.675}t()})}function sleep(t){return new Promise(function(o,n){setTimeout(o,t)})}
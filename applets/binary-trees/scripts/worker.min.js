"use strict";onmessage=async function(t){root=t.data[0],branchPoints=t.data[1],await drawAnimatedBinaryTree(),postMessage(["done"])};let root=[],branchPoints=[];const numAnimatedIterations=10;function drawAnimatedBinaryTree(){return new Promise(async function(t,n){let o=[Math.atan2(branchPoints[0][0]-root[0],branchPoints[0][1]-root[1]),Math.atan2(branchPoints[1][0]-root[0],branchPoints[1][1]-root[1])],_=(o[0]-o[1])/2,$=[Math.sqrt((branchPoints[0][0]-root[0])*(branchPoints[0][0]-root[0])+(branchPoints[0][1]-root[1])*(branchPoints[0][1]-root[1])),Math.sqrt((branchPoints[1][0]-root[0])*(branchPoints[1][0]-root[0])+(branchPoints[1][1]-root[1])*(branchPoints[1][1]-root[1]))],r=[root],s=1;for(let a=0;a<10;a++){let i=[],e=[],c=20*s+1,h=139*Math.sqrt(s),b=69*Math.sqrt(s)+(1-Math.sqrt(s))*128,u=19*Math.sqrt(s),P=`rgb(${h}, ${b}, ${u})`;for(let l=0;l<=100;l++){for(let f=0;f<r.length;f++){let d=r[f][1],p=r[f][0],q=(1-l/100)*d+l/100*(r[f][1]+$[0]*s*Math.cos(o[2*f])),w=(1-l/100)*p+l/100*(r[f][0]+$[0]*s*Math.sin(o[2*f]));postMessage([d,p,q,w,P,c]),d=r[f][1],p=r[f][0],q=(1-l/100)*d+l/100*(r[f][1]+$[1]*s*Math.cos(o[2*f+1])),w=(1-l/100)*p+l/100*(r[f][0]+$[1]*s*Math.sin(o[2*f+1])),postMessage([d,p,q,w,P,c])}await sleep(8)}for(let m=0;m<r.length;m++){let y=r[m][1],g=r[m][0],A=r[m][1]+$[0]*s*Math.cos(o[2*m]),B=r[m][0]+$[0]*s*Math.sin(o[2*m]);i.push([B,A]),e.push(o[2*m]-_),e.push(o[2*m]+_),y=r[m][1],g=r[m][0],A=r[m][1]+$[1]*s*Math.cos(o[2*m+1]),B=r[m][0]+$[1]*s*Math.sin(o[2*m+1]),i.push([B,A]),e.push(o[2*m+1]-_),e.push(o[2*m+1]+_)}r=i,o=e,s*=.675}t()})}function sleep(t){return new Promise(function(n,o){setTimeout(n,t)})}
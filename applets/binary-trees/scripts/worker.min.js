"use strict";onmessage=async t=>{root=t.data[0],branchPoints=t.data[1],await drawAnimatedBinaryTree(),postMessage(["done"])};let root=[],branchPoints=[];const numAnimatedIterations=10;async function drawAnimatedBinaryTree(){let a=[Math.atan2(branchPoints[0][0]-root[0],branchPoints[0][1]-root[1]),Math.atan2(branchPoints[1][0]-root[0],branchPoints[1][1]-root[1])];var o=(a[0]-a[1])/2,n=[Math.sqrt((branchPoints[0][0]-root[0])*(branchPoints[0][0]-root[0])+(branchPoints[0][1]-root[1])*(branchPoints[0][1]-root[1])),Math.sqrt((branchPoints[1][0]-root[0])*(branchPoints[1][0]-root[0])+(branchPoints[1][1]-root[1])*(branchPoints[1][1]-root[1]))];let r=[root],s=1;for(let t=0;t<numAnimatedIterations;t++){var h=[],e=[],i=20*s+1,c=`rgb(${139*Math.sqrt(s)}, ${69*Math.sqrt(s)+128*(1-Math.sqrt(s))}, ${19*Math.sqrt(s)})`;for(let o=0;o<=100;o++){for(let t=0;t<r.length;t++){var M=r[t][1],b=r[t][0],P=(1-o/100)*M+o/100*(r[t][1]+n[0]*s*Math.cos(a[2*t])),u=(1-o/100)*b+o/100*(r[t][0]+n[0]*s*Math.sin(a[2*t]));postMessage([M,b,P,u,c,i]),M=r[t][1],b=r[t][0],P=(1-o/100)*M+o/100*(r[t][1]+n[1]*s*Math.cos(a[2*t+1])),u=(1-o/100)*b+o/100*(r[t][0]+n[1]*s*Math.sin(a[2*t+1])),postMessage([M,b,P,u,c,i])}await new Promise(t=>setTimeout(t,8))}for(let t=0;t<r.length;t++){var d=r[t][1]+n[0]*s*Math.cos(a[2*t]),l=r[t][0]+n[0]*s*Math.sin(a[2*t]);h.push([l,d]),e.push(a[2*t]-o),e.push(a[2*t]+o),d=r[t][1]+n[1]*s*Math.cos(a[2*t+1]),l=r[t][0]+n[1]*s*Math.sin(a[2*t+1]),h.push([l,d]),e.push(a[2*t+1]-o),e.push(a[2*t+1]+o)}r=h,a=e,s*=.675}}
"use strict";const sleep=require("/scripts/src/main.js")["sleep"];let root=[],branchPoints=[];const numAnimatedIterations=10;async function drawAnimatedBinaryTree(){let o=[Math.atan2(branchPoints[0][0]-root[0],branchPoints[0][1]-root[1]),Math.atan2(branchPoints[1][0]-root[0],branchPoints[1][1]-root[1])];var s=(o[0]-o[1])/2,r=[Math.sqrt((branchPoints[0][0]-root[0])*(branchPoints[0][0]-root[0])+(branchPoints[0][1]-root[1])*(branchPoints[0][1]-root[1])),Math.sqrt((branchPoints[1][0]-root[0])*(branchPoints[1][0]-root[0])+(branchPoints[1][1]-root[1])*(branchPoints[1][1]-root[1]))];let n=[root],e=1;for(let t=0;t<numAnimatedIterations;t++){var h=[],i=[],c=20*e+1,M=[139*Math.sqrt(e),69*Math.sqrt(e)+128*(1-Math.sqrt(e)),19*Math.sqrt(e)];for(let a=0;a<=100;a++){for(let t=0;t<n.length;t++){var b=n[t][1],P=n[t][0],p=(1-a/100)*b+a/100*(n[t][1]+r[0]*e*Math.cos(o[2*t])),l=(1-a/100)*P+a/100*(n[t][0]+r[0]*e*Math.sin(o[2*t]));postMessage([b,P,p,l,M,c]),b=n[t][1],P=n[t][0],p=(1-a/100)*b+a/100*(n[t][1]+r[1]*e*Math.cos(o[2*t+1])),l=(1-a/100)*P+a/100*(n[t][0]+r[1]*e*Math.sin(o[2*t+1])),postMessage([b,P,p,l,M,c])}await sleep(8)}for(let t=0;t<n.length;t++){var u=n[t][1]+r[0]*e*Math.cos(o[2*t]),d=n[t][0]+r[0]*e*Math.sin(o[2*t]);h.push([d,u]),i.push(o[2*t]-s),i.push(o[2*t]+s),u=n[t][1]+r[1]*e*Math.cos(o[2*t+1]),d=n[t][0]+r[1]*e*Math.sin(o[2*t+1]),h.push([d,u]),i.push(o[2*t+1]-s),i.push(o[2*t+1]+s)}n=h,o=i,e*=.675}}onmessage=async e=>{root=e.data[0],branchPoints=e.data[1],await drawAnimatedBinaryTree(),postMessage(["done"])};
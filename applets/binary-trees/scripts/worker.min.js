onmessage=async function(h){root=h.data[0];branchPoints=h.data[1];await drawAnimatedBinaryTree();postMessage(["done"])};let root=[],branchPoints=[];const numAnimatedIterations=10;
function drawAnimatedBinaryTree(){return new Promise(async function(h,a){a=[Math.atan2(branchPoints[0][0]-root[0],branchPoints[0][1]-root[1]),Math.atan2(branchPoints[1][0]-root[0],branchPoints[1][1]-root[1])];let l=(a[0]-a[1])/2,g=[Math.sqrt((branchPoints[0][0]-root[0])*(branchPoints[0][0]-root[0])+(branchPoints[0][1]-root[1])*(branchPoints[0][1]-root[1])),Math.sqrt((branchPoints[1][0]-root[0])*(branchPoints[1][0]-root[0])+(branchPoints[1][1]-root[1])*(branchPoints[1][1]-root[1]))],c=[root],d=1;for(let u=
0;u<numAnimatedIterations;u++){let q=[],m=[];var b=20*d+1,k=`rgb(${139*Math.sqrt(d)}, ${69*Math.sqrt(d)+128*(1-Math.sqrt(d))}, ${19*Math.sqrt(d)})`;for(var e=0;100>=e;e++){for(let f=0;f<c.length;f++){let n=c[f][1],p=c[f][0],r=(1-e/100)*n+e/100*(c[f][1]+g[0]*d*Math.cos(a[2*f])),t=(1-e/100)*p+e/100*(c[f][0]+g[0]*d*Math.sin(a[2*f]));postMessage([n,p,r,t,k,b]);n=c[f][1];p=c[f][0];r=(1-e/100)*n+e/100*(c[f][1]+g[1]*d*Math.cos(a[2*f+1]));t=(1-e/100)*p+e/100*(c[f][0]+g[1]*d*Math.sin(a[2*f+1]));postMessage([n,
p,r,t,k,b])}await sleep(8)}for(b=0;b<c.length;b++)k=c[b][1]+g[0]*d*Math.cos(a[2*b]),e=c[b][0]+g[0]*d*Math.sin(a[2*b]),q.push([e,k]),m.push(a[2*b]-l),m.push(a[2*b]+l),k=c[b][1]+g[1]*d*Math.cos(a[2*b+1]),e=c[b][0]+g[1]*d*Math.sin(a[2*b+1]),q.push([e,k]),m.push(a[2*b+1]-l),m.push(a[2*b+1]+l);c=q;a=m;d*=.675}h()})}function sleep(h){return new Promise(function(a,l){setTimeout(a,h)})};

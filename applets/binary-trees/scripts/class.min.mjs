import{opacityAnimationTime}from"/scripts/src/animation.min.mjs";import{Applet}from"/scripts/src/applets.min.mjs";import{aspectRatio}from"/scripts/src/layout.min.mjs";import{$$,addTemporaryInterval,addTemporaryWorker}from"/scripts/src/main.min.mjs";import{Wilson}from"/scripts/wilson.min.mjs";class BinaryTree extends Applet{root=[];branchPoints=[];numPreviewIterations=5;webWorker=null;constructor(canvas){super(canvas);var options={renderer:"cpu",canvasWidth:2e3,canvasHeight:2e3,useDraggables:!0,draggablesMousedownCallback:this.onGrabDraggable.bind(this),draggablesTouchstartCallback:this.onGrabDraggable.bind(this),draggablesMousemoveCallback:this.onDragDraggable.bind(this),draggablesTouchmoveCallback:this.onDragDraggable.bind(this),draggablesMouseupCallback:this.onReleaseDraggable.bind(this),draggablesTouchendCallback:this.onReleaseDraggable.bind(this),useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:()=>this.changeAspectRatio()};this.wilson=new Wilson(canvas,options),this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.wilson.canvasWidth,this.wilson.canvasHeight),this.initBranchMarkers()}preview(root,branchPoints){this.root=root,this.branchPoints=branchPoints,this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.wilson.canvasWidth,this.wilson.canvasHeight);let angles=[Math.atan2(this.branchPoints[0][0]-this.root[0],this.branchPoints[0][1]-this.root[1]),Math.atan2(this.branchPoints[1][0]-this.root[0],this.branchPoints[1][1]-this.root[1])];var angleStep=(angles[0]-angles[1])/2,distances=[Math.sqrt((this.branchPoints[0][0]-this.root[0])*(this.branchPoints[0][0]-this.root[0])+(this.branchPoints[0][1]-this.root[1])*(this.branchPoints[0][1]-this.root[1])),Math.sqrt((this.branchPoints[1][0]-this.root[0])*(this.branchPoints[1][0]-this.root[0])+(this.branchPoints[1][1]-this.root[1])*(this.branchPoints[1][1]-this.root[1]))];let startingPoints=[this.root],scale=1;for(let iteration=0;iteration<this.numPreviewIterations;iteration++){var newStartingPoints=[],newAngles=[],r=(this.wilson.ctx.lineWidth=20*scale+1,139*Math.sqrt(scale)),g=69*Math.sqrt(scale)+128*(1-Math.sqrt(scale)),b=19*Math.sqrt(scale);this.wilson.ctx.strokeStyle=`rgb(${r}, ${g}, ${b})`;for(let i=0;i<startingPoints.length;i++){var startX=startingPoints[i][1],startY=startingPoints[i][0],endX=startingPoints[i][1]+distances[0]*scale*Math.cos(angles[2*i]),endY=startingPoints[i][0]+distances[0]*scale*Math.sin(angles[2*i]);this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(startX,startY),this.wilson.ctx.lineTo(endX,endY),this.wilson.ctx.stroke(),newStartingPoints.push([endY,endX]),newAngles.push(angles[2*i]-angleStep),newAngles.push(angles[2*i]+angleStep),startX=startingPoints[i][1],startY=startingPoints[i][0],endX=startingPoints[i][1]+distances[1]*scale*Math.cos(angles[2*i+1]),endY=startingPoints[i][0]+distances[1]*scale*Math.sin(angles[2*i+1]),this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(startX,startY),this.wilson.ctx.lineTo(endX,endY),this.wilson.ctx.stroke(),newStartingPoints.push([endY,endX]),newAngles.push(angles[2*i+1]-angleStep),newAngles.push(angles[2*i+1]+angleStep)}startingPoints=newStartingPoints,angles=newAngles,scale*=.675}}animate(root,branchPoints){this.root=root,this.branchPoints=branchPoints,this.webWorker=addTemporaryWorker("/applets/binary-trees/scripts/worker.js"),this.webWorker.onmessage=e=>{var timeoutId;"done"===e.data[0]?(timeoutId=setTimeout(()=>{$$(".wilson-draggable").forEach(element=>element.style.opacity=1)},500),this.timeoutIds.push(timeoutId)):(this.wilson.ctx.strokeStyle=e.data[4],this.wilson.ctx.lineWidth=e.data[5],this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(e.data[0],e.data[1]),this.wilson.ctx.lineTo(e.data[2],e.data[3]),this.wilson.ctx.stroke())},this.webWorker.postMessage([this.root,this.branchPoints])}initBranchMarkers(){this.wilson.draggables.add(-1/7,-1/3),this.wilson.draggables.add(1/7,-1/3),this.root=this.wilson.utils.interpolate.worldToCanvas(0,-.8),this.branchPoints[0]=this.wilson.utils.interpolate.worldToCanvas(-1/7,-1/3),this.branchPoints[1]=this.wilson.utils.interpolate.worldToCanvas(1/7,-1/3),this.preview(this.root,this.branchPoints)}onGrabDraggable(){this.webWorker?.terminate&&this.webWorker.terminate(),$$(".wilson-draggable").forEach(element=>element.style.opacity=1),this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.wilson.canvasWidth,this.wilson.canvasHeight),this.preview(this.root,this.branchPoints)}onDragDraggable(activeDraggable,x,y){this.branchPoints[activeDraggable]=this.wilson.utils.interpolate.worldToCanvas(x,y),this.preview(this.root,this.branchPoints)}onReleaseDraggable(){document.body.style.WebkitUserSelect="",$$(".wilson-draggable").forEach(element=>element.style.opacity=0);let step=0;const that=this;const refreshId=addTemporaryInterval({callback:()=>{var alpha=step/37;that.wilson.ctx.fillStyle=`rgba(0, 0, 0, ${alpha})`,that.wilson.ctx.fillRect(0,0,that.wilson.canvasWidth,that.wilson.canvasHeight),step++},delay:8});var timeoutId=setTimeout(()=>{clearInterval(refreshId),that.wilson.ctx.fillStyle="rgb(0, 0, 0)",that.wilson.ctx.fillRect(0,0,that.wilson.canvasWidth,that.wilson.canvasHeight),that.animate(that.root,that.branchPoints)},opacityAnimationTime);this.timeoutIds.push(timeoutId)}changeAspectRatio(){this.webWorker?.terminate&&this.webWorker.terminate(),$$(".wilson-draggable").forEach(element=>element.style.opacity=1),this.wilson.fullscreen.currentlyFullscreen?1<=aspectRatio?this.wilson.changeCanvasSize(2e3,2e3/aspectRatio):this.wilson.changeCanvasSize(2e3*aspectRatio,2e3):this.wilson.changeCanvasSize(2e3,2e3),this.wilson.draggables.recalculateLocations(),this.root=this.wilson.utils.interpolate.worldToCanvas(0,-.8),this.branchPoints[0]=this.wilson.utils.interpolate.worldToCanvas(...this.wilson.draggables.worldCoordinates[0]),this.branchPoints[1]=this.wilson.utils.interpolate.worldToCanvas(...this.wilson.draggables.worldCoordinates[1]),this.preview(this.root,this.branchPoints)}}export{BinaryTree};
import{ThurstonGeometry}from"../class.min.js";import{BaseGeometry,getMinGlslString}from"./base.min.js";import{$}from"/scripts/src/main.min.js";class E3Geometry extends BaseGeometry{}class E3Axes extends E3Geometry{static distances=`
		float distance1 = length(pos.yz) - .25;
		float distance2 = length(pos.xz) - .25;
		float distance3 = length(pos.xy) - .25;

		float minDistance = ${getMinGlslString("distance",3)};
	`;distanceEstimatorGlsl=`
		${E3Axes.distances}

		return minDistance;
	`;getColorGlsl=`
		${E3Axes.distances}

		if (minDistance == distance1)
		{
			return vec3(
				1.0,
				.5 + .25 * (.5 * (sin(pos.x) + 1.0)),
				.5 + .25 * (.5 * (cos(pos.x) + 1.0))
			);
		}

		if (minDistance == distance2)
		{
			return vec3(
				.5 + .25 * (.5 * (sin(pos.y) + 1.0)),
				1.0,
				.5 + .25 * (.5 * (cos(pos.y) + 1.0))
			);
		}

		return vec3(
			.5 + .25 * (.5 * (sin(pos.z) + 1.0)),
			.5 + .25 * (.5 * (cos(pos.z) + 1.0)),
			1.0
		);
	`;lightGlsl=`
		vec4 lightDirection1 = normalize(vec4(10.0, 10.0, 10.0, 1.0) - pos);
		float dotProduct1 = dot(surfaceNormal, lightDirection1);

		float lightIntensity = (.25 + .75 * dotProduct1 * dotProduct1) * 1.5;
	`;cameraPos=[4,4,2,1];normalVec=[0,0,0,1];upVec=[0,0,1,0];rightVec=[Math.sqrt(2)/2,-Math.sqrt(2)/2,0,0];forwardVec=[-Math.sqrt(2)/2,-Math.sqrt(2)/2,0,0];movingSpeed=4}class E3Rooms extends E3Geometry{static distances=`
		float effectiveWallThickness = wallThickness + sceneTransition * .471 / .75;
		float distance1 = effectiveWallThickness - length(mod(pos.xyz, 2.0) - vec3(1.0, 1.0, 1.0));

		float effectiveRadius = .5 - .5 / .75 * (1.0 - sceneTransition);
		float distance2 = length(mod(pos.xyz, 2.0) - vec3(1.0, 1.0, 1.0)) - effectiveRadius;
		
		float minDistance = ${getMinGlslString("distance",2)};
	`;distanceEstimatorGlsl=`
		${E3Rooms.distances}

		return minDistance;
	`;getColorGlsl=`
		return mix(
			vec3(
				.25 + .75 * (.5 * (sin(pos.z * 0.75) + 1.0)),
				.25 + .75 * (.5 * (sin(pos.x * 0.75) + 1.0)),
				.25 + .75 * (.5 * (sin((-pos.y + 2.0) * 0.75) + 1.0))
			),
			vec3(
				.25 + .75 * (.5 * (sin(floor(pos.x + .5) * 40.0) + 1.0)),
				.25 + .75 * (.5 * (sin(floor(pos.y + .5) * 57.0) + 1.0)),
				.25 + .75 * (.5 * (sin(floor(pos.z + .5) * 89.0) + 1.0))
			),
			sceneTransition
		);
	`;lightGlsl=`
		vec4 lightDirection1 = normalize(vec4(1.0, 1.0, 1.0, 1.0) - pos);
		float dotProduct1 = dot(surfaceNormal, lightDirection1);

		float lightIntensity1 = (.25 + .75 * dotProduct1 * dotProduct1) * 1.5;

		vec4 lightDirection2 = normalize(vec4(1.5, -1.5, 0.5, 1.0) - pos);
		float dotProduct2 = dot(surfaceNormal, lightDirection2);

		float lightIntensity2 = max(dotProduct2, -.5 * dotProduct2) * 1.25;

		float lightIntensity = mix(lightIntensity1, lightIntensity2, sceneTransition);
	`;cameraPos=[1,1.25,1,1];normalVec=[0,0,0,1];upVec=[0,0,1,0];rightVec=[-1,0,0,0];forwardVec=[0,1,0,0];movingSpeed=2;uniformGlsl=`
		uniform float sceneTransition;
		uniform float wallThickness;
	`;uniformNames=["sceneTransition","wallThickness"];updateUniforms(gl,uniformList){var t=1.5-(this.sliderValues.wallThickness+.85)/2*.2;gl.uniform1f(uniformList.sceneTransition,this.sliderValues.sceneTransition),gl.uniform1f(uniformList.wallThickness,t)}uiElementsUsed="#wall-thickness-slider, #switch-scene-button";initUI(){var t=$("#wall-thickness-slider"),e=$("#wall-thickness-slider-value");t.min=-.85,t.max=1.55,t.value=1.55,e.textContent=1.55,this.sliderValues.wallThickness=1.55}getRelocatedCameraPos(newSceneTransition){var i=[this.cameraPos[0]%2,this.cameraPos[1]%2,this.cameraPos[2]%2,1];if(1===newSceneTransition){var o=[[0,0,0,1],[0,0,2,1],[0,2,0,1],[0,2,2,1],[2,0,0,1],[2,0,2,1],[2,2,0,1],[2,2,2,1]];let t=1/0,e=0;for(let s=0;s<o.length;s++){var n=ThurstonGeometry.magnitude([i[0]-o[s][0],i[1]-o[s][1],i[2]-o[s][2],i[3]-o[s][3]]);n<t&&(t=n,e=s)}return[this.cameraPos[0]-i[0]+o[e][0],this.cameraPos[1]-i[1]+o[e][1],this.cameraPos[2]-i[2]+o[e][2],this.cameraPos[3]-i[3]+o[e][3]]}var t=[[1,1,1,1],[1,1,-1,1],[1,-1,1,1],[1,-1,-1,1],[-1,1,1,1],[-1,1,-1,1],[-1,-1,1,1],[-1,-1,-1,1]];let e=1/0,s=0;for(let r=0;r<t.length;r++){var a=ThurstonGeometry.magnitude([i[0]-t[r][0],i[1]-t[r][1],i[2]-t[r][2],i[3]-t[r][3]]);a<e&&(e=a,s=r)}return[this.cameraPos[0]-i[0]+t[s][0],this.cameraPos[1]-i[1]+t[s][1],this.cameraPos[2]-i[2]+t[s][2],this.cameraPos[3]-i[3]+t[s][3]]}}export{E3Geometry,E3Axes,E3Rooms};
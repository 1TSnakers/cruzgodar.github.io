import{ThurstonGeometry}from"../class.min.js";import{BaseGeometry,getColorGlslString,getMaxGlslString,getMinGlslString}from"./base.min.js";import{$}from"/scripts/src/main.min.js";class S3Geometry extends BaseGeometry{geodesicGlsl=`
		vec4 pos = cos(t) * startPos + sin(t) * rayDirectionVec;
	`;fogGlsl=`
		return mix(color, fogColor, 1.0 - exp(-acos(dot(pos, cameraPos)) * fogScaling));
	`;maxMarches="100";maxT="6.283";correctPosition(pos){return ThurstonGeometry.normalize(pos)}getNormalVec(cameraPos){return this.normalize([-cameraPos[0],-cameraPos[1],-cameraPos[2],-cameraPos[3]])}}class S3Axes extends S3Geometry{static distances=`
		float distance1 = acos(length(pos.xw)) - .05;
		float distance2 = acos(length(pos.yw)) - .05;
		float distance3 = acos(length(pos.zw)) - .05;

		float minDistance = ${getMinGlslString("distance",3)};
	`;distanceEstimatorGlsl=`
		${S3Axes.distances}

		return minDistance;
	`;getColorGlsl=`
		${S3Axes.distances}

		if (minDistance == distance1)
		{
			return vec3(
				1.0,
				.5 + .25 * (.5 * (sin(20.0 * pos.x) + 1.0)),
				.5 + .25 * (.5 * (cos(20.0 * pos.x) + 1.0))
			);
		}

		if (minDistance == distance2)
		{
			return vec3(
				.5 + .25 * (.5 * (sin(20.0 * pos.y) + 1.0)),
				1.0,
				.5 + .25 * (.5 * (cos(20.0 * pos.y) + 1.0))
			);
		}

		return vec3(
			.5 + .25 * (.5 * (sin(20.0 * pos.z) + 1.0)),
			.5 + .25 * (.5 * (cos(20.0 * pos.z) + 1.0)),
			1.0
		);
	`;lightGlsl=`
		vec4 lightDirection1 = normalize(vec4(.5, .5, .5, .5) - pos);
		float dotProduct1 = dot(surfaceNormal, lightDirection1);

		vec4 lightDirection2 = normalize(vec4(-.5, -.5, -.5, -.5) - pos);
		float dotProduct2 = dot(surfaceNormal, lightDirection2);

		float lightIntensity = 1.5 * min(abs(dotProduct1), abs(dotProduct2));
	`;cameraPos=[.6247,.6247,.4683,-.0157];normalVec=[-.6247,-.6247,-.4683,.0157];upVec=[-.3268,-.3268,.8657,-.1925];rightVec=[.7071,-.7071,0,0];forwardVec=[-.0542,-.0542,.1773,.9812]}class S3Rooms extends S3Geometry{static distances=`
		float acosX = acos(pos.x);
		float acosNegX = pi - acosX;
		float acosY = acos(pos.y);
		float acosNegY = pi - acosY;
		float acosZ = acos(pos.z);
		float acosNegZ = pi - acosZ;
		float acosW = acos(pos.w);
		float acosNegW = pi - acosW;

		float effectiveWallThickness = wallThickness + sceneTransition * .125 / .75;
		float distance1 = effectiveWallThickness - acosX;
		float distance2 = effectiveWallThickness - acosNegX;
		float distance3 = effectiveWallThickness - acosY;
		float distance4 = effectiveWallThickness - acosNegY;
		float distance5 = effectiveWallThickness - acosZ;
		float distance6 = effectiveWallThickness - acosNegZ;
		float distance7 = effectiveWallThickness - acosW;
		float distance8 = effectiveWallThickness - acosNegW;

		float effectiveRadius = .3 - .3 / .75 * (1.0 - sceneTransition);
		float distance2_1 = acosX - effectiveRadius;
		float distance2_2 = acosNegX - effectiveRadius;
		float distance2_3 = acosY - effectiveRadius;
		float distance2_4 = acosNegY - effectiveRadius;
		float distance2_5 = acosZ - effectiveRadius;
		float distance2_6 = acosNegZ - effectiveRadius;
		float distance2_7 = acosW - effectiveRadius;

		float minDistance1 = ${getMaxGlslString("distance",8)};
		float minDistance2 = ${getMinGlslString("distance2_",7)};
		float minDistance = min(minDistance1, minDistance2);
	`;distanceEstimatorGlsl=`
		${S3Rooms.distances}

		return minDistance;
	`;getColorGlsl=`
		${S3Rooms.distances}

		float variation = .075;

		if (minDistance == distance1)
		{
			return vec3(
				.85 + .15 * (.5 * (sin((variation * pos.y) * 17.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.z) * 23.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.w) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance2)
		{
			return vec3(
				.5 * (.5 * (sin((variation * pos.y) * 17.0) + 1.0)),
				.85 + .15 * (.5 * (sin((variation * pos.z) * 23.0) + 1.0)),
				.85 + .15 * (.5 * (sin((variation * pos.w) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance3)
		{
			return vec3(
				.5 * (.5 * (sin((variation * pos.x) * 17.0) + 1.0)),
				.85 + .15 * (.5 * (sin((variation * pos.z) * 23.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.w) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance4)
		{
			return vec3(
				.85 + .15 * (.5 * (sin((variation * pos.x) * 17.0) + 1.0)),
				.5 + .15 * (.5 * (sin((variation * pos.y) * 23.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.z) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance5)
		{
			return vec3(
				.5 * (.5 * (sin((variation * pos.x) * 17.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.y) * 23.0) + 1.0)),
				.85 + .15 * (.5 * (sin((variation * pos.w) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance6)
		{
			return vec3(
				.85 + .15 * (.5 * (sin((variation * pos.x) * 17.0) + 1.0)),
				.85 + .15 * (.5 * (sin((variation * pos.y) * 23.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.w) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance7)
		{
			return vec3(
				.5 + .15 * (.5 * (sin((variation * pos.x) * 17.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.y) * 23.0) + 1.0)),
				.85 + .15 * (.5 * (sin((variation * pos.z) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance8)
		{
			return vec3(
				.65 + .35 * (.5 * (sin((variation * pos.x) * 17.0) + 1.0)),
				.65 + .35 * (.5 * (sin((variation * pos.y) * 23.0) + 1.0)),
				.65 + .35 * (.5 * (sin((variation * pos.z) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance2_1)
		{
			return vec3(1.0, 0.0, 0.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
		}

		if (minDistance == distance2_2)
		{
			return vec3(0.0, 1.0, 1.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
		}

		if (minDistance == distance2_3)
		{
			return vec3(0.0, 1.0, 0.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
		}

		if (minDistance == distance2_4)
		{
			return vec3(1.0, 0.0, 1.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
		}

		if (minDistance == distance2_5)
		{
			return vec3(0.0, 0.0, 1.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
		}

		if (minDistance == distance2_6)
		{
			return vec3(1.0, 1.0, 0.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
		}

		return vec3(1.0, 1.0, 1.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
	`;lightGlsl=`
		vec4 lightDirection1 = normalize(vec4(1.0, 1.0, 1.0, 1.0) - pos);
		float dotProduct1 = dot(surfaceNormal, lightDirection1);

		vec4 lightDirection2 = normalize(vec4(-1.0, -1.0, -1.0, -1.0) - pos);
		float dotProduct2 = dot(surfaceNormal, lightDirection2);

		float lightIntensity1 = 4.0 * max(dotProduct1, dotProduct2);



		vec4 lightDirection3 = normalize(vec4(.5, .5, .5, .5) - pos);
		float dotProduct3 = dot(surfaceNormal, lightDirection3);

		vec4 lightDirection4 = normalize(vec4(-.5, -.5, -.5, -.5) - pos);
		float dotProduct4 = dot(surfaceNormal, lightDirection4);

		float lightIntensity2 = 1.75 * min(abs(dotProduct3), abs(dotProduct4));



		float lightIntensity = mix(lightIntensity1, lightIntensity2, sceneTransition);
	`;cameraPos=[0,0,0,-1];normalVec=[0,0,0,1];upVec=[0,0,1,0];rightVec=[1,0,0,0];forwardVec=[0,-1,0,0];uniformGlsl=`
		uniform float sceneTransition;
		uniform float wallThickness;
	`;uniformNames=["sceneTransition","wallThickness"];updateUniforms(gl,uniformList){var t=.97-(this.sliderValues.wallThickness- -.15)/.5*(.97-.92);gl.uniform1f(uniformList.sceneTransition,this.sliderValues.sceneTransition),gl.uniform1f(uniformList.wallThickness,t)}uiElementsUsed="#wall-thickness-slider";initUI(){var t=$("#wall-thickness-slider"),i=$("#wall-thickness-slider-value");t.min=-.15,t.max=.35,t.value=.35,i.textContent=.35.toFixed(3),this.sliderValues.wallThickness=.35}getRelocatedCameraPos(newSceneTransition){if(1===newSceneTransition){var e=[[.5,.5,.5,.5],[.5,.5,.5,-.5],[.5,.5,-.5,.5],[.5,.5,-.5,-.5],[.5,-.5,.5,.5],[.5,-.5,.5,-.5],[.5,-.5,-.5,.5],[.5,-.5,-.5,-.5],[-.5,.5,.5,.5],[-.5,.5,.5,-.5],[-.5,.5,-.5,.5],[-.5,.5,-.5,-.5],[-.5,-.5,.5,.5],[-.5,-.5,.5,-.5],[-.5,-.5,-.5,.5],[-.5,-.5,-.5,-.5]];let t=Math.PI,i=0;for(let s=0;s<e.length;s++){var o=Math.acos(ThurstonGeometry.dotProduct(e[s],this.cameraPos));o<t&&(t=o,i=s)}return e[i]}var t=[[1,0,0,0],[-1,0,0,0],[0,1,0,0],[0,-1,0,0],[0,0,1,0],[0,0,-1,0],[0,0,0,1],[0,0,0,-1]];let i=Math.PI,s=0;for(let n=0;n<t.length;n++){var a=Math.acos(ThurstonGeometry.dotProduct(t[n],this.cameraPos));a<i&&(i=a,s=n)}return t[s]}}function hsvToRgb(h,s,v){function t(n){var t=(n+6*h)%6;return v-v*s*Math.max(0,Math.min(t,Math.min(4-t,1)))}return[255*t(5),255*t(3),255*t(1)]}function getHopfFiber(index,numFibers){var t=index/numFibers*(2*Math.PI),i=Math.PI/2,s=hsvToRgb(i/(2*Math.PI),Math.abs(t%Math.PI-Math.PI/2)/(Math.PI/2),1),t=[Math.cos(t)*Math.sin(i),Math.sin(t)*Math.sin(i),Math.cos(i)],i=ThurstonGeometry.normalize([1+t[2],-t[1],t[0],0]),t=ThurstonGeometry.normalize([0,t[0],t[1],1+t[2]]);return[`
		float distance${index+1} = greatCircleDistance(
			pos,
			vec4(${i[0]}, ${i[1]}, ${i[2]}, ${i[3]}),
			vec4(${t[0]}, ${t[1]}, ${t[2]}, ${t[3]}),
			fiberThickness);
		`,s]}class S3HopfFibration extends S3Geometry{constructor(){super();this.distanceEstimatorGlsl="";var t=new Array(20);for(let s=0;s<20;s++){var i=getHopfFiber(s,20);this.distanceEstimatorGlsl+=i[0],t[s]=i[1]}this.distanceEstimatorGlsl+=`
			float minDistance = ${getMinGlslString("distance",20)};
		`,this.getColorGlsl=this.distanceEstimatorGlsl+getColorGlslString("distance","minDistance",t),this.distanceEstimatorGlsl+="return minDistance;"}functionGlsl=`
		//p and v must be orthonormal.
		float greatCircleDistance(vec4 pos, vec4 p, vec4 v, float r)
		{
			float dot1 = dot(pos, p);
			float dot2 = dot(pos, v);

			return acos(sqrt(dot1 * dot1 + dot2 * dot2)) - r;
		}
	`;lightGlsl=`
		vec4 lightDirection1 = normalize(vec4(1.0, 1.0, 1.0, 1.0) - pos);
		float dotProduct1 = dot(surfaceNormal, lightDirection1);

		vec4 lightDirection2 = normalize(vec4(-1.0, -1.0, -1.0, 1.0) - pos);
		float dotProduct2 = dot(surfaceNormal, lightDirection2);

		vec4 lightDirection3 = normalize(vec4(1.0, 1.0, 1.0, 0.0) - pos);
		float dotProduct3 = dot(surfaceNormal, lightDirection3);

		vec4 lightDirection4 = normalize(vec4(-1.0, -1.0, -1.0, 0.0) - pos);
		float dotProduct4 = dot(surfaceNormal, lightDirection4);

		float lightIntensity = max(
			max(abs(dotProduct1), abs(dotProduct2)),
			max(abs(dotProduct3), abs(dotProduct4))
		);
	`;cameraPos=[0,0,0,-1];normalVec=[0,0,0,1];upVec=[0,0,1,0];rightVec=[0,1,0,0];forwardVec=[1,0,0,0];uniformGlsl=`
		uniform float fiberThickness;
	`;uniformNames=["fiberThickness"];updateUniforms(gl,uniformList){gl.uniform1f(uniformList.fiberThickness,this.sliderValues.fiberThickness)}uiElementsUsed="#fiber-thickness-slider";initUI(){var t=$("#fiber-thickness-slider"),i=$("#fiber-thickness-slider-value");t.min=.005,t.max=.1,t.value=.025,i.textContent=.025.toFixed(3),this.sliderValues.fiberThickness=.025}}export{S3Axes,S3Rooms,S3HopfFibration};
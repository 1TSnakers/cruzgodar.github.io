import{ThurstonGeometry}from"../class.min.js";import{BaseGeometry,getColorGlslString,getMinGlslString}from"./base.min.js";import{$}from"/scripts/src/main.min.js";class S3Geometry extends BaseGeometry{geodesicGlsl=`
		vec4 pos = cos(t) * startPos + sin(t) * rayDirectionVec;
	`;fogGlsl=`
		return mix(color, fogColor, 1.0 - exp(-acos(dot(pos, cameraPos)) * fogScaling));
	`;maxMarches="100";maxT="6.283";correctPosition(pos){return ThurstonGeometry.normalize(pos)}getNormalVec(cameraPos){return this.normalize([-cameraPos[0],-cameraPos[1],-cameraPos[2],-cameraPos[3]])}}class S3Axes extends S3Geometry{static distances=`
		float distance1 = acos(length(pos.xw)) - .05;
		float distance2 = acos(length(pos.yw)) - .05;
		float distance3 = acos(length(pos.zw)) - .05;

		float minDistance = ${getMinGlslString("distance",3)};
	`;distanceEstimatorGlsl=`
		${S3Axes.distances}

		return minDistance;
	`;getColorGlsl=`
		${S3Axes.distances}

		if (minDistance == distance1)
		{
			return vec3(
				1.0,
				.5 + .25 * (.5 * (sin(20.0 * pos.x) + 1.0)),
				.5 + .25 * (.5 * (cos(20.0 * pos.x) + 1.0))
			);
		}

		if (minDistance == distance2)
		{
			return vec3(
				.5 + .25 * (.5 * (sin(20.0 * pos.y) + 1.0)),
				1.0,
				.5 + .25 * (.5 * (cos(20.0 * pos.y) + 1.0))
			);
		}

		return vec3(
			.5 + .25 * (.5 * (sin(20.0 * pos.z) + 1.0)),
			.5 + .25 * (.5 * (cos(20.0 * pos.z) + 1.0)),
			1.0
		);
	`;lightGlsl=`
		vec4 lightDirection1 = normalize(vec4(.5, .5, .5, .5) - pos);
		float dotProduct1 = dot(surfaceNormal, lightDirection1);

		vec4 lightDirection2 = normalize(vec4(-.5, -.5, -.5, -.5) - pos);
		float dotProduct2 = dot(surfaceNormal, lightDirection2);

		float lightIntensity = 1.5 * min(abs(dotProduct1), abs(dotProduct2));
	`;cameraPos=[.6247,.6247,.4683,-.0157];normalVec=[-.6247,-.6247,-.4683,.0157];upVec=[-.3268,-.3268,.8657,-.1925];rightVec=[.7071,-.7071,0,0];forwardVec=[-.0542,-.0542,.1773,.9812]}class S3Rooms extends S3Geometry{static distances=`
		float distance1 = acos(pos.x) - wallThickness;
		float distance2 = acos(-pos.x) - wallThickness;
		float distance3 = acos(pos.y) - wallThickness;
		float distance4 = acos(-pos.y) - wallThickness;
		float distance5 = acos(pos.z) - wallThickness;
		float distance6 = acos(-pos.z) - wallThickness;
		float distance7 = acos(pos.w) - wallThickness;
		float distance8 = acos(-pos.w) - wallThickness;

		float minDistance = ${getMinGlslString("distance",8)};
	`;distanceEstimatorGlsl=`
		${S3Rooms.distances}

		return -minDistance;
	`;getColorGlsl=`
		${S3Rooms.distances}

		float variation = .075;

		if (minDistance == distance1)
		{
			return vec3(
				.85 + .15 * (.5 * (sin((variation * pos.y) * 17.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.z) * 23.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.w) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance2)
		{
			return vec3(
				.5 * (.5 * (sin((variation * pos.y) * 17.0) + 1.0)),
				.85 + .15 * (.5 * (sin((variation * pos.z) * 23.0) + 1.0)),
				.85 + .15 * (.5 * (sin((variation * pos.w) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance3)
		{
			return vec3(
				.5 * (.5 * (sin((variation * pos.x) * 17.0) + 1.0)),
				.85 + .15 * (.5 * (sin((variation * pos.z) * 23.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.w) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance4)
		{
			return vec3(
				.85 + .15 * (.5 * (sin((variation * pos.x) * 17.0) + 1.0)),
				.5 + .15 * (.5 * (sin((variation * pos.y) * 23.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.z) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance5)
		{
			return vec3(
				.5 * (.5 * (sin((variation * pos.x) * 17.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.y) * 23.0) + 1.0)),
				.85 + .15 * (.5 * (sin((variation * pos.w) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance6)
		{
			return vec3(
				.85 + .15 * (.5 * (sin((variation * pos.x) * 17.0) + 1.0)),
				.85 + .15 * (.5 * (sin((variation * pos.y) * 23.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.w) * 29.0) + 1.0))
			);
		}

		if (minDistance == distance7)
		{
			return vec3(
				.5 + .15 * (.5 * (sin((variation * pos.x) * 17.0) + 1.0)),
				.5 * (.5 * (sin((variation * pos.y) * 23.0) + 1.0)),
				.85 + .15 * (.5 * (sin((variation * pos.z) * 29.0) + 1.0))
			);
		}
		
		return vec3(
			.65 + .35 * (.5 * (sin((variation * pos.x) * 17.0) + 1.0)),
			.65 + .35 * (.5 * (sin((variation * pos.y) * 23.0) + 1.0)),
			.65 + .35 * (.5 * (sin((variation * pos.z) * 29.0) + 1.0))
		);
	`;lightGlsl=`
		vec4 lightDirection1 = normalize(vec4(1.0, 1.0, 1.0, 1.0) - pos);
		float dotProduct1 = dot(surfaceNormal, lightDirection1);

		vec4 lightDirection2 = normalize(vec4(-1.0, -1.0, -1.0, -1.0) - pos);
		float dotProduct2 = dot(surfaceNormal, lightDirection2);

		float lightIntensity = 4.0 * max(dotProduct1, dotProduct2);
	`;cameraPos=[0,0,0,-1];normalVec=[0,0,0,1];upVec=[0,0,1,0];rightVec=[1,0,0,0];forwardVec=[0,-1,0,0];uniformGlsl=`
		uniform float wallThickness;
	`;uniformNames=["wallThickness"];updateUniforms(gl,uniformList){var s=.97-(this.sliderValues.wallThickness- -.15)/.5*(.97-.92);gl.uniform1f(uniformList.wallThickness,s)}uiElementsUsed="#wall-thickness-slider";initUI(){var s=$("#wall-thickness-slider"),t=$("#wall-thickness-slider-value");s.min=-.15,s.max=.35,s.value=.35,t.textContent=.35.toFixed(3),this.sliderValues.wallThickness=.35}}class S3Spheres extends S3Geometry{static distances=`
		float distance1 = abs(acos(pos.x) - .3);
		float distance2 = abs(acos(-pos.x) - .3);
		float distance3 = abs(acos(pos.y) - .3);
		float distance4 = abs(acos(-pos.y) - .3);
		float distance5 = abs(acos(pos.z) - .3);
		float distance6 = abs(acos(-pos.z) - .3);
		float distance7 = abs(acos(pos.w) - .3);

		float minDistance = ${getMinGlslString("distance",7)};
	`;distanceEstimatorGlsl=`
		${S3Spheres.distances}

		return minDistance;
	`;getColorGlsl=`
		${S3Spheres.distances}

		if (minDistance == distance1)
		{
			return vec3(1.0, 0.0, 0.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
		}

		if (minDistance == distance2)
		{
			return vec3(0.0, 1.0, 1.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
		}

		if (minDistance == distance3)
		{
			return vec3(0.0, 1.0, 0.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
		}

		if (minDistance == distance4)
		{
			return vec3(1.0, 0.0, 1.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
		}

		if (minDistance == distance5)
		{
			return vec3(0.0, 0.0, 1.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
		}

		if (minDistance == distance6)
		{
			return vec3(1.0, 1.0, 0.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
		}

		return vec3(1.0, 1.0, 1.0) * getBanding(pos.x + pos.y + pos.z + pos.w, 10.0);
	`;lightGlsl=`
		vec4 lightDirection1 = normalize(vec4(.5, .5, .5, .5) - pos);
		float dotProduct1 = dot(surfaceNormal, lightDirection1);

		vec4 lightDirection2 = normalize(vec4(-.5, -.5, -.5, -.5) - pos);
		float dotProduct2 = dot(surfaceNormal, lightDirection2);

		float lightIntensity = 1.2 * min(abs(dotProduct1), abs(dotProduct2));
	`;cameraPos=[0,0,0,-1];normalVec=[0,0,0,-1];upVec=[0,0,1,0];rightVec=[0,1,0,0];forwardVec=[1,0,0,0]}function hsvToRgb(h,s,v){function t(n){var t=(n+6*h)%6;return v-v*s*Math.max(0,Math.min(t,Math.min(4-t,1)))}return[255*t(5),255*t(3),255*t(1)]}function getHopfFiber(index,numFibers){var s=index/numFibers*(2*Math.PI),t=Math.PI/2,i=hsvToRgb(t/(2*Math.PI),Math.abs(s%Math.PI-Math.PI/2)/(Math.PI/2),1),s=[Math.cos(s)*Math.sin(t),Math.sin(s)*Math.sin(t),Math.cos(t)],t=ThurstonGeometry.normalize([1+s[2],-s[1],s[0],0]),s=ThurstonGeometry.normalize([0,s[0],s[1],1+s[2]]);return[`
		float distance${index+1} = greatCircleDistance(
			pos,
			vec4(${t[0]}, ${t[1]}, ${t[2]}, ${t[3]}),
			vec4(${s[0]}, ${s[1]}, ${s[2]}, ${s[3]}),
			fiberThickness);
		`,i]}class S3HopfFibration extends S3Geometry{constructor(){super();this.distanceEstimatorGlsl="";var s=new Array(20);for(let i=0;i<20;i++){var t=getHopfFiber(i,20);this.distanceEstimatorGlsl+=t[0],s[i]=t[1]}this.distanceEstimatorGlsl+=`
			float minDistance = ${getMinGlslString("distance",20)};
		`,this.getColorGlsl=this.distanceEstimatorGlsl+getColorGlslString("distance","minDistance",s),this.distanceEstimatorGlsl+="return minDistance;"}functionGlsl=`
		//p and v must be orthonormal.
		float greatCircleDistance(vec4 pos, vec4 p, vec4 v, float r)
		{
			float dot1 = dot(pos, p);
			float dot2 = dot(pos, v);

			return acos(sqrt(dot1 * dot1 + dot2 * dot2)) - r;
		}
	`;lightGlsl=`
		vec4 lightDirection1 = normalize(vec4(1.0, 1.0, 1.0, 1.0) - pos);
		float dotProduct1 = dot(surfaceNormal, lightDirection1);

		vec4 lightDirection2 = normalize(vec4(-1.0, -1.0, -1.0, 1.0) - pos);
		float dotProduct2 = dot(surfaceNormal, lightDirection2);

		vec4 lightDirection3 = normalize(vec4(1.0, 1.0, 1.0, 0.0) - pos);
		float dotProduct3 = dot(surfaceNormal, lightDirection3);

		vec4 lightDirection4 = normalize(vec4(-1.0, -1.0, -1.0, 0.0) - pos);
		float dotProduct4 = dot(surfaceNormal, lightDirection4);

		float lightIntensity = max(
			max(abs(dotProduct1), abs(dotProduct2)),
			max(abs(dotProduct3), abs(dotProduct4))
		);
	`;cameraPos=[0,0,0,-1];normalVec=[0,0,0,1];upVec=[0,0,1,0];rightVec=[0,1,0,0];forwardVec=[1,0,0,0];uniformGlsl=`
		uniform float fiberThickness;
	`;uniformNames=["fiberThickness"];updateUniforms(gl,uniformList){gl.uniform1f(uniformList.fiberThickness,this.sliderValues.fiberThickness)}uiElementsUsed="#fiber-thickness-slider";initUI(){var s=$("#fiber-thickness-slider"),t=$("#fiber-thickness-slider-value");s.min=.005,s.max=.1,s.value=.025,t.textContent=.025.toFixed(3),this.sliderValues.fiberThickness=.025}}export{S3Axes,S3Rooms,S3Spheres,S3HopfFibration};
import{getMinGlslString}from"./base.min.js";import{E3Geometry}from"./e3.min.js";import{S2xEGeometry}from"./s2xe.min.js";function getSphereBandGlsl(index){return`
		if (
			length((pos.xyz - dot(pos.xyz, testVec${index}.xyz) * testVec${index}.xyz)) > 0.99897
		){
			float effectiveDistance = distanceToCamera;

			if (dot(directionToCamera, rayDir${index}.xyz) < 0.0)
			{
				effectiveDistance = 2.0 * pi - effectiveDistance;
			}

			if (effectiveDistance < rayLength${index})
			{
				return rayColor${index};
			}
		}
	`}class E3S2Demo extends E3Geometry{numRays=15;rayDirs=Array(this.numRays).fill([0,0,0,0]);testVecs=Array(this.numRays).fill([0,0,0,0]);rayLengths=Array(this.numRays).fill(0);rayColors=Array(this.numRays).fill([0,0,0]);static distances=`
		// The sphere itself.
		float distance1 = length(pos.xyz) - 1.0;

		// The camera.
		float distance2 = length(pos.xyz - cameraDotPos.xyz) - 0.05;

		float minDistance =  ${getMinGlslString("distance",2)};
	`;distanceEstimatorGlsl=`
		${E3S2Demo.distances}

		return minDistance;
	`;getColorGlsl=`
		${E3S2Demo.distances}

		if (minDistance == distance2)
		{
			return vec3(1.5);
		}

		pos.xyz /= 1.001;

		float radius = .35;

		if (acos(dot(pos.xyz, normalize(vec3(1, 0, 0)))) - radius < 0.0)
		{
			return vec3(1.0, 0.0, 0.0);
		}

		if (acos(dot(pos.xyz, normalize(vec3(0, 1, 0)))) - radius < 0.0)
		{
			return vec3(0.0, 1.0, 0.0);
		}

		if (acos(dot(pos.xyz, normalize(vec3(-1, 0, 0)))) - radius < 0.0)
		{
			return vec3(0.0, 0.0, 1.0);
		}

		if (acos(dot(pos.xyz, normalize(vec3(0, -1, 0)))) - radius < 0.0)
		{
			return vec3(1.0, 1.0, 0.0);
		}

		if (acos(dot(pos.xyz, normalize(vec3(0, 0, -1)))) - radius < 0.0)
		{
			return vec3(0.5, 0.0, 1.0);
		}

		float distanceToCamera = acos(dot(pos.xyz, cameraDotPos.xyz));
		vec3 directionToCamera = normalize((pos.xyz - cos(distanceToCamera) * cameraDotPos.xyz) / sin(distanceToCamera));

		${this.rayLengths.map((_,index)=>getSphereBandGlsl(index+1)).join("")}



		return vec3(1.0, 1.0, 1.0);
	`;lightGlsl=`
		vec4 lightDirection1 = normalize(vec4(-3.0, 1.5, 1.5, 1.0) - pos);
		float dotProduct1 = dot(surfaceNormal, lightDirection1);

		float lightIntensity = (.5 + .5 * dotProduct1 * dotProduct1) * 1.15;
	`;cameraPos=[-2.5,0,0,1];normalVec=[0,0,0,1];upVec=[0,0,1,0];rightVec=[0,1,0,0];forwardVec=[1,0,0,0];movingSpeed=0;lockedOnOrigin=!0;fov=Math.tan(30*Math.PI/180);cameraDotPos=[0,0,1,0];uniformGlsl=`
		uniform vec4 cameraDotPos;

		${this.rayLengths.map((_,index)=>"uniform vec4 rayDir"+(index+1)).join(";")};
		${this.rayLengths.map((_,index)=>"uniform vec4 testVec"+(index+1)).join(";")};
		${this.rayLengths.map((_,index)=>"uniform float rayLength"+(index+1)).join(";")};
		${this.rayLengths.map((_,index)=>"uniform vec3 rayColor"+(index+1)).join(";")};
	`;uniformNames=["cameraDotPos",...this.rayLengths.map((_,index)=>"rayDir"+(index+1)),...this.rayLengths.map((_,index)=>"testVec"+(index+1)),...this.rayLengths.map((_,index)=>"rayLength"+(index+1)),...this.rayLengths.map((_,index)=>"rayColor"+(index+1))];updateUniforms(gl,uniformList){gl.uniform4fv(uniformList.cameraDotPos,this.cameraDotPos);for(let t=0;t<this.numRays;t++)gl.uniform4fv(uniformList["rayDir"+(t+1)],this.rayDirs[t]),gl.uniform4fv(uniformList["testVec"+(t+1)],this.testVecs[t]),gl.uniform1f(uniformList["rayLength"+(t+1)],this.rayLengths[t]),gl.uniform3fv(uniformList["rayColor"+(t+1)],this.rayColors[t])}}class S2xES2Demo extends S2xEGeometry{static distances=`
		float radius = .35;

		float distance1 = acos(pos.x) - radius;
		float distance2 = acos(-pos.x) - radius;
		float distance3 = acos(pos.y) - radius;
		float distance4 = acos(-pos.y) - radius;
		float distance5 = acos(-pos.z) - radius;

		float minDistance = ${getMinGlslString("distance",5)};
	`;distanceEstimatorGlsl=`
		${S2xES2Demo.distances}

		return minDistance;
	`;getColorGlsl=`
		${S2xES2Demo.distances}

		if (minDistance == distance1)
		{
			return vec3(1.0, 0.0, 0.0);
		}

		if (minDistance == distance2)
		{
			return vec3(0.0, 0.0, 1.0);
		}

		if (minDistance == distance3)
		{
			return vec3(0.0, 1.0, 0.0);
		}

		if (minDistance == distance4)
		{
			return vec3(1.0, 1.0, 0.0);
		}

		return vec3(0.5, 0.0, 1.0);
	`;lightGlsl=`
		vec4 lightDirection1 = normalize(vec4(0.0, 0.0, 1.0, 0.0) - pos);
		float dotProduct1 = abs(dot(surfaceNormal, lightDirection1));

		float lightIntensity = 1.25 * abs(dotProduct1);
	`;render1D=!0;cameraPos=[0,0,1,0];normalVec=[0,0,1,0];upVec=[0,0,0,1];rightVec=[0,1,0,0];forwardVec=[1,0,0,0];aspectRatio=7;distanceEstimator(pos){var t=.34,e=Math.acos(pos[0])-t,a=Math.acos(-pos[0])-t,i=Math.acos(pos[1])-t,s=Math.acos(-pos[1])-t,t=Math.acos(-pos[2])-t;return Math.min(Math.min(Math.min(e,a),Math.min(i,s)),t)}getColor(pos){var t=.35,e=Math.acos(pos[0])-t,a=Math.acos(-pos[0])-t,i=Math.acos(pos[1])-t,s=Math.acos(-pos[1])-t,t=Math.acos(-pos[2])-t,t=Math.min(Math.min(Math.min(e,a),Math.min(i,s)),t);return 1e-5<t?[0,0,0]:t===e?[1,0,0]:t===a?[0,0,1]:t===i?[0,1,0]:t===s?[1,1,0]:[.5,0,1]}getRayData(rayDirs){var a=new Array(rayDirs.length),i=new Array(rayDirs.length);for(let o=0;o<rayDirs.length;o++){let t=0;var s=[...this.cameraPos];let e=[...s];for(var r;r=this.distanceEstimator(e),t+=.99*r,e=[Math.cos(t)*s[0]+Math.sin(t)*rayDirs[o][0],Math.cos(t)*s[1]+Math.sin(t)*rayDirs[o][1],Math.cos(t)*s[2]+Math.sin(t)*rayDirs[o][2],0],1e-5<r&&t<2*Math.PI;);a[o]=t,i[o]=this.getColor(e)}return[a,i]}}export{E3S2Demo,S2xES2Demo};
import{Applet}from"/scripts/src/applets.min.mjs";import{Wilson}from"/scripts/wilson.min.mjs";class SortingAlgorithm extends Applet{resolution=2e3;dataLength=null;data=[];brightness=[];maxBrightness=40;currentGenerator=null;minFrequency=30;maxFrequency=600;doPlaySound=!0;lastTimestamp=-1;timeElapsed=0;algorithms={bubble:this.bubbleSort,insertion:this.insertionSort,selection:this.selectionSort,heap:this.heapsort,merge:this.mergeSort,quick:this.quicksort,shell:this.shellsort,cycle:this.cycleSort,"msd-radix":this.msdRadixSort,"lsd-radix":this.lsdRadixSort,gravity:this.gravitySort};generators=[this.shuffleArray,null,this.verifyArray];currentGeneratorIndex=0;numReads=0;numWrites=0;inFrameOperations=0;operationsPerFrame=1;updateReadsAndWrites=!1;numReadsElement=null;numWritesElement=null;changingSound=!1;audioNodes=[];constructor(canvas,numReadsElement,numWritesElement){super(canvas),this.numReadsElement=numReadsElement,this.numWritesElement=numWritesElement;numReadsElement={renderer:"gpu",shader:`
			precision highp float;
			
			varying vec2 uv;
			
			uniform float dataLength;
			
			const float circleSize = .8;
			
			uniform sampler2D uTexture;
			
			
			
			vec3 hsv2rgb(vec3 c)
			{
				vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
				vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
				return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
			}
			
			
			
			void main(void)
			{
				gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
				
				if (length(uv) <= circleSize)
				{
					float sample = mod(atan(uv.y, uv.x) / 6.283, 1.0);
					
					vec4 output1 = texture2D(uTexture, vec2(floor(sample * dataLength) / dataLength, .5));
					vec4 output2 = texture2D(uTexture, vec2(mod(floor(sample * dataLength + 1.0) / dataLength, 1.0), .5));
					
					float brightness = mix(output1.z, output2.z, fract(sample * dataLength));
					
					float h1 = (output1.x * 256.0 + output1.y) / dataLength * 255.0;
					float h2 = (output2.x * 256.0 + output2.y) / dataLength * 255.0;
					
					if (abs(h1 - h2) > .5)
					{
						if (h1 > h2)
						{
							h1 -= 1.0;
						}
						
						else
						{
							h2 -= 1.0;
						}
					}
					
					
					
					float h = mix(h1, h2, fract(sample * dataLength));
					
					float s = clamp((length(uv) / circleSize - .03) * (1.0 - brightness), 0.0, 1.0);
					
					float v = clamp((1.0 - length(uv) / circleSize) * 100.0, 0.0, 1.0);
					
					gl_FragColor = vec4(hsv2rgb(vec3(h, s, v)), 1.0);
				}
			}
		`,canvasWidth:this.resolution,canvasHeight:this.resolution,useFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"},this.wilson=new Wilson(canvas,numReadsElement),this.wilson.render.initUniforms(["dataLength"]),numWritesElement=this.wilson.gl.createTexture();this.wilson.gl.bindTexture(this.wilson.gl.TEXTURE_2D,numWritesElement),this.wilson.gl.texParameteri(this.wilson.gl.TEXTURE_2D,this.wilson.gl.TEXTURE_MAG_FILTER,this.wilson.gl.NEAREST),this.wilson.gl.texParameteri(this.wilson.gl.TEXTURE_2D,this.wilson.gl.TEXTURE_MIN_FILTER,this.wilson.gl.NEAREST),this.wilson.gl.texParameteri(this.wilson.gl.TEXTURE_2D,this.wilson.gl.TEXTURE_WRAP_S,this.wilson.gl.CLAMP_TO_EDGE),this.wilson.gl.texParameteri(this.wilson.gl.TEXTURE_2D,this.wilson.gl.TEXTURE_WRAP_T,this.wilson.gl.CLAMP_TO_EDGE),this.wilson.gl.disable(this.wilson.gl.DEPTH_TEST)}run({resolution,algorithm,dataLength,doPlaySound}){this.resolution=resolution,this.generators=[this.shuffleArray.bind(this),this.algorithms[algorithm].bind(this),this.verifyArray.bind(this)],this.currentGeneratorIndex=0;resolution=this.dataLength;if(this.dataLength=dataLength,this.doPlaySound=doPlaySound,this.audioNodes[this.currentGeneratorIndex]&&this.audioNodes[this.currentGeneratorIndex][2].gain.linearRampToValueAtTime(1e-4,this.audioNodes[this.currentGeneratorIndex][0].currentTime+this.timeElapsed/1e3),this.wilson.changeCanvasSize(this.resolution,this.resolution),this.dataLength!==resolution){this.data=new Array(this.dataLength),this.brightness=new Array(this.dataLength);for(let i=0;i<this.dataLength;i++)this.data[i]=i,this.brightness[i]=0;this.wilson.gl.uniform1f(this.wilson.uniforms.dataLength,this.dataLength)}this.numReads=0,this.numWrites=0,this.inFrameOperations=0,this.updateReadsAndWrites=!1,this.numReadsElement&&this.numWritesElement&&(this.numReadsElement.textContent="0",this.numWritesElement.textContent="0"),this.audioNodes=[],this.createAudioNodes(),this.doPlaySound&&this.audioNodes[this.currentGeneratorIndex][1].start(0),this.currentGenerator=this.generators[0](),this.animationPaused||window.requestAnimationFrame(this.drawFrame.bind(this))}drawFrame(timestamp){if(this.timeElapsed=timestamp-this.lastTimestamp,this.lastTimestamp=timestamp,0!==this.timeElapsed){var textureData=new Uint8Array(4*this.dataLength);for(let i=0;i<this.dataLength;i++)textureData[4*i]=Math.floor(this.data[i]/256),textureData[4*i+1]=this.data[i]%256,textureData[4*i+2]=Math.floor(this.brightness[i]/this.maxBrightness*256);this.wilson.gl.texImage2D(this.wilson.gl.TEXTURE_2D,0,this.wilson.gl.RGBA,this.dataLength,1,0,this.wilson.gl.RGBA,this.wilson.gl.UNSIGNED_BYTE,textureData),this.wilson.render.drawFrame(),this.decreaseBrightness(),this.updateReadsAndWrites&&this.numReadsElement&&this.numWritesElement&&(this.numReadsElement.textContent=this.numReads,this.numWritesElement.textContent=this.numWrites),this.changingSound||this.currentGenerator.next(),this.animationPaused?this.audioNodes[this.currentGeneratorIndex]&&this.audioNodes[this.currentGeneratorIndex][2].gain.linearRampToValueAtTime(1e-4,this.audioNodes[this.currentGeneratorIndex][0].currentTime+this.timeElapsed/1e3):window.requestAnimationFrame(this.drawFrame.bind(this))}}createAudioNodes(){if(this.doPlaySound)for(let i=0;i<this.generators.length;i++){var audioContext=new AudioContext,audioOscillator=audioContext.createOscillator(),audioGainNode=(audioOscillator.type="sine",audioOscillator.frequency.value=50,audioContext.createGain());audioOscillator.connect(audioGainNode),audioGainNode.connect(audioContext.destination),this.audioNodes.push([audioContext,audioOscillator,audioGainNode])}}readFromPosition(){this.numReads++}writeToPosition(index,highlight=!0,sound=!0){return highlight&&(this.brightness[index]=this.maxBrightness-1),this.numWrites++,this.inFrameOperations++,this.inFrameOperations>=this.operationsPerFrame&&(this.inFrameOperations=0,sound&&this.playSound(index),!0)}playSound(index){this.doPlaySound&&this.audioNodes[this.currentGeneratorIndex][1].frequency.linearRampToValueAtTime((this.maxFrequency-this.minFrequency)*this.data[index]/this.dataLength+this.minFrequency,this.audioNodes[this.currentGeneratorIndex][0].currentTime+this.timeElapsed/1e3)}decreaseBrightness(){for(let i=0;i<this.dataLength;i++)this.brightness[i]=Math.max(this.brightness[i]-1,0)}advanceGenerator(){this.changingSound=!0,this.doPlaySound&&this.audioNodes[this.currentGeneratorIndex][2].gain.linearRampToValueAtTime(1e-4,this.audioNodes[this.currentGeneratorIndex][0].currentTime+this.timeElapsed/1e3),this.currentGeneratorIndex++,this.currentGeneratorIndex<this.generators.length&&setTimeout(()=>{this.doPlaySound&&this.audioNodes[this.currentGeneratorIndex][1].start(0),this.currentGenerator=this.generators[this.currentGeneratorIndex](),this.changingSound=!1},1e3)}*shuffleArray(){this.operationsPerFrame=Math.ceil(this.dataLength/60);for(let i=0;i<this.dataLength-1;i++){var j=Math.floor(Math.random()*(this.dataLength-i-1))+i,temp=this.data[i];this.data[i]=this.data[j],this.data[j]=temp,this.writeToPosition(i)&&(yield),this.writeToPosition(j)&&(yield)}this.numReads=0,this.numWrites=0,this.updateReadsAndWrites=!0,this.advanceGenerator()}*verifyArray(){this.updateReadsAndWrites=!1,this.operationsPerFrame=Math.ceil(this.dataLength/60);for(let i=0;i<this.dataLength;i++)this.writeToPosition(i)&&(yield),i!==this.dataLength-1&&this.data[i]>this.data[i+1]&&console.log("Not sorted!",this.data);this.doPlaySound&&this.audioNodes[this.currentGeneratorIndex][2].gain.linearRampToValueAtTime(1e-4,this.audioNodes[this.currentGeneratorIndex][0].currentTime+this.timeElapsed/1e3)}*bubbleSort(){for(this.operationsPerFrame=Math.ceil(this.dataLength*this.dataLength/2500);;){let done=!0;for(let i=0;i<this.dataLength-1;i++){var temp;this.readFromPosition(i),this.readFromPosition(i+1),this.data[i]>this.data[i+1]&&(done=!1,temp=this.data[i],this.data[i]=this.data[i+1],this.data[i+1]=temp,this.writeToPosition(i)&&(yield),this.writeToPosition(i+1))&&(yield)}if(done)break}this.advanceGenerator()}*insertionSort(){this.operationsPerFrame=Math.ceil(this.dataLength*this.dataLength/5e3);for(let i=1;i<this.dataLength;i++)if(this.readFromPosition(i),this.readFromPosition(i-1),this.data[i]<this.data[i-1])for(let j=0;j<i;j++)if(this.readFromPosition(j),this.readFromPosition(i),this.data[j]>this.data[i]){var temp=this.data[i];for(let k=i;k>j;k--)this.data[k]=this.data[k-1],this.writeToPosition(k)&&(yield);this.data[j]=temp,this.writeToPosition(j)&&(yield)}this.advanceGenerator()}*selectionSort(){this.operationsPerFrame=Math.ceil(this.dataLength/1e3);for(let i=0;i<this.dataLength;i++){let minIndex=-1,minElement=this.dataLength;for(let j=i;j<this.dataLength;j++)this.readFromPosition(j),this.readFromPosition(minElement),this.data[j]<minElement&&(minElement=this.data[j],minIndex=j);var temp=this.data[i];this.data[i]=minElement,this.data[minIndex]=temp,this.writeToPosition(i)&&(yield),this.writeToPosition(minIndex)&&(yield)}this.advanceGenerator()}*heapsort(){this.operationsPerFrame=Math.ceil(this.dataLength*Math.log(this.dataLength)/500);for(let i=1;i<this.dataLength;i++){let index=i;for(var index2;0!==index&&(index2=Math.floor((index-1)/2),this.readFromPosition(index),this.readFromPosition(index2),this.data[index]>this.data[index2]);){var temp=this.data[index];this.data[index]=this.data[index2],this.data[index2]=temp,this.writeToPosition(index)&&(yield),this.writeToPosition(index2)&&(yield),index=index2}}for(let i=this.dataLength-1;0<=i;i--){const temp=this.data[0];this.data[0]=this.data[i],this.data[i]=temp,this.writeToPosition(0)&&(yield),this.writeToPosition(i)&&(yield);let index=0;var child1,child2;let maxChild=0;for(;;){if(child2=1+(child1=2*index+1),child1>=i)break;if(maxChild=child2>=i||(this.readFromPosition(child1),this.readFromPosition(child2),this.data[child1]>this.data[child2])?child1:child2,this.readFromPosition(index),this.readFromPosition(maxChild),!(this.data[index]<this.data[maxChild]))break;{const temp=this.data[index];this.data[index]=this.data[maxChild],this.data[maxChild]=temp,this.writeToPosition(index)&&(yield),this.writeToPosition(maxChild)&&(yield),index=maxChild}}}this.advanceGenerator()}*mergeSort(start=0,end=this.dataLength){var temp;if(end-start==2)this.readFromPosition(start),this.readFromPosition(end-1),this.data[start]>this.data[end-1]&&(this.writeToPosition(start)&&(yield),this.writeToPosition(end-1)&&(yield),temp=this.data[start],this.data[start]=this.data[end-1],this.data[end-1]=temp);else if(!(end-start<=1)){this.operationsPerFrame=Math.ceil(this.dataLength*Math.log(this.dataLength)/200);let rightHalfStart=start+Math.floor((end-start)/2);for(yield*this.mergeSort(rightHalfStart,end);;){if(rightHalfStart===start+1){let i=start;for(;i<end-1&&this.data[i]>this.data[i+1];){this.readFromPosition(i),this.readFromPosition(i+1),this.writeToPosition(i)&&(yield),this.writeToPosition(i+1)&&(yield);const temp=this.data[i];this.data[i]=this.data[i+1],this.data[i+1]=temp,i++}break}var bufferStart=start+Math.floor((rightHalfStart-start)/2);yield*this.mergeSort(start,bufferStart);let left=start,buffer=bufferStart,right=rightHalfStart;for(;;){if(buffer===right)break;if(buffer!==left&&(right===end||this.data[left]<this.data[right])){this.readFromPosition(left),this.readFromPosition(buffer),this.writeToPosition(left)&&(yield),this.writeToPosition(buffer)&&(yield);const temp=this.data[left];this.data[left]=this.data[buffer],this.data[buffer]=temp,left++,buffer++}else{if(!(right<end&&this.data[right]<=this.data[left]))break;{this.readFromPosition(right),this.readFromPosition(buffer),this.writeToPosition(right)&&(yield),this.writeToPosition(buffer)&&(yield);const temp=this.data[right];this.data[right]=this.data[buffer],this.data[buffer]=temp,right++,buffer++}}}rightHalfStart=start+(rightHalfStart-bufferStart);let i=buffer-1;for(;i>rightHalfStart&&this.data[i-1]>this.data[i];){this.readFromPosition(i),this.readFromPosition(i-1),this.writeToPosition(i)&&(yield),this.writeToPosition(i-1)&&(yield);const temp=this.data[i];this.data[i]=this.data[i-1],this.data[i-1]=temp,i--}for(;i<end-1&&this.data[i+1]<this.data[i];){this.readFromPosition(i),this.readFromPosition(i+1),this.writeToPosition(i)&&(yield),this.writeToPosition(i+1)&&(yield);const temp=this.data[i];this.data[i]=this.data[i+1],this.data[i+1]=temp,i++}if(rightHalfStart===start)break}0===start&&end===this.dataLength&&this.advanceGenerator()}}*quicksort(){this.operationsPerFrame=Math.ceil(this.dataLength*Math.log(this.dataLength)/2250);var currentEndpoints=new Array(this.dataLength),nextEndpoints=(currentEndpoints[0]=0,currentEndpoints[1]=this.dataLength-1,new Array(this.dataLength));let numBlocks=1,nextNumBlocks=0;for(;0<numBlocks;){for(let i=0;i<numBlocks;i++){var pivot=this.data[Math.floor((currentEndpoints[2*i]+currentEndpoints[2*i+1])/2)];this.readFromPosition(Math.floor((currentEndpoints[2*i]+currentEndpoints[2*i+1])/2));let leftIndex=currentEndpoints[2*i]-1,rightIndex=currentEndpoints[2*i+1]+1;for(;;){for(;leftIndex++,this.readFromPosition(leftIndex),this.data[leftIndex]<pivot;);for(this.readFromPosition(leftIndex);rightIndex--,this.readFromPosition(rightIndex),this.data[rightIndex]>pivot;);if(this.readFromPosition(rightIndex),leftIndex>=rightIndex)break;var temp=this.data[leftIndex];this.data[leftIndex]=this.data[rightIndex],this.data[rightIndex]=temp,this.writeToPosition(leftIndex)&&(yield),this.writeToPosition(rightIndex)&&(yield)}rightIndex>currentEndpoints[2*i]&&(nextEndpoints[2*nextNumBlocks]=currentEndpoints[2*i],nextEndpoints[2*nextNumBlocks+1]=rightIndex,nextNumBlocks++),currentEndpoints[2*i+1]>rightIndex+1&&(nextEndpoints[2*nextNumBlocks]=rightIndex+1,nextEndpoints[2*nextNumBlocks+1]=currentEndpoints[2*i+1],nextNumBlocks++)}numBlocks=nextNumBlocks;for(let i=nextNumBlocks=0;i<2*numBlocks;i++)currentEndpoints[i]=nextEndpoints[i]}this.advanceGenerator()}*shellsort(){this.operationsPerFrame=Math.ceil(this.dataLength/100);var gaps=[];let k=1;for(;;){var entry=Math.ceil((Math.pow(2.2436091,k)-1)/1.2436091);if(entry>=this.dataLength)break;gaps.unshift(entry),k++}for(let i=0;i<gaps.length;i++){var gap=gaps[i];for(let j=gap;j<this.dataLength;j++){var temp=this.data[j];this.readFromPosition(j);let k=j;for(;k>=gap&&this.data[k-gap]>temp;k-=gap)this.data[k]=this.data[k-gap],this.writeToPosition(k)&&(yield);this.data[k]=temp,this.writeToPosition(k)&&(yield)}}this.advanceGenerator()}*cycleSort(){this.operationsPerFrame=Math.ceil(this.dataLength/2e3);var done=new Array(this.dataLength);for(let i=0;i<this.dataLength;i++)done[i]=!1;for(let i=0;i<this.dataLength;i++)if(!done[i]){this.readFromPosition(i);let poppedEntry=this.data[i];var firstPoppedEntry=poppedEntry;let index=0;do{for(let j=index=0;j<this.dataLength;j++)this.readFromPosition(j),this.data[j]<poppedEntry&&index++;poppedEntry>firstPoppedEntry&&index--;var temp=this.data[index];this.data[index]=poppedEntry,poppedEntry=temp,this.writeToPosition(index)&&(yield),done[index]=!0}while(index!==i)}this.advanceGenerator()}*msdRadixSort(){let maxKeyLength=0;var denom=1/Math.log(2);for(let i=0;i<this.dataLength;i++){this.readFromPosition(i);var keyLength=Math.log(this.data[i])*denom;maxKeyLength=Math.max(maxKeyLength,keyLength)}maxKeyLength=Math.round(maxKeyLength),this.operationsPerFrame=Math.ceil(this.dataLength*maxKeyLength/650);var currentEndpoints=new Array(this.dataLength),nextEndpoints=(currentEndpoints[0]=0,currentEndpoints[1]=this.dataLength-1,new Array(this.dataLength));let numBlocks=1,nextNumBlocks=0;var auxArray=new Array(this.dataLength);let div=Math.pow(2,maxKeyLength-1);for(let keyPos=0;keyPos<maxKeyLength;keyPos++){for(let i=0;i<numBlocks;i++){let index0=currentEndpoints[2*i],index1=currentEndpoints[2*i+1];for(let j=currentEndpoints[2*i];j<=currentEndpoints[2*i+1];j++)this.readFromPosition(j),0==Math.floor(this.data[j]/div)%2?(auxArray[index0]=this.data[j],this.writeToPosition(index0)&&(yield),index0++):(auxArray[index1]=this.data[j],this.writeToPosition(index1)&&(yield),index1--);for(let j=currentEndpoints[2*i];j<=currentEndpoints[2*i+1];j++)this.data[j]=auxArray[j],this.writeToPosition(j)&&(yield);index0--,index1++,index0>currentEndpoints[2*i]&&(nextEndpoints[2*nextNumBlocks]=currentEndpoints[2*i],nextEndpoints[2*nextNumBlocks+1]=index0,nextNumBlocks++),currentEndpoints[2*i+1]>index1&&(nextEndpoints[2*nextNumBlocks]=index1,nextEndpoints[2*nextNumBlocks+1]=currentEndpoints[2*i+1],nextNumBlocks++)}numBlocks=nextNumBlocks;for(let i=nextNumBlocks=0;i<2*numBlocks;i++)currentEndpoints[i]=nextEndpoints[i];div/=2}this.advanceGenerator()}*lsdRadixSort(){let maxKeyLength=0;var denom=1/Math.log(2);for(let i=0;i<this.dataLength;i++){this.readFromPosition(i);var keyLength=Math.log(this.data[i])*denom;maxKeyLength=Math.max(maxKeyLength,keyLength)}maxKeyLength=Math.round(maxKeyLength),this.operationsPerFrame=Math.ceil(this.dataLength*maxKeyLength/650);var auxArray=new Array(this.dataLength);let div=1;for(let keyPos=0;keyPos<maxKeyLength;keyPos++){let index0=0,index1=this.dataLength-1;for(let j=0;j<this.dataLength;j++)this.readFromPosition(j),0==Math.floor(this.data[j]/div)%2?(auxArray[index0]=this.data[j],this.writeToPosition(index0)&&(yield),index0++):(auxArray[index1]=this.data[j],this.writeToPosition(index1)&&(yield),index1--);index0--,index1++;for(let j=0;j<=index0;j++)this.data[j]=auxArray[j],this.writeToPosition(j)&&(yield);for(let j=0;j<this.dataLength-index1;j++)this.data[index1+j]=auxArray[this.dataLength-1-j],this.writeToPosition(index1+j)&&(yield);div*=2}this.advanceGenerator()}*gravitySort(){this.operationsPerFrame=Math.ceil(this.dataLength*this.dataLength/1e6);var beads=new Array(this.dataLength);for(let i=0;i<this.dataLength;i++){beads[i]=new Array(this.dataLength);for(let j=0;j<this.dataLength;j++)beads[i][j]=!1}let maxIndex=0,maxEntry=0;for(let i=0;i<this.dataLength;i++){this.readFromPosition(i);var size=this.data[i];for(let j=0;j<size;j++)beads[i][j]=!0;size-i>maxEntry&&(maxEntry=size-i,maxIndex=i)}for(let j=0;j<this.dataLength;j++){for(let i=this.dataLength-1;0<=i;i--)if(beads[i][j]){let targetRow=i;for(;++targetRow<this.dataLength&&!beads[targetRow][j];);targetRow--,beads[i][j]=!1,beads[targetRow][j]=!0,this.data[i]--,this.data[targetRow]++,this.writeToPosition(i,!1,!1),this.writeToPosition(targetRow,!1,!1)}this.writeToPosition(maxIndex,!1,!0)&&(yield),this.numWrites--,this.inFrameOperations--}this.advanceGenerator()}}export{SortingAlgorithm};
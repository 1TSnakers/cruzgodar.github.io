import{getGlslBundle,loadGlsl}from"../../../scripts/src/complexGlsl.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{tempShader}from"/scripts/applets/applet.min.js";import{currentlyTouchDevice}from"/scripts/src/interaction.min.js";import{animate,sleep}from"/scripts/src/utils.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";const bubbleRadius=1;class GeneralizedJuliaSets extends AnimationFrameApplet{loadPromise;generatingCode="cadd(cpow(z, 2.0), c)";wilsonHidden;switchJuliaModeButton;ignoreBrightnessCalculation=!1;juliaMode="mandelbrot";pastBrightnessScales=[];numIterations=200;c=[0,0];resolution=500;resolutionHidden=50;constructor({canvas,switchJuliaModeButton}){super(canvas),this.switchJuliaModeButton=switchJuliaModeButton;var i=this.createHiddenCanvas(),e={shader:tempShader,canvasWidth:this.resolution,worldWidth:4,minWorldWidth:1e-5,maxWorldWidth:100,minWorldHeight:1e-5,maxWorldHeight:100,useResetButton:!0,resetButtonIconPath:"/graphics/general-icons/reset.png",onResizeCanvas:()=>this.needNewFrame=!0,draggableOptions:{draggables:{draggableArg:[0,0]},callbacks:{drag:this.onDragDraggable.bind(this)}},interactionOptions:{useForPanAndZoom:!0,onPanAndZoom:()=>this.needNewFrame=!0,callbacks:{mousemove:this.onMousemove.bind(this),mousedown:this.onMousedown.bind(this),touchstart:this.onTouchstart.bind(this),touchmove:this.onTouchmove.bind(this),touchend:this.onTouchend.bind(this)}},fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"},verbose:window.DEBUG};this.wilson=new WilsonGPU(canvas,e),this.wilsonHidden=new WilsonGPU(i,{...e,draggableOptions:{},canvasWidth:this.resolutionHidden}),this.wilson.draggables.draggableArg.element.style.display="none",this.loadPromise=loadGlsl()}run({generatingCode="cpow(z, 2.0) + c",resolution=500}){this.generatingCode=generatingCode,this.resolution=resolution;var i=-1!==generatingCode.indexOf("draggableArg"),e=`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform int numIterations;
			uniform float brightnessScale;
			
			${i?"uniform vec2 draggableArg;":""}
			
			${getGlslBundle(generatingCode)}
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec2 c = z;
				
				vec3 color = normalize(
					vec3(
						abs(z.x + z.y) / 2.0,
						abs(z.x) / 2.0,
						abs(z.y) / 2.0
					)
					+ .1 / length(z) * vec3(1.0)
				);
				
				float brightness = exp(-length(z));
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (length(z) >= 10000.0)
					{
						break;
					}
					
					z = ${generatingCode};
					
					brightness += exp(-length(z));
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`,t=`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 juliaC;
			uniform int numIterations;
			uniform float brightnessScale;
			uniform float juliaRadius;
			uniform float crosshairSize;

			${i?"uniform vec2 draggableArg;":""}
			
			${getGlslBundle(generatingCode)}
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;

				vec2 diffFromC = z - juliaC;
				float minWorldSize = min(worldSize.x, worldSize.y);

				vec2 minMaxDistanceToCrosshair = vec2(
					min(abs(diffFromC.x), abs(diffFromC.y)),
					max(abs(diffFromC.x), abs(diffFromC.y))
				) / minWorldSize;

				if (minMaxDistanceToCrosshair.x < 0.002 && minMaxDistanceToCrosshair.y < crosshairSize)
				{
					gl_FragColor = vec4(0.75, 0.75, 0.75, 1.0);
					return;
				}

				float distanceFromMouse = clamp(
					length(diffFromC) / minWorldSize * juliaRadius * 10.0,
					0.0,
					1.0
				);

				float t = distanceFromMouse < 0.5
					? 2.0 * distanceFromMouse * distanceFromMouse 
					: 1.0 - (-2.0 * distanceFromMouse + 2.0) * (-2.0 * distanceFromMouse + 2.0) / 2.0;
				
				// Remove the bias as the bubble expands.
				vec2 c = mix(juliaC, z, t);
				
				vec3 color = normalize(
					vec3(
						abs(z.x + z.y) / 2.0,
						abs(z.x) / 2.0,
						abs(z.y) / 2.0
					)
					+ .1 / length(z) * vec3(1.0)
				);
				
				float brightness = exp(-length(z));
				
				
				
				bool broken = false;
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						
						return;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = ${generatingCode};
					
					brightness += exp(-length(z));
				}
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`,s=`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 c;
			uniform int numIterations;
			uniform float brightnessScale;
			
			${i?"uniform vec2 draggableArg;":""}
			
			${getGlslBundle(generatingCode)}
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				float brightness = exp(-length(z));
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (length(z) >= 10000.0)
					{
						break;
					}
					
					z = ${generatingCode};
					
					brightness += exp(-length(z));
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`,o=`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 juliaC;
			uniform int numIterations;
			uniform float brightnessScale;
			uniform float juliaProportion;
			
			${i?"uniform vec2 draggableArg;":""}
			
			${getGlslBundle(generatingCode)}
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec3 color = normalize(
					vec3(
						abs(z.x + z.y) / 2.0,
						abs(z.x) / 2.0,
						abs(z.y) / 2.0
					)
					+ .1 / length(z) * vec3(1.0)
				);
				
				float brightness = exp(-length(z));

				vec2 c = mix(z, juliaC, juliaProportion);
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (length(z) >= 4.0)
					{
						break;
					}
					
					z = ${generatingCode};
					
					brightness += exp(-length(z));
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`;for(const n of[this.wilson,this.wilsonHidden])n.loadShader({id:"mandelbrot",shader:e,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,...i?{draggableArg:[0,0]}:{}}}),n.loadShader({id:"juliaPicker",shader:t,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,juliaC:this.c,juliaRadius:1,crosshairSize:.002,...i?{draggableArg:[0,0]}:{}}}),n.loadShader({id:"julia",shader:s,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,c:this.c,...i?{draggableArg:[0,0]}:{}}}),n.loadShader({id:"juliaToMandelbrot",shader:o,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,juliaC:this.c,juliaProportion:1,...i?{draggableArg:[0,0]}:{}}});this.juliaMode="mandelbrot",this.wilson.useShader(this.juliaMode),this.wilsonHidden.useShader(this.juliaMode),this.pastBrightnessScales=[],this.wilson.draggables.draggableArg.element.style.display=i?"block":"none",this.wilson.setDraggables({draggableArg:[0,0]}),this.wilson.resizeWorld({width:4,height:4,centerX:0,centerY:0}),this.resume()}async advanceJuliaMode(){if("mandelbrot"===this.juliaMode)this.juliaMode="juliaPicker",this.wilson.setUniforms({juliaRadius:bubbleRadius},"juliaPicker"),this.wilsonHidden.setUniforms({juliaRadius:bubbleRadius},"juliaPicker"),this.c=[1e3,1e3];else if("julia"===this.juliaMode){this.juliaMode="juliaToMandelbrot",this.wilson.useShader(this.juliaMode),this.wilsonHidden.useShader(this.juliaMode),this.wilson.setUniforms({juliaProportion:1,c:this.c}),this.wilsonHidden.setUniforms({juliaProportion:1,c:this.c});const e=this.wilson.worldWidth,s=this.wilson.worldHeight,o=this.wilson.worldCenterX,n=this.wilson.worldCenterY;var i=-Math.min(Math.log2(e/4),Math.log2(s/4));await animate(t=>{this.wilson.resizeWorld({width:e*(1-t)+4*t,height:s*(1-t)+4*t,centerX:o*(1-t),centerY:n*(1-t)}),this.needNewFrame=!0},1<i?500:0<i?200:0,"easeInOutCubic"),0<i&&await sleep(100),await animate(t=>{this.wilson.setUniforms({juliaProportion:1-t}),this.wilsonHidden.setUniforms({juliaProportion:1-t}),this.needNewFrame=!0},500,"easeInOutQuad"),this.juliaMode="mandelbrot"}else this.juliaMode="julia",this.ignoreBrightnessCalculation=!0,animate(t=>{this.wilson.setUniforms({juliaRadius:(1-t)*bubbleRadius}),this.wilsonHidden.setUniforms({juliaRadius:(1-t)*bubbleRadius}),this.needNewFrame=!0},600,"cubicBezier(0.2, 1, 0.2, 1)"),await sleep(500),this.ignoreBrightnessCalculation=!1,await animate(()=>{this.needNewFrame=!0},300,"easeInOutQuad");this.pastBrightnessScales=[],this.wilson.useShader(this.juliaMode),this.wilsonHidden.useShader(this.juliaMode),"juliaPicker"===this.juliaMode&&currentlyTouchDevice?this.wilson.useInteractionForPanAndZoom=!1:this.wilson.useInteractionForPanAndZoom=!0,this.switchJuliaModeButton&&(this.switchJuliaModeButton.disabled="juliaPicker"===this.juliaMode),this.needNewFrame=!0}onMousemove({x,y}){"juliaPicker"===this.juliaMode&&(this.c=[x,y],this.wilson.setUniforms({crosshairSize:0}),this.wilsonHidden.setUniforms({crosshairSize:0}),this.needNewFrame=!0)}onMousedown(){"juliaPicker"===this.juliaMode&&this.advanceJuliaMode()}onTouchstart({x,y,event}){var i;event.preventDefault(),"juliaPicker"===this.juliaMode&&(i=.15*Math.min(this.wilson.worldHeight,this.wilson.worldWidth),this.c=[x,y+i],currentlyTouchDevice&&animate(t=>{this.wilson.setUniforms({crosshairSize:.02*t}),this.wilsonHidden.setUniforms({crosshairSize:.02*t}),this.needNewFrame=!0},100,"easeOutQuad"),this.needNewFrame=!0)}onTouchmove({x,y,event}){var i;event.preventDefault(),"juliaPicker"===this.juliaMode&&(i=.15*Math.min(this.wilson.worldHeight,this.wilson.worldWidth),this.c=[x,y+i],this.needNewFrame=!0)}onTouchend(){"juliaPicker"===this.juliaMode&&(this.advanceJuliaMode(),animate(t=>{this.wilson.setUniforms({crosshairSize:.02*(1-t)}),this.wilsonHidden.setUniforms({crosshairSize:.02*(1-t)}),this.needNewFrame=!0},100,"easeOutQuad"))}onDragDraggable({x,y}){for(const i of["mandelbrot","juliaPicker","julia","juliaToMandelbrot"])this.wilson.setUniforms({draggableArg:[x,y]},i),this.wilsonHidden.setUniforms({draggableArg:[x,y]},i);this.needNewFrame=!0}updateBrightnessScale(zoomLevel){this.wilsonHidden.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:20+zoomLevel}),"julia"===this.juliaMode?this.wilsonHidden.setUniforms({c:this.c}):"juliaPicker"!==this.juliaMode&&"juliaToMandelbrot"!==this.juliaMode||this.wilsonHidden.setUniforms({juliaC:this.c}),this.wilsonHidden.drawFrame();var i=this.wilsonHidden.readPixels(),e=new Array(this.resolutionHidden*this.resolutionHidden);for(let s=0;s<this.resolutionHidden*this.resolutionHidden;s++)e[s]=i[4*s]+i[4*s+1]+i[4*s+2];e.sort((a,b)=>a-b);var t=Math.max((e[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+e[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)])/25,4);this.pastBrightnessScales.push(t)}drawFrame(){var i=3-Math.log2(this.wilson.worldWidth);this.numIterations=Math.ceil(200+50*i),this.ignoreBrightnessCalculation||this.updateBrightnessScale(i),10<this.pastBrightnessScales.length&&this.pastBrightnessScales.shift();let e=0;for(let t=0;t<this.pastBrightnessScales.length;t++)e+=this.pastBrightnessScales[t];e=Math.max(e/this.pastBrightnessScales.length,.5),this.wilson.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:e}),"julia"===this.juliaMode?this.wilson.setUniforms({c:this.c}):"juliaPicker"!==this.juliaMode&&"juliaToMandelbrot"!==this.juliaMode||this.wilson.setUniforms({juliaC:this.c}),this.wilson.drawFrame()}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.animationPaused=!0,await sleep(33)}}export{GeneralizedJuliaSets};
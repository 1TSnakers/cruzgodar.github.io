"use strict";class PascalsTriangleColoring extends Applet{gridSize=20;pixelsPerRow=0;pixelsPerFrame=10;delayOnMeet=0;resolution=2e3;numColors=3;yOffset=0;fillRegions=!0;parities=[];coordinates=[];colors=[];isFinished=[];lastTimestamp=-1;activeNodes=[];constructor(i){super(i);let s={renderer:"cpu",canvasWidth:2e3,canvasHeight:2e3,useFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"};this.wilson=new Wilson(i,s)}run(i,s,t){this.resolution=i,this.gridSize=s,this.numColors=t,this.wilson.changeCanvasSize(this.resolution,this.resolution),this.pixelsPerFrame=Math.ceil(this.resolution/200),this.pixelsPerRow=Math.round(this.resolution/(this.gridSize+2)),this.delayOnMeet=2*this.pixelsPerRow,this.yOffset=(1-Math.sqrt(3)/2*(this.gridSize+1)/(this.gridSize+2))/2*this.resolution,this.activeNodes=[[0,0,0,0]],this.parities=Array(this.gridSize),this.colors=Array(this.gridSize),this.isFinished=Array(this.gridSize),this.coordinates=Array(this.gridSize);for(let e=0;e<this.gridSize;e++){this.parities[e]=Array(this.gridSize),this.colors[e]=Array(this.gridSize),this.coordinates[e]=Array(this.gridSize),this.isFinished[e]=Array(this.gridSize);for(let o=0;o<this.gridSize;o++)this.isFinished[e][o]=!1}this.parities[0][0]=1,this.colors[0][0]=this.wilson.utils.hsvToRgb(1/this.numColors,1,1);for(let h=1;h<this.gridSize;h++){this.parities[h][0]=1,this.parities[h][h]=1,this.colors[h][0]=[...this.colors[0][0]],this.colors[h][h]=[...this.colors[0][0]];for(let r=1;r<h;r++)this.parities[h][r]=(this.parities[h-1][r-1]+this.parities[h-1][r])%this.numColors,this.colors[h][r]=this.wilson.utils.hsvToRgb(this.parities[h][r]/this.numColors,1,1)}for(let c=0;c<this.gridSize;c++)for(let l=0;l<=c;l++)this.coordinates[c][l]=this.getCoordinates(c,l);this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.wilson.ctx.lineWidth=10*Math.sqrt(this.pixelsPerRow/150),window.requestAnimationFrame(this.drawFrame.bind(this))}drawFrame(i){let s=i-this.lastTimestamp;if(this.lastTimestamp=i,0!==s){for(let t=0;t<this.pixelsPerFrame;t++)for(let e=0;e<this.activeNodes.length;e++){if(0!==this.activeNodes[e][3]){this.activeNodes[e][3]--;continue}if(this.drawLineSegments(e),this.activeNodes[e][2]++,this.activeNodes[e][2]===this.pixelsPerRow-1){if(this.activeNodes[e][0]!==this.gridSize-2){if(!this.isFinished[this.activeNodes[e][0]+1][this.activeNodes[e][1]]){let o=!1;for(let h=0;h<this.activeNodes.length;h++)if(this.activeNodes[h][0]===this.activeNodes[e][0]+1&&this.activeNodes[h][1]===this.activeNodes[e][1]){o=!0,this.activeNodes[h][3]+=this.delayOnMeet;break}o||this.activeNodes.push([this.activeNodes[e][0]+1,this.activeNodes[e][1],0,0])}if(!this.isFinished[this.activeNodes[e][0]+1][this.activeNodes[e][1]+1]){let r=!1;for(let c=0;c<this.activeNodes.length;c++)if(this.activeNodes[c][0]===this.activeNodes[e][0]+1&&this.activeNodes[c][1]===this.activeNodes[e][1]+1){r=!0,this.activeNodes[c][3]+=this.delayOnMeet;break}!r&&this.activeNodes[e][1]+1<=(this.activeNodes[e][0]+1)/2&&this.activeNodes.push([this.activeNodes[e][0]+1,this.activeNodes[e][1]+1,0,0])}}this.isFinished[this.activeNodes[e][0]][this.activeNodes[e][1]]=!0,this.activeNodes.splice(e,1)}}this.animationPaused||0===this.activeNodes.length||window.requestAnimationFrame(this.drawFrame.bind(this))}}getCoordinates(i,s){let t=(s-Math.floor(i/2))*this.resolution/(this.gridSize+2)+this.resolution/2;i%2==1&&(t-=.5*this.resolution/(this.gridSize+2));let e=(i+1)*Math.sqrt(3)/2*this.resolution/(this.gridSize+2)+this.yOffset;return[.8*t+.1*this.resolution,.8*e+.1*this.resolution]}drawLineSegments(i){let s=this.activeNodes[i][2]/this.pixelsPerRow,t=(this.activeNodes[i][2]+2)/this.pixelsPerRow,e=this.activeNodes[i][0],o=this.activeNodes[i][1],h=e+1,r=o;this.wilson.ctx.strokeStyle=`rgb(${this.colors[e][o][0]*(1-s)+this.colors[h][r][0]*s}, ${this.colors[e][o][1]*(1-s)+this.colors[h][r][1]*s}, ${this.colors[e][o][2]*(1-s)+this.colors[h][r][2]*s})`,this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[e][o][0]*(1-s)+this.coordinates[h][r][0]*s,this.coordinates[e][o][1]*(1-s)+this.coordinates[h][r][1]*s),this.wilson.ctx.lineTo(this.coordinates[e][o][0]*(1-t)+this.coordinates[h][r][0]*t,this.coordinates[e][o][1]*(1-t)+this.coordinates[h][r][1]*t),this.wilson.ctx.stroke(),r++,this.wilson.ctx.strokeStyle=`rgb(${this.colors[e][o][0]*(1-s)+this.colors[h][r][0]*s}, ${this.colors[e][o][1]*(1-s)+this.colors[h][r][1]*s}, ${this.colors[e][o][2]*(1-s)+this.colors[h][r][2]*s})`,this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[e][o][0]*(1-s)+this.coordinates[h][r][0]*s,this.coordinates[e][o][1]*(1-s)+this.coordinates[h][r][1]*s),this.wilson.ctx.lineTo(this.coordinates[e][o][0]*(1-t)+this.coordinates[h][r][0]*t,this.coordinates[e][o][1]*(1-t)+this.coordinates[h][r][1]*t),this.wilson.ctx.stroke(),o=e-o,r=h-r,this.wilson.ctx.strokeStyle=`rgb(${this.colors[e][o][0]*(1-s)+this.colors[h][r][0]*s}, ${this.colors[e][o][1]*(1-s)+this.colors[h][r][1]*s}, ${this.colors[e][o][2]*(1-s)+this.colors[h][r][2]*s})`,this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[e][o][0]*(1-s)+this.coordinates[h][r][0]*s,this.coordinates[e][o][1]*(1-s)+this.coordinates[h][r][1]*s),this.wilson.ctx.lineTo(this.coordinates[e][o][0]*(1-t)+this.coordinates[h][r][0]*t,this.coordinates[e][o][1]*(1-t)+this.coordinates[h][r][1]*t),this.wilson.ctx.stroke(),r++,this.wilson.ctx.strokeStyle=`rgb(${this.colors[e][o][0]*(1-s)+this.colors[h][r][0]*s}, ${this.colors[e][o][1]*(1-s)+this.colors[h][r][1]*s}, ${this.colors[e][o][2]*(1-s)+this.colors[h][r][2]*s})`,this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[e][o][0]*(1-s)+this.coordinates[h][r][0]*s,this.coordinates[e][o][1]*(1-s)+this.coordinates[h][r][1]*s),this.wilson.ctx.lineTo(this.coordinates[e][o][0]*(1-t)+this.coordinates[h][r][0]*t,this.coordinates[e][o][1]*(1-t)+this.coordinates[h][r][1]*t),this.wilson.ctx.stroke()}}
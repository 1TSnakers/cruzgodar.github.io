import{Applet}from"/scripts/src/applets.min.mjs";import{Wilson}from"/scripts/wilson.min.mjs";class PascalsTriangleColoring extends Applet{gridSize=20;pixelsPerRow=0;pixelsPerFrame=10;delayOnMeet=0;resolution=2e3;numColors=3;yOffset=0;fillRegions=!0;parities=[];coordinates=[];colors=[];isFinished=[];lastTimestamp=-1;activeNodes=[];constructor(canvas){super(canvas);this.wilson=new Wilson(canvas,{renderer:"cpu",canvasWidth:2e3,canvasHeight:2e3,useFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"})}run({resolution,gridSize,numColors}){this.resolution=resolution,this.gridSize=gridSize,this.numColors=numColors,this.wilson.changeCanvasSize(this.resolution,this.resolution),this.pixelsPerFrame=Math.ceil(this.resolution/200),this.pixelsPerRow=Math.round(this.resolution/(this.gridSize+2)),this.delayOnMeet=2*this.pixelsPerRow,this.yOffset=(1-Math.sqrt(3)/2*(this.gridSize+1)/(this.gridSize+2))/2*this.resolution,this.activeNodes=[[0,0,0,0]],this.parities=new Array(this.gridSize),this.colors=new Array(this.gridSize),this.isFinished=new Array(this.gridSize),this.coordinates=new Array(this.gridSize);for(let i=0;i<this.gridSize;i++){this.parities[i]=new Array(this.gridSize),this.colors[i]=new Array(this.gridSize),this.coordinates[i]=new Array(this.gridSize),this.isFinished[i]=new Array(this.gridSize);for(let j=0;j<this.gridSize;j++)this.isFinished[i][j]=!1}this.parities[0][0]=1,this.colors[0][0]=this.wilson.utils.hsvToRgb(1/this.numColors,1,1);for(let i=1;i<this.gridSize;i++){this.parities[i][0]=1,this.parities[i][i]=1,this.colors[i][0]=[...this.colors[0][0]],this.colors[i][i]=[...this.colors[0][0]];for(let j=1;j<i;j++)this.parities[i][j]=(this.parities[i-1][j-1]+this.parities[i-1][j])%this.numColors,this.colors[i][j]=this.wilson.utils.hsvToRgb(this.parities[i][j]/this.numColors,1,1)}for(let i=0;i<this.gridSize;i++)for(let j=0;j<=i;j++)this.coordinates[i][j]=this.getCoordinates(i,j);this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.wilson.ctx.lineWidth=10*Math.sqrt(this.pixelsPerRow/150),window.requestAnimationFrame(this.drawFrame.bind(this))}drawFrame(timestamp){var timeElapsed=timestamp-this.lastTimestamp;if(this.lastTimestamp=timestamp,0!=timeElapsed){for(let i=0;i<this.pixelsPerFrame;i++)for(let j=0;j<this.activeNodes.length;j++)if(0!==this.activeNodes[j][3])this.activeNodes[j][3]--;else if(this.drawLineSegments(j),this.activeNodes[j][2]++,this.activeNodes[j][2]===this.pixelsPerRow-1){if(this.activeNodes[j][0]!==this.gridSize-2){if(!this.isFinished[this.activeNodes[j][0]+1][this.activeNodes[j][1]]){let found=!1;for(let k=0;k<this.activeNodes.length;k++)if(this.activeNodes[k][0]===this.activeNodes[j][0]+1&&this.activeNodes[k][1]===this.activeNodes[j][1]){found=!0,this.activeNodes[k][3]+=this.delayOnMeet;break}found||this.activeNodes.push([this.activeNodes[j][0]+1,this.activeNodes[j][1],0,0])}if(!this.isFinished[this.activeNodes[j][0]+1][this.activeNodes[j][1]+1]){let found=!1;for(let k=0;k<this.activeNodes.length;k++)if(this.activeNodes[k][0]===this.activeNodes[j][0]+1&&this.activeNodes[k][1]===this.activeNodes[j][1]+1){found=!0,this.activeNodes[k][3]+=this.delayOnMeet;break}!found&&this.activeNodes[j][1]+1<=(this.activeNodes[j][0]+1)/2&&this.activeNodes.push([this.activeNodes[j][0]+1,this.activeNodes[j][1]+1,0,0])}}this.isFinished[this.activeNodes[j][0]][this.activeNodes[j][1]]=!0,this.activeNodes.splice(j,1)}this.animationPaused||0===this.activeNodes.length||window.requestAnimationFrame(this.drawFrame.bind(this))}}getCoordinates(row,col){let centerX=(col-Math.floor(row/2))*this.resolution/(this.gridSize+2)+this.resolution/2;row%2==1&&(centerX-=.5*this.resolution/(this.gridSize+2));col=(row+1)*Math.sqrt(3)/2*this.resolution/(this.gridSize+2)+this.yOffset;return[.8*centerX+.1*this.resolution,.8*col+.1*this.resolution]}drawLineSegments(activeNodeIndex){var oldT=this.activeNodes[activeNodeIndex][2]/this.pixelsPerRow,newT=(this.activeNodes[activeNodeIndex][2]+2)/this.pixelsPerRow,row1=this.activeNodes[activeNodeIndex][0],activeNodeIndex=this.activeNodes[activeNodeIndex][1],row2=row1+1,col2=activeNodeIndex;this.wilson.ctx.strokeStyle=`rgb(${this.colors[row1][activeNodeIndex][0]*(1-oldT)+this.colors[row2][col2][0]*oldT}, ${this.colors[row1][activeNodeIndex][1]*(1-oldT)+this.colors[row2][col2][1]*oldT}, ${this.colors[row1][activeNodeIndex][2]*(1-oldT)+this.colors[row2][col2][2]*oldT})`,this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[row1][activeNodeIndex][0]*(1-oldT)+this.coordinates[row2][col2][0]*oldT,this.coordinates[row1][activeNodeIndex][1]*(1-oldT)+this.coordinates[row2][col2][1]*oldT),this.wilson.ctx.lineTo(this.coordinates[row1][activeNodeIndex][0]*(1-newT)+this.coordinates[row2][col2][0]*newT,this.coordinates[row1][activeNodeIndex][1]*(1-newT)+this.coordinates[row2][col2][1]*newT),this.wilson.ctx.stroke(),this.wilson.ctx.strokeStyle=`rgb(${this.colors[row1][activeNodeIndex][0]*(1-oldT)+this.colors[row2][++col2][0]*oldT}, ${this.colors[row1][activeNodeIndex][1]*(1-oldT)+this.colors[row2][col2][1]*oldT}, ${this.colors[row1][activeNodeIndex][2]*(1-oldT)+this.colors[row2][col2][2]*oldT})`,this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[row1][activeNodeIndex][0]*(1-oldT)+this.coordinates[row2][col2][0]*oldT,this.coordinates[row1][activeNodeIndex][1]*(1-oldT)+this.coordinates[row2][col2][1]*oldT),this.wilson.ctx.lineTo(this.coordinates[row1][activeNodeIndex][0]*(1-newT)+this.coordinates[row2][col2][0]*newT,this.coordinates[row1][activeNodeIndex][1]*(1-newT)+this.coordinates[row2][col2][1]*newT),this.wilson.ctx.stroke(),this.wilson.ctx.strokeStyle=`rgb(${this.colors[row1][activeNodeIndex=row1-activeNodeIndex][0]*(1-oldT)+this.colors[row2][col2=row2-col2][0]*oldT}, ${this.colors[row1][activeNodeIndex][1]*(1-oldT)+this.colors[row2][col2][1]*oldT}, ${this.colors[row1][activeNodeIndex][2]*(1-oldT)+this.colors[row2][col2][2]*oldT})`,this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[row1][activeNodeIndex][0]*(1-oldT)+this.coordinates[row2][col2][0]*oldT,this.coordinates[row1][activeNodeIndex][1]*(1-oldT)+this.coordinates[row2][col2][1]*oldT),this.wilson.ctx.lineTo(this.coordinates[row1][activeNodeIndex][0]*(1-newT)+this.coordinates[row2][col2][0]*newT,this.coordinates[row1][activeNodeIndex][1]*(1-newT)+this.coordinates[row2][col2][1]*newT),this.wilson.ctx.stroke(),this.wilson.ctx.strokeStyle=`rgb(${this.colors[row1][activeNodeIndex][0]*(1-oldT)+this.colors[row2][++col2][0]*oldT}, ${this.colors[row1][activeNodeIndex][1]*(1-oldT)+this.colors[row2][col2][1]*oldT}, ${this.colors[row1][activeNodeIndex][2]*(1-oldT)+this.colors[row2][col2][2]*oldT})`,this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[row1][activeNodeIndex][0]*(1-oldT)+this.coordinates[row2][col2][0]*oldT,this.coordinates[row1][activeNodeIndex][1]*(1-oldT)+this.coordinates[row2][col2][1]*oldT),this.wilson.ctx.lineTo(this.coordinates[row1][activeNodeIndex][0]*(1-newT)+this.coordinates[row2][col2][0]*newT,this.coordinates[row1][activeNodeIndex][1]*(1-newT)+this.coordinates[row2][col2][1]*newT),this.wilson.ctx.stroke()}}export{PascalsTriangleColoring};
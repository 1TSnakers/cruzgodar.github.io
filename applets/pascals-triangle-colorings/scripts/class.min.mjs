import{Applet}from"/scripts/src/applets.min.min.min.mjs";class PascalsTriangleColoring extends Applet{gridSize=20;pixelsPerRow=0;pixelsPerFrame=10;delayOnMeet=0;resolution=2e3;numColors=3;yOffset=0;fillRegions=!0;parities=[];coordinates=[];colors=[];isFinished=[];lastTimestamp=-1;activeNodes=[];constructor(i){super(i);this.wilson=new Wilson(i,{renderer:"cpu",canvasWidth:2e3,canvasHeight:2e3,useFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"})}run(i,s,t){this.resolution=i,this.gridSize=s,this.numColors=t,this.wilson.changeCanvasSize(this.resolution,this.resolution),this.pixelsPerFrame=Math.ceil(this.resolution/200),this.pixelsPerRow=Math.round(this.resolution/(this.gridSize+2)),this.delayOnMeet=2*this.pixelsPerRow,this.yOffset=(1-Math.sqrt(3)/2*(this.gridSize+1)/(this.gridSize+2))/2*this.resolution,this.activeNodes=[[0,0,0,0]],this.parities=new Array(this.gridSize),this.colors=new Array(this.gridSize),this.isFinished=new Array(this.gridSize),this.coordinates=new Array(this.gridSize);for(let s=0;s<this.gridSize;s++){this.parities[s]=new Array(this.gridSize),this.colors[s]=new Array(this.gridSize),this.coordinates[s]=new Array(this.gridSize),this.isFinished[s]=new Array(this.gridSize);for(let i=0;i<this.gridSize;i++)this.isFinished[s][i]=!1}this.parities[0][0]=1,this.colors[0][0]=this.wilson.utils.hsvToRgb(1/this.numColors,1,1);for(let s=1;s<this.gridSize;s++){this.parities[s][0]=1,this.parities[s][s]=1,this.colors[s][0]=[...this.colors[0][0]],this.colors[s][s]=[...this.colors[0][0]];for(let i=1;i<s;i++)this.parities[s][i]=(this.parities[s-1][i-1]+this.parities[s-1][i])%this.numColors,this.colors[s][i]=this.wilson.utils.hsvToRgb(this.parities[s][i]/this.numColors,1,1)}for(let s=0;s<this.gridSize;s++)for(let i=0;i<=s;i++)this.coordinates[s][i]=this.getCoordinates(s,i);this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.wilson.ctx.lineWidth=10*Math.sqrt(this.pixelsPerRow/150),window.requestAnimationFrame(this.drawFrame.bind(this))}drawFrame(i){var s=i-this.lastTimestamp;if(this.lastTimestamp=i,0!=s){for(let i=0;i<this.pixelsPerFrame;i++)for(let t=0;t<this.activeNodes.length;t++)if(0!==this.activeNodes[t][3])this.activeNodes[t][3]--;else if(this.drawLineSegments(t),this.activeNodes[t][2]++,this.activeNodes[t][2]===this.pixelsPerRow-1){if(this.activeNodes[t][0]!==this.gridSize-2){if(!this.isFinished[this.activeNodes[t][0]+1][this.activeNodes[t][1]]){let s=!1;for(let i=0;i<this.activeNodes.length;i++)if(this.activeNodes[i][0]===this.activeNodes[t][0]+1&&this.activeNodes[i][1]===this.activeNodes[t][1]){s=!0,this.activeNodes[i][3]+=this.delayOnMeet;break}s||this.activeNodes.push([this.activeNodes[t][0]+1,this.activeNodes[t][1],0,0])}if(!this.isFinished[this.activeNodes[t][0]+1][this.activeNodes[t][1]+1]){let s=!1;for(let i=0;i<this.activeNodes.length;i++)if(this.activeNodes[i][0]===this.activeNodes[t][0]+1&&this.activeNodes[i][1]===this.activeNodes[t][1]+1){s=!0,this.activeNodes[i][3]+=this.delayOnMeet;break}!s&&this.activeNodes[t][1]+1<=(this.activeNodes[t][0]+1)/2&&this.activeNodes.push([this.activeNodes[t][0]+1,this.activeNodes[t][1]+1,0,0])}}this.isFinished[this.activeNodes[t][0]][this.activeNodes[t][1]]=!0,this.activeNodes.splice(t,1)}this.animationPaused||0===this.activeNodes.length||window.requestAnimationFrame(this.drawFrame.bind(this))}}getCoordinates(i,s){let t=(s-Math.floor(i/2))*this.resolution/(this.gridSize+2)+this.resolution/2;i%2==1&&(t-=.5*this.resolution/(this.gridSize+2));s=(i+1)*Math.sqrt(3)/2*this.resolution/(this.gridSize+2)+this.yOffset;return[.8*t+.1*this.resolution,.8*s+.1*this.resolution]}drawLineSegments(i){var s=this.activeNodes[i][2]/this.pixelsPerRow,t=(this.activeNodes[i][2]+2)/this.pixelsPerRow,e=this.activeNodes[i][0],i=this.activeNodes[i][1],o=e+1,h=i;this.wilson.ctx.strokeStyle=`rgb(${this.colors[e][i][0]*(1-s)+this.colors[o][h][0]*s}, ${this.colors[e][i][1]*(1-s)+this.colors[o][h][1]*s}, ${this.colors[e][i][2]*(1-s)+this.colors[o][h][2]*s})`,this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[e][i][0]*(1-s)+this.coordinates[o][h][0]*s,this.coordinates[e][i][1]*(1-s)+this.coordinates[o][h][1]*s),this.wilson.ctx.lineTo(this.coordinates[e][i][0]*(1-t)+this.coordinates[o][h][0]*t,this.coordinates[e][i][1]*(1-t)+this.coordinates[o][h][1]*t),this.wilson.ctx.stroke(),this.wilson.ctx.strokeStyle=`rgb(${this.colors[e][i][0]*(1-s)+this.colors[o][++h][0]*s}, ${this.colors[e][i][1]*(1-s)+this.colors[o][h][1]*s}, ${this.colors[e][i][2]*(1-s)+this.colors[o][h][2]*s})`,this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[e][i][0]*(1-s)+this.coordinates[o][h][0]*s,this.coordinates[e][i][1]*(1-s)+this.coordinates[o][h][1]*s),this.wilson.ctx.lineTo(this.coordinates[e][i][0]*(1-t)+this.coordinates[o][h][0]*t,this.coordinates[e][i][1]*(1-t)+this.coordinates[o][h][1]*t),this.wilson.ctx.stroke(),this.wilson.ctx.strokeStyle=`rgb(${this.colors[e][i=e-i][0]*(1-s)+this.colors[o][h=o-h][0]*s}, ${this.colors[e][i][1]*(1-s)+this.colors[o][h][1]*s}, ${this.colors[e][i][2]*(1-s)+this.colors[o][h][2]*s})`,this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[e][i][0]*(1-s)+this.coordinates[o][h][0]*s,this.coordinates[e][i][1]*(1-s)+this.coordinates[o][h][1]*s),this.wilson.ctx.lineTo(this.coordinates[e][i][0]*(1-t)+this.coordinates[o][h][0]*t,this.coordinates[e][i][1]*(1-t)+this.coordinates[o][h][1]*t),this.wilson.ctx.stroke(),this.wilson.ctx.strokeStyle=`rgb(${this.colors[e][i][0]*(1-s)+this.colors[o][++h][0]*s}, ${this.colors[e][i][1]*(1-s)+this.colors[o][h][1]*s}, ${this.colors[e][i][2]*(1-s)+this.colors[o][h][2]*s})`,this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[e][i][0]*(1-s)+this.coordinates[o][h][0]*s,this.coordinates[e][i][1]*(1-s)+this.coordinates[o][h][1]*s),this.wilson.ctx.lineTo(this.coordinates[e][i][0]*(1-t)+this.coordinates[o][h][0]*t,this.coordinates[e][i][1]*(1-t)+this.coordinates[o][h][1]*t),this.wilson.ctx.stroke()}}export{PascalsTriangleColoring};
"use strict";onmessage=async function(n){grid_size=n.data[0],num_iterations=n.data[1],await draw_fern()};let grid_size=null,num_iterations=null,fern_graph=[];const transformation_coefficients=[[0,0,0,.16,0,0],[.85,.04,-.04,.85,0,1.6],[.2,-.26,.23,.22,0,1.6],[-.15,.28,.26,.24,0,.44]];let current_x=0,current_y=0;const min_x=-6,max_x=6,min_y=-1,max_y=11;function draw_fern(){return new Promise(function(n,r){fern_graph=[];for(let n=0;n<grid_size;n++){fern_graph[n]=[];for(let r=0;r<grid_size;r++)fern_graph[n][r]=0}for(let n=0;n<num_iterations;n++){n%Math.floor(num_iterations/10)==0&&postMessage([fern_graph]);let r=Math.random(),t=3;if(r<.01?t=0:r<.86?t=1:r<.93&&(t=2),affine_transformation(t),current_x>=max_x||current_x<=min_x||current_y>=max_y||current_y<=min_y)continue;let e=(current_x-min_x)/(max_x-min_x);e=Math.floor(grid_size*e);let i=(current_y-min_y)/(max_y-min_y);i=Math.floor(grid_size*(1-i)),fern_graph[i][e]++}postMessage([fern_graph]),n()})}function affine_transformation(n){let r=transformation_coefficients[n][0]*current_x+transformation_coefficients[n][1]*current_y+transformation_coefficients[n][4];current_y=transformation_coefficients[n][2]*current_x+transformation_coefficients[n][3]*current_y+transformation_coefficients[n][5],current_x=r}
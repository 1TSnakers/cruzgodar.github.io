import{Applet}from"/scripts/src/applets.min.mjs";import{Wilson}from"/scripts/wilson.min.mjs";class HitomezashiPattern extends Applet{doDrawBoundaries=!0;doDrawRegions=!0;maximumSpeed=!1;resolution=null;gridSize=null;rowProb=null;colProb=null;patternRows=[];patternCols=[];regions=[];regionsOrdered=[];regionSizes=[];numRegions=0;numUniqueRegionSizes=0;cellsByRadius=[];currentRow=1;currentCol=1;currentRegion=0;lineWidth=null;constructor(canvas){super(canvas);this.wilson=new Wilson(canvas,{renderer:"cpu",canvasWidth:1e3,canvasHeight:1e3,useFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"})}run({resolution=2e3,gridSize=50,rowProb=.5,colProb=.5,doDrawBoundaries=!0,doDrawRegions=!0,maximumSpeed=!1}){this.resolution=resolution,this.gridSize=gridSize,this.rowProb=rowProb,this.colProb=colProb,this.doDrawBoundaries=doDrawBoundaries,this.doDrawRegions=doDrawRegions,this.maximumSpeed=maximumSpeed,this.wilson.changeCanvasSize(this.resolution,this.resolution),this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.wilson.ctx.strokeStyle="rgb(127, 127, 127)",this.lineWidth=this.resolution/this.gridSize/20,this.wilson.ctx.lineWidth=this.lineWidth,this.patternRows=new Array(this.gridSize+1),this.patternCols=new Array(this.gridSize+1),this.regions=new Array(this.gridSize),this.regionsOrdered=[],this.regionSizes=[],this.numRegions=0,this.cellsByRadius=new Array(this.gridSize+1);for(let i=0;i<this.gridSize+1;i++){this.patternRows[i]=new Array(this.gridSize+1),this.patternCols[i]=new Array(this.gridSize+1);for(let j=0;j<this.gridSize+1;j++)this.patternRows[i][j]=0,this.patternCols[i][j]=0}for(let i=0;i<this.gridSize;i++){this.regions[i]=new Array(this.gridSize);for(let j=0;j<this.gridSize;j++)this.regions[i][j]=-1}for(let i=0;i<this.gridSize+1;i++)this.cellsByRadius[i]=[];var middleRow=Math.floor(this.gridSize/2);for(let i=0;i<this.gridSize;i++)for(let j=0;j<this.gridSize;j++)this.cellsByRadius[Math.abs(i-middleRow)+Math.abs(j-middleRow)].push([i,j]);for(let i=0;i<this.gridSize+1;i++)for(let j=Math.random()<this.rowProb?1:0;j<this.gridSize;j+=2)this.patternRows[i][j]=1;for(let i=0;i<this.gridSize+1;i++){const offset=Math.random()<this.colProb?1:0;for(let j=offset;j<this.gridSize;j+=2)this.patternCols[j][i]=1}this.maximumSpeed?(this.doDrawBoundaries&&this.drawBoundaries(),this.doDrawRegions&&(this.identifyRegions(),this.drawRegions())):this.doDrawBoundaries?(this.currentRow=1,this.currentCol=1,this.drawBoundaryRowStep()):this.doDrawRegions&&(this.identifyRegions(),this.currentRegion=0,this.drawRegionsStep())}drawBoundaries(){for(let i=1;i<this.gridSize;i++)for(let j=0;j<this.gridSize;j++)this.patternRows[i][j]&&(this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.resolution/this.gridSize*j,this.resolution/this.gridSize*i),this.wilson.ctx.lineTo(this.resolution/this.gridSize*(j+1),this.resolution/this.gridSize*i),this.wilson.ctx.stroke());for(let i=0;i<this.gridSize;i++)for(let j=1;j<this.gridSize;j++)this.patternCols[i][j]&&(this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.resolution/this.gridSize*j,this.resolution/this.gridSize*i),this.wilson.ctx.lineTo(this.resolution/this.gridSize*j,this.resolution/this.gridSize*(i+1)),this.wilson.ctx.stroke())}drawBoundaryRowStep(){for(let j=0;j<this.gridSize;j++)this.patternRows[this.currentRow][j]&&(this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.resolution/this.gridSize*j,this.resolution/this.gridSize*this.currentRow),this.wilson.ctx.lineTo(this.resolution/this.gridSize*(j+1),this.resolution/this.gridSize*this.currentRow),this.wilson.ctx.stroke());this.currentRow++,this.currentRow<this.gridSize?this.animationPaused||window.requestAnimationFrame(this.drawBoundaryRowStep.bind(this)):this.animationPaused||window.requestAnimationFrame(this.drawBoundaryColStep.bind(this))}drawBoundaryColStep(){for(let i=0;i<this.gridSize;i++)this.patternCols[i][this.currentCol]&&(this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.resolution/this.gridSize*this.currentCol,this.resolution/this.gridSize*i),this.wilson.ctx.lineTo(this.resolution/this.gridSize*this.currentCol,this.resolution/this.gridSize*(i+1)),this.wilson.ctx.stroke());this.currentCol++,this.currentCol<this.gridSize?this.animationPaused||window.requestAnimationFrame(this.drawBoundaryColStep.bind(this)):this.doDrawRegions&&(this.identifyRegions(),this.currentRegion=0,setTimeout(this.drawRegionsStep.bind(this),1e3))}identifyRegions(){let startRow=0,startCol=0;for(;;){var activeSquares=[[startRow,startCol]];for(this.regions[startRow][startCol]=this.numRegions,this.regionsOrdered.push([[startRow,startCol]]);0!==activeSquares.length;){var numActiveSquares=activeSquares.length;for(let i=0;i<numActiveSquares;i++){var row=activeSquares[i][0],col=activeSquares[i][1];0<row&&-1===this.regions[row-1][col]&&!this.patternRows[row][col]&&(activeSquares.push([row-1,col]),this.regions[row-1][col]=this.numRegions,this.regionsOrdered[this.numRegions].push([row-1,col])),row<this.gridSize-1&&-1===this.regions[row+1][col]&&!this.patternRows[row+1][col]&&(activeSquares.push([row+1,col]),this.regions[row+1][col]=this.numRegions,this.regionsOrdered[this.numRegions].push([row+1,col])),0<col&&-1===this.regions[row][col-1]&&!this.patternCols[row][col]&&(activeSquares.push([row,col-1]),this.regions[row][col-1]=this.numRegions,this.regionsOrdered[this.numRegions].push([row,col-1])),col<this.gridSize-1&&-1===this.regions[row][col+1]&&!this.patternCols[row][col+1]&&(activeSquares.push([row,col+1]),this.regions[row][col+1]=this.numRegions,this.regionsOrdered[this.numRegions].push([row,col+1]))}activeSquares.splice(0,numActiveSquares)}this.regionSizes.push(this.regionsOrdered[this.numRegions].length);let foundNewStart=!1;for(let radius=0;radius<=this.gridSize;radius++){for(let i=0;i<this.cellsByRadius[radius].length;i++){const row=this.cellsByRadius[radius][i][0],col=this.cellsByRadius[radius][i][1];if(-1===this.regions[row][col]){startRow=row,startCol=col,foundNewStart=!0;break}}if(foundNewStart)break}if(this.numRegions++,!foundNewStart)break}this.regionSizes=[...new Set(this.regionSizes)],this.regionSizes.sort((a,b)=>b-a),this.numUniqueRegionSizes=this.regionSizes.length}drawRegions(){this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution);for(let i=0;i<this.numRegions;i++){var regionLength=this.regionsOrdered[i].length,h=i%(2*this.gridSize)/(2*this.gridSize),v=1===regionLength?.5:Math.sqrt(this.regionSizes.indexOf(regionLength)/(this.numUniqueRegionSizes-2)),h=this.wilson.utils.hsvToRgb(h,1,v);this.wilson.ctx.fillStyle=`rgb(${h[0]}, ${h[1]}, ${h[2]})`;for(let j=0;j<regionLength;j++){var row=this.regionsOrdered[i][j][0],col=this.regionsOrdered[i][j][1];this.wilson.ctx.fillRect(this.resolution/this.gridSize*col+this.lineWidth/2,this.resolution/this.gridSize*row+this.lineWidth/2,this.resolution/this.gridSize-this.lineWidth,this.resolution/this.gridSize-this.lineWidth)}}}drawRegionsStep(){for(let i=0;i<Math.ceil(this.gridSize/50);i++){var regionLength=this.regionsOrdered[this.currentRegion].length,h=this.currentRegion%(2*this.gridSize)/(2*this.gridSize),v=1===regionLength?.5:Math.sqrt(this.regionSizes.indexOf(regionLength)/(this.numUniqueRegionSizes-2)),h=this.wilson.utils.hsvToRgb(h,1,v);this.wilson.ctx.fillStyle="rgb(0, 0, 0)";for(let j=0;j<regionLength;j++){var row=this.regionsOrdered[this.currentRegion][j][0],col=this.regionsOrdered[this.currentRegion][j][1];this.wilson.ctx.fillRect(this.resolution/this.gridSize*col,this.resolution/this.gridSize*row,this.resolution/this.gridSize,this.resolution/this.gridSize)}this.wilson.ctx.fillStyle=`rgb(${h[0]}, ${h[1]}, ${h[2]})`;for(let j=0;j<regionLength;j++){const row=this.regionsOrdered[this.currentRegion][j][0],col=this.regionsOrdered[this.currentRegion][j][1];this.wilson.ctx.fillRect(this.resolution/this.gridSize*col+this.lineWidth/2,this.resolution/this.gridSize*row+this.lineWidth/2,this.resolution/this.gridSize-this.lineWidth,this.resolution/this.gridSize-this.lineWidth)}if(this.currentRegion++,this.currentRegion===this.numRegions)return}this.currentRegion<this.numRegions&&(this.animationPaused||window.requestAnimationFrame(this.drawRegionsStep.bind(this)))}}export{HitomezashiPattern};
"use strict";class HitomezashiPattern extends Applet{doDrawBoundaries=!0;doDrawRegions=!0;maximumSpeed=!1;resolution=null;gridSize=null;rowProb=null;colProb=null;patternRows=[];patternCols=[];regions=[];regionsOrdered=[];regionSizes=[];numRegions=0;numUniqueRegionSizes=0;cellsByRadius=[];currentRow=1;currentCol=1;currentRegion=0;lineWidth=null;constructor(i){super(i);let t={renderer:"cpu",canvasWidth:1e3,canvasHeight:1e3,useFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"};this.wilson=new Wilson(i,t)}run(i=2e3,t=50,s=.5,e=.5,r=!0,o=!0,n=!1){this.resolution=i,this.gridSize=t,this.rowProb=s,this.colProb=e,this.doDrawBoundaries=r,this.doDrawRegions=o,this.maximumSpeed=n,this.wilson.changeCanvasSize(this.resolution,this.resolution),this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.wilson.ctx.strokeStyle="rgb(127, 127, 127)",this.lineWidth=this.resolution/this.gridSize/20,this.wilson.ctx.lineWidth=this.lineWidth,this.patternRows=Array(this.gridSize+1),this.patternCols=Array(this.gridSize+1),this.regions=Array(this.gridSize),this.regionsOrdered=[],this.regionSizes=[],this.numRegions=0,this.cellsByRadius=Array(this.gridSize+1);for(let h=0;h<this.gridSize+1;h++){this.patternRows[h]=Array(this.gridSize+1),this.patternCols[h]=Array(this.gridSize+1);for(let l=0;l<this.gridSize+1;l++)this.patternRows[h][l]=0,this.patternCols[h][l]=0}for(let g=0;g<this.gridSize;g++){this.regions[g]=Array(this.gridSize);for(let d=0;d<this.gridSize;d++)this.regions[g][d]=-1}for(let u=0;u<this.gridSize+1;u++)this.cellsByRadius[u]=[];let a=Math.floor(this.gridSize/2);for(let S=0;S<this.gridSize;S++)for(let c=0;c<this.gridSize;c++)this.cellsByRadius[Math.abs(S-a)+Math.abs(c-a)].push([S,c]);for(let z=0;z<this.gridSize+1;z++){let R=Math.random()<this.rowProb?1:0;for(let w=R;w<this.gridSize;w+=2)this.patternRows[z][w]=1}for(let $=0;$<this.gridSize+1;$++){let _=Math.random()<this.colProb?1:0;for(let f=_;f<this.gridSize;f+=2)this.patternCols[f][$]=1}this.maximumSpeed?(this.doDrawBoundaries&&this.drawBoundaries(),this.doDrawRegions&&(this.identifyRegions(),this.drawRegions())):this.doDrawBoundaries?(this.currentRow=1,this.currentCol=1,this.drawBoundaryRowStep()):this.doDrawRegions&&(this.identifyRegions(),this.currentRegion=0,this.drawRegionsStep())}drawBoundaries(){for(let i=1;i<this.gridSize;i++)for(let t=0;t<this.gridSize;t++)this.patternRows[i][t]&&(this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.resolution/this.gridSize*t,this.resolution/this.gridSize*i),this.wilson.ctx.lineTo(this.resolution/this.gridSize*(t+1),this.resolution/this.gridSize*i),this.wilson.ctx.stroke());for(let s=0;s<this.gridSize;s++)for(let e=1;e<this.gridSize;e++)this.patternCols[s][e]&&(this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.resolution/this.gridSize*e,this.resolution/this.gridSize*s),this.wilson.ctx.lineTo(this.resolution/this.gridSize*e,this.resolution/this.gridSize*(s+1)),this.wilson.ctx.stroke())}drawBoundaryRowStep(){for(let i=0;i<this.gridSize;i++)this.patternRows[this.currentRow][i]&&(this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.resolution/this.gridSize*i,this.resolution/this.gridSize*this.currentRow),this.wilson.ctx.lineTo(this.resolution/this.gridSize*(i+1),this.resolution/this.gridSize*this.currentRow),this.wilson.ctx.stroke());this.currentRow++,this.currentRow<this.gridSize?this.animationPaused||window.requestAnimationFrame(this.drawBoundaryRowStep.bind(this)):this.animationPaused||window.requestAnimationFrame(this.drawBoundaryColStep.bind(this))}drawBoundaryColStep(){for(let i=0;i<this.gridSize;i++)this.patternCols[i][this.currentCol]&&(this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.resolution/this.gridSize*this.currentCol,this.resolution/this.gridSize*i),this.wilson.ctx.lineTo(this.resolution/this.gridSize*this.currentCol,this.resolution/this.gridSize*(i+1)),this.wilson.ctx.stroke());this.currentCol++,this.currentCol<this.gridSize?this.animationPaused||window.requestAnimationFrame(this.drawBoundaryColStep.bind(this)):this.doDrawRegions&&(this.identifyRegions(),this.currentRegion=0,setTimeout(this.drawRegionsStep.bind(this),1e3))}identifyRegions(){let i=0,t=0;for(;;){let s=[[i,t]];for(this.regions[i][t]=this.numRegions,this.regionsOrdered.push([[i,t]]);0!==s.length;){let e=s.length;for(let r=0;r<e;r++){let o=s[r][0],n=s[r][1];o>0&&-1===this.regions[o-1][n]&&!this.patternRows[o][n]&&(s.push([o-1,n]),this.regions[o-1][n]=this.numRegions,this.regionsOrdered[this.numRegions].push([o-1,n])),o<this.gridSize-1&&-1===this.regions[o+1][n]&&!this.patternRows[o+1][n]&&(s.push([o+1,n]),this.regions[o+1][n]=this.numRegions,this.regionsOrdered[this.numRegions].push([o+1,n])),n>0&&-1===this.regions[o][n-1]&&!this.patternCols[o][n]&&(s.push([o,n-1]),this.regions[o][n-1]=this.numRegions,this.regionsOrdered[this.numRegions].push([o,n-1])),n<this.gridSize-1&&-1===this.regions[o][n+1]&&!this.patternCols[o][n+1]&&(s.push([o,n+1]),this.regions[o][n+1]=this.numRegions,this.regionsOrdered[this.numRegions].push([o,n+1]))}s.splice(0,e)}this.regionSizes.push(this.regionsOrdered[this.numRegions].length);let h=!1;for(let l=0;l<=this.gridSize;l++){for(let g=0;g<this.cellsByRadius[l].length;g++){let d=this.cellsByRadius[l][g][0],u=this.cellsByRadius[l][g][1];if(-1===this.regions[d][u]){i=d,t=u,h=!0;break}}if(h)break}if(this.numRegions++,!h)break}this.regionSizes=[...new Set(this.regionSizes)],this.regionSizes.sort((i,t)=>t-i),this.numUniqueRegionSizes=this.regionSizes.length}drawRegions(){this.wilson.ctx.fillStyle="rgb(0, 0, 0)",this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution);for(let i=0;i<this.numRegions;i++){let t=this.regionsOrdered[i].length,s=i%(2*this.gridSize)/(2*this.gridSize),e=1===t?.5:Math.sqrt(this.regionSizes.indexOf(t)/(this.numUniqueRegionSizes-2)),r=this.wilson.utils.hsvToRgb(s,1,e);this.wilson.ctx.fillStyle=`rgb(${r[0]}, ${r[1]}, ${r[2]})`;for(let o=0;o<t;o++){let n=this.regionsOrdered[i][o][0],h=this.regionsOrdered[i][o][1];this.wilson.ctx.fillRect(this.resolution/this.gridSize*h+this.lineWidth/2,this.resolution/this.gridSize*n+this.lineWidth/2,this.resolution/this.gridSize-this.lineWidth,this.resolution/this.gridSize-this.lineWidth)}}}drawRegionsStep(){for(let i=0;i<Math.ceil(this.gridSize/50);i++){let t=this.regionsOrdered[this.currentRegion].length,s=this.currentRegion%(2*this.gridSize)/(2*this.gridSize),e=1===t?.5:Math.sqrt(this.regionSizes.indexOf(t)/(this.numUniqueRegionSizes-2)),r=this.wilson.utils.hsvToRgb(s,1,e);this.wilson.ctx.fillStyle="rgb(0, 0, 0)";for(let o=0;o<t;o++){let n=this.regionsOrdered[this.currentRegion][o][0],h=this.regionsOrdered[this.currentRegion][o][1];this.wilson.ctx.fillRect(this.resolution/this.gridSize*h,this.resolution/this.gridSize*n,this.resolution/this.gridSize,this.resolution/this.gridSize)}this.wilson.ctx.fillStyle=`rgb(${r[0]}, ${r[1]}, ${r[2]})`;for(let l=0;l<t;l++){let g=this.regionsOrdered[this.currentRegion][l][0],d=this.regionsOrdered[this.currentRegion][l][1];this.wilson.ctx.fillRect(this.resolution/this.gridSize*d+this.lineWidth/2,this.resolution/this.gridSize*g+this.lineWidth/2,this.resolution/this.gridSize-this.lineWidth,this.resolution/this.gridSize-this.lineWidth)}if(this.currentRegion++,this.currentRegion===this.numRegions)return}this.currentRegion<this.numRegions&&!this.animationPaused&&window.requestAnimationFrame(this.drawRegionsStep.bind(this))}}
class HitomezashiPattern extends Applet{doDrawBoundaries=!0;doDrawRegions=!0;maximumSpeed=!1;resolution=null;gridSize=null;rowProb=null;colProb=null;patternRows=[];patternCols=[];regions=[];regionsOrdered=[];regionSizes=[];numRegions=0;numUniqueRegionSizes=0;cellsByRadius=[];currentRow=1;currentCol=1;currentRegion=0;lineWidth=null;constructor(a){super(a);this.wilson=new Wilson(a,{renderer:"cpu",canvasWidth:1E3,canvasHeight:1E3,useFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",
exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"})}run(a=2E3,b=50,c=.5,f=.5,g=!0,d=!0,e=!1){this.resolution=a;this.gridSize=b;this.rowProb=c;this.colProb=f;this.doDrawBoundaries=g;this.doDrawRegions=d;this.maximumSpeed=e;this.wilson.changeCanvasSize(this.resolution,this.resolution);this.wilson.ctx.fillStyle="rgb(0, 0, 0)";this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution);this.wilson.ctx.strokeStyle="rgb(127, 127, 127)";this.lineWidth=this.resolution/this.gridSize/
20;this.wilson.ctx.lineWidth=this.lineWidth;this.patternRows=Array(this.gridSize+1);this.patternCols=Array(this.gridSize+1);this.regions=Array(this.gridSize);this.regionsOrdered=[];this.regionSizes=[];this.numRegions=0;this.cellsByRadius=Array(this.gridSize+1);for(a=0;a<this.gridSize+1;a++)for(this.patternRows[a]=Array(this.gridSize+1),this.patternCols[a]=Array(this.gridSize+1),b=0;b<this.gridSize+1;b++)this.patternRows[a][b]=0,this.patternCols[a][b]=0;for(a=0;a<this.gridSize;a++)for(this.regions[a]=
Array(this.gridSize),b=0;b<this.gridSize;b++)this.regions[a][b]=-1;for(a=0;a<this.gridSize+1;a++)this.cellsByRadius[a]=[];a=Math.floor(this.gridSize/2);for(b=0;b<this.gridSize;b++)for(c=0;c<this.gridSize;c++)this.cellsByRadius[Math.abs(b-a)+Math.abs(c-a)].push([b,c]);for(a=0;a<this.gridSize+1;a++)for(b=Math.random()<this.rowProb?1:0;b<this.gridSize;b+=2)this.patternRows[a][b]=1;for(a=0;a<this.gridSize+1;a++)for(b=Math.random()<this.colProb?1:0;b<this.gridSize;b+=2)this.patternCols[b][a]=1;this.maximumSpeed?
(this.doDrawBoundaries&&this.drawBoundaries(),this.doDrawRegions&&(this.identifyRegions(),this.drawRegions())):this.doDrawBoundaries?(this.currentCol=this.currentRow=1,this.drawBoundaryRowStep()):this.doDrawRegions&&(this.identifyRegions(),this.currentRegion=0,this.drawRegionsStep())}drawBoundaries(){for(var a=1;a<this.gridSize;a++)for(var b=0;b<this.gridSize;b++)this.patternRows[a][b]&&(this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.resolution/this.gridSize*b,this.resolution/this.gridSize*
a),this.wilson.ctx.lineTo(this.resolution/this.gridSize*(b+1),this.resolution/this.gridSize*a),this.wilson.ctx.stroke());for(a=0;a<this.gridSize;a++)for(b=1;b<this.gridSize;b++)this.patternCols[a][b]&&(this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.resolution/this.gridSize*b,this.resolution/this.gridSize*a),this.wilson.ctx.lineTo(this.resolution/this.gridSize*b,this.resolution/this.gridSize*(a+1)),this.wilson.ctx.stroke())}drawBoundaryRowStep(){for(let a=0;a<this.gridSize;a++)this.patternRows[this.currentRow][a]&&
(this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.resolution/this.gridSize*a,this.resolution/this.gridSize*this.currentRow),this.wilson.ctx.lineTo(this.resolution/this.gridSize*(a+1),this.resolution/this.gridSize*this.currentRow),this.wilson.ctx.stroke());this.currentRow++;this.currentRow<this.gridSize?this.animationPaused||window.requestAnimationFrame(this.drawBoundaryRowStep.bind(this)):this.animationPaused||window.requestAnimationFrame(this.drawBoundaryColStep.bind(this))}drawBoundaryColStep(){for(let a=
0;a<this.gridSize;a++)this.patternCols[a][this.currentCol]&&(this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.resolution/this.gridSize*this.currentCol,this.resolution/this.gridSize*a),this.wilson.ctx.lineTo(this.resolution/this.gridSize*this.currentCol,this.resolution/this.gridSize*(a+1)),this.wilson.ctx.stroke());this.currentCol++;this.currentCol<this.gridSize?this.animationPaused||window.requestAnimationFrame(this.drawBoundaryColStep.bind(this)):this.doDrawRegions&&(this.identifyRegions(),
this.currentRegion=0,setTimeout(this.drawRegionsStep.bind(this),1E3))}identifyRegions(){let a=0,b=0;for(;;){var c=[[a,b]];this.regions[a][b]=this.numRegions;for(this.regionsOrdered.push([[a,b]]);0!==c.length;){var f=c.length;for(var g=0;g<f;g++){var d=c[g][0],e=c[g][1];0<d&&-1===this.regions[d-1][e]&&!this.patternRows[d][e]&&(c.push([d-1,e]),this.regions[d-1][e]=this.numRegions,this.regionsOrdered[this.numRegions].push([d-1,e]));d<this.gridSize-1&&-1===this.regions[d+1][e]&&!this.patternRows[d+1][e]&&
(c.push([d+1,e]),this.regions[d+1][e]=this.numRegions,this.regionsOrdered[this.numRegions].push([d+1,e]));0<e&&-1===this.regions[d][e-1]&&!this.patternCols[d][e]&&(c.push([d,e-1]),this.regions[d][e-1]=this.numRegions,this.regionsOrdered[this.numRegions].push([d,e-1]));e<this.gridSize-1&&-1===this.regions[d][e+1]&&!this.patternCols[d][e+1]&&(c.push([d,e+1]),this.regions[d][e+1]=this.numRegions,this.regionsOrdered[this.numRegions].push([d,e+1]))}c.splice(0,f)}this.regionSizes.push(this.regionsOrdered[this.numRegions].length);
c=!1;for(f=0;f<=this.gridSize;f++){for(g=0;g<this.cellsByRadius[f].length;g++)if(d=this.cellsByRadius[f][g][0],e=this.cellsByRadius[f][g][1],-1===this.regions[d][e]){a=d;b=e;c=!0;break}if(c)break}this.numRegions++;if(!c)break}this.regionSizes=[...(new Set(this.regionSizes))];this.regionSizes.sort((h,k)=>k-h);this.numUniqueRegionSizes=this.regionSizes.length}drawRegions(){this.wilson.ctx.fillStyle="rgb(0, 0, 0)";this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution);for(let b=0;b<this.numRegions;b++){const c=
this.regionsOrdered[b].length;var a=b%(2*this.gridSize)/(2*this.gridSize);const f=1===c?.5:Math.sqrt(this.regionSizes.indexOf(c)/(this.numUniqueRegionSizes-2));a=this.wilson.utils.hsvToRgb(a,1,f);this.wilson.ctx.fillStyle=`rgb(${a[0]}, ${a[1]}, ${a[2]})`;for(a=0;a<c;a++)this.wilson.ctx.fillRect(this.resolution/this.gridSize*this.regionsOrdered[b][a][1]+this.lineWidth/2,this.resolution/this.gridSize*this.regionsOrdered[b][a][0]+this.lineWidth/2,this.resolution/this.gridSize-this.lineWidth,this.resolution/
this.gridSize-this.lineWidth)}}drawRegionsStep(){for(let c=0;c<Math.ceil(this.gridSize/50);c++){const f=this.regionsOrdered[this.currentRegion].length;var a=this.currentRegion%(2*this.gridSize)/(2*this.gridSize),b=1===f?.5:Math.sqrt(this.regionSizes.indexOf(f)/(this.numUniqueRegionSizes-2));a=this.wilson.utils.hsvToRgb(a,1,b);this.wilson.ctx.fillStyle="rgb(0, 0, 0)";for(b=0;b<f;b++)this.wilson.ctx.fillRect(this.resolution/this.gridSize*this.regionsOrdered[this.currentRegion][b][1],this.resolution/
this.gridSize*this.regionsOrdered[this.currentRegion][b][0],this.resolution/this.gridSize,this.resolution/this.gridSize);this.wilson.ctx.fillStyle=`rgb(${a[0]}, ${a[1]}, ${a[2]})`;for(a=0;a<f;a++)this.wilson.ctx.fillRect(this.resolution/this.gridSize*this.regionsOrdered[this.currentRegion][a][1]+this.lineWidth/2,this.resolution/this.gridSize*this.regionsOrdered[this.currentRegion][a][0]+this.lineWidth/2,this.resolution/this.gridSize-this.lineWidth,this.resolution/this.gridSize-this.lineWidth);this.currentRegion++;
if(this.currentRegion===this.numRegions)return}this.currentRegion<this.numRegions&&(this.animationPaused||window.requestAnimationFrame(this.drawRegionsStep.bind(this)))}};

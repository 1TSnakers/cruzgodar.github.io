import anime from"/scripts/anime.min.js";import{tempShader}from"/scripts/applets/applet.min.js";import{magnitude}from"/scripts/applets/raymarchApplet.min.js";import{ThreeApplet}from"/scripts/applets/threeApplet.min.js";import{STLExporter}from"/scripts/stlExporter.min.js";import*as THREE from"/scripts/three.js";import{WilsonGPU}from"/scripts/wilson.min.js";const fiberThicknessScaleFactor=1;function hsvToRgb(h,s,v){function e(n){var e=(n+6*h)%6;return v-v*s*Math.max(0,Math.min(e,Math.min(4-e,1)))}return[255*e(5),255*e(3),255*e(1)]}class Fiber extends THREE.Curve{p;v;center;s3P;s3V;compression;constructor({p,v,center,s3P,s3V,compression}){super(),this.p=p,this.v=v,this.center=center,this.s3P=s3P,this.s3V=s3V,this.compression=compression}getPoint(t,optionalTarget=new THREE.Vector3){var e=Math.cos(2*Math.PI*t),s=Math.sin(2*Math.PI*t),i=e*this.p[0]+s*this.v[0]+this.center[0],n=e*this.p[1]+s*this.v[1]+this.center[1],r=e*this.p[2]+s*this.v[2]+this.center[2],a=e*this.s3P[3]+s*this.s3V[3],a=Math.acos(a)/(Math.PI*Math.sqrt(1-a*a)),o=a*(e*this.s3P[0]+s*this.s3V[0]),h=a*(e*this.s3P[1]+s*this.s3V[1]),a=a*(e*this.s3P[2]+s*this.s3V[2]),e=(1-this.compression)*i+this.compression*o,s=(1-this.compression)*n+this.compression*h,i=(1-this.compression)*r+this.compression*a;return optionalTarget.set(i,s,e)}}class HopfFibration extends ThreeApplet{theta=Math.PI/2;phi=Math.PI/2;worldSize=1.5;movingSpeed=.01;imageSize=1e3;compression=0;numLatitudes=3;numLongitudesPerLatitude=50;numLongitudesShown=37.5;fibers=[];needDownload=!1;constructor({canvas}){super({canvas:canvas,cameraPos:[0,-4,0]});var e={shader:tempShader,canvasWidth:this.imageSize,worldWidth:this.worldSize,worldHeight:this.worldSize,worldCenterX:this.theta,worldCenterY:this.phi,minWorldY:.001-this.worldSize/2,maxWorldY:Math.PI-.001+this.worldSize/2,onResizeCanvas:this.onResizeCanvas.bind(this),interactionOptions:{useForPanAndZoom:!0,disallowZooming:!0,onPanAndZoom:()=>this.needNewFrame=!0},fullscreenOptions:{fillScreen:!0,onSwitch:this.onSwitchFullscreen.bind(this),useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}},e=(this.wilson=new WilsonGPU(canvas,e),this.initThree(),new THREE.PointLight(16777215,1,1e4)),e=(e.position.set(-750,-1e3,500),this.scene.add(e),new THREE.PointLight(16777215,.5,1e4));e.position.set(750,1e3,500),this.scene.add(e),this.toggleCompression(!0),this.resume()}createFiber(theta,phi){var e=[Math.sin(phi)*Math.cos(theta),Math.sin(phi)*Math.sin(theta),Math.cos(phi)],t=1/Math.sqrt(2*(e[2]+1)),s=[0,t*e[0],t*e[1],t*(1+e[2])],i=[s[0]/(1-s[3]),s[1]/(1-s[3]),s[2]/(1-s[3])],n=[-s[0]/(1+s[3]),-s[1]/(1+s[3]),-s[2]/(1+s[3])],n=[(i[0]+n[0])/2,(i[1]+n[1])/2,(i[2]+n[2])/2],r=Math.sqrt((i[0]-n[0])**2+(i[1]-n[1])**2+(i[2]-n[2])**2),t=[t*(1+e[2]),-t*e[1],t*e[0],0],e=[t[0]/(1-t[3]),t[1]/(1-t[3]),t[2]/(1-t[3])],i=[i[0]-n[0],i[1]-n[1],i[2]-n[2]],e=[e[0]-n[0],e[1]-n[1],e[2]-n[2]],a=(e[0]*i[0]+e[1]*i[1]+e[2]*i[2])/(i[0]*i[0]+i[1]*i[1]+i[2]*i[2]),e=[e[0]-a*i[0],e[1]-a*i[1],e[2]-a*i[2]],a=Math.sqrt(e[0]**2+e[1]**2+e[2]**2),r=[r/a*e[0],r/a*e[1],r/a*e[2]],a=new Fiber({p:i,v:r,center:n,s3P:s,s3V:t,compression:this.compression}),e=fiberThicknessScaleFactor*(.05*(1-this.compression)+this.compression*(.115/Math.sqrt(this.numLatitudes*this.numLongitudesPerLatitude))),i=.2+.7*Math.abs((theta+Math.PI/2)%Math.PI-Math.PI/2)/(Math.PI/2),r=hsvToRgb(phi/Math.PI,i,1),n=new THREE.TubeGeometry(a,128,e,64,!1),s=new THREE.MeshStandardMaterial({color:new THREE.Color(r[0]/255,r[1]/255,r[2]/255)}),t=(s.transparent=!0,new THREE.Mesh(n,s));return this.scene.add(t),t}createLongitudinalConnector(radius,startAngle,endAngle,addCaps=!1){var e=fiberThicknessScaleFactor*(.05*(1-this.compression)+this.compression*(.115/Math.sqrt(this.numLatitudes*this.numLongitudesPerLatitude))),t=[];for(let a=0;a<=64;a++){var s=startAngle+a/64*(endAngle-startAngle);t.push(new THREE.Vector3(Math.cos(s)*radius,Math.sin(s)*radius,0))}var i=new THREE.CatmullRomCurve3(t,!1),i=new THREE.TubeGeometry(i,64,e,64,!1),n=new THREE.MeshStandardMaterial({color:255}),i=new THREE.Mesh(i,n),n=new THREE.MeshStandardMaterial({color:255}),e=new THREE.CylinderGeometry(e,e,.1,32),r=new THREE.Mesh(e,n),e=(r.position.copy(t[0]),r.lookAt(t[1]),new THREE.Mesh(e,n));e.position.copy(t[t.length-1]),e.lookAt(t[t.length-2]),addCaps&&(this.scene.add(r),this.scene.add(e)),this.scene.add(i)}createDepthConnector(startDistance,endDistance,angle){var e=new THREE.Vector3(startDistance*Math.sin(angle),startDistance*Math.cos(angle),0),t=new THREE.Vector3(endDistance*Math.sin(angle),endDistance*Math.cos(angle),0),e=new THREE.LineCurve3(e,t),t=fiberThicknessScaleFactor*(.05*(1-this.compression)+this.compression*(.115/Math.sqrt(this.numLatitudes*this.numLongitudesPerLatitude))),e=new THREE.TubeGeometry(e,64,t,64,!1),t=new THREE.MeshStandardMaterial({color:16711680}),e=new THREE.Mesh(e,t);this.scene.add(e)}exportSTL(){var e=(new STLExporter).parse(this.scene),e=new Blob([e],{type:"application/octet-stream"}),t=document.createElement("a");t.href=URL.createObjectURL(e),t.download="scene.stl",document.body.appendChild(t),t.click(),document.body.removeChild(t)}createAllFibers(){for(const e of this.fibers)e.geometry.dispose(),e.material.dispose(),this.scene.remove(e);this.fibers=[];var t=Math.floor((this.numLongitudesPerLatitude-this.numLongitudesShown)/2);for(let n=0;n<this.numLatitudes;n++){var s,i=(n+1)/(this.numLatitudes+1)*Math.PI;for(let e=0;e<this.numLongitudesPerLatitude;e++)e<t||e>=this.numLongitudesPerLatitude-t||(s=(e+.5)/this.numLongitudesPerLatitude*2*Math.PI,s=this.createFiber(s,i),this.fibers.push(s))}this.needNewFrame=!0}async toggleCompression(instant){const e={t:0},t=this.compression,s=0===this.compression?1:0;var i=Math.sqrt(this.cameraPos[0]**2+this.cameraPos[1]**2+this.cameraPos[2]**2),i=0===this.compression?1.32/i:4/i;const n=[...this.cameraPos],r=[this.cameraPos[0]*i,this.cameraPos[1]*i,this.cameraPos[2]*i];await anime({targets:e,t:1,duration:instant?0:750,easing:"easeOutQuad",update:()=>{this.compression=(1-e.t)*t+e.t*s,this.cameraPos=[(1-e.t)*n[0]+e.t*r[0],(1-e.t)*n[1]+e.t*r[1],(1-e.t)*n[2]+e.t*r[2]],this.distanceFromOrigin=magnitude(this.cameraPos),this.createAllFibers(),this.needNewFrame=!0},complete:()=>{this.compression=s,this.cameraPos=r,this.distanceFromOrigin=magnitude(this.cameraPos),this.createAllFibers(),this.needNewFrame=!0}}).finished}prepareFrame(timeElapsed){this.moveUpdate(timeElapsed)}drawFrame(){this.theta=this.lockedOnOrigin?this.wilson.worldCenterX:2*Math.PI-this.wilson.worldCenterX,this.phi=this.lockedOnOrigin?this.wilson.worldCenterY:Math.PI-this.wilson.worldCenterY,this.renderer.render(this.scene,this.camera),this.needDownload&&(this.needDownload=!1,this.wilson.canvas.toBlob(blob=>{var e=document.createElement("a");e.download="the-hopf-fibration.png",e.href=window.URL.createObjectURL(blob),e.click(),e.remove()}))}onSwitchFullscreen(isFullscreen){document.querySelector(".wilson-help-button").style.opacity=isFullscreen?0:1}onResizeCanvas(){this.renderer.setSize(this.wilson.canvasWidth,this.wilson.canvasHeight,!1),this.camera.aspect=this.wilson.canvasWidth/this.wilson.canvasHeight,this.camera.updateProjectionMatrix(),this.wilson.resizeWorld({minWorldY:.001-this.wilson.worldHeight/2,maxWorldY:Math.PI-.001+this.wilson.worldHeight/2}),this.needNewFrame=!0}}export{HopfFibration};
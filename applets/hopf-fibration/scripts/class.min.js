import anime from"/scripts/anime.min.js";import{ThreeApplet}from"/scripts/applets/threeApplet.min.js";import{aspectRatio}from"/scripts/src/layout.min.js";import{addTemporaryListener}from"/scripts/src/main.min.js";import*as THREE from"/scripts/three.js";import{Wilson}from"/scripts/wilson.min.js";function hsvToRgb(h,s,v){function t(n){var t=(n+6*h)%6;return v-v*s*Math.max(0,Math.min(t,Math.min(4-t,1)))}return[255*t(5),255*t(3),255*t(1)]}class Fiber extends THREE.Curve{p;v;center;s3P;s3V;compression;constructor({p,v,center,s3P,s3V,compression}){super(),this.p=p,this.v=v,this.center=center,this.s3P=s3P,this.s3V=s3V,this.compression=compression}getPoint(t,optionalTarget=new THREE.Vector3){var s=Math.cos(2*Math.PI*t),i=Math.sin(2*Math.PI*t),e=s*this.p[0]+i*this.v[0]+this.center[0],a=s*this.p[1]+i*this.v[1]+this.center[1],h=s*this.p[2]+i*this.v[2]+this.center[2],r=s*this.s3P[3]+i*this.s3V[3],r=Math.acos(r)/(Math.PI*Math.sqrt(1-r*r)),o=r*(s*this.s3P[0]+i*this.s3V[0]),n=r*(s*this.s3P[1]+i*this.s3V[1]),r=r*(s*this.s3P[2]+i*this.s3V[2]),s=(1-this.compression)*e+this.compression*o,i=(1-this.compression)*a+this.compression*n,e=(1-this.compression)*h+this.compression*r;return optionalTarget.set(e,i,s)}}class HopfFibration extends ThreeApplet{cameraPos=[0,-4,0];theta=Math.PI/2;phi=Math.PI/2;movingSpeed=.01;imageSize=1e3;compression=0;numLatitudes=3;numLongitudesPerLatitude=20;fibers=[];needDownload=!1;constructor({canvas}){super(canvas);var t={renderer:"gpu",canvasWidth:this.imageSize,canvasHeight:this.imageSize,worldCenterX:-this.theta,worldCenterY:-this.phi,useFullscreen:!0,trueFullscreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png",switchFullscreenCallback:this.changeResolution.bind(this),mousedownCallback:this.onGrabCanvas.bind(this),touchstartCallback:this.onGrabCanvas.bind(this),mousedragCallback:this.onDragCanvas.bind(this),touchmoveCallback:this.onDragCanvas.bind(this),mouseupCallback:this.onReleaseCanvas.bind(this),touchendCallback:this.onReleaseCanvas.bind(this)};this.wilson=new Wilson(canvas,t),this.initThree();addTemporaryListener({object:window,event:"resize",callback:()=>this.changeResolution()}),this.createAllFibers(),this.resume()}createFiber(theta,phi){var t=[Math.sin(phi)*Math.cos(theta),Math.sin(phi)*Math.sin(theta),Math.cos(phi)],s=1/Math.sqrt(2*(t[2]+1)),i=[0,s*t[0],s*t[1],s*(1+t[2])],e=[i[0]/(1-i[3]),i[1]/(1-i[3]),i[2]/(1-i[3])],a=[-i[0]/(1+i[3]),-i[1]/(1+i[3]),-i[2]/(1+i[3])],a=[(e[0]+a[0])/2,(e[1]+a[1])/2,(e[2]+a[2])/2],h=Math.sqrt((e[0]-a[0])**2+(e[1]-a[1])**2+(e[2]-a[2])**2),s=[s*(1+t[2]),-s*t[1],s*t[0],0],t=[s[0]/(1-s[3]),s[1]/(1-s[3]),s[2]/(1-s[3])],e=[e[0]-a[0],e[1]-a[1],e[2]-a[2]],t=[t[0]-a[0],t[1]-a[1],t[2]-a[2]],r=(t[0]*e[0]+t[1]*e[1]+t[2]*e[2])/(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]),t=[t[0]-r*e[0],t[1]-r*e[1],t[2]-r*e[2]],r=Math.sqrt(t[0]**2+t[1]**2+t[2]**2),h=[h/r*t[0],h/r*t[1],h/r*t[2]],r=new Fiber({p:e,v:h,center:a,s3P:i,s3V:s,compression:this.compression}),t=.05*(1-this.compression)+this.compression*(.115/Math.sqrt(this.numLatitudes*this.numLongitudesPerLatitude)),e=.2+.7*Math.abs((theta+Math.PI/2)%Math.PI-Math.PI/2)/(Math.PI/2),h=hsvToRgb(phi/Math.PI,e,1),a=new THREE.TubeGeometry(r,100,t,20,!1),i=new THREE.MeshStandardMaterial({color:new THREE.Color(h[0]/255,h[1]/255,h[2]/255)}),s=new THREE.Mesh(a,i);return this.scene.add(s),s}createAllFibers(){this.fibers.forEach(fiber=>{fiber.geometry.dispose(),fiber.material.dispose(),this.scene.remove(fiber)}),this.fibers=[];for(let e=0;e<this.numLatitudes;e++){var s=(e+1)/(this.numLatitudes+1)*Math.PI;for(let t=0;t<this.numLongitudesPerLatitude;t++){var i=(t+.5)/this.numLongitudesPerLatitude*2*Math.PI,i=this.createFiber(i,s);this.fibers.push(i)}}}async toggleCompression(){const t={t:0},s=this.compression,i=0===this.compression?1:0;var e=Math.sqrt(this.cameraPos[0]**2+this.cameraPos[1]**2+this.cameraPos[2]**2),e=0===this.compression?1.32/e:4/e;const a=[...this.cameraPos],h=[this.cameraPos[0]*e,this.cameraPos[1]*e,this.cameraPos[2]*e];await anime({targets:t,t:1,duration:750,easing:"easeOutQuad",update:()=>{this.compression=(1-t.t)*s+t.t*i,this.cameraPos=[(1-t.t)*a[0]+t.t*h[0],(1-t.t)*a[1]+t.t*h[1],(1-t.t)*a[2]+t.t*h[2]],this.createAllFibers(),this.needNewFrame=!0}}).finished}prepareFrame(timeElapsed){this.pan.update(timeElapsed),this.zoom.update(timeElapsed),this.moveUpdate(timeElapsed)}drawFrame(){this.wilson.worldCenterY=Math.min(Math.max(this.wilson.worldCenterY,.01-Math.PI),-.01),this.theta=-this.wilson.worldCenterX,this.phi=-this.wilson.worldCenterY,this.renderer.render(this.scene,this.camera),this.needDownload&&(this.needDownload=!1,this.wilson.canvas.toBlob(blob=>{var t=document.createElement("a");t.download="the-hopf-fibration.png",t.href=window.URL.createObjectURL(blob),t.click(),t.remove()}))}changeResolution(resolution=this.imageSize){this.imageSize=Math.max(100,resolution),this.wilson.fullscreen.currentlyFullscreen?1<=aspectRatio?(this.imageWidth=this.imageSize,this.imageHeight=Math.floor(this.imageSize/aspectRatio)):(this.imageWidth=Math.floor(this.imageSize*aspectRatio),this.imageHeight=this.imageSize):(this.imageWidth=this.imageSize,this.imageHeight=this.imageSize),this.wilson.changeCanvasSize(this.imageWidth,this.imageHeight),this.imageWidth>=this.imageHeight?(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,this.imageWidth/this.imageHeight),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,1)):(this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioX,1),this.wilson.gl.uniform1f(this.wilson.uniforms.aspectRatioY,this.imageWidth/this.imageHeight)),this.renderer.setSize(this.imageWidth,this.imageHeight,!1),this.camera.aspect=this.imageWidth/this.imageHeight,this.camera.updateProjectionMatrix(),this.needNewFrame=!0}}export{HopfFibration};
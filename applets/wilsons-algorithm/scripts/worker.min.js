onmessage=async function(e){grid_size=e.data[0],await draw_wilson_graph(grid_size),color_graph(grid_size)};let grid_size=null,edges_in_tree=[],vertices_not_in_tree=[],new_vertices=[],current_row=null,current_column=null;function draw_wilson_graph(e){return new Promise(async function(r,t){edges_in_tree=[],vertices_not_in_tree=[];for(let r=0;r<e;r++)for(let t=0;t<e;t++)vertices_not_in_tree[e*r+t]=[r,t];let n=Math.floor(Math.random()*vertices_not_in_tree.length);for(vertices_not_in_tree.splice(n,1);vertices_not_in_tree.length>0;)await wilson_step(e);r()})}function wilson_step(e){return new Promise(async function(e,r){new_vertices=[];let t=Math.floor(Math.random()*vertices_not_in_tree.length);new_vertices.push(vertices_not_in_tree[t]),current_row=new_vertices[0][0],current_column=new_vertices[0][1],random_walk();for(let e=0;e<new_vertices.length-1;e++)await draw_line(new_vertices[e][0],new_vertices[e][1],new_vertices[e+1][0],new_vertices[e+1][1],"rgb(255, 255, 255)",8);for(let e=0;e<new_vertices.length-1;e++){let r=vertex_in_array(new_vertices[e],vertices_not_in_tree);vertices_not_in_tree.splice(r,1),edges_in_tree.push([new_vertices[e],new_vertices[e+1]])}e()})}function random_walk(){for(;-1!=vertex_in_array([current_row,current_column],vertices_not_in_tree);){let e=[],r=(e=0==current_row&&0==current_column?[1,2]:current_row==grid_size-1&&0==current_column?[0,1]:0==current_row&&current_column==grid_size-1?[2,3]:current_row==grid_size-1&&current_column==grid_size-1?[0,3]:0==current_row?[1,2,3]:current_row==grid_size-1?[0,1,3]:0==current_column?[0,1,2]:current_column==grid_size-1?[0,2,3]:[0,1,2,3])[Math.floor(Math.random()*e.length)];0==r?current_row--:1==r?current_column++:2==r?current_row++:current_column--;let t=vertex_in_array([current_row,current_column],new_vertices);-1!=t?(current_row=new_vertices[t][0],current_column=new_vertices[t][1],new_vertices=new_vertices.slice(0,t+1)):new_vertices.push([current_row,current_column])}}function color_graph(e){return new Promise(async function(r,t){let n=[];for(let r=0;r<e;r++){n[r]=[];for(let t=0;t<e;t++)n[r][t]=[]}for(let e=0;e<edges_in_tree.length;e++){let r=edges_in_tree[e][0][0],t=edges_in_tree[e][0][1],_=edges_in_tree[e][1][0],i=edges_in_tree[e][1][1];r==_?(n[r][Math.min(t,i)].includes(1)||n[r][Math.min(t,i)].push(1),n[_][Math.max(t,i)].includes(3)||n[_][Math.max(t,i)].push(3)):(n[Math.min(r,_)][t].includes(2)||n[Math.min(r,_)][t].push(2),n[Math.max(r,_)][t].includes(0)||n[Math.max(r,_)][i].push(0))}let _=[],i=[[Math.floor(e/2),Math.floor(e/2),0]],c=[];for(let r=0;r<e;r++){c[r]=[];for(let t=0;t<e;t++)c[r][t]=-1}for(;i.length>0;){let e=i.length;for(let r=0;r<e;r++){let e=i[r][0],t=i[r][1],s=i[r][2];c[e][t]=s,n[e][t].includes(0)&&-1==c[e-1][t]&&(i.push([e-1,t,s+1]),_.push([[e,t],[e-1,t],s])),n[e][t].includes(1)&&-1==c[e][t+1]&&(i.push([e,t+1,s+1]),_.push([[e,t],[e,t+1],s])),n[e][t].includes(2)&&-1==c[e+1][t]&&(i.push([e+1,t,s+1]),_.push([[e,t],[e+1,t],s])),n[e][t].includes(3)&&-1==c[e][t-1]&&(i.push([e,t-1,s+1]),_.push([[e,t],[e,t-1],s]))}i.splice(0,e)}_.sort((e,r)=>e[2]-r[2]);let s=7*_[_.length-1][2]/6,o=[0],l=0;for(let e=0;e<_.length;e++)_[e][2]>l&&(o.push(e),l++);o.push(_.length);for(let e=0;e<o.length;e++){for(j=o[e];j<o[e+1]-1;j++){let e=HSVtoRGB(_[j][2]/s,1,1);draw_line(_[j][0][0],_[j][0][1],_[j][1][0],_[j][1][1],`rgb(${e[0]}, ${e[1]}, ${e[2]})`,0)}let r=HSVtoRGB(_[j][2]/s,1,1);await draw_line(_[j][0][0],_[j][0][1],_[j][1][0],_[j][1][1],`rgb(${r[0]}, ${r[1]}, ${r[2]})`,24)}r()})}function draw_line(e,r,t,n,_,i){return new Promise(function(c,s){if(r==n){let n=r,i=Math.min(e,t);postMessage([2*n+1,2*i+1,1,3,_])}else{let t=Math.min(r,n);postMessage([2*t+1,2*e+1,3,1,_])}setTimeout(c,i)})}function vertex_in_array(e,r){for(let t=0;t<r.length;t++)if(r[t][0]==e[0]&&r[t][1]==e[1])return t;return-1}function HSVtoRGB(e,r,t){let n,_,i,c,s,o,l,u;switch(o=t*(1-r),l=t*(1-(s=6*e-(c=Math.floor(6*e)))*r),u=t*(1-(1-s)*r),c%6){case 0:n=t,_=u,i=o;break;case 1:n=l,_=t,i=o;break;case 2:n=o,_=t,i=u;break;case 3:n=o,_=l,i=t;break;case 4:n=u,_=o,i=t;break;case 5:n=t,_=o,i=l}return[Math.round(255*n),Math.round(255*_),Math.round(255*i)]}
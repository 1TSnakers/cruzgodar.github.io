onmessage=function(e){draw_wilson_graph(grid_size=e.data[0])};let grid_size=null,edges_in_tree=[],vertices_not_in_tree=[],new_vertices=[],current_row=null,current_column=null;async function draw_wilson_graph(e){edges_in_tree=[],vertices_not_in_tree=[];for(let r=0;r<e;r++)for(let n=0;n<e;n++)vertices_not_in_tree[e*r+n]=[r,n];let r=Math.floor(Math.random()*vertices_not_in_tree.length);for(vertices_not_in_tree.splice(r,1);vertices_not_in_tree.length>0;)await wilson_step(e);postMessage(["done"])}function wilson_step(e){return new Promise(async function(e,r){new_vertices=[];let n=Math.floor(Math.random()*vertices_not_in_tree.length);new_vertices.push(vertices_not_in_tree[n]),current_row=new_vertices[0][0],current_column=new_vertices[0][1],random_walk();for(let e=0;e<new_vertices.length-1;e++)await draw_line(new_vertices[e][1],new_vertices[e][0],new_vertices[e+1][1],new_vertices[e+1][0],8);for(let e=0;e<new_vertices.length-1;e++){let r=vertex_in_array(new_vertices[e],vertices_not_in_tree);vertices_not_in_tree.splice(r,1),edges_in_tree.push([new_vertices[e],new_vertices[e+1]])}e()})}function random_walk(){for(;-1!=vertex_in_array([current_row,current_column],vertices_not_in_tree);){let e=[],r=(e=0==current_row&&0==current_column?[1,2]:current_row==grid_size-1&&0==current_column?[0,1]:0==current_row&&current_column==grid_size-1?[2,3]:current_row==grid_size-1&&current_column==grid_size-1?[0,3]:0==current_row?[1,2,3]:current_row==grid_size-1?[0,1,3]:0==current_column?[0,1,2]:current_column==grid_size-1?[0,2,3]:[0,1,2,3])[Math.floor(Math.random()*e.length)];0==r?current_row--:1==r?current_column++:2==r?current_row++:current_column--;let n=vertex_in_array([current_row,current_column],new_vertices);-1!=n?(current_row=new_vertices[n][0],current_column=new_vertices[n][1],new_vertices=new_vertices.slice(0,n+1)):new_vertices.push([current_row,current_column])}}function draw_line(e,r,n,t,_){return new Promise(function(i,c){if(e==n){let n=e,_=Math.min(r,t);postMessage([2*n+1,2*_+1,1,3])}else{let t=Math.min(e,n);postMessage([2*t+1,2*r+1,3,1])}setTimeout(i,_)})}function vertex_in_array(e,r){for(let n=0;n<r.length;n++)if(r[n][0]==e[0]&&r[n][1]==e[1])return n;return-1}